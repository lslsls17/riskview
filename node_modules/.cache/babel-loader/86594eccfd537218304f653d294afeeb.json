{"ast":null,"code":"import { info } from \"../data/info\";\nimport { modelPortfolio } from \"../data/modelPortfolio\";\nimport { allocation } from \"../data/allocation\";\nimport { performance } from \"../data/performance\";\nimport { positions } from \"../data/positions\";\n\nconst yahooStockPrices = require(\"yahoo-stock-prices\");\n\nexport async function spyResponse() {\n  return await yahooStockPrices.getCurrentData(\"SPY\");\n}\n\nfunction getRandomDelay() {\n  // return 0;\n  return 500 + Math.random() * 2000; // return 9999999999;\n}\n\nexport function getModelPortfolio() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(modelPortfolio);\n    }, getRandomDelay());\n  });\n}\nexport function getFundInfo() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(info);\n    }, getRandomDelay());\n  });\n}\nexport function getFundAllocation() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(allocation);\n    }, getRandomDelay());\n  });\n}\nexport function getPerformance() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(performance);\n    }, getRandomDelay());\n  });\n}\nexport function getPositions() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(positions);\n    }, getRandomDelay());\n  });\n}","map":{"version":3,"sources":["C:/Users/lswht/OneDrive/material/GitHub/riskview/src/services/dataService.ts"],"names":["info","modelPortfolio","allocation","performance","positions","yahooStockPrices","require","spyResponse","getCurrentData","getRandomDelay","Math","random","getModelPortfolio","Promise","resolve","setTimeout","getFundInfo","getFundAllocation","getPerformance","getPositions"],"mappings":"AAAA,SAASA,IAAT,QAAqB,cAArB;AACA,SAASC,cAAT,QAA+B,wBAA/B;AAEA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,SAAT,QAA0B,mBAA1B;;AAEA,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAAhC;;AAEA,OAAO,eAAeC,WAAf,GAA2C;AAChD,SAAO,MAAMF,gBAAgB,CAACG,cAAjB,CAAgC,KAAhC,CAAb;AACD;;AAED,SAASC,cAAT,GAA0B;AACxB;AACA,SAAO,MAAMC,IAAI,CAACC,MAAL,KAAgB,IAA7B,CAFwB,CAGxB;AACD;;AAED,OAAO,SAASC,iBAAT,GAA2C;AAChD,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9BC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAACb,cAAD,CAAP;AACD,KAFS,EAEPQ,cAAc,EAFP,CAAV;AAGD,GAJM,CAAP;AAKD;AAED,OAAO,SAASO,WAAT,GAAqC;AAC1C,SAAO,IAAIH,OAAJ,CAAaC,OAAD,IAAa;AAC9BC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAACd,IAAD,CAAP;AACD,KAFS,EAEPS,cAAc,EAFP,CAAV;AAGD,GAJM,CAAP;AAKD;AAED,OAAO,SAASQ,iBAAT,GAAoD;AACzD,SAAO,IAAIJ,OAAJ,CAAaC,OAAD,IAAa;AAC9BC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAACZ,UAAD,CAAP;AACD,KAFS,EAEPO,cAAc,EAFP,CAAV;AAGD,GAJM,CAAP;AAKD;AAED,OAAO,SAASS,cAAT,GAA6C;AAClD,SAAO,IAAIL,OAAJ,CAAaC,OAAD,IAAa;AAC9BC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAACX,WAAD,CAAP;AACD,KAFS,EAEPM,cAAc,EAFP,CAAV;AAGD,GAJM,CAAP;AAKD;AAED,OAAO,SAASU,YAAT,GAA6C;AAClD,SAAO,IAAIN,OAAJ,CAAaC,OAAD,IAAa;AAC9BC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAACV,SAAD,CAAP;AACD,KAFS,EAEPK,cAAc,EAFP,CAAV;AAGD,GAJM,CAAP;AAKD","sourcesContent":["import { info } from \"../data/info\";\r\nimport { modelPortfolio } from \"../data/modelPortfolio\";\r\n\r\nimport { allocation } from \"../data/allocation\";\r\nimport { performance } from \"../data/performance\";\r\nimport { positions } from \"../data/positions\";\r\nimport { Allocation, Position } from \"../data/models\";\r\nconst yahooStockPrices = require(\"yahoo-stock-prices\");\r\n\r\nexport async function spyResponse(): Promise<any> {\r\n  return await yahooStockPrices.getCurrentData(\"SPY\");\r\n}\r\n\r\nfunction getRandomDelay() {\r\n  // return 0;\r\n  return 500 + Math.random() * 2000;\r\n  // return 9999999999;\r\n}\r\n\r\nexport function getModelPortfolio(): Promise<any> {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(modelPortfolio);\r\n    }, getRandomDelay());\r\n  });\r\n}\r\n\r\nexport function getFundInfo(): Promise<any> {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(info);\r\n    }, getRandomDelay());\r\n  });\r\n}\r\n\r\nexport function getFundAllocation(): Promise<Allocation[]> {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(allocation);\r\n    }, getRandomDelay());\r\n  });\r\n}\r\n\r\nexport function getPerformance(): Promise<string[]> {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(performance);\r\n    }, getRandomDelay());\r\n  });\r\n}\r\n\r\nexport function getPositions(): Promise<Position[]> {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(positions);\r\n    }, getRandomDelay());\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}