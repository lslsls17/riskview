'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _progress_pakoEsm = require('@progress/pako-esm');

var ObserversMixin = {
    extend: function(proto) {
        var this$1 = this;

        for (var method in this) {
            if (method !== "extend") {
                proto[method] = this$1[method];
            }
        }
    },

    observers: function() {
        this._observers = this._observers || [];
        return this._observers;
    },

    addObserver: function(element) {
        if (!this._observers) {
            this._observers = [ element ];
        } else {
            this._observers.push(element);
        }
        return this;
    },

    removeObserver: function(element) {
        var observers = this.observers();
        var index = observers.indexOf(element);
        if (index !== -1) {
            observers.splice(index, 1);
        }
        return this;
    },

    trigger: function(methodName, event) {
        var observers = this._observers;

        if (observers && !this._suspended) {
            for (var idx = 0; idx < observers.length; idx++) {
                var observer = observers[idx];
                if (observer[methodName]) {
                    observer[methodName](event);
                }
            }
        }
        return this;
    },

    optionsChange: function(e) {
        if ( e === void 0 ) e = {};

        e.element = this;
        this.trigger("optionsChange", e);
    },

    geometryChange: function() {
        this.trigger("geometryChange", {
            element: this
        });
    },

    suspend: function() {
        this._suspended = (this._suspended || 0) + 1;
        return this;
    },

    resume: function() {
        this._suspended = Math.max((this._suspended || 0) - 1, 0);
        return this;
    },

    _observerField: function(field, value) {
        if (this[field]) {
            this[field].removeObserver(this);
        }
        this[field] = value;
        value.addObserver(this);
    }
};

var wnd = typeof window !== "undefined" ? window : {};

var animationFrame = wnd.requestAnimationFrame ||
                    wnd.webkitRequestAnimationFrame ||
                    wnd.mozRequestAnimationFrame ||
                    wnd.oRequestAnimationFrame ||
                    wnd.msRequestAnimationFrame ||
                    function(callback) { setTimeout(callback, 1000 / 60); };

function animationFrameProxy(callback) {
    animationFrame.call(wnd, callback);
}

var Class = function Class () {};

var ampRegExp = /&/g;
var ltRegExp = /</g;
var quoteRegExp = /"/g;
var aposRegExp = /'/g;
var gtRegExp = />/g;

function htmlEncode(value) {
    return String(value).replace(ampRegExp, "&amp;").replace(ltRegExp, "&lt;").replace(gtRegExp, "&gt;").replace(quoteRegExp, "&quot;").replace(aposRegExp, "&#39;");
}

/* eslint-disable no-console */

function logToConsole(message) {
    var console = window.console;

    if (typeof(console) != "undefined" && console.log) {
        console.log(message);
    }
}

var Observable = (function (Class$$1) {
    function Observable() {
        Class$$1.call(this);

        this._events = {};
    }

    if ( Class$$1 ) Observable.__proto__ = Class$$1;
    Observable.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Observable.prototype.constructor = Observable;

    Observable.prototype.bind = function bind (eventName, handlers, one) {
        var arguments$1 = arguments;
        var this$1 = this;

        var eventNames = getArray(eventName);
        var handlersIsFunction = isFunction(handlers);
        var length = eventNames.length;

        if (handlers === undefined) {
            for (var field in eventName) {
                this$1.bind(field, eventName[field]);
            }
            return this;
        }

        var loop = function ( idx ) {
            var eventName$1 = eventNames[idx];

            var handler = handlersIsFunction ? handlers : handlers[eventName$1];

            if (handler) {
                if (one) {
                    var original = handler;
                    handler = function () { // eslint-disable-line no-loop-func
                        this$1.unbind(eventName$1, handler);
                        original.apply(this$1, arguments$1);
                    };
                    handler.original = original;
                }
                var events = this$1._events[eventName$1] = this$1._events[eventName$1] || [];
                events.push(handler);
            }
        };

        for (var idx = 0; idx < length; idx++) loop( idx );

        return this;
    };

    Observable.prototype.one = function one (eventNames, handlers) {
        return this.bind(eventNames, handlers, true);
    };

    Observable.prototype.first = function first (eventName, handlers) {
        var this$1 = this;

        var eventNames = getArray(eventName);
        var handlersIsFunction = isFunction(handlers);

        for (var idx = 0, length = eventNames.length; idx < length; idx++) {
            var eventName$1 = eventNames[idx];

            var handler = handlersIsFunction ? handlers : handlers[eventName$1];

            if (handler) {
                var events = this$1._events[eventName$1] = this$1._events[eventName$1] || [];
                events.unshift(handler);
            }
        }

        return this;
    };

    Observable.prototype.trigger = function trigger (eventName, e) {
        var this$1 = this;
        if ( e === void 0 ) e = {};

        var events = this._events[eventName];

        if (events) {
            var length = events.length;

            e.sender = this;
            e._defaultPrevented = false;
            e.preventDefault = preventDefault;
            e.isDefaultPrevented = isDefaultPrevented;

            events = events.slice();

            for (var idx = 0; idx < length; idx++) {
                events[idx].call(this$1, e);
            }

            return e._defaultPrevented === true;
        }

        return false;
    };

    Observable.prototype.unbind = function unbind (eventName, handler) {
        var events = this._events[eventName];

        if (eventName === undefined) {
            this._events = {};
        } else if (events) {
            if (handler) {
                for (var idx = events.length - 1; idx >= 0; idx--) {
                    if (events[idx] === handler || events[idx].original === handler) {
                        events.splice(idx, 1);
                    }
                }
            } else {
                this._events[eventName] = [];
            }
        }

        return this;
    };

    return Observable;
}(Class));

function isFunction(value) {
    return typeof value === "function";
}

function getArray(value) {
    return typeof value === "string" ? [ value ] : value;
}

function preventDefault() {
    this._defaultPrevented = true;
}

function isDefaultPrevented() {
    return this._defaultPrevented === true;
}

// XXX: the following will not work with IE9 (requires server proxy).
function saveAs(options) {
    var dataURI = options.dataURI;
    var fileName = options.fileName;
    var data = dataURI;

    if (typeof data == "string" && window.Blob) {
        var parts = data.split(";base64,");
        var contentType = parts[0];
        var base64 = atob(parts[1]);
        var array = new Uint8Array(base64.length);
        for (var idx = 0; idx < base64.length; idx++) {
            array[idx] = base64.charCodeAt(idx);
        }
        data = new Blob([ array.buffer ], { type: contentType });
    }
    if (navigator.msSaveBlob) {
        navigator.msSaveBlob(data, fileName);
    } else {
        var link = document.createElement("a");
        link.download = fileName;
        data = link.href = URL.createObjectURL(data);
        var e = document.createEvent("MouseEvents");
        e.initMouseEvent("click", true, false, window,
                         0, 0, 0, 0, 0, false, false, false, false, 0, null);
        link.dispatchEvent(e);
        setTimeout(function() {
            URL.revokeObjectURL(data);
        });
    }
}

var support = {};

if (typeof window !== 'undefined') {
    support.browser = (function(userAgent) {
        var browserRxs = {
            edge: /(edge)[ \/]([\w.]+)/i,
            webkit: /(chrome)[ \/]([\w.]+)/i,
            safari: /(webkit)[ \/]([\w.]+)/i,
            opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i,
            msie: /(msie\s|trident.*? rv:)([\w.]+)/i,
            mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
        };

        var browser;

        for (var agent in browserRxs) {
            if (browserRxs.hasOwnProperty(agent)) {
                var match = userAgent.match(browserRxs[agent]);
                if (match) {
                    browser = {};
                    browser[agent] = true;
                    browser[match[1].toLowerCase().split(" ")[0].split("/")[0]] = true;
                    browser.version = parseInt(document.documentMode || match[2], 10);

                    break;
                }
            }
        }

        return browser;

    })(window.navigator.userAgent);
}

function template$1() {
    // XXX: no template engine for now
    throw new Error("String template not yet supported.  Pass a function and use your preferred template engine.");
}

function now() {
    return new Date().getTime();
}

function throttle(fn, delay) {
    var lastExecTime = 0;
    var timeout;

    if (!delay || delay <= 0) {
        return fn;
    }

    var throttled = function() {
        var elapsed = now() - lastExecTime;
        var args = arguments;

        var exec = function() {
            fn.apply(null, args);
            lastExecTime = now();
        };

        // first execution
        if (!lastExecTime) {
            return exec();
        }

        if (timeout) {
            clearTimeout(timeout);
        }

        if (elapsed > delay) {
            exec();
        } else {
            timeout = setTimeout(exec, delay - elapsed);
        }
    };

    throttled.cancel = function() {
        clearTimeout(timeout);
    };

    return throttled;
}

var namedColors = {
    aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "00ffff",
    aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc",
    bisque: "ffe4c4", black: "000000", blanchedalmond: "ffebcd",
    blue: "0000ff", blueviolet: "8a2be2", brown: "a52a2a",
    burlywood: "deb887", cadetblue: "5f9ea0", chartreuse: "7fff00",
    chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed",
    cornsilk: "fff8dc", crimson: "dc143c", cyan: "00ffff",
    darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b",
    darkgray: "a9a9a9", darkgrey: "a9a9a9", darkgreen: "006400",
    darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f",
    darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000",
    darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b",
    darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1",
    darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff",
    dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff",
    firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22",
    fuchsia: "ff00ff", gainsboro: "dcdcdc", ghostwhite: "f8f8ff",
    gold: "ffd700", goldenrod: "daa520", gray: "808080",
    grey: "808080", green: "008000", greenyellow: "adff2f",
    honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c",
    indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c",
    lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00",
    lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080",
    lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3",
    lightgrey: "d3d3d3", lightgreen: "90ee90", lightpink: "ffb6c1",
    lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa",
    lightslategray: "778899", lightslategrey: "778899", lightsteelblue: "b0c4de",
    lightyellow: "ffffe0", lime: "00ff00", limegreen: "32cd32",
    linen: "faf0e6", magenta: "ff00ff", maroon: "800000",
    mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3",
    mediumpurple: "9370d8", mediumseagreen: "3cb371", mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585",
    midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1",
    moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080",
    oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23",
    orange: "ffa500", orangered: "ff4500", orchid: "da70d6",
    palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee",
    palevioletred: "d87093", papayawhip: "ffefd5", peachpuff: "ffdab9",
    peru: "cd853f", pink: "ffc0cb", plum: "dda0dd",
    powderblue: "b0e0e6", purple: "800080", red: "ff0000",
    rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513",
    salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57",
    seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0",
    skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090",
    slategrey: "708090", snow: "fffafa", springgreen: "00ff7f",
    steelblue: "4682b4", tan: "d2b48c", teal: "008080",
    thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0",
    violet: "ee82ee", wheat: "f5deb3", white: "ffffff",
    whitesmoke: "f5f5f5", yellow: "ffff00", yellowgreen: "9acd32"
};

var browser = support.browser;

var matchNamedColor = function (color) {
    var colorNames = Object.keys(namedColors);
    colorNames.push("transparent");

    var regexp = new RegExp("^(" + colorNames.join("|") + ")(\\W|$)", "i");
    matchNamedColor = function (color) { return regexp.exec(color); };

    return regexp.exec(color);
};

var BaseColor = (function (Class$$1) {
    function BaseColor() { Class$$1.call(this); }

    if ( Class$$1 ) BaseColor.__proto__ = Class$$1;
    BaseColor.prototype = Object.create( Class$$1 && Class$$1.prototype );
    BaseColor.prototype.constructor = BaseColor;
    BaseColor.prototype.toHSV = function toHSV () { return this; };

    BaseColor.prototype.toRGB = function toRGB () { return this; };

    BaseColor.prototype.toHex = function toHex () { return this.toBytes().toHex(); };

    BaseColor.prototype.toBytes = function toBytes () { return this; };

    BaseColor.prototype.toCss = function toCss () { return "#" + this.toHex(); };

    BaseColor.prototype.toCssRgba = function toCssRgba () {
        var rgb = this.toBytes();
        return ("rgba(" + (rgb.r) + ", " + (rgb.g) + ", " + (rgb.b) + ", " + (parseFloat((Number(this.a)).toFixed(3))) + ")");
    };

    BaseColor.prototype.toDisplay = function toDisplay () {
        if (browser.msie && browser.version < 9) {
            return this.toCss(); // no RGBA support; does it support any opacity in colors?
        }
        return this.toCssRgba();
    };

    BaseColor.prototype.equals = function equals (c) {
        return c === this || c !== null && this.toCssRgba() === parseColor(c).toCssRgba();
    };

    BaseColor.prototype.diff = function diff (other) {
        if (other === null) {
            return NaN;
        }

        var c1 = this.toBytes();
        var c2 = other.toBytes();

        return Math.sqrt(Math.pow((c1.r - c2.r) * 0.30, 2) +
                         Math.pow((c1.g - c2.g) * 0.59, 2) +
                         Math.pow((c1.b - c2.b) * 0.11, 2));
    };

    BaseColor.prototype.clone = function clone () {
        var c = this.toBytes();
        if (c === this) {
            c = new Bytes(c.r, c.g, c.b, c.a);
        }

        return c;
    };

    return BaseColor;
}(Class));

var RGB = (function (BaseColor) {
    function RGB(r, g, b, a) {
        BaseColor.call(this);

        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }

    if ( BaseColor ) RGB.__proto__ = BaseColor;
    RGB.prototype = Object.create( BaseColor && BaseColor.prototype );
    RGB.prototype.constructor = RGB;

    RGB.prototype.toHSV = function toHSV () {
        var ref = this;
        var r = ref.r;
        var g = ref.g;
        var b = ref.b;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var delta = max - min;
        var v = max;
        var h, s;

        if (delta === 0) {
            return new HSV(0, 0, v, this.a);
        }

        if (max !== 0) {
            s = delta / max;
            if (r === max) {
                h = (g - b) / delta;
            } else if (g === max) {
                h = 2 + (b - r) / delta;
            } else {
                h = 4 + (r - g) / delta;
            }

            h *= 60;
            if (h < 0) {
                h += 360;
            }
        } else {
            s = 0;
            h = -1;
        }

        return new HSV(h, s, v, this.a);
    };

    RGB.prototype.toHSL = function toHSL () {
        var ref = this;
        var r = ref.r;
        var g = ref.g;
        var b = ref.b;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var h, s, l = (max + min) / 2;

        if (max === min) {
            h = s = 0;
        } else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                case g: h = (b - r) / d + 2; break;
                case b: h = (r - g) / d + 4; break;
                default: break;
            }
        }

        return new HSL(h * 60, s * 100, l * 100, this.a);
    };

    RGB.prototype.toBytes = function toBytes () {
        return new Bytes(this.r * 255, this.g * 255, this.b * 255, this.a);
    };

    return RGB;
}(BaseColor));

var Bytes = (function (RGB) {
    function Bytes(r, g, b, a) {
        RGB.call(this, Math.round(r), Math.round(g), Math.round(b), a);
    }

    if ( RGB ) Bytes.__proto__ = RGB;
    Bytes.prototype = Object.create( RGB && RGB.prototype );
    Bytes.prototype.constructor = Bytes;

    Bytes.prototype.toRGB = function toRGB () {
        return new RGB(this.r / 255, this.g / 255, this.b / 255, this.a);
    };

    Bytes.prototype.toHSV = function toHSV () {
        return this.toRGB().toHSV();
    };

    Bytes.prototype.toHSL = function toHSL () {
        return this.toRGB().toHSL();
    };

    Bytes.prototype.toHex = function toHex () {
        return hex(this.r, 2) + hex(this.g, 2) + hex(this.b, 2);
    };

    Bytes.prototype.toBytes = function toBytes () {
        return this;
    };

    return Bytes;
}(RGB));

function hex(n, width, pad) {
    if ( pad === void 0 ) pad = "0";

    var result = n.toString(16);
    while (width > result.length) {
        result = pad + result;
    }

    return result;
}

var HSV = (function (BaseColor) {
    function HSV(h, s, v, a) {
        BaseColor.call(this);

        this.h = h;
        this.s = s;
        this.v = v;
        this.a = a;
    }

    if ( BaseColor ) HSV.__proto__ = BaseColor;
    HSV.prototype = Object.create( BaseColor && BaseColor.prototype );
    HSV.prototype.constructor = HSV;

    HSV.prototype.toRGB = function toRGB () {
        var ref = this;
        var h = ref.h;
        var s = ref.s;
        var v = ref.v;
        var r, g, b;

        if (s === 0) {
            r = g = b = v;
        } else {
            h /= 60;

            var i = Math.floor(h);
            var f = h - i;
            var p = v * (1 - s);
            var q = v * (1 - s * f);
            var t = v * (1 - s * (1 - f));

            switch (i) {
                case 0: r = v; g = t; b = p; break;
                case 1: r = q; g = v; b = p; break;
                case 2: r = p; g = v; b = t; break;
                case 3: r = p; g = q; b = v; break;
                case 4: r = t; g = p; b = v; break;
                default: r = v; g = p; b = q; break;
            }
        }

        return new RGB(r, g, b, this.a);
    };

    HSV.prototype.toHSL = function toHSL () {
        return this.toRGB().toHSL();
    };

    HSV.prototype.toBytes = function toBytes () {
        return this.toRGB().toBytes();
    };

    return HSV;
}(BaseColor));

var HSL = (function (BaseColor) {
    function HSL(h, s, l, a) {
        BaseColor.call(this);

        this.h = h;
        this.s = s;
        this.l = l;
        this.a = a;
    }

    if ( BaseColor ) HSL.__proto__ = BaseColor;
    HSL.prototype = Object.create( BaseColor && BaseColor.prototype );
    HSL.prototype.constructor = HSL;

    HSL.prototype.toRGB = function toRGB () {
        var h = this.h / 360;
        var s = this.s / 100;
        var l = this.l / 100;
        var r, g, b;

        if (s === 0) {
            r = g = b = l; // achromatic
        } else {
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }

        return new RGB(r, g, b, this.a);
    };

    HSL.prototype.toHSV = function toHSV () {
        return this.toRGB().toHSV();
    };

    HSL.prototype.toBytes = function toBytes () {
        return this.toRGB().toBytes();
    };

    return HSL;
}(BaseColor));

function hue2rgb(p, q, s) {
    var t = s;

    if (t < 0) {
        t += 1;
    }

    if (t > 1) {
        t -= 1;
    }

    if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
    }

    if (t < 1 / 2) {
        return q;
    }

    if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
    }

    return p;
}

function parseColor(value, safe) {
    var m, ret;

    if (value == null || value === "none") {
        return null;
    }

    if (value instanceof BaseColor) {
        return value;
    }

    var color = value.toLowerCase();
    if ((m = matchNamedColor(color))) {
        if (m[1] === "transparent") {
            color = new RGB(1, 1, 1, 0);
        } else {
            color = parseColor(namedColors[m[1]], safe);
        }
        color.match = [ m[1] ];
        return color;
    }
    if ((m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\b/i.exec(color))) {
        ret = new Bytes(parseInt(m[1], 16),
                        parseInt(m[2], 16),
                        parseInt(m[3], 16), 1);
    } else if ((m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])\b/i.exec(color))) {
        ret = new Bytes(parseInt(m[1] + m[1], 16),
                        parseInt(m[2] + m[2], 16),
                        parseInt(m[3] + m[3], 16), 1);
    } else if ((m = /^rgb\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/.exec(color))) {
        ret = new Bytes(parseInt(m[1], 10),
                        parseInt(m[2], 10),
                        parseInt(m[3], 10), 1);
    } else if ((m = /^rgba\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
        ret = new Bytes(parseInt(m[1], 10),
                        parseInt(m[2], 10),
                        parseInt(m[3], 10), parseFloat(m[4]));
    } else if ((m = /^rgb\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*\)/.exec(color))) {
        ret = new RGB(parseFloat(m[1]) / 100,
                      parseFloat(m[2]) / 100,
                      parseFloat(m[3]) / 100, 1);
    } else if ((m = /^rgba\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
        ret = new RGB(parseFloat(m[1]) / 100,
                      parseFloat(m[2]) / 100,
                      parseFloat(m[3]) / 100, parseFloat(m[4]));
    }

    if (ret) {
        ret.match = m;
    } else if (!safe) {
        throw new Error("Cannot parse color: " + color);
    }

    return ret;
}

var DARK_TRESHOLD = 180;

var Color = (function (Class$$1) {
    function Color(value) {
        var this$1 = this;

        Class$$1.call(this);

        if (arguments.length === 1) {
            var formats = Color.formats;
            var resolvedColor = this.resolveColor(value);

            for (var idx = 0; idx < formats.length; idx++) {
                var formatRegex = formats[idx].re;
                var processor = formats[idx].process;
                var parts = formatRegex.exec(resolvedColor);

                if (parts) {
                    var channels = processor(parts);
                    this$1.r = channels[0];
                    this$1.g = channels[1];
                    this$1.b = channels[2];
                }
            }
        } else {
            this.r = arguments[0];
            this.g = arguments[1];
            this.b = arguments[2];
        }

        this.r = this.normalizeByte(this.r);
        this.g = this.normalizeByte(this.g);
        this.b = this.normalizeByte(this.b);
    }

    if ( Class$$1 ) Color.__proto__ = Class$$1;
    Color.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Color.prototype.constructor = Color;

    Color.prototype.toHex = function toHex () {
        var pad = this.padDigit;
        var r = this.r.toString(16);
        var g = this.g.toString(16);
        var b = this.b.toString(16);

        return "#" + pad(r) + pad(g) + pad(b);
    };

    Color.prototype.resolveColor = function resolveColor (value) {
        var color = value || "black";

        if (color.charAt(0) === "#") {
            color = color.substr(1, 6);
        }

        color = color.replace(/ /g, "");
        color = color.toLowerCase();
        color = Color.namedColors[color] || color;

        return color;
    };

    Color.prototype.normalizeByte = function normalizeByte (value) {
        if (value < 0 || isNaN(value)) {
            return 0;
        }

        return value > 255 ? 255 : value;
    };

    Color.prototype.padDigit = function padDigit (value) {
        return (value.length === 1) ? "0" + value : value;
    };

    Color.prototype.brightness = function brightness (value) {
        var round = Math.round;

        this.r = round(this.normalizeByte(this.r * value));
        this.g = round(this.normalizeByte(this.g * value));
        this.b = round(this.normalizeByte(this.b * value));

        return this;
    };

    Color.prototype.percBrightness = function percBrightness () {
        return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);
    };

    Color.prototype.isDark = function isDark () {
        return this.percBrightness() < DARK_TRESHOLD;
    };

    Color.fromBytes = function fromBytes (r, g, b, a) {
        return new Bytes(r, g, b, a != null ? a : 1);
    };

    Color.fromRGB = function fromRGB (r, g, b, a) {
        return new RGB(r, g, b, a != null ? a : 1);
    };

    Color.fromHSV = function fromHSV (h, s, v, a) {
        return new HSV(h, s, v, a != null ? a : 1);
    };

    Color.fromHSL = function fromHSL (h, s, l, a) {
        return new HSL(h, s, l, a != null ? a : 1);
    };

    return Color;
}(Class));

Color.formats = [ {
    re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
    process: function(parts) {
        return [
            parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)
        ];
    }
}, {
    re: /^(\w{2})(\w{2})(\w{2})$/,
    process: function(parts) {
        return [
            parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)
        ];
    }
}, {
    re: /^(\w{1})(\w{1})(\w{1})$/,
    process: function(parts) {
        return [
            parseInt(parts[1] + parts[1], 16),
            parseInt(parts[2] + parts[2], 16),
            parseInt(parts[3] + parts[3], 16)
        ];
    }
} ];

Color.namedColors = namedColors;

function append$1$1(first, second) {
    first.push.apply(first, second);
    return first;
}

/* eslint-disable key-spacing,no-multi-spaces,no-param-reassign */

var literals = {
    1    : "i",       10   : "x",       100  : "c",
    2    : "ii",      20   : "xx",      200  : "cc",
    3    : "iii",     30   : "xxx",     300  : "ccc",
    4    : "iv",      40   : "xl",      400  : "cd",
    5    : "v",       50   : "l",       500  : "d",
    6    : "vi",      60   : "lx",      600  : "dc",
    7    : "vii",     70   : "lxx",     700  : "dcc",
    8    : "viii",    80   : "lxxx",    800  : "dccc",
    9    : "ix",      90   : "xc",      900  : "cm",
    1000 : "m"
};

function arabicToRoman(n) {
    var values = [ 1000,
                   900 , 800, 700, 600, 500, 400, 300, 200, 100,
                   90  , 80 , 70 , 60 , 50 , 40 , 30 , 20 , 10 ,
                   9   , 8  , 7  , 6  , 5  , 4  , 3  , 2  , 1 ];

    var roman = "";
    while (n > 0) {
        if (n < values[0]) {
            values.shift();
        } else {
            roman += literals[values[0]];
            n -= values[0];
        }
    }
    return roman;
}

function createPromise() {
    var resolveFn, rejectFn;
    var promise = new Promise(function (resolve, reject) {
        resolveFn = function (data) {
            promise._state = "resolved";
            resolve(data);
            return promise;
        };
        rejectFn = function (data) {
            promise._state = "rejected";
            reject(data);

            return promise;
        };
    });
    promise._state = "pending";
    promise.resolve = resolveFn;
    promise.reject = rejectFn;
    promise.state = function () { return promise._state; };

    return promise;
}

var UNDEFINED = "undefined";

function defined(value) {
    return typeof value !== UNDEFINED;
}

var defId = 1;

function definitionId() {
    return "kdef" + defId++;
}

var DEG_TO_RAD = Math.PI / 180;
var MAX_NUM = Number.MAX_VALUE;
var MIN_NUM = -Number.MAX_VALUE;

function deg(radians) {
    return radians / DEG_TO_RAD;
}

var fromCharCode = String.fromCharCode;

var BOM = '\xfe\xff';

// Encodes a string as UTF-8
function encodeUTF8(input) {
    var output = "";

    for (var i = 0; i < input.length; i++) {
        var c = input.charCodeAt(i);

        if (c < 0x80) {
            // One byte
            output += fromCharCode(c);
        } else if (c < 0x800) {
            // Two bytes
            output += fromCharCode(0xC0 | (c >>> 6));
            output += fromCharCode(0x80 | (c & 0x3f));
        } else if (c < 0x10000) {
            // Three bytes
            output += fromCharCode(0xE0 | (c >>> 12));
            output += fromCharCode(0x80 | (c >>> 6 & 0x3f));
            output += fromCharCode(0x80 | (c & 0x3f));
        }
    }

    return output;
}

function encodeUnit(codeUnit) {
    return fromCharCode(codeUnit >> 8) + fromCharCode(codeUnit & 0x00ff);
}

// Encodes a string as UTF-16 big-endian
function encodeUTF16BE(input) {
    var output = '';

    for (var i = 0; i < input.length; i++) {
        var c = input.charCodeAt(i);

        if (c < 0xFFFF) {
            output += encodeUnit(c);
        } else {
            var lead = ((c - 0x10000) >> 10) + 0xD800;
            var trail = ((c - 0x10000) & 0x3FF) + 0xDC00;
            output += encodeUnit(lead);
            output += encodeUnit(trail);
        }
    }

    return output;
}

var KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

function encodeBase64(input) {
    var output = "";
    var i = 0;

    var utfInput = encodeUTF8(input);

    while (i < utfInput.length) {
        var chr1 = utfInput.charCodeAt(i++);
        var chr2 = utfInput.charCodeAt(i++);
        var chr3 = utfInput.charCodeAt(i++);

        var enc1 = chr1 >> 2;
        var enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        var enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        var enc4 = chr3 & 63;

        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
            enc4 = 64;
        }

        output = output +
            KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) +
            KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);
    }

    return output;
}

function eventCoordinates(e) {
    if (defined((e.x || {}).location)) {
        return {
            x: e.x.location,
            y: e.y.location
        };
    }

    return {
        x: e.pageX || e.clientX || 0,
        y: e.pageY || e.clientY || 0
    };
}

function eventElement(e) {
    if ( e === void 0 ) e = {};

    return e.touch ? e.touch.initialTouch : e.target;
}

function isTransparent(color) {
    return color === "" || color === null || color === "none" || color === "transparent" || !defined(color);
}

function last(array) {
    if (array) {
        return array[array.length - 1];
    }
}

function limitValue(value, min, max) {
    return Math.max(Math.min(value, max), min);
}

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

// mergeSort is stable.
function mergeSort(a, cmp) {
    if (a.length < 2) {
        return a.slice();
    }
    function merge(a, b) {
        var r = [], ai = 0, bi = 0, i = 0;
        while (ai < a.length && bi < b.length) {
            if (cmp(a[ai], b[bi]) <= 0) {
                r[i++] = a[ai++];
            } else {
                r[i++] = b[bi++];
            }
        }
        if (ai < a.length) {
            r.push.apply(r, a.slice(ai));
        }
        if (bi < b.length) {
            r.push.apply(r, b.slice(bi));
        }
        return r;
    }
    return (function sort(a) {
        if (a.length <= 1) {
            return a;
        }
        var m = Math.floor(a.length / 2);
        var left = a.slice(0, m);
        var right = a.slice(m);
        left = sort(left);
        right = sort(right);
        return merge(left, right);
    })(a);
}

function promiseAll(promises) {
    return Promise.all(promises);
}

function rad(degrees) {
    return degrees * DEG_TO_RAD;
}

function pow(p) {
    if (p) {
        return Math.pow(10, p);
    }

    return 1;
}

function round(value, precision) {
    var power = pow(precision);
    return Math.round(value * power) / power;
}

function valueOrDefault(value, defaultValue) {
    return defined(value) ? value : defaultValue;
}

function bindEvents(element, events) {
    for (var eventName in events) {
        var eventNames = eventName.trim().split(" ");
        for (var idx = 0; idx < eventNames.length; idx++) {
            element.addEventListener(eventNames[idx], events[eventName], false);
        }
    }
}

function elementOffset(element) {
    var box = element.getBoundingClientRect();

    var documentElement = document.documentElement;

    return {
        top: box.top + (window.pageYOffset || documentElement.scrollTop) - (documentElement.clientTop || 0),
        left: box.left + (window.pageXOffset || documentElement.scrollLeft) - (documentElement.clientLeft || 0)
    };
}

function elementStyles(element, styles) {
    var result = {};
    var style = window.getComputedStyle(element) || {};
    var stylesArray = Array.isArray(styles) ? styles : [ styles ];

    for (var idx = 0; idx < stylesArray.length; idx++) {
        var field = stylesArray[idx];
        result[field] = style[field];
    }

    return result;
}

function getPixels(value) {
    if (isNaN(value)) {
        return value;
    }
    return value + "px";
}

function elementSize(element, size) {
    if (size) {
        var width = size.width;
        var height = size.height;

        if (defined(width)) {
            element.style.width = getPixels(width);
        }

        if (defined(height)) {
            element.style.height = getPixels(height);
        }

    } else {
        var size$1 = elementStyles(element, [ 'width', 'height' ]);

        return {
            width: parseInt(size$1.width, 10),
            height: parseInt(size$1.height, 10)
        };
    }
}

function unbindEvents(element, events) {
    if ( events === void 0 ) events = {};

    for (var name in events) {
        var eventNames = name.trim().split(" ");
        for (var idx = 0; idx < eventNames.length; idx++) {
            element.removeEventListener(eventNames[idx], events[name], false);
        }
    }
}

function elementPadding(element) {
    var ref = elementStyles(element, [ "paddingLeft", "paddingTop" ]);
    var paddingLeft = ref.paddingLeft;
    var paddingTop = ref.paddingTop;
    return {
        top: parseFloat(paddingTop),
        left: parseFloat(paddingLeft)
    };
}

function setAccessor(field) {
    return function(value) {
        if (this[field] !== value) {
            this[field] = value;
            this.geometryChange();
        }

        return this;
    };
}

function getAccessor(field) {
    return function() {
        return this[field];
    };
}

function defineAccessors(fn, fields) {
    for (var i = 0; i < fields.length; i++) {
        var name = fields[i];
        var capitalized = name.charAt(0).toUpperCase() +
                          name.substring(1, name.length);

        fn["set" + capitalized] = setAccessor(name);
        fn["get" + capitalized] = getAccessor(name);
    }
}

var Matrix = (function (Class$$1) {
    function Matrix(a, b, c, d, e, f) {
        if ( a === void 0 ) a = 0;
        if ( b === void 0 ) b = 0;
        if ( c === void 0 ) c = 0;
        if ( d === void 0 ) d = 0;
        if ( e === void 0 ) e = 0;
        if ( f === void 0 ) f = 0;

        Class$$1.call(this);

        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.f = f;
    }

    if ( Class$$1 ) Matrix.__proto__ = Class$$1;
    Matrix.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Matrix.prototype.constructor = Matrix;

    Matrix.prototype.multiplyCopy = function multiplyCopy (matrix) {
        return new Matrix(
            this.a * matrix.a + this.c * matrix.b,
            this.b * matrix.a + this.d * matrix.b,
            this.a * matrix.c + this.c * matrix.d,
            this.b * matrix.c + this.d * matrix.d,
            this.a * matrix.e + this.c * matrix.f + this.e,
            this.b * matrix.e + this.d * matrix.f + this.f
        );
    };

    Matrix.prototype.invert = function invert () {
        var ref = this;
        var a = ref.a;
        var b = ref.b;
        var d = ref.c;
        var e = ref.d;
        var g = ref.e;
        var h = ref.f;
        var det = a * e - b * d;

        if (det === 0) {
            return null;
        }

        return new Matrix(e / det, -b / det, -d / det, a / det,
                          (d * h - e * g) / det, (b * g - a * h) / det);
    };

    Matrix.prototype.clone = function clone () {
        return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);
    };

    Matrix.prototype.equals = function equals (other) {
        if (!other) {
            return false;
        }

        return this.a === other.a && this.b === other.b &&
               this.c === other.c && this.d === other.d &&
               this.e === other.e && this.f === other.f;
    };

    Matrix.prototype.round = function round$1 (precision) {
        this.a = round(this.a, precision);
        this.b = round(this.b, precision);
        this.c = round(this.c, precision);
        this.d = round(this.d, precision);
        this.e = round(this.e, precision);
        this.f = round(this.f, precision);

        return this;
    };

    Matrix.prototype.toArray = function toArray (precision) {
        var result = [ this.a, this.b, this.c, this.d, this.e, this.f ];

        if (defined(precision)) {
            for (var i = 0; i < result.length; i++) {
                result[i] = round(result[i], precision);
            }
        }

        return result;
    };

    Matrix.prototype.toString = function toString (precision, separator) {
        if ( separator === void 0 ) separator = ",";

        return this.toArray(precision).join(separator);
    };

    Matrix.translate = function translate (x, y) {
        return new Matrix(1, 0, 0, 1, x, y);
    };

    Matrix.unit = function unit () {
        return new Matrix(1, 0, 0, 1, 0, 0);
    };

    Matrix.rotate = function rotate (angle, x, y) {
        var matrix = new Matrix();
        matrix.a = Math.cos(rad(angle));
        matrix.b = Math.sin(rad(angle));
        matrix.c = -matrix.b;
        matrix.d = matrix.a;
        matrix.e = (x - x * matrix.a + y * matrix.b) || 0;
        matrix.f = (y - y * matrix.a - x * matrix.b) || 0;

        return matrix;
    };

    Matrix.scale = function scale (scaleX, scaleY) {
        return new Matrix(scaleX, 0, 0, scaleY, 0, 0);
    };

    return Matrix;
}(Class));

Matrix.IDENTITY = Matrix.unit();

function toMatrix(transformation) {
    if (transformation && typeof transformation.matrix === "function") {
        return transformation.matrix();
    }

    return transformation;
}

var Point = (function (Class$$1) {
    function Point(x, y) {
        Class$$1.call(this);

        this.x = x || 0;
        this.y = y || 0;
    }

    if ( Class$$1 ) Point.__proto__ = Class$$1;
    Point.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Point.prototype.constructor = Point;

    var staticAccessors = { ZERO: {} };

    Point.prototype.equals = function equals (other) {
        return other && other.x === this.x && other.y === this.y;
    };

    Point.prototype.clone = function clone () {
        return new Point(this.x, this.y);
    };

    Point.prototype.rotate = function rotate (angle, origin) {
        var originPoint = Point.create(origin) || Point.ZERO;

        return this.transform(Matrix.rotate(angle, originPoint.x, originPoint.y));
    };

    Point.prototype.translate = function translate (x, y) {
        this.x += x;
        this.y += y;

        this.geometryChange();

        return this;
    };

    Point.prototype.translateWith = function translateWith (point) {
        return this.translate(point.x, point.y);
    };

    Point.prototype.move = function move (x, y) {
        this.x = this.y = 0;
        return this.translate(x, y);
    };

    Point.prototype.scale = function scale (scaleX, scaleY) {
        if ( scaleY === void 0 ) scaleY = scaleX;

        this.x *= scaleX;
        this.y *= scaleY;

        this.geometryChange();

        return this;
    };

    Point.prototype.scaleCopy = function scaleCopy (scaleX, scaleY) {
        return this.clone().scale(scaleX, scaleY);
    };

    Point.prototype.transform = function transform (transformation) {
        var matrix = toMatrix(transformation);
        var ref = this;
        var x = ref.x;
        var y = ref.y;

        this.x = matrix.a * x + matrix.c * y + matrix.e;
        this.y = matrix.b * x + matrix.d * y + matrix.f;

        this.geometryChange();

        return this;
    };

    Point.prototype.transformCopy = function transformCopy (transformation) {
        var point = this.clone();

        if (transformation) {
            point.transform(transformation);
        }

        return point;
    };

    Point.prototype.distanceTo = function distanceTo (point) {
        var dx = this.x - point.x;
        var dy = this.y - point.y;

        return Math.sqrt(dx * dx + dy * dy);
    };

    Point.prototype.round = function round$1 (digits) {
        this.x = round(this.x, digits);
        this.y = round(this.y, digits);

        this.geometryChange();

        return this;
    };

    Point.prototype.toArray = function toArray (digits) {
        var doRound = defined(digits);
        var x = doRound ? round(this.x, digits) : this.x;
        var y = doRound ? round(this.y, digits) : this.y;

        return [ x, y ];
    };

    Point.prototype.toString = function toString (digits, separator) {
        if ( separator === void 0 ) separator = " ";

        var ref = this;
        var x = ref.x;
        var y = ref.y;

        if (defined(digits)) {
            x = round(x, digits);
            y = round(y, digits);
        }

        return x + separator + y;
    };

    Point.create = function create (arg0, arg1) {
        if (defined(arg0)) {
            if (arg0 instanceof Point) {
                return arg0;
            } else if (arguments.length === 1 && arg0.length === 2) {
                return new Point(arg0[0], arg0[1]);
            }

            return new Point(arg0, arg1);
        }
    };

    Point.min = function min () {
        var arguments$1 = arguments;

        var minX = MAX_NUM;
        var minY = MAX_NUM;

        for (var i = 0; i < arguments.length; i++) {
            var point = arguments$1[i];
            minX = Math.min(point.x, minX);
            minY = Math.min(point.y, minY);
        }

        return new Point(minX, minY);
    };

    Point.max = function max () {
        var arguments$1 = arguments;

        var maxX = MIN_NUM;
        var maxY = MIN_NUM;

        for (var i = 0; i < arguments.length; i++) {
            var point = arguments$1[i];
            maxX = Math.max(point.x, maxX);
            maxY = Math.max(point.y, maxY);
        }

        return new Point(maxX, maxY);
    };

    Point.minPoint = function minPoint () {
        return new Point(MIN_NUM, MIN_NUM);
    };

    Point.maxPoint = function maxPoint () {
        return new Point(MAX_NUM, MAX_NUM);
    };

    staticAccessors.ZERO.get = function () {
        return new Point(0, 0);
    };

    Object.defineProperties( Point, staticAccessors );

    return Point;
}(Class));

defineAccessors(Point.prototype, [ "x", "y" ]);
ObserversMixin.extend(Point.prototype);

var Size = (function (Class$$1) {
    function Size(width, height) {
        Class$$1.call(this);

        this.width = width || 0;
        this.height = height || 0;
    }

    if ( Class$$1 ) Size.__proto__ = Class$$1;
    Size.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Size.prototype.constructor = Size;

    var staticAccessors = { ZERO: {} };

    Size.prototype.equals = function equals (other) {
        return other && other.width === this.width && other.height === this.height;
    };

    Size.prototype.clone = function clone () {
        return new Size(this.width, this.height);
    };

    Size.prototype.toArray = function toArray (digits) {
        var doRound = defined(digits);
        var width = doRound ? round(this.width, digits) : this.width;
        var height = doRound ? round(this.height, digits) : this.height;

        return [ width, height ];
    };

    Size.create = function create (arg0, arg1) {
        if (defined(arg0)) {
            if (arg0 instanceof Size) {
                return arg0;
            } else if (arguments.length === 1 && arg0.length === 2) {
                return new Size(arg0[0], arg0[1]);
            }

            return new Size(arg0, arg1);
        }
    };

    staticAccessors.ZERO.get = function () {
        return new Size(0, 0);
    };

    Object.defineProperties( Size, staticAccessors );

    return Size;
}(Class));

defineAccessors(Size.prototype, [ "width", "height" ]);
ObserversMixin.extend(Size.prototype);

var Rect = (function (Class$$1) {
    function Rect(origin, size) {
        if ( origin === void 0 ) origin = new Point();
        if ( size === void 0 ) size = new Size();

        Class$$1.call(this);

        this.setOrigin(origin);
        this.setSize(size);
    }

    if ( Class$$1 ) Rect.__proto__ = Class$$1;
    Rect.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Rect.prototype.constructor = Rect;

    Rect.prototype.clone = function clone () {
        return new Rect(
            this.origin.clone(),
            this.size.clone()
        );
    };

    Rect.prototype.equals = function equals (other) {
        return other &&
               other.origin.equals(this.origin) &&
               other.size.equals(this.size);
    };

    Rect.prototype.setOrigin = function setOrigin (value) {
        this._observerField("origin", Point.create(value));
        this.geometryChange();
        return this;
    };

    Rect.prototype.getOrigin = function getOrigin () {
        return this.origin;
    };

    Rect.prototype.setSize = function setSize (value) {
        this._observerField("size", Size.create(value));
        this.geometryChange();
        return this;
    };

    Rect.prototype.getSize = function getSize () {
        return this.size;
    };

    Rect.prototype.width = function width () {
        return this.size.width;
    };

    Rect.prototype.height = function height () {
        return this.size.height;
    };

    Rect.prototype.topLeft = function topLeft () {
        return this.origin.clone();
    };

    Rect.prototype.bottomRight = function bottomRight () {
        return this.origin.clone().translate(this.width(), this.height());
    };

    Rect.prototype.topRight = function topRight () {
        return this.origin.clone().translate(this.width(), 0);
    };

    Rect.prototype.bottomLeft = function bottomLeft () {
        return this.origin.clone().translate(0, this.height());
    };

    Rect.prototype.center = function center () {
        return this.origin.clone().translate(this.width() / 2, this.height() / 2);
    };

    Rect.prototype.bbox = function bbox (matrix) {
        var tl = this.topLeft().transformCopy(matrix);
        var tr = this.topRight().transformCopy(matrix);
        var br = this.bottomRight().transformCopy(matrix);
        var bl = this.bottomLeft().transformCopy(matrix);

        return Rect.fromPoints(tl, tr, br, bl);
    };

    Rect.prototype.transformCopy = function transformCopy (m) {
        return Rect.fromPoints(
            this.topLeft().transform(m),
            this.bottomRight().transform(m)
        );
    };

    Rect.prototype.expand = function expand (x, y) {
        if ( y === void 0 ) y = x;


        this.size.width += 2 * x;
        this.size.height += 2 * y;

        this.origin.translate(-x, -y);

        return this;
    };

    Rect.prototype.expandCopy = function expandCopy (x, y) {
        return this.clone().expand(x, y);
    };

    Rect.prototype.containsPoint = function containsPoint (point) {
        var origin = this.origin;
        var bottomRight = this.bottomRight();
        return !(point.x < origin.x || point.y < origin.y || bottomRight.x < point.x || bottomRight.y < point.y);
    };

    Rect.prototype._isOnPath = function _isOnPath (point, width) {
        var rectOuter = this.expandCopy(width, width);
        var rectInner = this.expandCopy(-width, -width);

        return rectOuter.containsPoint(point) && !rectInner.containsPoint(point);
    };

    Rect.fromPoints = function fromPoints () {
        var topLeft = Point.min.apply(null, arguments);
        var bottomRight = Point.max.apply(null, arguments);
        var size = new Size(
            bottomRight.x - topLeft.x,
            bottomRight.y - topLeft.y
        );

        return new Rect(topLeft, size);
    };

    Rect.union = function union (a, b) {
        return Rect.fromPoints(
            Point.min(a.topLeft(), b.topLeft()),
            Point.max(a.bottomRight(), b.bottomRight())
        );
    };

    Rect.intersect = function intersect (a, b) {
        var rect1 = {
            left: a.topLeft().x,
            top: a.topLeft().y,
            right: a.bottomRight().x,
            bottom: a.bottomRight().y
        };

        var rect2 = {
            left: b.topLeft().x,
            top: b.topLeft().y,
            right: b.bottomRight().x,
            bottom: b.bottomRight().y
        };

        if (rect1.left <= rect2.right &&
            rect2.left <= rect1.right &&
            rect1.top <= rect2.bottom &&
            rect2.top <= rect1.bottom) {
            return Rect.fromPoints(
                new Point(Math.max(rect1.left, rect2.left), Math.max(rect1.top, rect2.top)),
                new Point(Math.min(rect1.right, rect2.right), Math.min(rect1.bottom, rect2.bottom))
            );
        }
    };

    return Rect;
}(Class));

ObserversMixin.extend(Rect.prototype);

function ellipseExtremeAngles(center, rx, ry, matrix) {
    var extremeX = 0;
    var extremeY = 0;

    if (matrix) {
        extremeX = Math.atan2(matrix.c * ry, matrix.a * rx);
        if (matrix.b !== 0) {
            extremeY = Math.atan2(matrix.d * ry, matrix.b * rx);
        }
    }

    return {
        x: extremeX,
        y: extremeY
    };
}

var PI_DIV_2 = Math.PI / 2;

var Circle = (function (Class$$1) {
    function Circle(center, radius) {
        if ( center === void 0 ) center = new Point();
        if ( radius === void 0 ) radius = 0;

        Class$$1.call(this);

        this.setCenter(center);
        this.setRadius(radius);
    }

    if ( Class$$1 ) Circle.__proto__ = Class$$1;
    Circle.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Circle.prototype.constructor = Circle;

    Circle.prototype.setCenter = function setCenter (value) {
        this._observerField("center", Point.create(value));
        this.geometryChange();
        return this;
    };

    Circle.prototype.getCenter = function getCenter () {
        return this.center;
    };

    Circle.prototype.equals = function equals (other) {
        return other &&
               other.center.equals(this.center) &&
               other.radius === this.radius;
    };

    Circle.prototype.clone = function clone () {
        return new Circle(this.center.clone(), this.radius);
    };

    Circle.prototype.pointAt = function pointAt (angle) {
        return this._pointAt(rad(angle));
    };

    Circle.prototype.bbox = function bbox (matrix) {
        var this$1 = this;

        var extremeAngles = ellipseExtremeAngles(this.center, this.radius, this.radius, matrix);
        var minPoint = Point.maxPoint();
        var maxPoint = Point.minPoint();

        for (var i = 0; i < 4; i++) {
            var currentPointX = this$1._pointAt(extremeAngles.x + i * PI_DIV_2).transformCopy(matrix);
            var currentPointY = this$1._pointAt(extremeAngles.y + i * PI_DIV_2).transformCopy(matrix);
            var currentPoint = new Point(currentPointX.x, currentPointY.y);

            minPoint = Point.min(minPoint, currentPoint);
            maxPoint = Point.max(maxPoint, currentPoint);
        }

        return Rect.fromPoints(minPoint, maxPoint);
    };

    Circle.prototype._pointAt = function _pointAt (angle) {
        var ref = this;
        var center = ref.center;
        var radius = ref.radius;

        return new Point(
            center.x + radius * Math.cos(angle),
            center.y + radius * Math.sin(angle)
        );
    };

    Circle.prototype.containsPoint = function containsPoint (point) {
        var ref = this;
        var center = ref.center;
        var radius = ref.radius;
        var inCircle = Math.pow(point.x - center.x, 2) +
            Math.pow(point.y - center.y, 2) <= Math.pow(radius, 2);
        return inCircle;
    };

    Circle.prototype._isOnPath = function _isOnPath (point, width) {
        var ref = this;
        var center = ref.center;
        var radius = ref.radius;
        var pointDistance = center.distanceTo(point);

        return radius - width <= pointDistance && pointDistance <= radius + width;
    };

    return Circle;
}(Class));

defineAccessors(Circle.prototype, [ "radius" ]);
ObserversMixin.extend(Circle.prototype);

var PRECISION = 10;

function close$1(a, b, tolerance) {
    if ( tolerance === void 0 ) tolerance = PRECISION;

    return round(Math.abs(a - b), tolerance) === 0;
}

function closeOrLess(a, b, tolerance) {
    return a < b || close$1(a, b, tolerance);
}

function lineIntersection(p0, p1, p2, p3) {
    var s1x = p1.x - p0.x;
    var s2x = p3.x - p2.x;
    var s1y = p1.y - p0.y;
    var s2y = p3.y - p2.y;
    var nx = p0.x - p2.x;
    var ny = p0.y - p2.y;
    var d = s1x * s2y - s2x * s1y;
    var s = (s1x * ny - s1y * nx) / d;
    var t = (s2x * ny - s2y * nx) / d;

    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
        return new Point(p0.x + t * s1x, p0.y + t * s1y);
    }
}

var Transformation = (function (Class$$1) {
    function Transformation(matrix) {
        if ( matrix === void 0 ) matrix = Matrix.unit();

        Class$$1.call(this);

        this._matrix = matrix;
    }

    if ( Class$$1 ) Transformation.__proto__ = Class$$1;
    Transformation.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Transformation.prototype.constructor = Transformation;

    Transformation.prototype.clone = function clone () {
        return new Transformation(
            this._matrix.clone()
        );
    };

    Transformation.prototype.equals = function equals (other) {
        return other &&
               other._matrix.equals(this._matrix);
    };

    Transformation.prototype.translate = function translate (x, y) {
        this._matrix = this._matrix.multiplyCopy(Matrix.translate(x, y));

        this._optionsChange();
        return this;
    };

    Transformation.prototype.scale = function scale (scaleX, scaleY, origin) {
        if ( scaleY === void 0 ) scaleY = scaleX;
        if ( origin === void 0 ) origin = null;

        var originPoint = origin;

        if (originPoint) {
            originPoint = Point.create(originPoint);
            this._matrix = this._matrix.multiplyCopy(Matrix.translate(originPoint.x, originPoint.y));
        }

        this._matrix = this._matrix.multiplyCopy(Matrix.scale(scaleX, scaleY));

        if (originPoint) {
            this._matrix = this._matrix.multiplyCopy(Matrix.translate(-originPoint.x, -originPoint.y));
        }

        this._optionsChange();
        return this;
    };

    Transformation.prototype.rotate = function rotate (angle, origin) {
        var originPoint = Point.create(origin) || Point.ZERO;

        this._matrix = this._matrix.multiplyCopy(Matrix.rotate(angle, originPoint.x, originPoint.y));

        this._optionsChange();
        return this;
    };

    Transformation.prototype.multiply = function multiply (transformation) {
        var matrix = toMatrix(transformation);

        this._matrix = this._matrix.multiplyCopy(matrix);

        this._optionsChange();
        return this;
    };

    Transformation.prototype.matrix = function matrix (value) {
        if (value) {
            this._matrix = value;
            this._optionsChange();
            return this;
        }

        return this._matrix;
    };

    Transformation.prototype._optionsChange = function _optionsChange () {
        this.optionsChange({
            field: "transform",
            value: this
        });
    };

    return Transformation;
}(Class));

ObserversMixin.extend(Transformation.prototype);

function transform$1(matrix) {
    if (matrix === null) {
        return null;
    }

    if (matrix instanceof Transformation) {
        return matrix;
    }

    return new Transformation(matrix);
}

var MAX_INTERVAL = 45;
var pow$1 = Math.pow;

var Arc = (function (Class$$1) {
    function Arc(center, options) {
        if ( center === void 0 ) center = new Point();
        if ( options === void 0 ) options = {};

        Class$$1.call(this);

        this.setCenter(center);

        this.radiusX = options.radiusX;
        this.radiusY = options.radiusY || options.radiusX;
        this.startAngle = options.startAngle;
        this.endAngle = options.endAngle;
        this.anticlockwise = options.anticlockwise || false;
        this.xRotation = options.xRotation;
    }

    if ( Class$$1 ) Arc.__proto__ = Class$$1;
    Arc.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Arc.prototype.constructor = Arc;

    Arc.prototype.clone = function clone () {
        return new Arc(this.center, {
            radiusX: this.radiusX,
            radiusY: this.radiusY,
            startAngle: this.startAngle,
            endAngle: this.endAngle,
            anticlockwise: this.anticlockwise
        });
    };

    Arc.prototype.setCenter = function setCenter (value) {
        this._observerField("center", Point.create(value));
        this.geometryChange();
        return this;
    };

    Arc.prototype.getCenter = function getCenter () {
        return this.center;
    };

    Arc.prototype.pointAt = function pointAt (angle) {
        var center = this.center;
        var radian = rad(angle);

        return new Point(
            center.x + this.radiusX * Math.cos(radian),
            center.y + this.radiusY * Math.sin(radian)
        );
    };

    Arc.prototype.curvePoints = function curvePoints () {
        var this$1 = this;

        var startAngle = this.startAngle;
        var dir = this.anticlockwise ? -1 : 1;
        var curvePoints = [ this.pointAt(startAngle) ];
        var interval = this._arcInterval();
        var intervalAngle = interval.endAngle - interval.startAngle;
        var subIntervalsCount = Math.ceil(intervalAngle / MAX_INTERVAL);
        var subIntervalAngle = intervalAngle / subIntervalsCount;
        var currentAngle = startAngle;
        var transformation;
        if (this.xRotation) {
            transformation = transform$1().rotate(this.xRotation, this.center);
        }

        for (var i = 1; i <= subIntervalsCount; i++) {
            var nextAngle = currentAngle + dir * subIntervalAngle;
            var points = this$1._intervalCurvePoints(currentAngle, nextAngle, transformation);

            curvePoints.push(points.cp1, points.cp2, points.p2);
            currentAngle = nextAngle;
        }

        return curvePoints;
    };

    Arc.prototype.bbox = function bbox (matrix) {
        var this$1 = this;

        var interval = this._arcInterval();
        var startAngle = interval.startAngle;
        var endAngle = interval.endAngle;
        var extremeAngles = ellipseExtremeAngles(this.center, this.radiusX, this.radiusY, matrix);
        var extremeX = deg(extremeAngles.x);
        var extremeY = deg(extremeAngles.y);
        var endPoint = this.pointAt(endAngle).transformCopy(matrix);
        var currentAngleX = bboxStartAngle(extremeX, startAngle);
        var currentAngleY = bboxStartAngle(extremeY, startAngle);
        var currentPoint = this.pointAt(startAngle).transformCopy(matrix);
        var minPoint = Point.min(currentPoint, endPoint);
        var maxPoint = Point.max(currentPoint, endPoint);

        while (currentAngleX < endAngle || currentAngleY < endAngle) {
            var currentPointX = (void 0);
            if (currentAngleX < endAngle) {
                currentPointX = this$1.pointAt(currentAngleX).transformCopy(matrix);
                currentAngleX += 90;
            }

            var currentPointY = (void 0);
            if (currentAngleY < endAngle) {
                currentPointY = this$1.pointAt(currentAngleY).transformCopy(matrix);
                currentAngleY += 90;
            }

            currentPoint = new Point(currentPointX.x, currentPointY.y);
            minPoint = Point.min(minPoint, currentPoint);
            maxPoint = Point.max(maxPoint, currentPoint);
        }

        return Rect.fromPoints(minPoint, maxPoint);
    };

    Arc.prototype._arcInterval = function _arcInterval () {
        var ref = this;
        var startAngle = ref.startAngle;
        var endAngle = ref.endAngle;
        var anticlockwise = ref.anticlockwise;

        if (anticlockwise) {
            var oldStart = startAngle;
            startAngle = endAngle;
            endAngle = oldStart;
        }

        if (startAngle > endAngle || (anticlockwise && startAngle === endAngle)) {
            endAngle += 360;
        }

        return {
            startAngle: startAngle,
            endAngle: endAngle
        };
    };

    Arc.prototype._intervalCurvePoints = function _intervalCurvePoints (startAngle, endAngle, transformation) {
        var p1 = this.pointAt(startAngle);
        var p2 = this.pointAt(endAngle);
        var p1Derivative = this._derivativeAt(startAngle);
        var p2Derivative = this._derivativeAt(endAngle);
        var t = (rad(endAngle) - rad(startAngle)) / 3;
        var cp1 = new Point(p1.x + t * p1Derivative.x, p1.y + t * p1Derivative.y);
        var cp2 = new Point(p2.x - t * p2Derivative.x, p2.y - t * p2Derivative.y);
        if (transformation) {
            p1.transform(transformation);
            p2.transform(transformation);
            cp1.transform(transformation);
            cp2.transform(transformation);
        }

        return {
            p1: p1,
            cp1: cp1,
            cp2: cp2,
            p2: p2
        };
    };

    Arc.prototype._derivativeAt = function _derivativeAt (angle) {
        var radian = rad(angle);

        return new Point(-this.radiusX * Math.sin(radian), this.radiusY * Math.cos(radian));
    };

    Arc.prototype.containsPoint = function containsPoint (point) {
        var interval = this._arcInterval();
        var intervalAngle = interval.endAngle - interval.startAngle;
        var ref = this;
        var center = ref.center;
        var radiusX = ref.radiusX;
        var radiusY = ref.radiusY;
        var distance = center.distanceTo(point);
        var angleRad = Math.atan2(point.y - center.y, point.x - center.x);
        var pointRadius = (radiusX * radiusY) /
            Math.sqrt(pow$1(radiusX, 2) * pow$1(Math.sin(angleRad), 2) + pow$1(radiusY, 2) * pow$1(Math.cos(angleRad), 2));
        var startPoint = this.pointAt(this.startAngle).round(PRECISION);
        var endPoint = this.pointAt(this.endAngle).round(PRECISION);
        var intersection = lineIntersection(center, point.round(PRECISION), startPoint, endPoint);
        var containsPoint;

        if (intervalAngle < 180) {
            containsPoint = intersection && closeOrLess(center.distanceTo(intersection), distance) && closeOrLess(distance, pointRadius);
        } else {
            var angle = calculateAngle(center.x, center.y, radiusX, radiusY, point.x, point.y);
            if (angle !== 360) {
                angle = (360 + angle) % 360;
            }

            var inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;
            containsPoint = (inAngleRange && closeOrLess(distance, pointRadius)) || (!inAngleRange && (!intersection || intersection.equals(point)));
        }
        return containsPoint;
    };

    Arc.prototype._isOnPath = function _isOnPath (point, width) {
        var interval = this._arcInterval();
        var center = this.center;
        var angle = calculateAngle(center.x, center.y, this.radiusX, this.radiusY, point.x, point.y);
        if (angle !== 360) {
            angle = (360 + angle) % 360;
        }

        var inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;

        return inAngleRange && this.pointAt(angle).distanceTo(point) <= width;
    };

    Arc.fromPoints = function fromPoints (start, end, rx, ry, largeArc, swipe, rotation) {// eslint-disable-line max-params
        var arcParameters = normalizeArcParameters({
            x1: start.x,
            y1: start.y,
            x2: end.x,
            y2: end.y,
            rx: rx,
            ry: ry,
            largeArc: largeArc,
            swipe: swipe,
            rotation: rotation
        });

        return new Arc(arcParameters.center, {
            startAngle: arcParameters.startAngle,
            endAngle: arcParameters.endAngle,
            radiusX: arcParameters.radiusX,
            radiusY: arcParameters.radiusY,
            xRotation: arcParameters.xRotation,
            anticlockwise: swipe === 0
        });
    };

    return Arc;
}(Class));

defineAccessors(Arc.prototype, [ "radiusX", "radiusY", "startAngle", "endAngle", "anticlockwise" ]);
ObserversMixin.extend(Arc.prototype);

function calculateAngle(cx, cy, rx, ry, x, y) {
    var cos = round((x - cx) / rx, 3);
    var sin = round((y - cy) / ry, 3);

    return round(deg(Math.atan2(sin, cos)));
}

function normalizeArcParameters(parameters) {
    var x1 = parameters.x1;
    var y1 = parameters.y1;
    var x2 = parameters.x2;
    var y2 = parameters.y2;
    var rx = parameters.rx;
    var ry = parameters.ry;
    var largeArc = parameters.largeArc;
    var swipe = parameters.swipe;
    var rotation = parameters.rotation; if ( rotation === void 0 ) rotation = 0;

    var radians = rad(rotation);
    var cosine = Math.cos(radians);
    var sine = Math.sin(radians);

    var xT = cosine * (x1 - x2) / 2 + sine * (y1 - y2) / 2;
    var yT = -sine * (x1 - x2) / 2 + cosine * (y1 - y2) / 2;

    var sign = largeArc !== swipe ? 1 : -1;

    var xt2 = Math.pow(xT, 2);
    var yt2 = Math.pow(yT, 2);
    var rx2 = Math.pow(rx, 2);
    var ry2 = Math.pow(ry, 2);

    var delta = xt2 / rx2 + yt2 / ry2;

    if (delta > 1) {
        delta = Math.sqrt(xt2 / rx2 + yt2 / ry2);
        rx = delta * rx;
        rx2 = Math.pow(rx, 2);

        ry = delta * ry;
        ry2 = Math.pow(ry, 2);
    }

    var constT = sign * Math.sqrt((rx2 * ry2 - rx2 * yt2 - ry2 * xt2) / (rx2 * yt2 + ry2 * xt2));
    // due to rounding errors the value could become NaN even after radii correction
    if (isNaN(constT)) {
        constT = 0;
    }

    var cxT = constT * (rx * yT) / ry;
    var cyT = - constT * (ry * xT) / rx;

    var cx = cosine * cxT - sine * cyT + (x1 + x2) / 2;
    var cy = sine * cxT + cosine * cyT + (y1 + y2) / 2;


    var uX = (xT - cxT) / rx;
    var uY = (yT - cyT) / ry;
    var vX = -(xT + cxT) / rx;
    var vY = -(yT + cyT) / ry;

    var startAngle = (uY >= 0 ? 1 : -1) * deg(Math.acos(uX / Math.sqrt(uX * uX + uY * uY)));

    var angleCosine = round((uX * vX + uY * vY) / (Math.sqrt(uX * uX + uY * uY) * Math.sqrt(vX * vX + vY * vY)), 10);
    var angle = (uX * vY - uY * vX >= 0 ? 1 : -1) * deg(Math.acos(angleCosine));

    if (!swipe && angle > 0) {
        angle -= 360;
    }

    if (swipe && angle < 0) {
        angle += 360;
    }
    var endAngle = startAngle + angle;
    var signEndAngle = endAngle >= 0 ? 1 : -1;
    endAngle = (Math.abs(endAngle) % 360) * signEndAngle;

    return {
        center: new Point(cx, cy),
        startAngle: startAngle,
        endAngle: endAngle,
        radiusX: rx,
        radiusY: ry,
        xRotation: rotation
    };
}

function bboxStartAngle(angle, start) {
    var startAngle = angle;

    while (startAngle < start) {
        startAngle += 90;
    }

    return startAngle;
}

function pointAccessor(name) {
    var fieldName = "_" + name;
    return function(value) {
        if (defined(value)) {
            this._observerField(fieldName, Point.create(value));
            this.geometryChange();
            return this;
        }

        return this[fieldName];
    };
}

function definePointAccessors(fn, names) {
    for (var i = 0; i < names.length; i++) {
        fn[names[i]] = pointAccessor(names[i]);
    }
}

function isOutOfEndPoint(endPoint, controlPoint, point) {
    var angle = deg(Math.atan2(controlPoint.y - endPoint.y, controlPoint.x - endPoint.x));
    var rotatedPoint = point.transformCopy(transform$1().rotate(-angle, endPoint));

    return rotatedPoint.x < endPoint.x;
}

function calculateCurveAt(t, field, points) {
    var t1 = 1 - t;
    return Math.pow(t1, 3) * points[0][field] +
        3 * Math.pow(t1, 2) * t * points[1][field] +
        3 * Math.pow(t, 2) * t1 * points[2][field] +
        Math.pow(t, 3) * points[3][field];
}

function toCubicPolynomial(points, field) {
    return [ -points[0][field] + 3 * points[1][field] - 3 * points[2][field] + points[3][field],
        3 * (points[0][field] - 2 * points[1][field] + points[2][field]),
        3 * (-points[0][field] + points[1][field]),
        points[0][field]
    ];
}

var ComplexNumber = (function (Class$$1) {
    function ComplexNumber(real, img) {
        if ( real === void 0 ) real = 0;
        if ( img === void 0 ) img = 0;

        Class$$1.call(this);

        this.real = real;
        this.img = img;
    }

    if ( Class$$1 ) ComplexNumber.__proto__ = Class$$1;
    ComplexNumber.prototype = Object.create( Class$$1 && Class$$1.prototype );
    ComplexNumber.prototype.constructor = ComplexNumber;

    ComplexNumber.prototype.add = function add (cNumber) {
        return new ComplexNumber(round(this.real + cNumber.real, PRECISION), round(this.img + cNumber.img, PRECISION));
    };

    ComplexNumber.prototype.addConstant = function addConstant (value) {
        return new ComplexNumber(this.real + value, this.img);
    };

    ComplexNumber.prototype.negate = function negate () {
        return new ComplexNumber(-this.real, -this.img);
    };

    ComplexNumber.prototype.multiply = function multiply (cNumber) {
        return new ComplexNumber(this.real * cNumber.real - this.img * cNumber.img,
            this.real * cNumber.img + this.img * cNumber.real);
    };

    ComplexNumber.prototype.multiplyConstant = function multiplyConstant (value) {
        return new ComplexNumber(this.real * value, this.img * value);
    };

    ComplexNumber.prototype.nthRoot = function nthRoot (n) {
        var rad$$1 = Math.atan2(this.img, this.real);
        var r = Math.sqrt(Math.pow(this.img, 2) + Math.pow(this.real, 2));
        var nthR = Math.pow(r, 1 / n);

        return new ComplexNumber(nthR * Math.cos(rad$$1 / n), nthR * Math.sin(rad$$1 / n)); //Moivre's formula
    };

    ComplexNumber.prototype.equals = function equals (cNumber) {
        return this.real === cNumber.real && this.img === cNumber.img;
    };

    ComplexNumber.prototype.isReal = function isReal () {
        return this.img === 0;
    };

    return ComplexNumber;
}(Class));

function numberSign(x) {
    return x < 0 ? -1 : 1;
}

function solveQuadraticEquation(a, b, c) {
    var squareRoot = Math.sqrt(Math.pow(b, 2) - 4 * a * c);
    return [
        (-b + squareRoot) / (2 * a),
        (-b - squareRoot) / (2 * a)
    ];
}

//Cardano's formula
function solveCubicEquation(a, b, c, d) {
    if (a === 0) {
        return solveQuadraticEquation(b, c, d);
    }

    var p = (3 * a * c - Math.pow(b, 2)) / (3 * Math.pow(a, 2));
    var q = (2 * Math.pow(b, 3) - 9 * a * b * c + 27 * Math.pow(a, 2) * d) / (27 * Math.pow(a, 3));
    var Q = Math.pow(p / 3, 3) + Math.pow(q / 2, 2);
    var i = new ComplexNumber(0,1);
    var b3a = -b / (3 * a);
    var x1, x2, y1, y2, y3, z1, z2;

    if (Q < 0) {
        x1 = new ComplexNumber(-q / 2, Math.sqrt(-Q)).nthRoot(3);
        x2 = new ComplexNumber(-q / 2, - Math.sqrt(-Q)).nthRoot(3);
    } else {
        x1 = -q / 2 + Math.sqrt(Q);
        x1 = new ComplexNumber(numberSign(x1) * Math.pow(Math.abs(x1), 1 / 3));
        x2 = -q / 2 - Math.sqrt(Q);
        x2 = new ComplexNumber(numberSign(x2) * Math.pow(Math.abs(x2), 1 / 3));
    }

    y1 = x1.add(x2);

    z1 = x1.add(x2).multiplyConstant(-1 / 2);
    z2 = x1.add(x2.negate()).multiplyConstant(Math.sqrt(3) / 2);

    y2 = z1.add(i.multiply(z2));
    y3 = z1.add(i.negate().multiply(z2));

    var result = [];

    if (y1.isReal()) {
        result.push(round(y1.real + b3a, PRECISION));
    }
    if (y2.isReal()) {
        result.push(round(y2.real + b3a, PRECISION));
    }
    if (y3.isReal()) {
        result.push(round(y3.real + b3a, PRECISION));
    }

    return result;
}

function hasRootsInRange(points, point, field, rootField, range) {
    var polynomial = toCubicPolynomial(points, rootField);
    var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point[rootField]);
    var intersection;

    for (var idx = 0; idx < roots.length; idx++) {
        if (0 <= roots[idx] && roots[idx] <= 1) {
            intersection = calculateCurveAt(roots[idx], field, points);
            if (Math.abs(intersection - point[field]) <= range) {
                return true;
            }
        }
    }
}

function curveIntersectionsCount(points, point, bbox) {
    var polynomial = toCubicPolynomial(points, "x");
    var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point.x);
    var rayIntersection, intersectsRay;
    var count = 0;
    for (var i = 0; i < roots.length; i++) {
        rayIntersection = calculateCurveAt(roots[i], "y", points);
        intersectsRay = close$1(rayIntersection, point.y) || rayIntersection > point.y;
        if (intersectsRay && (((roots[i] === 0 || roots[i] === 1) && bbox.bottomRight().x > point.x) || (0 < roots[i] && roots[i] < 1))) {
            count++;
        }
    }

    return count;
}

function lineIntersectionsCount(a, b, point) {
    var intersects;
    if (a.x !== b.x) {
        var minX = Math.min(a.x, b.x);
        var maxX = Math.max(a.x, b.x);
        var minY = Math.min(a.y, b.y);
        var maxY = Math.max(a.y, b.y);
        var inRange = minX <= point.x && point.x < maxX;

        if (minY === maxY) {
            intersects = point.y <= minY && inRange;
        } else {
            intersects = inRange && (((maxY - minY) * ((a.x - b.x) * (a.y - b.y) > 0 ? point.x - minX : maxX - point.x)) / (maxX - minX) + minY - point.y) >= 0;
        }
    }

    return intersects ? 1 : 0;
}

var Segment = (function (Class$$1) {
    function Segment(anchor, controlIn, controlOut) {
        Class$$1.call(this);

        this.anchor(anchor || new Point());
        this.controlIn(controlIn);
        this.controlOut(controlOut);
    }

    if ( Class$$1 ) Segment.__proto__ = Class$$1;
    Segment.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Segment.prototype.constructor = Segment;

    Segment.prototype.bboxTo = function bboxTo (toSegment, matrix) {
        var segmentAnchor = this.anchor().transformCopy(matrix);
        var toSegmentAnchor = toSegment.anchor().transformCopy(matrix);
        var rect;

        if (this.controlOut() && toSegment.controlIn()) {
            rect = this._curveBoundingBox(
                segmentAnchor, this.controlOut().transformCopy(matrix),
                toSegment.controlIn().transformCopy(matrix), toSegmentAnchor
            );
        } else {
            rect = this._lineBoundingBox(segmentAnchor, toSegmentAnchor);
        }

        return rect;
    };

    Segment.prototype._lineBoundingBox = function _lineBoundingBox (p1, p2) {
        return Rect.fromPoints(p1, p2);
    };

    Segment.prototype._curveBoundingBox = function _curveBoundingBox (p1, cp1, cp2, p2) {
        var points = [ p1, cp1, cp2, p2 ];
        var extremesX = this._curveExtremesFor(points, "x");
        var extremesY = this._curveExtremesFor(points, "y");
        var xLimits = arrayLimits([ extremesX.min, extremesX.max, p1.x, p2.x ]);
        var yLimits = arrayLimits([ extremesY.min, extremesY.max, p1.y, p2.y ]);

        return Rect.fromPoints(new Point(xLimits.min, yLimits.min), new Point(xLimits.max, yLimits.max));
    };

    Segment.prototype._curveExtremesFor = function _curveExtremesFor (points, field) {
        var extremes = this._curveExtremes(
            points[0][field], points[1][field],
            points[2][field], points[3][field]
        );

        return {
            min: calculateCurveAt(extremes.min, field, points),
            max: calculateCurveAt(extremes.max, field, points)
        };
    };

    Segment.prototype._curveExtremes = function _curveExtremes (x1, x2, x3, x4) {
        var a = x1 - 3 * x2 + 3 * x3 - x4;
        var b = - 2 * (x1 - 2 * x2 + x3);
        var c = x1 - x2;
        var sqrt = Math.sqrt(b * b - 4 * a * c);
        var t1 = 0;
        var t2 = 1;

        if (a === 0) {
            if (b !== 0) {
                t1 = t2 = -c / b;
            }
        } else if (!isNaN(sqrt)) {
            t1 = (- b + sqrt) / (2 * a);
            t2 = (- b - sqrt) / (2 * a);
        }

        var min = Math.max(Math.min(t1, t2), 0);
        if (min < 0 || min > 1) {
            min = 0;
        }

        var max = Math.min(Math.max(t1, t2), 1);
        if (max > 1 || max < 0) {
            max = 1;
        }

        return {
            min: min,
            max: max
        };
    };

    Segment.prototype._intersectionsTo = function _intersectionsTo (segment, point) {
        var intersectionsCount;
        if (this.controlOut() && segment.controlIn()) {
            intersectionsCount = curveIntersectionsCount([ this.anchor(), this.controlOut(), segment.controlIn(), segment.anchor() ], point, this.bboxTo(segment));
        } else {
            intersectionsCount = lineIntersectionsCount(this.anchor(), segment.anchor(), point);
        }
        return intersectionsCount;
    };

    Segment.prototype._isOnCurveTo = function _isOnCurveTo (segment, point, width, endSegment) {
        var bbox = this.bboxTo(segment).expand(width, width);
        if (bbox.containsPoint(point)) {
            var p1 = this.anchor();
            var p2 = this.controlOut();
            var p3 = segment.controlIn();
            var p4 = segment.anchor();

            if (endSegment === "start" && p1.distanceTo(point) <= width) {
                return !isOutOfEndPoint(p1, p2, point);
            } else if (endSegment === "end" && p4.distanceTo(point) <= width) {
                return !isOutOfEndPoint(p4, p3, point);
            }

            //the approach is not entirely correct but is close and the alternatives are solving a 6th degree polynomial or testing the segment points
            var points = [ p1, p2, p3, p4 ];
            if (hasRootsInRange(points, point, "x", "y", width) || hasRootsInRange(points, point, "y", "x", width)) {
                return true;
            }
            var rotation = transform$1().rotate(45, point);
            var rotatedPoints = [ p1.transformCopy(rotation), p2.transformCopy(rotation), p3.transformCopy(rotation), p4.transformCopy(rotation) ];
            return hasRootsInRange(rotatedPoints, point, "x", "y", width) || hasRootsInRange(rotatedPoints, point, "y", "x", width);
        }
    };

    Segment.prototype._isOnLineTo = function _isOnLineTo (segment, point, width) {
        var p1 = this.anchor();
        var p2 = segment.anchor();
        var angle = deg(Math.atan2(p2.y - p1.y, p2.x - p1.x));
        var rect = new Rect([ p1.x, p1.y - width / 2 ], [ p1.distanceTo(p2), width ]);
        return rect.containsPoint(point.transformCopy(transform$1().rotate(-angle, p1)));
    };

    Segment.prototype._isOnPathTo = function _isOnPathTo (segment, point, width, endSegment) {
        var isOnPath;
        if (this.controlOut() && segment.controlIn()) {
            isOnPath = this._isOnCurveTo(segment, point, width / 2, endSegment);
        } else {
            isOnPath = this._isOnLineTo(segment, point, width);
        }
        return isOnPath;
    };

    return Segment;
}(Class));

definePointAccessors(Segment.prototype, [ "anchor", "controlIn", "controlOut" ]);
ObserversMixin.extend(Segment.prototype);

function arrayLimits(arr) {
    var length = arr.length;
    var min = MAX_NUM;
    var max = MIN_NUM;

    for (var i = 0; i < length; i ++) {
        max = Math.max(max, arr[i]);
        min = Math.min(min, arr[i]);
    }

    return {
        min: min,
        max: max
    };
}



var geometry = Object.freeze({
	Circle: Circle,
	Arc: Arc,
	Rect: Rect,
	Point: Point,
	Segment: Segment,
	Matrix: Matrix,
	Size: Size,
	toMatrix: toMatrix,
	Transformation: Transformation,
	transform: transform$1
});

var matrixRegexp = /matrix\((.*)\)/;

function parseMatrix(matrixString) {
    var match = matrixString.match(matrixRegexp);
    if (match === null || match.length !== 2) {
        return Matrix.unit();
    }

    var members = match[1].split(',').map(function (x) { return parseFloat(x); });
    return new (Function.prototype.bind.apply( Matrix, [ null ].concat( members) ));
}

function transformMatrix(element) {
    var transform$$1 = getComputedStyle(element).transform;

    if (transform$$1 === 'none') {
        return Matrix.unit();
    }

    return parseMatrix(transform$$1);
}

function elementScale(element) {
    if (!element) {
        return Matrix.unit();
    }

    var matrix = transformMatrix(element);
    var parent = element.parentElement;
    while (parent) {
        var parentMatrix = transformMatrix(parent);
        matrix = matrix.multiplyCopy(parentMatrix);
        parent = parent.parentElement;
    }

    matrix.b = matrix.c = matrix.e = matrix.f = 0;
    return matrix;
}

var LRUCache = (function (Class$$1) {
    function LRUCache(size) {
        Class$$1.call(this);

        this._size = size;
        this._length = 0;
        this._map = {};
    }

    if ( Class$$1 ) LRUCache.__proto__ = Class$$1;
    LRUCache.prototype = Object.create( Class$$1 && Class$$1.prototype );
    LRUCache.prototype.constructor = LRUCache;

    LRUCache.prototype.put = function put (key, value) {
        var map = this._map;
        var entry = { key: key, value: value };

        map[key] = entry;

        if (!this._head) {
            this._head = this._tail = entry;
        } else {
            this._tail.newer = entry;
            entry.older = this._tail;
            this._tail = entry;
        }

        if (this._length >= this._size) {
            map[this._head.key] = null;
            this._head = this._head.newer;
            this._head.older = null;
        } else {
            this._length++;
        }
    };

    LRUCache.prototype.get = function get (key) {
        var entry = this._map[key];

        if (entry) {
            if (entry === this._head && entry !== this._tail) {
                this._head = entry.newer;
                this._head.older = null;
            }

            if (entry !== this._tail) {
                if (entry.older) {
                    entry.older.newer = entry.newer;
                    entry.newer.older = entry.older;
                }

                entry.older = this._tail;
                entry.newer = null;

                this._tail.newer = entry;
                this._tail = entry;
            }

            return entry.value;
        }
    };

    return LRUCache;
}(Class));

var REPLACE_REGEX = /\r?\n|\r|\t/g;
var SPACE = ' ';

function normalizeText(text) {
    return String(text).replace(REPLACE_REGEX, SPACE);
}

function objectKey(object) {
    var parts = [];
    for (var key in object) {
        parts.push(key + object[key]);
    }

    return parts.sort().join("");
}

// Computes FNV-1 hash
// See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
function hashKey(str) {
    // 32-bit FNV-1 offset basis
    // See http://isthe.com/chongo/tech/comp/fnv/#FNV-param
    var hash = 0x811C9DC5;

    for (var i = 0; i < str.length; ++i) {
        hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);
        hash ^= str.charCodeAt(i);
    }

    return hash >>> 0;
}

function zeroSize() {
    return { width: 0, height: 0, baseline: 0 };
}

var DEFAULT_OPTIONS = {
    baselineMarkerSize: 1
};

var defaultMeasureBox;

if (typeof document !== "undefined") {
    defaultMeasureBox = document.createElement("div");
    defaultMeasureBox.style.cssText = "position: absolute !important; top: -4000px !important; width: auto !important; height: auto !important;" +
              "padding: 0 !important; margin: 0 !important; border: 0 !important;" +
              "line-height: normal !important; visibility: hidden !important; white-space: pre!important;";
}

var TextMetrics = (function (Class$$1) {
    function TextMetrics(options) {
        Class$$1.call(this);

        this._cache = new LRUCache(1000);
        this.options = Object.assign({}, DEFAULT_OPTIONS, options);
    }

    if ( Class$$1 ) TextMetrics.__proto__ = Class$$1;
    TextMetrics.prototype = Object.create( Class$$1 && Class$$1.prototype );
    TextMetrics.prototype.constructor = TextMetrics;

    TextMetrics.prototype.measure = function measure (text, style, options) {
        if ( options === void 0 ) options = {};

        if (!text) {
            return zeroSize();
        }

        var styleKey = objectKey(style);
        var cacheKey = hashKey(text + styleKey);
        var cachedResult = this._cache.get(cacheKey);

        if (cachedResult) {
            return cachedResult;
        }

        var size = zeroSize();
        var measureBox = options.box || defaultMeasureBox;
        var baselineMarker = this._baselineMarker().cloneNode(false);

        for (var key in style) {
            var value = style[key];
            if (typeof value !== "undefined") {
                measureBox.style[key] = value;
            }
        }

        var textStr = options.normalizeText !== false ? normalizeText(text) : String(text);

        measureBox.textContent = textStr;
        measureBox.appendChild(baselineMarker);
        document.body.appendChild(measureBox);

        if (textStr.length) {
            size.width = measureBox.offsetWidth - this.options.baselineMarkerSize;
            size.height = measureBox.offsetHeight;
            size.baseline = baselineMarker.offsetTop + this.options.baselineMarkerSize;
        }

        if (size.width > 0 && size.height > 0) {
            this._cache.put(cacheKey, size);
        }

        measureBox.parentNode.removeChild(measureBox);

        return size;
    };

    TextMetrics.prototype._baselineMarker = function _baselineMarker () {
        var marker = document.createElement("div");
        marker.style.cssText = "display: inline-block; vertical-align: baseline;width: " +
            this.options.baselineMarkerSize + "px; height: " + this.options.baselineMarkerSize + "px;overflow: hidden;";

        return marker;
    };

    return TextMetrics;
}(Class));

TextMetrics.current = new TextMetrics();

function measureText(text, style, measureBox) {
    return TextMetrics.current.measure(text, style, measureBox);
}



var util = Object.freeze({
	append: append$1$1,
	arabicToRoman: arabicToRoman,
	createPromise: createPromise,
	defined: defined,
	definitionId: definitionId,
	deg: deg,
	encodeBase64: encodeBase64,
	eventCoordinates: eventCoordinates,
	eventElement: eventElement,
	isTransparent: isTransparent,
	last: last,
	limitValue: limitValue,
	mergeSort: mergeSort,
	promiseAll: promiseAll,
	rad: rad,
	round: round,
	valueOrDefault: valueOrDefault,
	bindEvents: bindEvents,
	elementOffset: elementOffset,
	elementSize: elementSize,
	elementStyles: elementStyles,
	unbindEvents: unbindEvents,
	elementPadding: elementPadding,
	elementScale: elementScale,
	DEG_TO_RAD: DEG_TO_RAD,
	MAX_NUM: MAX_NUM,
	MIN_NUM: MIN_NUM,
	LRUCache: LRUCache,
	TextMetrics: TextMetrics,
	measureText: measureText,
	objectKey: objectKey,
	hashKey: hashKey,
	normalizeText: normalizeText
});

var toString$1 = {}.toString;

var OptionsStore = (function (Class$$1) {
    function OptionsStore(options, prefix) {
        var this$1 = this;
        if ( prefix === void 0 ) prefix = "";

        Class$$1.call(this);

        this.prefix = prefix;

        for (var field in options) {
            var member = options[field];
            member = this$1._wrap(member, field);
            this$1[field] = member;
        }
    }

    if ( Class$$1 ) OptionsStore.__proto__ = Class$$1;
    OptionsStore.prototype = Object.create( Class$$1 && Class$$1.prototype );
    OptionsStore.prototype.constructor = OptionsStore;

    OptionsStore.prototype.get = function get (field) {
        var parts = field.split(".");
        var result = this;

        while (parts.length && result) {
            var part = parts.shift();
            result = result[part];
        }

        return result;
    };

    OptionsStore.prototype.set = function set (field, value) {
        var current = this.get(field);

        if (current !== value) {
            this._set(field, this._wrap(value, field));
            this.optionsChange({
                field: this.prefix + field,
                value: value
            });
        }
    };

    OptionsStore.prototype._set = function _set (field, value) {
        var this$1 = this;

        var composite = field.indexOf(".") >= 0;
        var parentObj = this;
        var fieldName = field;

        if (composite) {
            var parts = fieldName.split(".");
            var prefix = this.prefix;

            while (parts.length > 1) {
                fieldName = parts.shift();
                prefix += fieldName + ".";

                var obj = parentObj[fieldName];

                if (!obj) {
                    obj = new OptionsStore({}, prefix);
                    obj.addObserver(this$1);
                    parentObj[fieldName] = obj;
                }
                parentObj = obj;
            }
            fieldName = parts[0];
        }

        parentObj._clear(fieldName);
        parentObj[fieldName] = value;
    };

    OptionsStore.prototype._clear = function _clear (field) {
        var current = this[field];
        if (current && current.removeObserver) {
            current.removeObserver(this);
        }
    };

    OptionsStore.prototype._wrap = function _wrap (object, field) {
        var type = toString$1.call(object);
        var wrapped = object;

        if (wrapped !== null && defined(wrapped) && type === "[object Object]") {
            if (!(object instanceof OptionsStore) && !(object instanceof Class$$1)) {
                wrapped = new OptionsStore(wrapped, this.prefix + field + ".");
            }

            wrapped.addObserver(this);
        }

        return wrapped;
    };

    return OptionsStore;
}(Class));

ObserversMixin.extend(OptionsStore.prototype);

var Element$1 = (function (Class$$1) {
    function Element(options) {
        Class$$1.call(this);

        this._initOptions(options);
    }

    if ( Class$$1 ) Element.__proto__ = Class$$1;
    Element.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Element.prototype.constructor = Element;

    Element.prototype._initOptions = function _initOptions (options) {
        if ( options === void 0 ) options = {};

        var clip = options.clip;
        var transform = options.transform;

        if (transform) {
            options.transform = transform$1(transform);
        }

        if (clip && !clip.id) {
            clip.id = definitionId();
        }

        this.options = new OptionsStore(options);
        this.options.addObserver(this);
    };

    Element.prototype.transform = function transform (value) {
        if (defined(value)) {
            this.options.set("transform", transform$1(value));
        } else {
            return this.options.get("transform");
        }
    };

    Element.prototype.parentTransform = function parentTransform () {
        var element = this;
        var parentMatrix;

        while (element.parent) {
            element = element.parent;
            var transformation = element.transform();
            if (transformation) {
                parentMatrix = transformation.matrix().multiplyCopy(parentMatrix || Matrix.unit());
            }
        }

        if (parentMatrix) {
            return transform$1(parentMatrix);
        }
    };

    Element.prototype.currentTransform = function currentTransform (parentTransform) {
        if ( parentTransform === void 0 ) parentTransform = this.parentTransform();

        var elementTransform = this.transform();
        var elementMatrix = toMatrix(elementTransform);

        var parentMatrix = toMatrix(parentTransform);
        var combinedMatrix;

        if (elementMatrix && parentMatrix) {
            combinedMatrix = parentMatrix.multiplyCopy(elementMatrix);
        } else {
            combinedMatrix = elementMatrix || parentMatrix;
        }

        if (combinedMatrix) {
            return transform$1(combinedMatrix);
        }
    };

    Element.prototype.visible = function visible (value) {
        if (defined(value)) {
            this.options.set("visible", value);
            return this;
        }

        return this.options.get("visible") !== false;
    };

    Element.prototype.clip = function clip (value) {
        var options = this.options;
        if (defined(value)) {
            if (value && !value.id) {
                value.id = definitionId();
            }
            options.set("clip", value);
            return this;
        }

        return options.get("clip");
    };

    Element.prototype.opacity = function opacity (value) {
        if (defined(value)) {
            this.options.set("opacity", value);
            return this;
        }

        return valueOrDefault(this.options.get("opacity"), 1);
    };

    Element.prototype.clippedBBox = function clippedBBox (transformation) {
        var bbox = this._clippedBBox(transformation);
        if (bbox) {
            var clip = this.clip();
            return clip ? Rect.intersect(bbox, clip.bbox(transformation)) : bbox;
        }
    };

    Element.prototype.containsPoint = function containsPoint (point, parentTransform) {
        if (this.visible()) {
            var transform = this.currentTransform(parentTransform);
            var transformedPoint = point;
            if (transform) {
                transformedPoint = point.transformCopy(transform.matrix().invert());
            }
            return (this._hasFill() && this._containsPoint(transformedPoint)) || (this._isOnPath && this._hasStroke() && this._isOnPath(transformedPoint));
        }
        return false;
    };

    Element.prototype._hasFill = function _hasFill () {
        var fill = this.options.fill;
        return fill && !isTransparent(fill.color);
    };

    Element.prototype._hasStroke = function _hasStroke () {
        var stroke = this.options.stroke;
        return stroke && stroke.width > 0 && !isTransparent(stroke.color);
    };

    Element.prototype._clippedBBox = function _clippedBBox (transformation) {
        return this.bbox(transformation);
    };

    return Element;
}(Class));

Element$1.prototype.nodeType = "Element";

ObserversMixin.extend(Element$1.prototype);

var GRADIENT = "Gradient";

var Paintable = {
    extend: function(proto) {
        proto.fill = this.fill;
        proto.stroke = this.stroke;
    },

    fill: function(color, opacity) {
        var options = this.options;

        if (defined(color)) {
            if (color && color.nodeType !== GRADIENT) {
                var newFill = {
                    color: color
                };
                if (defined(opacity)) {
                    newFill.opacity = opacity;
                }
                options.set("fill", newFill);
            } else {
                options.set("fill", color);
            }

            return this;
        }

        return options.get("fill");
    },

    stroke: function(color, width, opacity) {
        if (defined(color)) {
            this.options.set("stroke.color", color);

            if (defined(width)) {
                this.options.set("stroke.width", width);
            }

            if (defined(opacity)) {
                this.options.set("stroke.opacity", opacity);
            }

            return this;
        }

        return this.options.get("stroke");
    }
};

var IDENTITY_MATRIX_HASH = Matrix.IDENTITY.toString();

var Measurable = {
    extend: function(proto) {
        proto.bbox = this.bbox;
        proto.geometryChange = this.geometryChange;
    },

    bbox: function(transformation) {
        var combinedMatrix = toMatrix(this.currentTransform(transformation));
        var matrixHash = combinedMatrix ? combinedMatrix.toString() : IDENTITY_MATRIX_HASH;
        var bbox;

        if (this._bboxCache && this._matrixHash === matrixHash) {
            bbox = this._bboxCache.clone();
        } else {
            bbox = this._bbox(combinedMatrix);
            this._bboxCache = bbox ? bbox.clone() : null;
            this._matrixHash = matrixHash;
        }

        var strokeWidth = this.options.get("stroke.width");
        if (strokeWidth && bbox) {
            bbox.expand(strokeWidth / 2);
        }

        return bbox;
    },

    geometryChange: function() {
        delete this._bboxCache;
        this.trigger("geometryChange", {
            element: this
        });
    }
};

function geometryAccessor(name) {
    var fieldName = "_" + name;
    return function(value) {
        if (defined(value)) {
            this._observerField(fieldName, value);
            this.geometryChange();
            return this;
        }

        return this[fieldName];
    };
}

function defineGeometryAccessors(fn, names) {
    for (var i = 0; i < names.length; i++) {
        fn[names[i]] = geometryAccessor(names[i]);
    }
}

var DEFAULT_STROKE = "#000";

var Circle$1 = (function (Element) {
    function Circle$$1(geometry, options) {
        if ( geometry === void 0 ) geometry = new Circle();
        if ( options === void 0 ) options = {};

        Element.call(this, options);
        this.geometry(geometry);

        if (!defined(this.options.stroke)) {
            this.stroke(DEFAULT_STROKE);
        }
    }

    if ( Element ) Circle$$1.__proto__ = Element;
    Circle$$1.prototype = Object.create( Element && Element.prototype );
    Circle$$1.prototype.constructor = Circle$$1;

    Circle$$1.prototype.rawBBox = function rawBBox () {
        return this._geometry.bbox();
    };

    Circle$$1.prototype._bbox = function _bbox (matrix) {
        return this._geometry.bbox(matrix);
    };

    Circle$$1.prototype._containsPoint = function _containsPoint (point) {
        return this.geometry().containsPoint(point);
    };

    Circle$$1.prototype._isOnPath = function _isOnPath (point) {
        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
    };

    return Circle$$1;
}(Element$1));

Circle$1.prototype.nodeType = "Circle";

Paintable.extend(Circle$1.prototype);
Measurable.extend(Circle$1.prototype);
defineGeometryAccessors(Circle$1.prototype, [ "geometry" ]);

var push = [].push;
var pop = [].pop;
var splice = [].splice;
var shift = [].shift;
var slice = [].slice;
var unshift = [].unshift;

var ElementsArray = (function (Class$$1) {
    function ElementsArray(array) {
        if ( array === void 0 ) array = [];

        Class$$1.call(this);

        this.length = 0;
        this._splice(0, array.length, array);
    }

    if ( Class$$1 ) ElementsArray.__proto__ = Class$$1;
    ElementsArray.prototype = Object.create( Class$$1 && Class$$1.prototype );
    ElementsArray.prototype.constructor = ElementsArray;

    ElementsArray.prototype.elements = function elements (value) {
        if (value) {
            this._splice(0, this.length, value);

            this._change();
            return this;
        }

        return this.slice(0);
    };

    ElementsArray.prototype.push = function push$1 () {
        var elements = arguments;
        var result = push.apply(this, elements);

        this._add(elements);

        return result;
    };

    ElementsArray.prototype.slice = function slice$1 () {
        return slice.call(this);
    };

    ElementsArray.prototype.pop = function pop$1 () {
        var length = this.length;
        var result = pop.apply(this);

        if (length) {
            this._remove([ result ]);
        }

        return result;
    };

    ElementsArray.prototype.splice = function splice$1 (index, howMany) {
        var elements = slice.call(arguments, 2);
        var result = this._splice(index, howMany, elements);

        this._change();

        return result;
    };

    ElementsArray.prototype.shift = function shift$1 () {
        var length = this.length;
        var result = shift.apply(this);

        if (length) {
            this._remove([ result ]);
        }

        return result;
    };

    ElementsArray.prototype.unshift = function unshift$1 () {
        var elements = arguments;
        var result = unshift.apply(this, elements);

        this._add(elements);

        return result;
    };

    ElementsArray.prototype.indexOf = function indexOf (element) {
        var this$1 = this;

        var length = this.length;

        for (var idx = 0; idx < length; idx++) {
            if (this$1[idx] === element) {
                return idx;
            }
        }
        return -1;
    };

    ElementsArray.prototype._splice = function _splice (index, howMany, elements) {
        var result = splice.apply(this, [ index, howMany ].concat(elements));

        this._clearObserver(result);
        this._setObserver(elements);

        return result;
    };

    ElementsArray.prototype._add = function _add (elements) {
        this._setObserver(elements);
        this._change();
    };

    ElementsArray.prototype._remove = function _remove (elements) {
        this._clearObserver(elements);
        this._change();
    };

    ElementsArray.prototype._setObserver = function _setObserver (elements) {
        var this$1 = this;

        for (var idx = 0; idx < elements.length; idx++) {
            elements[idx].addObserver(this$1);
        }
    };

    ElementsArray.prototype._clearObserver = function _clearObserver (elements) {
        var this$1 = this;

        for (var idx = 0; idx < elements.length; idx++) {
            elements[idx].removeObserver(this$1);
        }
    };

    ElementsArray.prototype._change = function _change () {};

    return ElementsArray;
}(Class));

ObserversMixin.extend(ElementsArray.prototype);

var GeometryElementsArray = (function (ElementsArray$$1) {
    function GeometryElementsArray () {
        ElementsArray$$1.apply(this, arguments);
    }

    if ( ElementsArray$$1 ) GeometryElementsArray.__proto__ = ElementsArray$$1;
    GeometryElementsArray.prototype = Object.create( ElementsArray$$1 && ElementsArray$$1.prototype );
    GeometryElementsArray.prototype.constructor = GeometryElementsArray;

    GeometryElementsArray.prototype._change = function _change () {
        this.geometryChange();
    };

    return GeometryElementsArray;
}(ElementsArray));

function elementsBoundingBox(elements, applyTransform, transformation) {
    var boundingBox;

    for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        if (element.visible()) {
            var elementBoundingBox = applyTransform ? element.bbox(transformation) : element.rawBBox();
            if (elementBoundingBox) {
                if (boundingBox) {
                    boundingBox = Rect.union(boundingBox, elementBoundingBox);
                } else {
                    boundingBox = elementBoundingBox;
                }
            }
        }
    }

    return boundingBox;
}

function elementsClippedBoundingBox(elements, transformation) {
    var boundingBox;

    for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        if (element.visible()) {
            var elementBoundingBox = element.clippedBBox(transformation);
            if (elementBoundingBox) {
                if (boundingBox) {
                    boundingBox = Rect.union(boundingBox, elementBoundingBox);
                } else {
                    boundingBox = elementBoundingBox;
                }
            }
        }
    }

    return boundingBox;
}

var MultiPath = (function (Element) {
    function MultiPath(options) {
        Element.call(this, options);
        this.paths = new GeometryElementsArray();
        this.paths.addObserver(this);

        if (!defined(this.options.stroke)) {
            this.stroke("#000");
        }
    }

    if ( Element ) MultiPath.__proto__ = Element;
    MultiPath.prototype = Object.create( Element && Element.prototype );
    MultiPath.prototype.constructor = MultiPath;

    MultiPath.prototype.moveTo = function moveTo (x, y) {
        var path = new Path();
        path.moveTo(x, y);

        this.paths.push(path);

        return this;
    };

    MultiPath.prototype.lineTo = function lineTo (x, y) {
        if (this.paths.length > 0) {
            last(this.paths).lineTo(x, y);
        }

        return this;
    };

    MultiPath.prototype.curveTo = function curveTo (controlOut, controlIn, point) {
        if (this.paths.length > 0) {
            last(this.paths).curveTo(controlOut, controlIn, point);
        }

        return this;
    };

    MultiPath.prototype.arc = function arc (startAngle, endAngle, radiusX, radiusY, anticlockwise) {
        if (this.paths.length > 0) {
            last(this.paths).arc(startAngle, endAngle, radiusX, radiusY, anticlockwise);
        }

        return this;
    };

    MultiPath.prototype.arcTo = function arcTo (end, rx, ry, largeArc, swipe, rotation) {
        if (this.paths.length > 0) {
            last(this.paths).arcTo(end, rx, ry, largeArc, swipe, rotation);
        }

        return this;
    };

    MultiPath.prototype.close = function close () {
        if (this.paths.length > 0) {
            last(this.paths).close();
        }

        return this;
    };

    MultiPath.prototype._bbox = function _bbox (matrix) {
        return elementsBoundingBox(this.paths, true, matrix);
    };

    MultiPath.prototype.rawBBox = function rawBBox () {
        return elementsBoundingBox(this.paths, false);
    };

    MultiPath.prototype._containsPoint = function _containsPoint (point) {
        var paths = this.paths;

        for (var idx = 0; idx < paths.length; idx++) {
            if (paths[idx]._containsPoint(point)) {
                return true;
            }
        }
        return false;
    };

    MultiPath.prototype._isOnPath = function _isOnPath (point) {
        var paths = this.paths;
        var width = this.options.stroke.width;

        for (var idx = 0; idx < paths.length; idx++) {
            if (paths[idx]._isOnPath(point, width)) {
                return true;
            }
        }
        return false;
    };

    MultiPath.prototype._clippedBBox = function _clippedBBox (transformation) {
        return elementsClippedBoundingBox(this.paths, this.currentTransform(transformation));
    };

    return MultiPath;
}(Element$1));

MultiPath.prototype.nodeType = "MultiPath";

Paintable.extend(MultiPath.prototype);
Measurable.extend(MultiPath.prototype);

var ShapeMap = {
    l: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;

        for (var i = 0; i < parameters.length; i += 2) {
            var point = new Point(parameters[i], parameters[i + 1]);

            if (options.isRelative) {
                point.translateWith(position);
            }

            path.lineTo(point.x, point.y);

            position.x = point.x;
            position.y = point.y;
        }
    },

    c: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;

        for (var i = 0; i < parameters.length; i += 6) {
            var controlOut = new Point(parameters[i], parameters[i + 1]);
            var controlIn = new Point(parameters[i + 2], parameters[i + 3]);
            var point = new Point(parameters[i + 4], parameters[i + 5]);
            if (options.isRelative) {
                controlIn.translateWith(position);
                controlOut.translateWith(position);
                point.translateWith(position);
            }

            path.curveTo(controlOut, controlIn, point);

            position.x = point.x;
            position.y = point.y;
        }
    },

    v: function(path, options) {
        var value = options.isRelative ? 0 : options.position.x;

        toLineParamaters(options.parameters, true, value);
        this.l(path, options);
    },

    h: function(path, options) {
        var value = options.isRelative ? 0 : options.position.y;

        toLineParamaters(options.parameters, false, value);
        this.l(path, options);
    },

    a: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;

        for (var i = 0; i < parameters.length; i += 7) {
            var radiusX = parameters[i];
            var radiusY = parameters[i + 1];
            var rotation = parameters[i + 2];
            var largeArc = parameters[i + 3];
            var swipe = parameters[i + 4];
            var endPoint = new Point(parameters[i + 5], parameters[i + 6]);

            if (options.isRelative) {
                endPoint.translateWith(position);
            }
            if (position.x !== endPoint.x || position.y !== endPoint.y) {
                path.arcTo(endPoint, radiusX, radiusY, largeArc, swipe, rotation);

                position.x = endPoint.x;
                position.y = endPoint.y;
            }
        }
    },

    s: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;
        var previousCommand = options.previousCommand;
        var lastControlIn;

        if (previousCommand === "s" || previousCommand === "c") {
            lastControlIn = last(last(path.paths).segments).controlIn();
        }

        for (var i = 0; i < parameters.length; i += 4) {
            var controlIn = new Point(parameters[i], parameters[i + 1]);
            var endPoint = new Point(parameters[i + 2], parameters[i + 3]);
            var controlOut = (void 0);

            if (options.isRelative) {
                controlIn.translateWith(position);
                endPoint.translateWith(position);
            }

            if (lastControlIn) {
                controlOut = reflectionPoint(lastControlIn, position);
            } else {
                controlOut = position.clone();
            }

            lastControlIn = controlIn;

            path.curveTo(controlOut, controlIn, endPoint);

            position.x = endPoint.x;
            position.y = endPoint.y;
        }
    },

    q: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;

        for (var i = 0; i < parameters.length; i += 4) {
            var controlPoint = new Point(parameters[i], parameters[i + 1]);
            var endPoint = new Point(parameters[i + 2], parameters[i + 3]);

            if (options.isRelative) {
                controlPoint.translateWith(position);
                endPoint.translateWith(position);
            }

            var cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);

            path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);

            position.x = endPoint.x;
            position.y = endPoint.y;
        }
    },

    t: function(path, options) {
        var parameters = options.parameters;
        var position = options.position;
        var previousCommand = options.previousCommand;
        var controlPoint;

        if (previousCommand === "q" || previousCommand === "t") {
            var lastSegment = last(last(path.paths).segments);
            controlPoint = lastSegment.controlIn().clone()
                .translateWith(position.scaleCopy(-1 / 3))
                .scale(3 / 2);
        }

        for (var i = 0; i < parameters.length; i += 2) {
            var endPoint = new Point(parameters[i], parameters[i + 1]);
            if (options.isRelative) {
                endPoint.translateWith(position);
            }

            if (controlPoint) {
                controlPoint = reflectionPoint(controlPoint, position);
            } else {
                controlPoint = position.clone();
            }

            var cubicControlPoints = quadraticToCubicControlPoints(position, controlPoint, endPoint);

            path.curveTo(cubicControlPoints.controlOut, cubicControlPoints.controlIn, endPoint);

            position.x = endPoint.x;
            position.y = endPoint.y;
        }
    }
};

function toLineParamaters(parameters, isVertical, value) {
    var insertPosition = isVertical ? 0 : 1;

    for (var i = 0; i < parameters.length; i += 2) {
        parameters.splice(i + insertPosition, 0, value);
    }
}

function reflectionPoint(point, center) {
    if (point && center) {
        return center.scaleCopy(2).translate(-point.x, -point.y);
    }
}

var third = 1 / 3;

function quadraticToCubicControlPoints(position, controlPoint, endPoint) {
    var scaledPoint = controlPoint.clone().scale(2 / 3);
    return {
        controlOut: scaledPoint.clone().translateWith(position.scaleCopy(third)),
        controlIn: scaledPoint.translateWith(endPoint.scaleCopy(third))
    };
}

var SEGMENT_REGEX = /([a-df-z]{1})([^a-df-z]*)(z)?/gi;
var SPLIT_REGEX = /[,\s]?([+\-]?(?:\d*\.\d+|\d+)(?:[eE][+\-]?\d+)?)/g;
var MOVE = "m";
var CLOSE = "z";

function parseParameters(str) {
    var parameters = [];
    str.replace(SPLIT_REGEX, function(match, number) {
        parameters.push(parseFloat(number));
    });
    return parameters;
}

var PathParser = (function (Class$$1) {
    function PathParser () {
        Class$$1.apply(this, arguments);
    }

    if ( Class$$1 ) PathParser.__proto__ = Class$$1;
    PathParser.prototype = Object.create( Class$$1 && Class$$1.prototype );
    PathParser.prototype.constructor = PathParser;

    PathParser.prototype.parse = function parse (str, options) {
        var multiPath = new MultiPath(options);
        var position = new Point();
        var previousCommand;

        str.replace(SEGMENT_REGEX, function (match, element, params, closePath) {
            var command = element.toLowerCase();
            var isRelative = command === element;
            var parameters = parseParameters(params.trim());

            if (command === MOVE) {
                if (isRelative) {
                    position.x += parameters[0];
                    position.y += parameters[1];
                } else {
                    position.x = parameters[0];
                    position.y = parameters[1];
                }

                multiPath.moveTo(position.x, position.y);

                if (parameters.length > 2) {
                    command = "l";
                    parameters.splice(0, 2);
                }
            }

            if (ShapeMap[command]) {
                ShapeMap[command](
                    multiPath, {
                        parameters: parameters,
                        position: position,
                        isRelative: isRelative,
                        previousCommand: previousCommand
                    }
                );

                if (closePath && closePath.toLowerCase() === CLOSE) {
                    multiPath.close();
                }
            } else if (command !== MOVE) {
                throw new Error("Error while parsing SVG path. Unsupported command: " + command);
            }

            previousCommand = command;
        });

        return multiPath;
    };

    return PathParser;
}(Class));

PathParser.current = new PathParser();

var Path = (function (Element) {
    function Path(options) {
        Element.call(this, options);
        this.segments = new GeometryElementsArray();
        this.segments.addObserver(this);

        if (!defined(this.options.stroke)) {
            this.stroke("#000");

            if (!defined(this.options.stroke.lineJoin)) {
                this.options.set("stroke.lineJoin", "miter");
            }
        }
    }

    if ( Element ) Path.__proto__ = Element;
    Path.prototype = Object.create( Element && Element.prototype );
    Path.prototype.constructor = Path;

    Path.prototype.moveTo = function moveTo (x, y) {
        this.suspend();
        this.segments.elements([]);
        this.resume();

        this.lineTo(x, y);

        return this;
    };

    Path.prototype.lineTo = function lineTo (x, y) {
        var point = defined(y) ? new Point(x, y) : x;
        var segment = new Segment(point);

        this.segments.push(segment);

        return this;
    };

    Path.prototype.curveTo = function curveTo (controlOut, controlIn, point) {
        if (this.segments.length > 0) {
            var lastSegment = last(this.segments);
            var segment = new Segment(point, controlIn);
            this.suspend();
            lastSegment.controlOut(controlOut);
            this.resume();

            this.segments.push(segment);
        }

        return this;
    };

    Path.prototype.arc = function arc (startAngle, endAngle, radiusX, radiusY, anticlockwise) {
        if (this.segments.length > 0) {
            var lastSegment = last(this.segments);
            var anchor = lastSegment.anchor();
            var start = rad(startAngle);
            var center = new Point(anchor.x - radiusX * Math.cos(start),
                anchor.y - radiusY * Math.sin(start));
            var arc = new Arc(center, {
                startAngle: startAngle,
                endAngle: endAngle,
                radiusX: radiusX,
                radiusY: radiusY,
                anticlockwise: anticlockwise
            });

            this._addArcSegments(arc);
        }

        return this;
    };

    Path.prototype.arcTo = function arcTo (end, rx, ry, largeArc, swipe, rotation) {
        if (this.segments.length > 0) {
            var lastSegment = last(this.segments);
            var anchor = lastSegment.anchor();
            var arc = Arc.fromPoints(anchor, end, rx, ry, largeArc, swipe, rotation);

            this._addArcSegments(arc);
        }
        return this;
    };

    Path.prototype._addArcSegments = function _addArcSegments (arc) {
        var this$1 = this;

        this.suspend();

        var curvePoints = arc.curvePoints();

        for (var i = 1; i < curvePoints.length; i += 3) {
            this$1.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);
        }

        this.resume();
        this.geometryChange();
    };

    Path.prototype.close = function close () {
        this.options.closed = true;
        this.geometryChange();

        return this;
    };

    Path.prototype.rawBBox = function rawBBox () {
        return this._bbox();
    };

    Path.prototype._containsPoint = function _containsPoint (point) {
        var segments = this.segments;
        var length = segments.length;
        var intersectionsCount = 0;
        var previous, current;

        for (var idx = 1; idx < length; idx++) {
            previous = segments[idx - 1];
            current = segments[idx];
            intersectionsCount += previous._intersectionsTo(current, point);
        }

        if (this.options.closed || !segments[0].anchor().equals(segments[length - 1].anchor())) {
            intersectionsCount += lineIntersectionsCount(segments[0].anchor(), segments[length - 1].anchor(), point);
        }

        return intersectionsCount % 2 !== 0;
    };

    Path.prototype._isOnPath = function _isOnPath (point, width) {
        var segments = this.segments;
        var length = segments.length;
        var pathWidth = width || this.options.stroke.width;

        if (length > 1) {
            if (segments[0]._isOnPathTo(segments[1], point, pathWidth, "start")) {
                return true;
            }

            for (var idx = 2; idx <= length - 2; idx++) {
                if (segments[idx - 1]._isOnPathTo(segments[idx], point, pathWidth)) {
                    return true;
                }
            }

            if (segments[length - 2]._isOnPathTo(segments[length - 1], point, pathWidth, "end")) {
                return true;
            }
        }
        return false;
    };

    Path.prototype._bbox = function _bbox (matrix) {
        var segments = this.segments;
        var length = segments.length;
        var boundingBox;

        if (length === 1) {
            var anchor = segments[0].anchor().transformCopy(matrix);
            boundingBox = new Rect(anchor, Size.ZERO);
        } else if (length > 0) {
            for (var i = 1; i < length; i++) {
                var segmentBox = segments[i - 1].bboxTo(segments[i], matrix);
                if (boundingBox) {
                    boundingBox = Rect.union(boundingBox, segmentBox);
                } else {
                    boundingBox = segmentBox;
                }
            }
        }

        return boundingBox;
    };

    Path.fromRect = function fromRect (rect, options) {
        return new Path(options)
            .moveTo(rect.topLeft())
            .lineTo(rect.topRight())
            .lineTo(rect.bottomRight())
            .lineTo(rect.bottomLeft())
            .close();
    };

    Path.fromPoints = function fromPoints (points, options) {
        if (points) {
            var path = new Path(options);

            for (var i = 0; i < points.length; i++) {
                var point = Point.create(points[i]);
                if (point) {
                    if (i === 0) {
                        path.moveTo(point);
                    } else {
                        path.lineTo(point);
                    }
                }
            }

            return path;
        }
    };

    Path.fromArc = function fromArc (arc, options) {
        var path = new Path(options);
        var startAngle = arc.startAngle;
        var start = arc.pointAt(startAngle);
        path.moveTo(start.x, start.y);
        path.arc(startAngle, arc.endAngle, arc.radiusX, arc.radiusY, arc.anticlockwise);
        return path;
    };

    return Path;
}(Element$1));

Path.prototype.nodeType = "Path";

Paintable.extend(Path.prototype);
Measurable.extend(Path.prototype);

Path.parse = function(str, options) {
    return PathParser.current.parse(str, options);
};

var DEFAULT_STROKE$1 = "#000";

var Arc$2 = (function (Element) {
    function Arc$$1(geometry, options) {
        if ( geometry === void 0 ) geometry = new Arc();
        if ( options === void 0 ) options = {};

        Element.call(this, options);

        this.geometry(geometry);

        if (!defined(this.options.stroke)) {
            this.stroke(DEFAULT_STROKE$1);
        }
    }

    if ( Element ) Arc$$1.__proto__ = Element;
    Arc$$1.prototype = Object.create( Element && Element.prototype );
    Arc$$1.prototype.constructor = Arc$$1;

    Arc$$1.prototype._bbox = function _bbox (matrix) {
        return this._geometry.bbox(matrix);
    };

    Arc$$1.prototype.rawBBox = function rawBBox () {
        return this.geometry().bbox();
    };

    Arc$$1.prototype.toPath = function toPath () {
        var path = new Path();
        var curvePoints = this.geometry().curvePoints();

        if (curvePoints.length > 0) {
            path.moveTo(curvePoints[0].x, curvePoints[0].y);

            for (var i = 1; i < curvePoints.length; i += 3) {
                path.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);
            }
        }

        return path;
    };

    Arc$$1.prototype._containsPoint = function _containsPoint (point) {
        return this.geometry().containsPoint(point);
    };

    Arc$$1.prototype._isOnPath = function _isOnPath (point) {
        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
    };

    return Arc$$1;
}(Element$1));

Arc$2.prototype.nodeType = "Arc";

Paintable.extend(Arc$2.prototype);
Measurable.extend(Arc$2.prototype);
defineGeometryAccessors(Arc$2.prototype, [ "geometry" ]);

var DEFAULT_FONT = "12px sans-serif";
var DEFAULT_FILL = "#000";

var Text = (function (Element) {
    function Text(content, position, options) {
        if ( position === void 0 ) position = new Point();
        if ( options === void 0 ) options = {};

        Element.call(this, options);

        this.content(content);
        this.position(position);

        if (!this.options.font) {
            this.options.font = DEFAULT_FONT;
        }

        if (!defined(this.options.fill)) {
            this.fill(DEFAULT_FILL);
        }
    }

    if ( Element ) Text.__proto__ = Element;
    Text.prototype = Object.create( Element && Element.prototype );
    Text.prototype.constructor = Text;

    Text.prototype.content = function content (value) {
        if (defined(value)) {
            this.options.set("content", value);
            return this;
        }

        return this.options.get("content");
    };

    Text.prototype.measure = function measure () {
        var metrics = measureText(this.content(), {
            font: this.options.get("font")
        });

        return metrics;
    };

    Text.prototype.rect = function rect () {
        var size = this.measure();
        var pos = this.position().clone();
        return new Rect(pos, [ size.width, size.height ]);
    };

    Text.prototype.bbox = function bbox (transformation) {
        var combinedMatrix = toMatrix(this.currentTransform(transformation));
        return this.rect().bbox(combinedMatrix);
    };

    Text.prototype.rawBBox = function rawBBox () {
        return this.rect().bbox();
    };

    Text.prototype._containsPoint = function _containsPoint (point) {
        return this.rect().containsPoint(point);
    };

    return Text;
}(Element$1));

Text.prototype.nodeType = "Text";

Paintable.extend(Text.prototype);

definePointAccessors(Text.prototype, [ "position" ]);

var Image$1 = (function (Element) {
    function Image(src, rect, options) {
        if ( rect === void 0 ) rect = new Rect();
        if ( options === void 0 ) options = {};

        Element.call(this, options);

        this.src(src);
        this.rect(rect);
    }

    if ( Element ) Image.__proto__ = Element;
    Image.prototype = Object.create( Element && Element.prototype );
    Image.prototype.constructor = Image;

    Image.prototype.src = function src (value) {
        if (defined(value)) {
            this.options.set("src", value);
            return this;
        }

        return this.options.get("src");
    };

    Image.prototype.bbox = function bbox (transformation) {
        var combinedMatrix = toMatrix(this.currentTransform(transformation));
        return this._rect.bbox(combinedMatrix);
    };

    Image.prototype.rawBBox = function rawBBox () {
        return this._rect.bbox();
    };

    Image.prototype._containsPoint = function _containsPoint (point) {
        return this._rect.containsPoint(point);
    };

    Image.prototype._hasFill = function _hasFill () {
        return this.src();
    };

    return Image;
}(Element$1));

Image$1.prototype.nodeType = "Image";

defineGeometryAccessors(Image$1.prototype, [ "rect" ]);

var Traversable = {
    extend: function(proto, childrenField) {
        proto.traverse = function(callback) {
            var children = this[childrenField];

            for (var i = 0; i < children.length; i++) {
                var child = children[i];

                if (child.traverse) {
                    child.traverse(callback);
                } else {
                    callback(child);
                }
            }

            return this;
        };
    }
};

var Group = (function (Element) {
    function Group(options) {
        Element.call(this, options);
        this.children = [];
    }

    if ( Element ) Group.__proto__ = Element;
    Group.prototype = Object.create( Element && Element.prototype );
    Group.prototype.constructor = Group;

    Group.prototype.childrenChange = function childrenChange (action, items, index) {
        this.trigger("childrenChange",{
            action: action,
            items: items,
            index: index
        });
    };

    Group.prototype.append = function append$1 () {
        append$1$1(this.children, arguments);
        this._reparent(arguments, this);

        this.childrenChange("add", arguments);

        return this;
    };

    Group.prototype.insert = function insert (index, element) {
        this.children.splice(index, 0, element);
        element.parent = this;

        this.childrenChange("add", [ element ], index);

        return this;
    };

    Group.prototype.insertAt = function insertAt (element, index) {
        return this.insert(index, element);
    };

    Group.prototype.remove = function remove (element) {
        var index = this.children.indexOf(element);
        if (index >= 0) {
            this.children.splice(index, 1);
            element.parent = null;
            this.childrenChange("remove", [ element ], index);
        }

        return this;
    };

    Group.prototype.removeAt = function removeAt (index) {
        if (0 <= index && index < this.children.length) {
            var element = this.children[index];
            this.children.splice(index, 1);
            element.parent = null;
            this.childrenChange("remove", [ element ], index);
        }

        return this;
    };

    Group.prototype.clear = function clear () {
        var items = this.children;
        this.children = [];
        this._reparent(items, null);

        this.childrenChange("remove", items, 0);

        return this;
    };

    Group.prototype.bbox = function bbox (transformation) {
        return elementsBoundingBox(this.children, true, this.currentTransform(transformation));
    };

    Group.prototype.rawBBox = function rawBBox () {
        return elementsBoundingBox(this.children, false);
    };

    Group.prototype._clippedBBox = function _clippedBBox (transformation) {
        return elementsClippedBoundingBox(this.children, this.currentTransform(transformation));
    };

    Group.prototype.currentTransform = function currentTransform (transformation) {
        return Element.prototype.currentTransform.call(this, transformation) || null;
    };

    Group.prototype.containsPoint = function containsPoint (point, parentTransform) {
        if (this.visible()) {
            var children = this.children;
            var transform = this.currentTransform(parentTransform);
            for (var idx = 0; idx < children.length; idx++) {
                if (children[idx].containsPoint(point, transform)) {
                    return true;
                }
            }
        }
        return false;
    };

    Group.prototype._reparent = function _reparent (elements, newParent) {
        var this$1 = this;

        for (var i = 0; i < elements.length; i++) {
            var child = elements[i];
            var parent = child.parent;
            if (parent && parent !== this$1 && parent.remove) {
                parent.remove(child);
            }

            child.parent = newParent;
        }
    };

    return Group;
}(Element$1));

Group.prototype.nodeType = "Group";

Traversable.extend(Group.prototype, "children");

function translateToPoint(point, bbox, element) {
    var transofrm = element.transform() || transform$1();
    var matrix = transofrm.matrix();
    matrix.e += point.x - bbox.origin.x;
    matrix.f += point.y - bbox.origin.y;

    transofrm.matrix(matrix);
    element.transform(transofrm);
}

function alignStart(size, rect, align, axis, sizeField) {
    var start;
    if (align === "start") {
        start = rect.origin[axis];
    } else if (align === "end") {
        start = rect.origin[axis] + rect.size[sizeField] - size;
    } else {
        start = rect.origin[axis] + (rect.size[sizeField] - size) / 2;
    }

    return start;
}

function alignStartReverse(size, rect, align, axis, sizeField) {
    var start;
    if (align === "start") {
        start = rect.origin[axis] + rect.size[sizeField] - size;
    } else if (align === "end") {
        start = rect.origin[axis];
    } else {
        start = rect.origin[axis] + (rect.size[sizeField] - size) / 2;
    }

    return start;
}

var DEFAULT_OPTIONS$1 = {
    alignContent: "start",
    justifyContent: "start",
    alignItems: "start",
    spacing: 0,
    orientation: "horizontal",
    lineSpacing: 0,
    wrap: true,
    revers: false
};

var forEach = function (elements, callback) {
    elements.forEach(callback);
};

var forEachReverse = function (elements, callback) {
    var length = elements.length;

    for (var idx = length - 1; idx >= 0; idx--) {
        callback(elements[idx], idx);
    }
};

var Layout = (function (Group$$1) {
    function Layout(rect, options) {
        Group$$1.call(this, Object.assign({}, DEFAULT_OPTIONS$1, options));
        this._rect = rect;
        this._fieldMap = {};
    }

    if ( Group$$1 ) Layout.__proto__ = Group$$1;
    Layout.prototype = Object.create( Group$$1 && Group$$1.prototype );
    Layout.prototype.constructor = Layout;

    Layout.prototype.rect = function rect (value) {
        if (value) {
            this._rect = value;
            return this;
        }

        return this._rect;
    };

    Layout.prototype._initMap = function _initMap () {
        var options = this.options;
        var fieldMap = this._fieldMap;
        if (options.orientation === "horizontal") {
            fieldMap.sizeField = "width";
            fieldMap.groupsSizeField = "height";
            fieldMap.groupAxis = "x";
            fieldMap.groupsAxis = "y";
        } else {
            fieldMap.sizeField = "height";
            fieldMap.groupsSizeField = "width";
            fieldMap.groupAxis = "y";
            fieldMap.groupsAxis = "x";
        }

        if (options.reverse) {
            this.forEach = forEachReverse;
            this.justifyAlign = alignStartReverse;
        } else {
            this.forEach = forEach;
            this.justifyAlign = alignStart;
        }
    };

    Layout.prototype.reflow = function reflow () {
        var this$1 = this;

        if (!this._rect || this.children.length === 0) {
            return;
        }
        this._initMap();

        if (this.options.transform) {
            this.transform(null);
        }

        var options = this.options;
        var rect = this._rect;
        var ref = this._initGroups();
        var groups = ref.groups;
        var groupsSize = ref.groupsSize;
        var ref$1 = this._fieldMap;
        var sizeField = ref$1.sizeField;
        var groupsSizeField = ref$1.groupsSizeField;
        var groupAxis = ref$1.groupAxis;
        var groupsAxis = ref$1.groupsAxis;
        var groupOrigin = new Point();
        var elementOrigin = new Point();
        var size = new Size();
        var groupStart = alignStart(groupsSize, rect, options.alignContent, groupsAxis, groupsSizeField);
        var elementStart, group, groupBox;

        var arrangeElements = function (bbox, idx) {
            var element = group.elements[idx];

            elementOrigin[groupAxis] = elementStart;
            elementOrigin[groupsAxis] = alignStart(bbox.size[groupsSizeField], groupBox, options.alignItems, groupsAxis, groupsSizeField);
            translateToPoint(elementOrigin, bbox, element);
            elementStart += bbox.size[sizeField] + options.spacing;
        };

        for (var groupIdx = 0; groupIdx < groups.length; groupIdx++) {
            group = groups[groupIdx];
            groupOrigin[groupAxis] = elementStart = this$1.justifyAlign(group.size, rect, options.justifyContent, groupAxis, sizeField);
            groupOrigin[groupsAxis] = groupStart;
            size[sizeField] = group.size;
            size[groupsSizeField] = group.lineSize;
            groupBox = new Rect(groupOrigin, size);
            this$1.forEach(group.bboxes, arrangeElements);

            groupStart += group.lineSize + options.lineSpacing;
        }

        if (!options.wrap && group.size > rect.size[sizeField]) {
            var scale = rect.size[sizeField] / groupBox.size[sizeField];
            var scaledStart = groupBox.topLeft().scale(scale, scale);
            var scaledSize = groupBox.size[groupsSizeField] * scale;
            var newStart = alignStart(scaledSize, rect, options.alignContent, groupsAxis, groupsSizeField);
            var transform = transform$1();
            if (groupAxis === "x") {
                transform.translate(rect.origin.x - scaledStart.x, newStart - scaledStart.y);
            } else {
                transform.translate(newStart - scaledStart.x, rect.origin.y - scaledStart.y);
            }
            transform.scale(scale, scale);

            this.transform(transform);
        }
    };

    Layout.prototype._initGroups = function _initGroups () {
        var this$1 = this;

        var ref = this;
        var options = ref.options;
        var children = ref.children;
        var lineSpacing = options.lineSpacing;
        var wrap = options.wrap;
        var spacing = options.spacing;
        var sizeField = this._fieldMap.sizeField;
        var group = this._newGroup();
        var groups = [];
        var addGroup = function() {
            groups.push(group);
            groupsSize += group.lineSize + lineSpacing;
        };
        var groupsSize = -lineSpacing;

        for (var idx = 0; idx < children.length; idx++) {
            var element = children[idx];
            var bbox = children[idx].clippedBBox();
            if (element.visible() && bbox) {
                if (wrap && group.size + bbox.size[sizeField] + spacing > this$1._rect.size[sizeField]) {
                    if (group.bboxes.length === 0) {
                        this$1._addToGroup(group, bbox, element);
                        addGroup();
                        group = this$1._newGroup();
                    } else {
                        addGroup();
                        group = this$1._newGroup();
                        this$1._addToGroup(group, bbox, element);
                    }
                } else {
                    this$1._addToGroup(group, bbox, element);
                }
            }
        }

        if (group.bboxes.length) {
            addGroup();
        }

        return {
            groups: groups,
            groupsSize: groupsSize
        };
    };

    Layout.prototype._addToGroup = function _addToGroup (group, bbox, element) {
        group.size += bbox.size[this._fieldMap.sizeField] + this.options.spacing;
        group.lineSize = Math.max(bbox.size[this._fieldMap.groupsSizeField], group.lineSize);
        group.bboxes.push(bbox);
        group.elements.push(element);
    };

    Layout.prototype._newGroup = function _newGroup () {
        return {
            lineSize: 0,
            size: -this.options.spacing,
            bboxes: [],
            elements: []
        };
    };

    return Layout;
}(Group));

var Rect$2 = (function (Element) {
    function Rect$$1(geometry, options) {
        if ( geometry === void 0 ) geometry = new Rect();
        if ( options === void 0 ) options = {};

        Element.call(this, options);
        this.geometry(geometry);

        if (!defined(this.options.stroke)) {
            this.stroke("#000");
        }
    }

    if ( Element ) Rect$$1.__proto__ = Element;
    Rect$$1.prototype = Object.create( Element && Element.prototype );
    Rect$$1.prototype.constructor = Rect$$1;

    Rect$$1.prototype._bbox = function _bbox (matrix) {
        return this._geometry.bbox(matrix);
    };

    Rect$$1.prototype.rawBBox = function rawBBox () {
        return this._geometry.bbox();
    };

    Rect$$1.prototype._containsPoint = function _containsPoint (point) {
        return this._geometry.containsPoint(point);
    };

    Rect$$1.prototype._isOnPath = function _isOnPath (point) {
        return this.geometry()._isOnPath(point, this.options.stroke.width / 2);
    };

    return Rect$$1;
}(Element$1));

Rect$2.prototype.nodeType = "Rect";

Paintable.extend(Rect$2.prototype);
Measurable.extend(Rect$2.prototype);
defineGeometryAccessors(Rect$2.prototype, [ "geometry" ]);

function alignElements(elements, rect, alignment, axis, sizeField) {
    for (var idx = 0; idx < elements.length; idx++) {
        var bbox = elements[idx].clippedBBox();
        if (bbox) {
            var point = bbox.origin.clone();
            point[axis] = alignStart(bbox.size[sizeField], rect, alignment || "start", axis, sizeField);
            translateToPoint(point, bbox, elements[idx]);
        }
    }
}

function align(elements, rect, alignment) {
    alignElements(elements, rect, alignment, "x", "width");
}

function vAlign(elements, rect, alignment) {
    alignElements(elements, rect, alignment, "y", "height");
}

function stackElements(elements, stackAxis, otherAxis, sizeField) {
    if (elements.length > 1) {
        var origin = new Point();
        var previousBBox = elements[0].bbox;

        for (var idx = 1; idx < elements.length; idx++) {
            var element = elements[idx].element;
            var bbox = elements[idx].bbox;
            origin[stackAxis] = previousBBox.origin[stackAxis] + previousBBox.size[sizeField];
            origin[otherAxis] = bbox.origin[otherAxis];
            translateToPoint(origin, bbox, element);
            bbox.origin[stackAxis] = origin[stackAxis];
            previousBBox = bbox;
        }
    }
}

function createStackElements(elements) {
    var stackElements = [];

    for (var idx = 0; idx < elements.length; idx++) {
        var element = elements[idx];
        var bbox = element.clippedBBox();
        if (bbox) {
            stackElements.push({
                element: element,
                bbox: bbox
            });
        }
    }

    return stackElements;
}

function stack(elements) {
    stackElements(createStackElements(elements), "x", "y", "width");
}

function vStack(elements) {
    stackElements(createStackElements(elements), "y", "x", "height");
}

function getStacks(elements, rect, sizeField) {
    var maxSize = rect.size[sizeField];
    var stacks = [];
    var stack = [];
    var stackSize = 0;
    var element, bbox;

    var addElementToStack = function() {
        stack.push({
            element: element,
            bbox: bbox
        });
    };

    for (var idx = 0; idx < elements.length; idx++) {
        element = elements[idx];

        bbox = element.clippedBBox();
        if (bbox) {
            var size = bbox.size[sizeField];
            if (stackSize + size > maxSize) {
                if (stack.length) {
                    stacks.push(stack);
                    stack = [];
                    addElementToStack();
                    stackSize = size;
                } else {
                    addElementToStack();
                    stacks.push(stack);
                    stack = [];
                    stackSize = 0;
                }
            } else {
                addElementToStack();
                stackSize += size;
            }
        }
    }

    if (stack.length) {
        stacks.push(stack);
    }

    return stacks;
}

function wrapElements(elements, rect, axis, otherAxis, sizeField) {
    var stacks = getStacks(elements, rect, sizeField);
    var origin = rect.origin.clone();
    var result = [];

    for (var idx = 0; idx < stacks.length; idx++) {
        var stack = stacks[idx];
        var startElement = stack[0];
        origin[otherAxis] = startElement.bbox.origin[otherAxis];
        translateToPoint(origin, startElement.bbox, startElement.element);
        startElement.bbox.origin[axis] = origin[axis];
        stackElements(stack, axis, otherAxis, sizeField);
        result.push([]);
        for (var elementIdx = 0; elementIdx < stack.length; elementIdx++) {
            result[idx].push(stack[elementIdx].element);
        }
    }
    return result;
}

function wrap(elements, rect) {
    return wrapElements(elements, rect, "x", "y", "width");
}

function vWrap(elements, rect) {
    return wrapElements(elements, rect, "y", "x", "height");
}

function fit(element, rect) {
    var bbox = element.clippedBBox();
    if (bbox) {
        var elementSize = bbox.size;
        var rectSize = rect.size;
        if (rectSize.width < elementSize.width || rectSize.height < elementSize.height) {
            var scale = Math.min(rectSize.width / elementSize.width, rectSize.height / elementSize.height);
            var transform = element.transform() || transform$1();
            transform.scale(scale, scale);
            element.transform(transform);
        }
    }
}

var StopsArray = (function (ElementsArray$$1) {
    function StopsArray () {
        ElementsArray$$1.apply(this, arguments);
    }

    if ( ElementsArray$$1 ) StopsArray.__proto__ = ElementsArray$$1;
    StopsArray.prototype = Object.create( ElementsArray$$1 && ElementsArray$$1.prototype );
    StopsArray.prototype.constructor = StopsArray;

    StopsArray.prototype._change = function _change () {
        this.optionsChange({
            field: "stops"
        });
    };

    return StopsArray;
}(ElementsArray));

function optionsAccessor(name) {
    return function(value) {
        if (defined(value)) {
            this.options.set(name, value);
            return this;
        }

        return this.options.get(name);
    };
}

function defineOptionsAccessors(fn, names) {
    for (var i = 0; i < names.length; i++) {
        fn[names[i]] = optionsAccessor(names[i]);
    }
}

var GradientStop = (function (Class$$1) {
    function GradientStop(offset, color, opacity) {
        Class$$1.call(this);

        this.options = new OptionsStore({
            offset: offset,
            color: color,
            opacity: defined(opacity) ? opacity : 1
        });
        this.options.addObserver(this);
    }

    if ( Class$$1 ) GradientStop.__proto__ = Class$$1;
    GradientStop.prototype = Object.create( Class$$1 && Class$$1.prototype );
    GradientStop.prototype.constructor = GradientStop;

    GradientStop.create = function create (arg) {
        if (defined(arg)) {
            var stop;
            if (arg instanceof GradientStop) {
                stop = arg;
            } else if (arg.length > 1) {
                stop = new GradientStop(arg[0], arg[1], arg[2]);
            } else {
                stop = new GradientStop(arg.offset, arg.color, arg.opacity);
            }

            return stop;
        }
    };

    return GradientStop;
}(Class));

defineOptionsAccessors(GradientStop.prototype, [ "offset", "color", "opacity" ]);
ObserversMixin.extend(GradientStop.prototype);

var Gradient = (function (Class$$1) {
    function Gradient(options) {
        if ( options === void 0 ) options = {};

        Class$$1.call(this);

        this.stops = new StopsArray(this._createStops(options.stops));
        this.stops.addObserver(this);
        this._userSpace = options.userSpace;
        this.id = definitionId();
    }

    if ( Class$$1 ) Gradient.__proto__ = Class$$1;
    Gradient.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Gradient.prototype.constructor = Gradient;

    Gradient.prototype.userSpace = function userSpace (value) {
        if (defined(value)) {
            this._userSpace = value;
            this.optionsChange();
            return this;
        }

        return this._userSpace;
    };

    Gradient.prototype._createStops = function _createStops (stops) {
        if ( stops === void 0 ) stops = [];

        var result = [];
        for (var idx = 0; idx < stops.length; idx++) {
            result.push(GradientStop.create(stops[idx]));
        }

        return result;
    };

    Gradient.prototype.addStop = function addStop (offset, color, opacity) {
        this.stops.push(new GradientStop(offset, color, opacity));
    };

    Gradient.prototype.removeStop = function removeStop (stop) {
        var index = this.stops.indexOf(stop);
        if (index >= 0) {
            this.stops.splice(index, 1);
        }
    };

    return Gradient;
}(Class));

Gradient.prototype.nodeType = "Gradient";

ObserversMixin.extend(Gradient.prototype);

Object.assign(Gradient.prototype, {
    optionsChange: function(e) {
        this.trigger("optionsChange", {
            field: "gradient" + (e ? "." + e.field : ""),
            value: this
        });
    },

    geometryChange: function() {
        this.optionsChange();
    }
});

var LinearGradient = (function (Gradient$$1) {
    function LinearGradient(options) {
        if ( options === void 0 ) options = {};

        Gradient$$1.call(this, options);

        this.start(options.start || new Point());

        this.end(options.end || new Point(1, 0));
    }

    if ( Gradient$$1 ) LinearGradient.__proto__ = Gradient$$1;
    LinearGradient.prototype = Object.create( Gradient$$1 && Gradient$$1.prototype );
    LinearGradient.prototype.constructor = LinearGradient;

    return LinearGradient;
}(Gradient));

definePointAccessors(LinearGradient.prototype, [ "start", "end" ]);

var RadialGradient = (function (Gradient$$1) {
    function RadialGradient(options) {
        if ( options === void 0 ) options = {};

        Gradient$$1.call(this, options);

        this.center(options.center || new Point());
        this._radius = defined(options.radius) ? options.radius : 1;
        this._fallbackFill = options.fallbackFill;
    }

    if ( Gradient$$1 ) RadialGradient.__proto__ = Gradient$$1;
    RadialGradient.prototype = Object.create( Gradient$$1 && Gradient$$1.prototype );
    RadialGradient.prototype.constructor = RadialGradient;

    RadialGradient.prototype.radius = function radius (value) {
        if (defined(value)) {
            this._radius = value;
            this.geometryChange();
            return this;
        }

        return this._radius;
    };

    RadialGradient.prototype.fallbackFill = function fallbackFill (value) {
        if (defined(value)) {
            this._fallbackFill = value;
            this.optionsChange();
            return this;
        }

        return this._fallbackFill;
    };

    return RadialGradient;
}(Gradient));

definePointAccessors(RadialGradient.prototype, [ "center" ]);

function swing(position) {
    return 0.5 - Math.cos(position * Math.PI) / 2;
}

function linear(position) {
    return position;
}

function easeOutElastic(position, time, start, diff) {
    var s = 1.70158,
        p = 0,
        a = diff;

    if (position === 0) {
        return start;
    }

    if (position === 1) {
        return start + diff;
    }

    if (!p) {
        p = 0.5;
    }

    if (a < Math.abs(diff)) {
        a = diff;
        s = p / 4;
    } else {
        s = p / (2 * Math.PI) * Math.asin(diff / a);
    }

    return a * Math.pow(2, -10 * position) *
           Math.sin((Number(position) - s) * (1.1 * Math.PI) / p) + diff + start;
}


var easingFunctions = Object.freeze({
	swing: swing,
	linear: linear,
	easeOutElastic: easeOutElastic
});

var AnimationFactory = (function (Class$$1) {
    function AnimationFactory() {
        Class$$1.call(this);

        this._items = [];
    }

    if ( Class$$1 ) AnimationFactory.__proto__ = Class$$1;
    AnimationFactory.prototype = Object.create( Class$$1 && Class$$1.prototype );
    AnimationFactory.prototype.constructor = AnimationFactory;

    AnimationFactory.prototype.register = function register (name, type) {
        this._items.push({
            name: name,
            type: type
        });
    };

    AnimationFactory.prototype.create = function create (element, options) {
        var items = this._items;
        var match;

        if (options && options.type) {
            var type = options.type.toLowerCase();
            for (var i = 0; i < items.length; i++) {
                if (items[i].name.toLowerCase() === type) {
                    match = items[i];
                    break;
                }
            }
        }

        if (match) {
            return new match.type(element, options);
        }
    };

    return AnimationFactory;
}(Class));

AnimationFactory.current = new AnimationFactory();

var now$1 = Date.now || function() {
    return new Date().getTime();
};

var Animation = (function (Class$$1) {
    function Animation(element, options) {
        Class$$1.call(this);

        this.options = Object.assign({}, this.options, options);
        this.element = element;
    }

    if ( Class$$1 ) Animation.__proto__ = Class$$1;
    Animation.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Animation.prototype.constructor = Animation;

    Animation.prototype.setup = function setup () {};
    Animation.prototype.step = function step () {};

    Animation.prototype.play = function play () {
        var this$1 = this;

        var options = this.options;
        var duration = options.duration;
        var delay = options.delay; if ( delay === void 0 ) delay = 0;
        var easing = easingFunctions[options.easing];
        var start = now$1() + delay;
        var finish = start + duration;

        if (duration === 0) {
            this.step(1);
            this.abort();
        } else {
            setTimeout(function () {
                var loop = function () {
                    if (this$1._stopped) {
                        return;
                    }

                    var wallTime = now$1();

                    var time = limitValue(wallTime - start, 0, duration);
                    var position = time / duration;
                    var easingPosition = easing(position, time, 0, 1, duration);

                    this$1.step(easingPosition);

                    if (wallTime < finish) {
                        animationFrameProxy(loop);
                    } else {
                        this$1.abort();
                    }
                };

                loop();
            }, delay);
        }
    };

    Animation.prototype.abort = function abort () {
        this._stopped = true;
    };

    Animation.prototype.destroy = function destroy () {
        this.abort();
    };

    return Animation;
}(Class));

Animation.prototype.options = {
    duration: 500,
    easing: "swing"
};

Animation.create = function(type, element, options) {
    return AnimationFactory.current.create(type, element, options);
};

var SurfaceFactory = (function (Class$$1) {
    function SurfaceFactory() {
        Class$$1.call(this);

        this._items = [];
    }

    if ( Class$$1 ) SurfaceFactory.__proto__ = Class$$1;
    SurfaceFactory.prototype = Object.create( Class$$1 && Class$$1.prototype );
    SurfaceFactory.prototype.constructor = SurfaceFactory;

    SurfaceFactory.prototype.register = function register (name, type, order) {
        var items = this._items;
        var first = items[0];
        var entry = {
            name: name,
            type: type,
            order: order
        };

        if (!first || order < first.order) {
            items.unshift(entry);
        } else {
            items.push(entry);
        }
    };

    SurfaceFactory.prototype.create = function create (element, options) {
        var items = this._items;
        var match = items[0];

        if (options && options.type) {
            var preferred = options.type.toLowerCase();
            for (var i = 0; i < items.length; i++) {
                if (items[i].name === preferred) {
                    match = items[i];
                    break;
                }
            }
        }

        if (match) {
            return new match.type(element, options);
        }

        logToConsole(
            "Warning: Unable to create Kendo UI Drawing Surface. Possible causes:\n" +
            "- The browser does not support SVG and Canvas. User agent: " + (navigator.userAgent));
    };

    return SurfaceFactory;
}(Class));

SurfaceFactory.current = new SurfaceFactory();

var events = [
    "click",
    "mouseenter",
    "mouseleave",
    "mousemove",
    "resize"
];

var Surface = (function (Observable$$1) {
    function Surface(element, options) {
        Observable$$1.call(this);

        this.options = Object.assign({}, options);
        this.element = element;
        this.element._kendoExportVisual = this.exportVisual.bind(this);

        this._click = this._handler("click");
        this._mouseenter = this._handler("mouseenter");
        this._mouseleave = this._handler("mouseleave");
        this._mousemove = this._handler("mousemove");

        this._visual = new Group();

        elementSize(element, this.options);

        this.bind(events, this.options);

        this._enableTracking();
    }

    if ( Observable$$1 ) Surface.__proto__ = Observable$$1;
    Surface.prototype = Object.create( Observable$$1 && Observable$$1.prototype );
    Surface.prototype.constructor = Surface;

    Surface.prototype.draw = function draw (element) {
        this._visual.children.push(element);
    };

    Surface.prototype.clear = function clear () {
        this._visual.children = [];
    };

    Surface.prototype.destroy = function destroy () {
        this._visual = null;
        this.element._kendoExportVisual = null;
        this.unbind();
    };

    Surface.prototype.eventTarget = function eventTarget (e) {
        var this$1 = this;

        var domNode = eventElement(e);
        var node;

        while (!node && domNode) {
            node = domNode._kendoNode;
            if (domNode === this$1.element) {
                break;
            }

            domNode = domNode.parentElement;
        }

        if (node) {
            return node.srcElement;
        }
    };

    Surface.prototype.exportVisual = function exportVisual () {
        return this._visual;
    };

    Surface.prototype.getSize = function getSize () {
        return elementSize(this.element);
    };

    Surface.prototype.currentSize = function currentSize (size) {
        if (size) {
            this._size = size;
        } else {
            return this._size;
        }
    };

    Surface.prototype.setSize = function setSize (size) {
        elementSize(this.element, size);

        this.currentSize(size);
        this._resize();
    };

    Surface.prototype.resize = function resize (force) {
        var size = this.getSize();
        var currentSize = this.currentSize();

        if (force || (size.width > 0 || size.height > 0) && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {
            this.currentSize(size);
            this._resize(size, force);
            this.trigger("resize", size);
        }
    };

    Surface.prototype.size = function size (value) {
        if (!value) {
            return this.getSize();
        }

        this.setSize(value);
    };

    Surface.prototype.suspendTracking = function suspendTracking () {
        this._suspendedTracking = true;
    };

    Surface.prototype.resumeTracking = function resumeTracking () {
        this._suspendedTracking = false;
    };

    Surface.prototype._enableTracking = function _enableTracking () {};

    Surface.prototype._resize = function _resize () {};

    Surface.prototype._handler = function _handler (eventName) {
        var this$1 = this;

        return function (e) {
            var node = this$1.eventTarget(e);
            if (node && !this$1._suspendedTracking) {
                this$1.trigger(eventName, {
                    element: node,
                    originalEvent: e,
                    type: eventName
                });
            }
        };
    };

    Surface.prototype._elementOffset = function _elementOffset () {
        var element = this.element;
        var padding = elementPadding(element);
        var ref = elementOffset(element);
        var left = ref.left;
        var top = ref.top;

        return {
            left: left + padding.left,
            top: top + padding.top
        };
    };

    Surface.prototype._surfacePoint = function _surfacePoint (e) {
        var offset = this._elementOffset();
        var coord = eventCoordinates(e);
        var x = coord.x - offset.left;
        var y = coord.y - offset.top;

        var inverseTransform = elementScale(this.element).invert();
        var point = new Point(
            x,
            y
        ).transform(inverseTransform);

        return point;
    };

    return Surface;
}(Observable));

Surface.create = function(element, options) {
    return SurfaceFactory.current.create(element, options);
};

Surface.support = {};

var BaseNode = (function (Class$$1) {
    function BaseNode(srcElement) {
        Class$$1.call(this);

        this.childNodes = [];
        this.parent = null;

        if (srcElement) {
            this.srcElement = srcElement;
            this.observe();
        }
    }

    if ( Class$$1 ) BaseNode.__proto__ = Class$$1;
    BaseNode.prototype = Object.create( Class$$1 && Class$$1.prototype );
    BaseNode.prototype.constructor = BaseNode;

    BaseNode.prototype.destroy = function destroy () {
        var this$1 = this;

        if (this.srcElement) {
            this.srcElement.removeObserver(this);
        }

        var children = this.childNodes;
        for (var i = 0; i < children.length; i++) {
            this$1.childNodes[i].destroy();
        }

        this.parent = null;
    };

    BaseNode.prototype.load = function load () {};

    BaseNode.prototype.observe = function observe () {
        if (this.srcElement) {
            this.srcElement.addObserver(this);
        }
    };

    BaseNode.prototype.append = function append (node) {
        this.childNodes.push(node);
        node.parent = this;
    };

    BaseNode.prototype.insertAt = function insertAt (node, pos) {
        this.childNodes.splice(pos, 0, node);
        node.parent = this;
    };

    BaseNode.prototype.remove = function remove (index, count) {
        var this$1 = this;

        var end = index + count;
        for (var i = index; i < end; i++) {
            this$1.childNodes[i].removeSelf();
        }
        this.childNodes.splice(index, count);
    };

    BaseNode.prototype.removeSelf = function removeSelf () {
        this.clear();
        this.destroy();
    };

    BaseNode.prototype.clear = function clear () {
        this.remove(0, this.childNodes.length);
    };

    BaseNode.prototype.invalidate = function invalidate () {
        if (this.parent) {
            this.parent.invalidate();
        }
    };

    BaseNode.prototype.geometryChange = function geometryChange () {
        this.invalidate();
    };

    BaseNode.prototype.optionsChange = function optionsChange () {
        this.invalidate();
    };

    BaseNode.prototype.childrenChange = function childrenChange (e) {
        if (e.action === "add") {
            this.load(e.items, e.index);
        } else if (e.action === "remove") {
            this.remove(e.index, e.items.length);
        }

        this.invalidate();
    };

    return BaseNode;
}(Class));

function renderAttr(name, value) {
    return (defined(value) && value !== null) ? (" " + name + "=\"" + value + "\" ") : "";
}

function renderAllAttr(attrs) {
    var output = "";
    for (var i = 0; i < attrs.length; i++) {
        output += renderAttr(attrs[i][0], attrs[i][1]);
    }

    return output;
}

function renderStyle(attrs) {
    var output = "";
    for (var i = 0; i < attrs.length; i++) {
        var value = attrs[i][1];
        if (defined(value)) {
            output += attrs[i][0] + ":" + value + ";";
        }
    }

    if (output !== "") {
        return output;
    }
}

var NODE_MAP = {};

var SVG_NS = "http://www.w3.org/2000/svg";
var NONE = "none";

var renderSVG = function(container, svg) {
    container.innerHTML = svg;
};

if (typeof document !== "undefined") {
    var testFragment = "<svg xmlns='" + SVG_NS + "'></svg>";
    var testContainer = document.createElement("div");
    var hasParser = typeof DOMParser !== "undefined";

    testContainer.innerHTML = testFragment;

    if (hasParser && testContainer.firstChild.namespaceURI !== SVG_NS) {
        renderSVG = function(container, svg) {
            var parser = new DOMParser();
            var chartDoc = parser.parseFromString(svg, "text/xml");
            var importedDoc = document.adoptNode(chartDoc.documentElement);

            container.innerHTML = "";
            container.appendChild(importedDoc);
        };
    }
}

var renderSVG$1 = renderSVG;

var TRANSFORM = "transform";
var DefinitionMap = {
    clip: "clip-path",
    fill: "fill"
};

function isDefinition(type, value) {
    return type === "clip" || (type === "fill" && (!value || value.nodeType === "Gradient"));
}

function baseUrl() {
    var base = document.getElementsByTagName("base")[0];
    var href = document.location.href;
    var url = "";

    if (base && !(support.browser || {}).msie) {
        var hashIndex = href.indexOf("#");
        if (hashIndex !== -1) {
            href = href.substring(0, hashIndex);
        }

        url = href;
    }

    return url;
}

var Node = (function (BaseNode$$1) {
    function Node(srcElement, options) {
        BaseNode$$1.call(this, srcElement);
        this.definitions = {};

        this.options = options;
    }

    if ( BaseNode$$1 ) Node.__proto__ = BaseNode$$1;
    Node.prototype = Object.create( BaseNode$$1 && BaseNode$$1.prototype );
    Node.prototype.constructor = Node;

    Node.prototype.destroy = function destroy () {
        if (this.element) {
            this.element._kendoNode = null;
            this.element = null;
        }

        this.clearDefinitions();
        BaseNode$$1.prototype.destroy.call(this);
    };

    Node.prototype.load = function load (elements, pos) {
        var this$1 = this;

        for (var i = 0; i < elements.length; i++) {
            var srcElement = elements[i];
            var children = srcElement.children;

            var childNode = new NODE_MAP[srcElement.nodeType](srcElement, this$1.options);

            if (defined(pos)) {
                this$1.insertAt(childNode, pos);
            } else {
                this$1.append(childNode);
            }

            childNode.createDefinitions();

            if (children && children.length > 0) {
                childNode.load(children);
            }

            var element = this$1.element;
            if (element) {
                childNode.attachTo(element, pos);
            }
        }
    };

    Node.prototype.root = function root () {
        var root = this;

        while (root.parent) {
            root = root.parent;
        }

        return root;
    };

    Node.prototype.attachTo = function attachTo (domElement, pos) {
        var container = document.createElement("div");
        renderSVG$1(container,
            "<svg xmlns='" + SVG_NS + "' version='1.1'>" +
                this.render() +
            "</svg>"
        );

        var element = container.firstChild.firstChild;
        if (element) {
            if (defined(pos)) {
                domElement.insertBefore(element, domElement.childNodes[pos] || null);
            } else {
                domElement.appendChild(element);
            }
            this.setElement(element);
        }
    };

    Node.prototype.setElement = function setElement (element) {
        if (this.element) {
            this.element._kendoNode = null;
        }

        this.element = element;
        this.element._kendoNode = this;

        var nodes = this.childNodes;
        for (var i = 0; i < nodes.length; i++) {
            var childElement = element.childNodes[i];
            nodes[i].setElement(childElement);
        }
    };

    Node.prototype.clear = function clear () {
        this.clearDefinitions();

        if (this.element) {
            this.element.innerHTML = "";
        }

        var children = this.childNodes;
        for (var i = 0; i < children.length; i++) {
            children[i].destroy();
        }

        this.childNodes = [];
    };

    Node.prototype.removeSelf = function removeSelf () {
        if (this.element) {
            var parentNode = this.element.parentNode;
            if (parentNode) {
                parentNode.removeChild(this.element);
            }
            this.element = null;
        }

        BaseNode$$1.prototype.removeSelf.call(this);
    };

    Node.prototype.template = function template () {
        return this.renderChildren();
    };

    Node.prototype.render = function render () {
        return this.template();
    };

    Node.prototype.renderChildren = function renderChildren () {
        var nodes = this.childNodes;
        var output = "";

        for (var i = 0; i < nodes.length; i++) {
            output += nodes[i].render();
        }

        return output;
    };

    Node.prototype.optionsChange = function optionsChange (e) {
        var field = e.field;
        var value = e.value;

        if (field === "visible") {
            this.css("display", value ? "" : NONE);
        } else if (DefinitionMap[field] && isDefinition(field, value)) {
            this.updateDefinition(field, value);
        } else if (field === "opacity") {
            this.attr("opacity", value);
        } else if (field === "cursor") {
            this.css("cursor", value);
        } else if (field === "id") {
            if (value) {
                this.attr("id", value);
            } else {
                this.removeAttr("id");
            }
        }

        BaseNode$$1.prototype.optionsChange.call(this, e);
    };

    Node.prototype.attr = function attr (name, value) {
        if (this.element) {
            this.element.setAttribute(name, value);
        }
    };

    Node.prototype.allAttr = function allAttr (attrs) {
        var this$1 = this;

        for (var i = 0; i < attrs.length; i++) {
            this$1.attr(attrs[i][0], attrs[i][1]);
        }
    };

    Node.prototype.css = function css (name, value) {
        if (this.element) {
            this.element.style[name] = value;
        }
    };

    Node.prototype.allCss = function allCss (styles) {
        var this$1 = this;

        for (var i = 0; i < styles.length; i++) {
            this$1.css(styles[i][0], styles[i][1]);
        }
    };

    Node.prototype.removeAttr = function removeAttr (name) {
        if (this.element) {
            this.element.removeAttribute(name);
        }
    };

    Node.prototype.mapTransform = function mapTransform (transform) {
        var attrs = [];
        if (transform) {
            attrs.push([
                TRANSFORM,
                "matrix(" + transform.matrix().toString(6) + ")"
            ]);
        }

        return attrs;
    };

    Node.prototype.renderTransform = function renderTransform () {
        return renderAllAttr(
            this.mapTransform(this.srcElement.transform())
        );
    };

    Node.prototype.transformChange = function transformChange (value) {
        if (value) {
            this.allAttr(this.mapTransform(value));
        } else {
            this.removeAttr(TRANSFORM);
        }
    };

    Node.prototype.mapStyle = function mapStyle () {
        var options = this.srcElement.options;
        var style = [ [ "cursor", options.cursor ] ];

        if (options.visible === false) {
            style.push([ "display", NONE ]);
        }

        return style;
    };

    Node.prototype.renderStyle = function renderStyle$1 () {
        return renderAttr("style", renderStyle(this.mapStyle(true)));
    };

    Node.prototype.renderOpacity = function renderOpacity () {
        return renderAttr("opacity", this.srcElement.options.opacity);
    };

    Node.prototype.renderId = function renderId () {
        return renderAttr("id", this.srcElement.options.id);
    };

    Node.prototype.createDefinitions = function createDefinitions () {
        var srcElement = this.srcElement;
        var definitions = this.definitions;
        if (srcElement) {
            var options = srcElement.options;
            var hasDefinitions;

            for (var field in DefinitionMap) {
                var definition = options.get(field);
                if (definition && isDefinition(field, definition)) {
                    definitions[field] = definition;
                    hasDefinitions = true;
                }
            }
            if (hasDefinitions) {
                this.definitionChange({
                    action: "add",
                    definitions: definitions
                });
            }
        }
    };

    Node.prototype.definitionChange = function definitionChange (e) {
        if (this.parent) {
            this.parent.definitionChange(e);
        }
    };

    Node.prototype.updateDefinition = function updateDefinition (type, value) {
        var definitions = this.definitions;
        var current = definitions[type];
        var attr = DefinitionMap[type];
        var definition = {};
        if (current) {
            definition[type] = current;
            this.definitionChange({
                action: "remove",
                definitions: definition
            });
            delete definitions[type];
        }

        if (!value) {
            if (current) {
                this.removeAttr(attr);
            }
        } else {
            definition[type] = value;
            this.definitionChange({
                action: "add",
                definitions: definition
            });
            definitions[type] = value;
            this.attr(attr, this.refUrl(value.id));
        }
    };

    Node.prototype.clearDefinitions = function clearDefinitions () {
        var definitions = this.definitions;

        this.definitionChange({
            action: "remove",
            definitions: definitions
        });
        this.definitions = {};
    };

    Node.prototype.renderDefinitions = function renderDefinitions () {
        return renderAllAttr(this.mapDefinitions());
    };

    Node.prototype.mapDefinitions = function mapDefinitions () {
        var this$1 = this;

        var definitions = this.definitions;
        var attrs = [];

        for (var field in definitions) {
            attrs.push([ DefinitionMap[field], this$1.refUrl(definitions[field].id) ]);
        }

        return attrs;
    };

    Node.prototype.refUrl = function refUrl (id) {
        var skipBaseHref = (this.options || {}).skipBaseHref;
        var baseHref = this.baseUrl().replace(/'/g, "\\'");
        var base = skipBaseHref ? '' : baseHref;
        return ("url(" + base + "#" + id + ")");
    };

    Node.prototype.baseUrl = function baseUrl$1 () {
        return baseUrl();
    };

    return Node;
}(BaseNode));

var GradientStopNode = (function (Node$$1) {
    function GradientStopNode () {
        Node$$1.apply(this, arguments);
    }

    if ( Node$$1 ) GradientStopNode.__proto__ = Node$$1;
    GradientStopNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    GradientStopNode.prototype.constructor = GradientStopNode;

    GradientStopNode.prototype.template = function template () {
        return ("<stop " + (this.renderOffset()) + " " + (this.renderStyle()) + " />");
    };

    GradientStopNode.prototype.renderOffset = function renderOffset () {
        return renderAttr("offset", this.srcElement.offset());
    };

    GradientStopNode.prototype.mapStyle = function mapStyle () {
        var srcElement = this.srcElement;
        return [
            [ "stop-color", srcElement.color() ],
            [ "stop-opacity", srcElement.opacity() ]
        ];
    };

    GradientStopNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "offset") {
            this.attr(e.field, e.value);
        } else if (e.field === "color" || e.field === "opacity") {
            this.css("stop-" + e.field, e.value);
        }
    };

    return GradientStopNode;
}(Node));

var GradientNode = (function (Node$$1) {
    function GradientNode(srcElement) {
        Node$$1.call(this, srcElement);

        this.id = srcElement.id;

        this.loadStops();
    }

    if ( Node$$1 ) GradientNode.__proto__ = Node$$1;
    GradientNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    GradientNode.prototype.constructor = GradientNode;

    GradientNode.prototype.loadStops = function loadStops () {
        var this$1 = this;

        var stops = this.srcElement.stops;
        var element = this.element;

        for (var idx = 0; idx < stops.length; idx++) {
            var stopNode = new GradientStopNode(stops[idx]);
            this$1.append(stopNode);
            if (element) {
                stopNode.attachTo(element);
            }
        }
    };

    GradientNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "gradient.stops") {
            BaseNode.prototype.clear.call(this);
            this.loadStops();
        } else if (e.field === "gradient") {
            this.allAttr(this.mapCoordinates());
        }
    };

    GradientNode.prototype.renderCoordinates = function renderCoordinates () {
        return renderAllAttr(this.mapCoordinates());
    };

    GradientNode.prototype.mapSpace = function mapSpace () {
        return [ "gradientUnits", this.srcElement.userSpace() ? "userSpaceOnUse" : "objectBoundingBox" ];
    };

    return GradientNode;
}(Node));

var LinearGradientNode = (function (GradientNode$$1) {
    function LinearGradientNode () {
        GradientNode$$1.apply(this, arguments);
    }

    if ( GradientNode$$1 ) LinearGradientNode.__proto__ = GradientNode$$1;
    LinearGradientNode.prototype = Object.create( GradientNode$$1 && GradientNode$$1.prototype );
    LinearGradientNode.prototype.constructor = LinearGradientNode;

    LinearGradientNode.prototype.template = function template () {
        return ("<linearGradient id='" + (this.id) + "' " + (this.renderCoordinates()) + ">" + (this.renderChildren()) + "</linearGradient>");
    };

    LinearGradientNode.prototype.mapCoordinates = function mapCoordinates () {
        var srcElement = this.srcElement;
        var start = srcElement.start();
        var end = srcElement.end();
        var attrs = [
            [ "x1", start.x ],
            [ "y1", start.y ],
            [ "x2", end.x ],
            [ "y2", end.y ],
            this.mapSpace()
        ];

        return attrs;
    };

    return LinearGradientNode;
}(GradientNode));

var RadialGradientNode = (function (GradientNode$$1) {
    function RadialGradientNode () {
        GradientNode$$1.apply(this, arguments);
    }

    if ( GradientNode$$1 ) RadialGradientNode.__proto__ = GradientNode$$1;
    RadialGradientNode.prototype = Object.create( GradientNode$$1 && GradientNode$$1.prototype );
    RadialGradientNode.prototype.constructor = RadialGradientNode;

    RadialGradientNode.prototype.template = function template () {
        return ("<radialGradient id='" + (this.id) + "' " + (this.renderCoordinates()) + ">" + (this.renderChildren()) + "</radialGradient>");
    };

    RadialGradientNode.prototype.mapCoordinates = function mapCoordinates () {
        var srcElement = this.srcElement;
        var center = srcElement.center();
        var radius = srcElement.radius();
        var attrs = [
            [ "cx", center.x ],
            [ "cy", center.y ],
            [ "r", radius ],
            this.mapSpace()
        ];
        return attrs;
    };

    return RadialGradientNode;
}(GradientNode));

var ClipNode = (function (Node$$1) {
    function ClipNode(srcElement) {
        Node$$1.call(this);

        this.srcElement = srcElement;
        this.id = srcElement.id;

        this.load([ srcElement ]);
    }

    if ( Node$$1 ) ClipNode.__proto__ = Node$$1;
    ClipNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    ClipNode.prototype.constructor = ClipNode;

    ClipNode.prototype.template = function template () {
        return ("<clipPath id='" + (this.id) + "'>" + (this.renderChildren()) + "</clipPath>");
    };

    return ClipNode;
}(Node));

var DefinitionNode = (function (Node$$1) {
    function DefinitionNode() {
        Node$$1.call(this);
        this.definitionMap = {};
    }

    if ( Node$$1 ) DefinitionNode.__proto__ = Node$$1;
    DefinitionNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    DefinitionNode.prototype.constructor = DefinitionNode;

    DefinitionNode.prototype.attachTo = function attachTo (domElement) {
        this.element = domElement;
    };

    DefinitionNode.prototype.template = function template () {
        return ("<defs>" + (this.renderChildren()) + "</defs>");
    };

    DefinitionNode.prototype.definitionChange = function definitionChange (e) {
        var definitions = e.definitions;
        var action = e.action;

        if (action === "add") {
            this.addDefinitions(definitions);
        } else if (action === "remove") {
            this.removeDefinitions(definitions);
        }
    };

    DefinitionNode.prototype.createDefinition = function createDefinition (type, item) {
        var nodeType;
        if (type === "clip") {
            nodeType = ClipNode;
        } else if (type === "fill") {
            if (item instanceof LinearGradient) {
                nodeType = LinearGradientNode;
            } else if (item instanceof RadialGradient) {
                nodeType = RadialGradientNode;
            }
        }
        return new nodeType(item);
    };

    DefinitionNode.prototype.addDefinitions = function addDefinitions (definitions) {
        var this$1 = this;

        for (var field in definitions) {
            this$1.addDefinition(field, definitions[field]);
        }
    };

    DefinitionNode.prototype.addDefinition = function addDefinition (type, srcElement) {
        var ref = this;
        var element = ref.element;
        var definitionMap = ref.definitionMap;
        var id = srcElement.id;
        var mapItem = definitionMap[id];
        if (!mapItem) {
            var node = this.createDefinition(type, srcElement);
            definitionMap[id] = {
                element: node,
                count: 1
            };
            this.append(node);
            if (element) {
                node.attachTo(this.element);
            }
        } else {
            mapItem.count++;
        }
    };

    DefinitionNode.prototype.removeDefinitions = function removeDefinitions (definitions) {
        var this$1 = this;

        for (var field in definitions) {
            this$1.removeDefinition(definitions[field]);
        }
    };

    DefinitionNode.prototype.removeDefinition = function removeDefinition (srcElement) {
        var definitionMap = this.definitionMap;
        var id = srcElement.id;
        var mapItem = definitionMap[id];

        if (mapItem) {
            mapItem.count--;
            if (mapItem.count === 0) {
                this.remove(this.childNodes.indexOf(mapItem.element), 1);
                delete definitionMap[id];
            }
        }
    };

    return DefinitionNode;
}(Node));

var RootNode = (function (Node$$1) {
    function RootNode(options) {
        Node$$1.call(this);
        this.options = options;
        this.defs = new DefinitionNode();
    }

    if ( Node$$1 ) RootNode.__proto__ = Node$$1;
    RootNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    RootNode.prototype.constructor = RootNode;

    RootNode.prototype.attachTo = function attachTo (domElement) {
        this.element = domElement;
        this.defs.attachTo(domElement.firstElementChild);
    };

    RootNode.prototype.clear = function clear () {
        BaseNode.prototype.clear.call(this);
    };

    RootNode.prototype.template = function template () {
        return this.defs.render() + this.renderChildren();
    };

    RootNode.prototype.definitionChange = function definitionChange (e) {
        this.defs.definitionChange(e);
    };

    return RootNode;
}(Node));

var RTL = 'rtl';

function alignToScreen(element) {
    var ctm;

    try {
        ctm = element.getScreenCTM ? element.getScreenCTM() : null;
    } catch (e) { } // eslint-disable-line no-empty

    if (ctm) {
        var left = - ctm.e % 1;
        var top = - ctm.f % 1;
        var style = element.style;

        if (left !== 0 || top !== 0) {
            style.left = left + "px";
            style.top = top + "px";
        }
    }
}

var Surface$1 = (function (BaseSurface) {
    function Surface$$1(element, options) {
        BaseSurface.call(this, element, options);

        this._root = new RootNode(Object.assign({
            rtl: elementStyles(element, 'direction').direction === RTL
        }, this.options));

        renderSVG$1(this.element, this._template());

        this._rootElement = this.element.firstElementChild;

        alignToScreen(this._rootElement);

        this._root.attachTo(this._rootElement);

        bindEvents(this.element, {
            click: this._click,
            mouseover: this._mouseenter,
            mouseout: this._mouseleave,
            mousemove: this._mousemove
        });

        this.resize();
    }

    if ( BaseSurface ) Surface$$1.__proto__ = BaseSurface;
    Surface$$1.prototype = Object.create( BaseSurface && BaseSurface.prototype );
    Surface$$1.prototype.constructor = Surface$$1;

    Surface$$1.prototype.destroy = function destroy () {
        if (this._root) {
            this._root.destroy();
            this._root = null;
            this._rootElement = null;
            unbindEvents(this.element, {
                click: this._click,
                mouseover: this._mouseenter,
                mouseout: this._mouseleave,
                mousemove: this._mousemove
            });
        }

        BaseSurface.prototype.destroy.call(this);
    };

    Surface$$1.prototype.translate = function translate (offset) {
        var viewBox = (Math.round(offset.x)) + " " + (Math.round(offset.y)) + " " + (this._size.width) + " " + (this._size.height);

        this._offset = offset;
        this._rootElement.setAttribute("viewBox", viewBox);
    };

    Surface$$1.prototype.draw = function draw (element) {
        BaseSurface.prototype.draw.call(this, element);
        this._root.load([ element ]);
    };

    Surface$$1.prototype.clear = function clear () {
        BaseSurface.prototype.clear.call(this);
        this._root.clear();
    };

    Surface$$1.prototype.svg = function svg () {
        return "<?xml version='1.0' ?>" + this._template();
    };

    Surface$$1.prototype.exportVisual = function exportVisual () {
        var ref = this;
        var visual = ref._visual;
        var offset = ref._offset;

        if (offset) {
            var wrap = new Group();
            wrap.children.push(visual);

            wrap.transform(
                transform$1().translate(-offset.x, -offset.y)
            );

            visual = wrap;
        }

        return visual;
    };

    Surface$$1.prototype._resize = function _resize () {
        if (this._offset) {
            this.translate(this._offset);
        }
    };

    Surface$$1.prototype._template = function _template () {
        return ("<svg style='width: 100%; height: 100%; overflow: hidden;' xmlns='" + SVG_NS + "' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>" + (this._root.render()) + "</svg>");
    };

    return Surface$$1;
}(Surface));

Surface$1.prototype.type = "svg";

if (typeof document !== "undefined" && document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1")) {
    Surface.support.svg = true;
    SurfaceFactory.current.register("svg", Surface$1, 10);
}

var GroupNode = (function (Node$$1) {
    function GroupNode () {
        Node$$1.apply(this, arguments);
    }

    if ( Node$$1 ) GroupNode.__proto__ = Node$$1;
    GroupNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    GroupNode.prototype.constructor = GroupNode;

    GroupNode.prototype.template = function template () {
        return ("<g" + (this.renderId() + this.renderTransform() + this.renderStyle() + this.renderOpacity() + this.renderDefinitions()) + ">" + (this.renderChildren()) + "</g>");
    };

    GroupNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "transform") {
            this.transformChange(e.value);
        }

        Node$$1.prototype.optionsChange.call(this, e);
    };

    return GroupNode;
}(Node));

NODE_MAP.Group = GroupNode;

var DASH_ARRAYS = {
    dot: [ 1.5, 3.5 ],
    dash: [ 4, 3.5 ],
    longdash: [ 8, 3.5 ],
    dashdot: [ 3.5, 3.5, 1.5, 3.5 ],
    longdashdot: [ 8, 3.5, 1.5, 3.5 ],
    longdashdotdot: [ 8, 3.5, 1.5, 3.5, 1.5, 3.5 ]
};

var SOLID = "solid";
var BUTT = "butt";

var ATTRIBUTE_MAP = {
    "fill.opacity": "fill-opacity",
    "stroke.color": "stroke",
    "stroke.width": "stroke-width",
    "stroke.opacity": "stroke-opacity"
};
var SPACE$1 = " ";

var PathNode = (function (Node$$1) {
    function PathNode () {
        Node$$1.apply(this, arguments);
    }

    if ( Node$$1 ) PathNode.__proto__ = Node$$1;
    PathNode.prototype = Object.create( Node$$1 && Node$$1.prototype );
    PathNode.prototype.constructor = PathNode;

    PathNode.prototype.geometryChange = function geometryChange () {
        this.attr("d", this.renderData());
        this.invalidate();
    };

    PathNode.prototype.optionsChange = function optionsChange (e) {
        switch (e.field) {
            case "fill":
                if (e.value) {
                    this.allAttr(this.mapFill(e.value));
                } else {
                    this.removeAttr("fill");
                }
                break;

            case "fill.color":
                this.allAttr(this.mapFill({ color: e.value }));
                break;

            case "stroke":
                if (e.value) {
                    this.allAttr(this.mapStroke(e.value));
                } else {
                    this.removeAttr("stroke");
                }
                break;

            case "transform":
                this.transformChange(e.value);
                break;

            default:
                var name = ATTRIBUTE_MAP[e.field];
                if (name) {
                    this.attr(name, e.value);
                }
                break;
        }

        Node$$1.prototype.optionsChange.call(this, e);
    };

    PathNode.prototype.content = function content () {
        if (this.element) {
            this.element.textContent = this.srcElement.content();
        }
    };

    PathNode.prototype.renderData = function renderData () {
        return this.printPath(this.srcElement);
    };

    PathNode.prototype.printPath = function printPath (path) {
        var this$1 = this;

        var segments = path.segments;
        var length = segments.length;
        if (length > 0) {
            var parts = [];
            var output, currentType;

            for (var i = 1; i < length; i++) {
                var segmentType = this$1.segmentType(segments[i - 1], segments[i]);
                if (segmentType !== currentType) {
                    currentType = segmentType;
                    parts.push(segmentType);
                }

                if (segmentType === "L") {
                    parts.push(this$1.printPoints(segments[i].anchor()));
                } else {
                    parts.push(this$1.printPoints(segments[i - 1].controlOut(), segments[i].controlIn(), segments[i].anchor()));
                }
            }

            output = "M" + this.printPoints(segments[0].anchor()) + SPACE$1 + parts.join(SPACE$1);
            if (path.options.closed) {
                output += "Z";
            }

            return output;
        }
    };

    PathNode.prototype.printPoints = function printPoints () {
        var points = arguments;
        var length = points.length;
        var result = [];

        for (var i = 0; i < length; i++) {
            result.push(points[i].toString(3));
        }

        return result.join(" ");
    };

    PathNode.prototype.segmentType = function segmentType (segmentStart, segmentEnd) {
        return segmentStart.controlOut() && segmentEnd.controlIn() ? "C" : "L";
    };

    PathNode.prototype.mapStroke = function mapStroke (stroke) {
        var attrs = [];

        if (stroke && !isTransparent(stroke.color)) {
            attrs.push([ "stroke", stroke.color ]);
            attrs.push([ "stroke-width", stroke.width ]);
            attrs.push([ "stroke-linecap", this.renderLinecap(stroke) ]);
            attrs.push([ "stroke-linejoin", stroke.lineJoin ]);

            if (defined(stroke.opacity)) {
                attrs.push([ "stroke-opacity", stroke.opacity ]);
            }

            if (defined(stroke.dashType)) {
                attrs.push([ "stroke-dasharray", this.renderDashType(stroke) ]);
            }
        } else {
            attrs.push([ "stroke", NONE ]);
        }

        return attrs;
    };

    PathNode.prototype.renderStroke = function renderStroke () {
        return renderAllAttr(
            this.mapStroke(this.srcElement.options.stroke)
        );
    };

    PathNode.prototype.renderDashType = function renderDashType (stroke) {
        var dashType = stroke.dashType;
        var width = stroke.width; if ( width === void 0 ) width = 1;

        if (dashType && dashType !== SOLID) {
            var dashArray = DASH_ARRAYS[dashType.toLowerCase()];
            var result = [];

            for (var i = 0; i < dashArray.length; i++) {
                result.push(dashArray[i] * width);
            }

            return result.join(" ");
        }
    };

    PathNode.prototype.renderLinecap = function renderLinecap (stroke) {
        var dashType = stroke.dashType;
        var lineCap = stroke.lineCap;

        return (dashType && dashType !== "solid") ? BUTT : lineCap;
    };

    PathNode.prototype.mapFill = function mapFill (fill) {
        var attrs = [];
        if (!(fill && fill.nodeType === "Gradient")) {
            if (fill && !isTransparent(fill.color)) {
                attrs.push([ "fill", fill.color ]);

                if (defined(fill.opacity)) {
                    attrs.push([ "fill-opacity", fill.opacity ]);
                }
            } else {
                attrs.push([ "fill", NONE ]);
            }
        }

        return attrs;
    };

    PathNode.prototype.renderFill = function renderFill () {
        return renderAllAttr(
            this.mapFill(this.srcElement.options.fill)
        );
    };

    PathNode.prototype.template = function template () {
        return "<path " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) + " " + (renderAttr('d', this.renderData())) +
                    "" + (this.renderStroke()) + (this.renderFill()) + (this.renderDefinitions()) + (this.renderTransform()) + "></path>";
    };

    return PathNode;
}(Node));

NODE_MAP.Path = PathNode;

var ArcNode = (function (PathNode$$1) {
    function ArcNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) ArcNode.__proto__ = PathNode$$1;
    ArcNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    ArcNode.prototype.constructor = ArcNode;

    ArcNode.prototype.renderData = function renderData () {
        return this.printPath(this.srcElement.toPath());
    };

    return ArcNode;
}(PathNode));

NODE_MAP.Arc = ArcNode;

var CircleNode = (function (PathNode$$1) {
    function CircleNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) CircleNode.__proto__ = PathNode$$1;
    CircleNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    CircleNode.prototype.constructor = CircleNode;

    CircleNode.prototype.geometryChange = function geometryChange () {
        var center = this.center();
        this.attr("cx", center.x);
        this.attr("cy", center.y);
        this.attr("r", this.radius());
        this.invalidate();
    };

    CircleNode.prototype.center = function center () {
        return this.srcElement.geometry().center;
    };

    CircleNode.prototype.radius = function radius () {
        return this.srcElement.geometry().radius;
    };

    CircleNode.prototype.template = function template () {
        return "<circle " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) +
                    "cx='" + (this.center().x) + "' cy='" + (this.center().y) + "' r='" + (this.radius()) + "'" +
                    (this.renderStroke()) + " " + (this.renderFill()) + " " + (this.renderDefinitions()) +
                    (this.renderTransform()) + " ></circle>";
    };

    return CircleNode;
}(PathNode));

NODE_MAP.Circle = CircleNode;

var RectNode = (function (PathNode$$1) {
    function RectNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) RectNode.__proto__ = PathNode$$1;
    RectNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    RectNode.prototype.constructor = RectNode;

    RectNode.prototype.geometryChange = function geometryChange () {
        var geometry = this.srcElement.geometry();
        this.attr("x", geometry.origin.x);
        this.attr("y", geometry.origin.y);
        this.attr("width", geometry.size.width);
        this.attr("height", geometry.size.height);
        this.invalidate();
    };

    RectNode.prototype.size = function size () {
        return this.srcElement.geometry().size;
    };

    RectNode.prototype.origin = function origin () {
        return this.srcElement.geometry().origin;
    };

    RectNode.prototype.template = function template () {
        return "<rect " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) + " x='" + (this.origin().x) + "' y='" + (this.origin().y) + "' " +
                    "width='" + (this.size().width) + "' height='" + (this.size().height) + "' " + (this.renderStroke()) + " " +
                    (this.renderFill()) + " " + (this.renderDefinitions()) + " " + (this.renderTransform()) + " />";
    };

    return RectNode;
}(PathNode));

NODE_MAP.Rect = RectNode;

var ImageNode = (function (PathNode$$1) {
    function ImageNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) ImageNode.__proto__ = PathNode$$1;
    ImageNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    ImageNode.prototype.constructor = ImageNode;

    ImageNode.prototype.geometryChange = function geometryChange () {
        this.allAttr(this.mapPosition());
        this.invalidate();
    };

    ImageNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "src") {
            this.allAttr(this.mapSource());
        }

        PathNode$$1.prototype.optionsChange.call(this, e);
    };

    ImageNode.prototype.mapPosition = function mapPosition () {
        var rect = this.srcElement.rect();
        var tl = rect.topLeft();

        return [
            [ "x", tl.x ],
            [ "y", tl.y ],
            [ "width", rect.width() + "px" ],
            [ "height", rect.height() + "px" ]
        ];
    };

    ImageNode.prototype.renderPosition = function renderPosition () {
        return renderAllAttr(this.mapPosition());
    };

    ImageNode.prototype.mapSource = function mapSource (encode) {
        var src = this.srcElement.src();

        if (encode) {
            src = htmlEncode(src);
        }

        return [ [ "xlink:href", src ] ];
    };

    ImageNode.prototype.renderSource = function renderSource () {
        return renderAllAttr(this.mapSource(true));
    };

    ImageNode.prototype.template = function template () {
        return "<image preserveAspectRatio='none' " + (this.renderId()) + " " + (this.renderStyle()) + " " + (this.renderTransform()) + " " + (this.renderOpacity()) +
               (this.renderPosition()) + " " + (this.renderSource()) + " " + (this.renderDefinitions()) + ">" +
               "</image>";
    };

    return ImageNode;
}(PathNode));

NODE_MAP.Image = ImageNode;

var ENTITY_REGEX = /&(?:[a-zA-Z]+|#\d+);/g;

function decodeEntities(text) {
    if (!text || typeof text !== "string" || !ENTITY_REGEX.test(text)) {
        return text;
    }

    var element = decodeEntities._element;
    ENTITY_REGEX.lastIndex = 0;

    return text.replace(ENTITY_REGEX, function (match) {
        element.innerHTML = match;

        return element.textContent || element.innerText;
    });
}

if (typeof document !== "undefined") {
    decodeEntities._element = document.createElement("span");
}

var TextNode = (function (PathNode$$1) {
    function TextNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) TextNode.__proto__ = PathNode$$1;
    TextNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    TextNode.prototype.constructor = TextNode;

    TextNode.prototype.geometryChange = function geometryChange () {
        var pos = this.pos();
        this.attr("x", pos.x);
        this.attr("y", pos.y);
        this.invalidate();
    };

    TextNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "font") {
            this.attr("style", renderStyle(this.mapStyle()));
            this.geometryChange();
        } else if (e.field === "content") {
            PathNode$$1.prototype.content.call(this, this.srcElement.content());
        }

        PathNode$$1.prototype.optionsChange.call(this, e);
    };

    TextNode.prototype.mapStyle = function mapStyle (encode) {
        var style = PathNode$$1.prototype.mapStyle.call(this, encode);
        var font = this.srcElement.options.font;

        if (encode) {
            font = htmlEncode(font);
        }

        style.push([ "font", font ], [ "white-space", "pre" ]);

        return style;
    };

    TextNode.prototype.pos = function pos () {
        var pos = this.srcElement.position();
        var size = this.srcElement.measure();
        return pos.clone().setY(pos.y + size.baseline);
    };

    TextNode.prototype.renderContent = function renderContent () {
        var content = this.srcElement.content();
        content = decodeEntities(content);
        content = htmlEncode(content);

        return normalizeText(content);
    };

    TextNode.prototype.renderTextAnchor = function renderTextAnchor () {
        var anchor;

        if ((this.options || {}).rtl && !(support.browser.msie || support.browser.edge)) {
            anchor = 'end';
        }

        return renderAttr("text-anchor", anchor);
    };

    TextNode.prototype.template = function template () {
        return "<text " + (this.renderId()) + " " + (this.renderTextAnchor()) + " " + (this.renderStyle()) + " " + (this.renderOpacity()) +
                    "x='" + (this.pos().x) + "' y='" + (this.pos().y) + "' " + (this.renderStroke()) + " " + (this.renderTransform()) + " " + (this.renderDefinitions()) +
                    (this.renderFill()) + ">" + (this.renderContent()) + "</text>";
    };

    return TextNode;
}(PathNode));

NODE_MAP.Text = TextNode;

var MultiPathNode = (function (PathNode$$1) {
    function MultiPathNode () {
        PathNode$$1.apply(this, arguments);
    }

    if ( PathNode$$1 ) MultiPathNode.__proto__ = PathNode$$1;
    MultiPathNode.prototype = Object.create( PathNode$$1 && PathNode$$1.prototype );
    MultiPathNode.prototype.constructor = MultiPathNode;

    MultiPathNode.prototype.renderData = function renderData () {
        var this$1 = this;

        var paths = this.srcElement.paths;

        if (paths.length > 0) {
            var result = [];

            for (var i = 0; i < paths.length; i++) {
                result.push(this$1.printPath(paths[i]));
            }

            return result.join(" ");
        }
    };

    return MultiPathNode;
}(PathNode));

NODE_MAP.MultiPath = MultiPathNode;

function exportGroup(group) {
    var root = new RootNode({
        skipBaseHref: true
    });
    var bbox = group.clippedBBox();
    var rootGroup = group;

    if (bbox) {
        var origin = bbox.getOrigin();
        var exportRoot = new Group();
        exportRoot.transform(transform$1().translate(-origin.x, -origin.y));
        exportRoot.children.push(group);
        rootGroup = exportRoot;
    }

    root.load([ rootGroup ]);

    var svg = "<?xml version='1.0' ?><svg xmlns='" + SVG_NS + "' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>" + (root.render()) + "</svg>";

    root.destroy();

    return svg;
}



var svg$1 = Object.freeze({
	Surface: Surface$1,
	RootNode: RootNode,
	Node: Node,
	GroupNode: GroupNode,
	ArcNode: ArcNode,
	CircleNode: CircleNode,
	RectNode: RectNode,
	ImageNode: ImageNode,
	TextNode: TextNode,
	PathNode: PathNode,
	MultiPathNode: MultiPathNode,
	DefinitionNode: DefinitionNode,
	ClipNode: ClipNode,
	GradientStopNode: GradientStopNode,
	LinearGradientNode: LinearGradientNode,
	RadialGradientNode: RadialGradientNode,
	exportGroup: exportGroup
});

var NODE_MAP$2 = {};

function renderPath(ctx, path) {
    var segments = path.segments;

    if (segments.length === 0) {
        return;
    }

    var segment = segments[0];
    var anchor = segment.anchor();
    ctx.moveTo(anchor.x, anchor.y);

    for (var i = 1; i < segments.length; i++) {
        segment = segments[i];
        anchor = segment.anchor();

        var prevSeg = segments[i - 1];
        var prevOut = prevSeg.controlOut();
        var controlIn = segment.controlIn();

        if (prevOut && controlIn) {
            ctx.bezierCurveTo(prevOut.x, prevOut.y,
                              controlIn.x, controlIn.y,
                              anchor.x, anchor.y);
        } else {
            ctx.lineTo(anchor.x, anchor.y);
        }
    }

    if (path.options.closed) {
        ctx.closePath();
    }
}

var Node$2 = (function (BaseNode$$1) {
    function Node(srcElement) {
        BaseNode$$1.call(this, srcElement);
        if (srcElement) {
            this.initClip();
        }
    }

    if ( BaseNode$$1 ) Node.__proto__ = BaseNode$$1;
    Node.prototype = Object.create( BaseNode$$1 && BaseNode$$1.prototype );
    Node.prototype.constructor = Node;

    Node.prototype.initClip = function initClip () {
        var clip = this.srcElement.clip();
        if (clip) {
            this.clip = clip;
            clip.addObserver(this);
        }
    };

    Node.prototype.clear = function clear () {
        if (this.srcElement) {
            this.srcElement.removeObserver(this);
        }

        this.clearClip();

        BaseNode$$1.prototype.clear.call(this);
    };

    Node.prototype.clearClip = function clearClip () {
        if (this.clip) {
            this.clip.removeObserver(this);
            delete this.clip;
        }
    };

    Node.prototype.setClip = function setClip (ctx) {
        if (this.clip) {
            ctx.beginPath();
            renderPath(ctx, this.clip);
            ctx.clip();
        }
    };

    Node.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "clip") {
            this.clearClip();
            this.initClip();
        }

        BaseNode$$1.prototype.optionsChange.call(this, e);
    };

    Node.prototype.setTransform = function setTransform (ctx) {
        if (this.srcElement) {
            var transform = this.srcElement.transform();
            if (transform) {
                ctx.transform.apply(ctx, transform.matrix().toArray(6));
            }
        }
    };

    Node.prototype.loadElements = function loadElements (elements, pos, cors) {
        var this$1 = this;

        for (var i = 0; i < elements.length; i++) {
            var srcElement = elements[i];
            var children = srcElement.children;

            var childNode = new NODE_MAP$2[srcElement.nodeType](srcElement, cors);

            if (children && children.length > 0) {
                childNode.load(children, pos, cors);
            }

            if (defined(pos)) {
                this$1.insertAt(childNode, pos);
            } else {
                this$1.append(childNode);
            }
        }
    };

    Node.prototype.load = function load (elements, pos, cors) {
        this.loadElements(elements, pos, cors);

        this.invalidate();
    };

    Node.prototype.setOpacity = function setOpacity (ctx) {
        if (this.srcElement) {
            var opacity = this.srcElement.opacity();
            if (defined(opacity)) {
                this.globalAlpha(ctx, opacity);
            }
        }
    };

    Node.prototype.globalAlpha = function globalAlpha (ctx, value) {
        var opactity = value;
        if (opactity && ctx.globalAlpha) {
            opactity *= ctx.globalAlpha;
        }
        ctx.globalAlpha = opactity;
    };

    Node.prototype.visible = function visible () {
        var src = this.srcElement;
        return !src || (src && src.options.visible !== false);
    };

    return Node;
}(BaseNode));

var GroupNode$2 = (function (Node) {
    function GroupNode () {
        Node.apply(this, arguments);
    }

    if ( Node ) GroupNode.__proto__ = Node;
    GroupNode.prototype = Object.create( Node && Node.prototype );
    GroupNode.prototype.constructor = GroupNode;

    GroupNode.prototype.renderTo = function renderTo (ctx) {
        if (!this.visible()) {
            return;
        }

        ctx.save();

        this.setTransform(ctx);
        this.setClip(ctx);
        this.setOpacity(ctx);

        var childNodes = this.childNodes;
        for (var i = 0; i < childNodes.length; i++) {
            var child = childNodes[i];
            if (child.visible()) {
                child.renderTo(ctx);
            }
        }

        ctx.restore();
    };

    return GroupNode;
}(Node$2));

Traversable.extend(GroupNode$2.prototype, "childNodes");

NODE_MAP$2.Group = GroupNode$2;

var FRAME_DELAY = 1000 / 60;

var RootNode$2 = (function (GroupNode) {
    function RootNode(canvas, size) {
        GroupNode.call(this);

        this.canvas = canvas;
        this.size = size;
        this.ctx = canvas.getContext("2d");

        var invalidateHandler = this._invalidate.bind(this);
        this.invalidate = throttle(function () {
            animationFrameProxy(invalidateHandler);
        }, FRAME_DELAY);
    }

    if ( GroupNode ) RootNode.__proto__ = GroupNode;
    RootNode.prototype = Object.create( GroupNode && GroupNode.prototype );
    RootNode.prototype.constructor = RootNode;

    RootNode.prototype.destroy = function destroy () {
        GroupNode.prototype.destroy.call(this);
        this.canvas = null;
        this.ctx = null;
    };

    RootNode.prototype.load = function load (elements, pos, cors) {
        this.loadElements(elements, pos, cors);
        this._invalidate();
    };

    RootNode.prototype._rescale = function _rescale (scale) {
        var ref = this;
        var canvas = ref.canvas;
        var size = ref.size;
        canvas.width = size.width * scale;
        canvas.height = size.height * scale;
        this.ctx.scale(scale, scale);
    };

    RootNode.prototype._devicePixelRatio = function _devicePixelRatio () {
        if (window.devicePixelRatio === 'number') {
            return window.devicePixelRatio;
        }

        return 1;
    };

    RootNode.prototype._invalidate = function _invalidate (options) {
        if (!this.ctx) {
            return;
        }

        var fixedScale = options && options.fixedScale;
        var scale = fixedScale ? 1 : this._devicePixelRatio();
        this._rescale(scale);

        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.renderTo(this.ctx);
    };

    return RootNode;
}(GroupNode$2));

Traversable.extend(RootNode$2.prototype, "childNodes");

var QuadRoot = (function (Class$$1) {
    function QuadRoot() {
        Class$$1.call(this);

        this.shapes = [];
    }

    if ( Class$$1 ) QuadRoot.__proto__ = Class$$1;
    QuadRoot.prototype = Object.create( Class$$1 && Class$$1.prototype );
    QuadRoot.prototype.constructor = QuadRoot;

    QuadRoot.prototype._add = function _add (shape, bbox) {
        this.shapes.push({
            bbox: bbox,
            shape: shape
        });
        shape._quadNode = this;
    };

    QuadRoot.prototype.pointShapes = function pointShapes (point) {
        var shapes = this.shapes;
        var length = shapes.length;
        var result = [];
        for (var idx = 0; idx < length; idx++) {
            if (shapes[idx].bbox.containsPoint(point)) {
                result.push(shapes[idx].shape);
            }
        }
        return result;
    };

    QuadRoot.prototype.insert = function insert (shape, bbox) {
        this._add(shape, bbox);
    };

    QuadRoot.prototype.remove = function remove (shape) {
        var shapes = this.shapes;
        var length = shapes.length;

        for (var idx = 0; idx < length; idx++) {
            if (shapes[idx].shape === shape) {
                shapes.splice(idx, 1);
                break;
            }
        }
    };

    return QuadRoot;
}(Class));

var QuadNode = (function (QuadRoot$$1) {
    function QuadNode(rect) {
        QuadRoot$$1.call(this);
        this.children = [];
        this.rect = rect;
    }

    if ( QuadRoot$$1 ) QuadNode.__proto__ = QuadRoot$$1;
    QuadNode.prototype = Object.create( QuadRoot$$1 && QuadRoot$$1.prototype );
    QuadNode.prototype.constructor = QuadNode;

    QuadNode.prototype.inBounds = function inBounds (rect) {
        var nodeRect = this.rect;
        var nodeBottomRight = nodeRect.bottomRight();
        var bottomRight = rect.bottomRight();
        var inBounds = nodeRect.origin.x <= rect.origin.x && nodeRect.origin.y <= rect.origin.y && bottomRight.x <= nodeBottomRight.x &&
            bottomRight.y <= nodeBottomRight.y;
        return inBounds;
    };

    QuadNode.prototype.pointShapes = function pointShapes (point) {
        var children = this.children;
        var length = children.length;
        var result = QuadRoot$$1.prototype.pointShapes.call(this, point);
        for (var idx = 0; idx < length; idx++) {
            append$1$1(result, children[idx].pointShapes(point));
        }
        return result;
    };

    QuadNode.prototype.insert = function insert (shape, bbox) {
        var children = this.children;
        var inserted = false;

        if (this.inBounds(bbox)) {
            if (this.shapes.length < 4) {
                this._add(shape, bbox);
            } else {
                if (!children.length) {
                    this._initChildren();
                }

                for (var idx = 0; idx < children.length; idx++) {
                    if (children[idx].insert(shape, bbox)) {
                        inserted = true;
                        break;
                    }
                }

                if (!inserted) {
                    this._add(shape, bbox);
                }
            }
            inserted = true;
        }

        return inserted;
    };

    QuadNode.prototype._initChildren = function _initChildren () {
        var ref = this;
        var rect = ref.rect;
        var children = ref.children;
        var center = rect.center();
        var halfWidth = rect.width() / 2;
        var halfHeight = rect.height() / 2;

        children.push(
            new QuadNode(new Rect([ rect.origin.x, rect.origin.y ], [ halfWidth, halfHeight ])),
            new QuadNode(new Rect([ center.x, rect.origin.y ], [ halfWidth, halfHeight ])),
            new QuadNode(new Rect([ rect.origin.x, center.y ], [ halfWidth, halfHeight ])),
            new QuadNode(new Rect([ center.x, center.y ], [ halfWidth, halfHeight ]))
        );
    };

    return QuadNode;
}(QuadRoot));

var ROOT_SIZE = 3000;
var LEVEL_STEP = 10000;
var MAX_LEVEL = 75;

var ShapesQuadTree = (function (Class$$1) {
    function ShapesQuadTree() {
        Class$$1.call(this);

        this.initRoots();
    }

    if ( Class$$1 ) ShapesQuadTree.__proto__ = Class$$1;
    ShapesQuadTree.prototype = Object.create( Class$$1 && Class$$1.prototype );
    ShapesQuadTree.prototype.constructor = ShapesQuadTree;

    ShapesQuadTree.prototype.initRoots = function initRoots () {
        this.rootMap = {};
        this.root = new QuadRoot();
        this.rootElements = [];
    };

    ShapesQuadTree.prototype.clear = function clear () {
        var this$1 = this;

        var rootElements = this.rootElements;
        for (var idx = 0; idx < rootElements.length; idx++) {
            this$1.remove(rootElements[idx]);
        }
        this.initRoots();
    };

    ShapesQuadTree.prototype.pointShape = function pointShape (point) {
        var sectorRoot = ( this.rootMap[ Math.floor( point.x / ROOT_SIZE ) ] || {} )[ Math.floor( point.y / ROOT_SIZE ) ];
        var result = this.root.pointShapes(point);

        if (sectorRoot) {
            result = result.concat(sectorRoot.pointShapes(point));
        }

        this.assignZindex(result);

        result.sort(zIndexComparer);
        for (var idx = 0; idx < result.length; idx++) {
            if (result[idx].containsPoint(point)) {
                return result[idx];
            }
        }
    };

    ShapesQuadTree.prototype.assignZindex = function assignZindex (elements) {
        var this$1 = this;

        for (var idx = 0; idx < elements.length; idx++) {
            var element = elements[idx];
            var zIndex = 0;
            var levelWeight = Math.pow(LEVEL_STEP, MAX_LEVEL);
            var parents = [];

            while (element) {
                parents.push(element);
                element = element.parent;
            }

            while (parents.length) {
                element = parents.pop();
                zIndex += ((element.parent ? element.parent.children : this$1.rootElements).indexOf(element) + 1) * levelWeight;
                levelWeight /= LEVEL_STEP;
            }

            elements[idx]._zIndex = zIndex;
        }
    };

    ShapesQuadTree.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "transform" || e.field === "stroke.width") {
            this.bboxChange(e.element);
        }
    };

    ShapesQuadTree.prototype.geometryChange = function geometryChange (e) {
        this.bboxChange(e.element);
    };

    ShapesQuadTree.prototype.bboxChange = function bboxChange (element) {
        var this$1 = this;

        if (element.nodeType === "Group") {
            for (var idx = 0; idx < element.children.length; idx++) {
                this$1.bboxChange(element.children[idx]);
            }
        } else {
            if (element._quadNode) {
                element._quadNode.remove(element);
            }
            this._insertShape(element);
        }
    };

    ShapesQuadTree.prototype.add = function add (elements) {
        var elementsArray = Array.isArray(elements) ? elements.slice(0) : [ elements ];

        append$1$1(this.rootElements, elementsArray);
        this._insert(elementsArray);
    };

    ShapesQuadTree.prototype.childrenChange = function childrenChange (e) {
        var this$1 = this;

        if (e.action === "remove") {
            for (var idx = 0; idx < e.items.length; idx++) {
                this$1.remove(e.items[idx]);
            }
        } else {
            this._insert(Array.prototype.slice.call(e.items, 0));
        }
    };

    ShapesQuadTree.prototype._insert = function _insert (elements) {
        var this$1 = this;

        var element;

        while (elements.length > 0) {
            element = elements.pop();
            element.addObserver(this$1);
            if (element.nodeType === "Group") {
                append$1$1(elements, element.children);
            } else {
                this$1._insertShape(element);
            }
        }
    };

    ShapesQuadTree.prototype._insertShape = function _insertShape (shape) {
        var bbox = shape.bbox();
        if (bbox) {
            var sectors = this.getSectors(bbox);
            var x = sectors[0][0];
            var y = sectors[1][0];

            if (this.inRoot(sectors)) {
                this.root.insert(shape, bbox);
            } else {
                var rootMap = this.rootMap;
                if (!rootMap[x]) {
                    rootMap[x] = {};
                }

                if (!rootMap[x][y]) {
                    rootMap[x][y] = new QuadNode(
                        new Rect([ x * ROOT_SIZE, y * ROOT_SIZE ], [ ROOT_SIZE, ROOT_SIZE ])
                    );
                }

                rootMap[x][y].insert(shape, bbox);
            }
        }
    };

    ShapesQuadTree.prototype.remove = function remove (element) {
        var this$1 = this;

        element.removeObserver(this);

        if (element.nodeType === "Group") {
            var children = element.children;
            for (var idx = 0; idx < children.length; idx++) {
                this$1.remove(children[idx]);
            }
        } else if (element._quadNode) {
            element._quadNode.remove(element);
            delete element._quadNode;
        }
    };

    ShapesQuadTree.prototype.inRoot = function inRoot (sectors) {
        return sectors[0].length > 1 || sectors[1].length > 1;
    };

    ShapesQuadTree.prototype.getSectors = function getSectors (rect) {
        var bottomRight = rect.bottomRight();
        var bottomX = Math.floor(bottomRight.x / ROOT_SIZE);
        var bottomY = Math.floor(bottomRight.y / ROOT_SIZE);
        var sectors = [ [], [] ];
        for (var x = Math.floor(rect.origin.x / ROOT_SIZE); x <= bottomX; x++) {
            sectors[0].push(x);
        }
        for (var y = Math.floor(rect.origin.y / ROOT_SIZE); y <= bottomY; y++) {
            sectors[1].push(y);
        }
        return sectors;
    };

    return ShapesQuadTree;
}(Class));

function zIndexComparer(x1, x2) {
    if (x1._zIndex < x2._zIndex) {
        return 1;
    }
    if (x1._zIndex > x2._zIndex) {
        return -1;
    }

    return 0;
}

var SurfaceCursor = function SurfaceCursor(surface) {
    surface.bind("mouseenter", this._mouseenter.bind(this));
    surface.bind("mouseleave", this._mouseleave.bind(this));

    this.element = surface.element;
};

SurfaceCursor.prototype.clear = function clear () {
    this._resetCursor();
};

SurfaceCursor.prototype.destroy = function destroy () {
    this._resetCursor();
    delete this.element;
};

SurfaceCursor.prototype._mouseenter = function _mouseenter (e) {
    var cursor = this._shapeCursor(e);

    if (!cursor) {
        this._resetCursor();
    } else {
        if (!this._current) {
            this._defaultCursor = this._getCursor();
        }

        this._setCursor(cursor);
    }
};

SurfaceCursor.prototype._mouseleave = function _mouseleave () {
    this._resetCursor();
};

SurfaceCursor.prototype._shapeCursor = function _shapeCursor (e) {
    var shape = e.element;

    while (shape && !defined(shape.options.cursor)) {
        shape = shape.parent;
    }

    if (shape) {
        return shape.options.cursor;
    }
};

SurfaceCursor.prototype._getCursor = function _getCursor () {
    if (this.element) {
        return this.element.style.cursor;
    }
};

SurfaceCursor.prototype._setCursor = function _setCursor (cursor) {
    if (this.element) {
        this.element.style.cursor = cursor;
        this._current = cursor;
    }
};

SurfaceCursor.prototype._resetCursor = function _resetCursor () {
    if (this._current) {
        this._setCursor(this._defaultCursor || "");
        delete this._current;
    }
};

var Surface$3 = (function (BaseSurface) {
    function Surface$$1(element, options) {
        BaseSurface.call(this, element, options);

        this.element.innerHTML = this._template(this);

        var canvas = this.element.firstElementChild;
        var size = elementSize(element);

        canvas.width = size.width;
        canvas.height = size.height;

        this._rootElement = canvas;

        this._root = new RootNode$2(canvas, size);

        this._mouseTrackHandler = this._trackMouse.bind(this);

        bindEvents(this.element, {
            click: this._mouseTrackHandler,
            mousemove: this._mouseTrackHandler
        });
    }

    if ( BaseSurface ) Surface$$1.__proto__ = BaseSurface;
    Surface$$1.prototype = Object.create( BaseSurface && BaseSurface.prototype );
    Surface$$1.prototype.constructor = Surface$$1;

    Surface$$1.prototype.destroy = function destroy () {
        BaseSurface.prototype.destroy.call(this);

        if (this._root) {
            this._root.destroy();
            this._root = null;
        }

        if (this._searchTree) {
            this._searchTree.clear();
            delete this._searchTree;
        }

        if (this._cursor) {
            this._cursor.destroy();
            delete this._cursor;
        }

        unbindEvents(this.element, {
            click: this._mouseTrackHandler,
            mousemove: this._mouseTrackHandler
        });
    };

    Surface$$1.prototype.draw = function draw (element) {
        BaseSurface.prototype.draw.call(this, element);
        this._root.load([ element ], undefined, this.options.cors);

        if (this._searchTree) {
            this._searchTree.add([ element ]);
        }
    };

    Surface$$1.prototype.clear = function clear () {
        BaseSurface.prototype.clear.call(this);
        this._root.clear();

        if (this._searchTree) {
            this._searchTree.clear();
        }

        if (this._cursor) {
            this._cursor.clear();
        }
    };

    Surface$$1.prototype.eventTarget = function eventTarget (e) {
        if (this._searchTree) {
            var point = this._surfacePoint(e);
            var shape = this._searchTree.pointShape(point);
            return shape;
        }
    };

    Surface$$1.prototype.image = function image () {
        var ref = this;
        var root = ref._root;
        var rootElement = ref._rootElement;
        var loadingStates = [];

        root.traverse(function (childNode) {
            if (childNode.loading) {
                loadingStates.push(childNode.loading);
            }
        });

        var promise = createPromise();
        var resolveDataURL = function () {
            root._invalidate({ fixedScale: true });

            try {
                var data = rootElement.toDataURL();
                promise.resolve(data);
            } catch (e) {
                promise.reject(e);
            }
        };

        promiseAll(loadingStates).then(resolveDataURL, resolveDataURL);

        return promise;
    };

    Surface$$1.prototype.suspendTracking = function suspendTracking () {
        BaseSurface.prototype.suspendTracking.call(this);
        if (this._searchTree) {
            this._searchTree.clear();
            delete this._searchTree;
        }
    };

    Surface$$1.prototype.resumeTracking = function resumeTracking () {
        BaseSurface.prototype.resumeTracking.call(this);
        if (!this._searchTree) {
            this._searchTree = new ShapesQuadTree();

            var childNodes = this._root.childNodes;
            var rootElements = [];
            for (var idx = 0; idx < childNodes.length; idx++) {
                rootElements.push(childNodes[idx].srcElement);
            }
            this._searchTree.add(rootElements);
        }
    };

    Surface$$1.prototype._resize = function _resize () {
        this._rootElement.width = this._size.width;
        this._rootElement.height = this._size.height;

        this._root.size = this._size;
        this._root.invalidate();
    };

    Surface$$1.prototype._template = function _template () {
        return "<canvas style='width: 100%; height: 100%;'></canvas>";
    };

    Surface$$1.prototype._enableTracking = function _enableTracking () {
        this._searchTree = new ShapesQuadTree();
        this._cursor = new SurfaceCursor(this);

        BaseSurface.prototype._enableTracking.call(this);
    };

    Surface$$1.prototype._trackMouse = function _trackMouse (e) {
        if (this._suspendedTracking) {
            return;
        }

        var shape = this.eventTarget(e);

        if (e.type !== "click") {
            var currentShape = this._currentShape;
            if (currentShape && currentShape !== shape) {
                this.trigger("mouseleave", {
                    element: currentShape,
                    originalEvent: e,
                    type: "mouseleave"
                });
            }

            if (shape && currentShape !== shape) {
                this.trigger("mouseenter", {
                    element: shape,
                    originalEvent: e,
                    type: "mouseenter"
                });
            }

            this.trigger("mousemove", {
                element: shape,
                originalEvent: e,
                type: "mousemove"
            });

            this._currentShape = shape;
        } else if (shape) {
            this.trigger("click", {
                element: shape,
                originalEvent: e,
                type: "click"
            });
        }
    };

    return Surface$$1;
}(Surface));

Surface$3.prototype.type = "canvas";

if (typeof document !== "undefined" && document.createElement("canvas").getContext) {
    Surface.support.canvas = true;
    SurfaceFactory.current.register("canvas", Surface$3, 20);
}

function addGradientStops(gradient, stops) {
    for (var idx = 0; idx < stops.length; idx++) {
        var stop = stops[idx];
        var color = parseColor(stop.color());

        color.a *= stop.opacity();

        gradient.addColorStop(stop.offset(), color.toCssRgba());
    }
}

var PathNode$2 = (function (Node) {
    function PathNode () {
        Node.apply(this, arguments);
    }

    if ( Node ) PathNode.__proto__ = Node;
    PathNode.prototype = Object.create( Node && Node.prototype );
    PathNode.prototype.constructor = PathNode;

    PathNode.prototype.renderTo = function renderTo (ctx) {
        ctx.save();

        this.setTransform(ctx);
        this.setClip(ctx);
        this.setOpacity(ctx);

        ctx.beginPath();

        this.renderPoints(ctx, this.srcElement);

        this.setLineDash(ctx);
        this.setLineCap(ctx);
        this.setLineJoin(ctx);

        this.setFill(ctx);
        this.setStroke(ctx);

        ctx.restore();
    };

    PathNode.prototype.setFill = function setFill (ctx) {
        var fill = this.srcElement.options.fill;
        var hasFill = false;

        if (fill) {
            if (fill.nodeType === "Gradient") {
                this.setGradientFill(ctx, fill);
                hasFill = true;
            } else if (!isTransparent(fill.color)) {
                ctx.fillStyle = fill.color;

                ctx.save();
                this.globalAlpha(ctx, fill.opacity);
                ctx.fill();
                ctx.restore();

                hasFill = true;
            }
        }

        return hasFill;
    };

    PathNode.prototype.setGradientFill = function setGradientFill (ctx, fill) {
        var bbox = this.srcElement.rawBBox();
        var gradient;

        if (fill instanceof LinearGradient) {
            var start = fill.start();
            var end = fill.end();
            gradient = ctx.createLinearGradient(start.x, start.y, end.x, end.y);
        } else if (fill instanceof RadialGradient) {
            var center = fill.center();
            gradient = ctx.createRadialGradient(center.x, center.y, 0, center.x, center.y, fill.radius());
        }

        addGradientStops(gradient, fill.stops);

        ctx.save();

        if (!fill.userSpace()) {
            ctx.transform(bbox.width(), 0, 0, bbox.height(), bbox.origin.x, bbox.origin.y);
        }
        ctx.fillStyle = gradient;
        ctx.fill();

        ctx.restore();
    };

    PathNode.prototype.setStroke = function setStroke (ctx) {
        var stroke = this.srcElement.options.stroke;
        if (stroke && !isTransparent(stroke.color) && stroke.width > 0) {
            ctx.strokeStyle = stroke.color;
            ctx.lineWidth = valueOrDefault(stroke.width, 1);

            ctx.save();
            this.globalAlpha(ctx, stroke.opacity);
            ctx.stroke();
            ctx.restore();

            return true;
        }
    };

    PathNode.prototype.dashType = function dashType () {
        var stroke = this.srcElement.options.stroke;
        if (stroke && stroke.dashType) {
            return stroke.dashType.toLowerCase();
        }
    };

    PathNode.prototype.setLineDash = function setLineDash (ctx) {
        var dashType = this.dashType();
        if (dashType && dashType !== SOLID) {
            var dashArray = DASH_ARRAYS[dashType];
            if (ctx.setLineDash) {
                ctx.setLineDash(dashArray);
            } else {
                ctx.mozDash = dashArray;
                ctx.webkitLineDash = dashArray;
            }
        }
    };

    PathNode.prototype.setLineCap = function setLineCap (ctx) {
        var dashType = this.dashType();
        var stroke = this.srcElement.options.stroke;
        if (dashType && dashType !== SOLID) {
            ctx.lineCap = BUTT;
        } else if (stroke && stroke.lineCap) {
            ctx.lineCap = stroke.lineCap;
        }
    };

    PathNode.prototype.setLineJoin = function setLineJoin (ctx) {
        var stroke = this.srcElement.options.stroke;
        if (stroke && stroke.lineJoin) {
            ctx.lineJoin = stroke.lineJoin;
        }
    };

    PathNode.prototype.renderPoints = function renderPoints (ctx, path) {
        renderPath(ctx, path);
    };

    return PathNode;
}(Node$2));

NODE_MAP$2.Path = PathNode$2;

var ArcNode$2 = (function (PathNode) {
    function ArcNode () {
        PathNode.apply(this, arguments);
    }

    if ( PathNode ) ArcNode.__proto__ = PathNode;
    ArcNode.prototype = Object.create( PathNode && PathNode.prototype );
    ArcNode.prototype.constructor = ArcNode;

    ArcNode.prototype.renderPoints = function renderPoints (ctx) {
        var path = this.srcElement.toPath();
        renderPath(ctx, path);
    };

    return ArcNode;
}(PathNode$2));

NODE_MAP$2.Arc = ArcNode$2;

var CircleNode$2 = (function (PathNode) {
    function CircleNode () {
        PathNode.apply(this, arguments);
    }

    if ( PathNode ) CircleNode.__proto__ = PathNode;
    CircleNode.prototype = Object.create( PathNode && PathNode.prototype );
    CircleNode.prototype.constructor = CircleNode;

    CircleNode.prototype.renderPoints = function renderPoints (ctx) {
        var ref = this.srcElement.geometry();
        var center = ref.center;
        var radius = ref.radius;

        ctx.arc(center.x, center.y, radius, 0, Math.PI * 2);
    };

    return CircleNode;
}(PathNode$2));

NODE_MAP$2.Circle = CircleNode$2;

var RectNode$2 = (function (PathNode) {
    function RectNode () {
        PathNode.apply(this, arguments);
    }

    if ( PathNode ) RectNode.__proto__ = PathNode;
    RectNode.prototype = Object.create( PathNode && PathNode.prototype );
    RectNode.prototype.constructor = RectNode;

    RectNode.prototype.renderPoints = function renderPoints (ctx) {
        var ref = this.srcElement.geometry();
        var origin = ref.origin;
        var size = ref.size;

        ctx.rect(origin.x, origin.y, size.width, size.height);
    };

    return RectNode;
}(PathNode$2));

NODE_MAP$2.Rect = RectNode$2;

var ImageNode$2 = (function (PathNode) {
    function ImageNode(srcElement, cors) {
        PathNode.call(this, srcElement);

        this.onLoad = this.onLoad.bind(this);
        this.onError = this.onError.bind(this);

        this.loading = createPromise();

        var img = this.img = new Image();

        if (cors && !(/^data:/i.test(srcElement.src()))) {
            img.crossOrigin = cors;
        }

        img.src = srcElement.src();

        if (img.complete) {
            this.onLoad();
        } else {
            img.onload = this.onLoad;
            img.onerror = this.onError;
        }
    }

    if ( PathNode ) ImageNode.__proto__ = PathNode;
    ImageNode.prototype = Object.create( PathNode && PathNode.prototype );
    ImageNode.prototype.constructor = ImageNode;

    ImageNode.prototype.renderTo = function renderTo (ctx) {
        if (this.loading.state() === "resolved") {
            ctx.save();

            this.setTransform(ctx);
            this.setClip(ctx);

            this.drawImage(ctx);

            ctx.restore();
        }
    };

    ImageNode.prototype.optionsChange = function optionsChange (e) {
        if (e.field === "src") {
            this.loading = createPromise();
            this.img.src = this.srcElement.src();
        } else {
            PathNode.prototype.optionsChange.call(this, e);
        }
    };

    ImageNode.prototype.onLoad = function onLoad () {
        this.loading.resolve();
        this.invalidate();
    };

    ImageNode.prototype.onError = function onError () {
        this.loading.reject(new Error(
            "Unable to load image '" + this.img.src +
            "'. Check for connectivity and verify CORS headers."
        ));
    };

    ImageNode.prototype.drawImage = function drawImage (ctx) {
        var rect = this.srcElement.rect();
        var topLeft = rect.topLeft();

        ctx.drawImage(
            this.img, topLeft.x, topLeft.y, rect.width(), rect.height()
        );
    };

    return ImageNode;
}(PathNode$2));

NODE_MAP$2.Image = ImageNode$2;

var TextNode$2 = (function (PathNode) {
    function TextNode () {
        PathNode.apply(this, arguments);
    }

    if ( PathNode ) TextNode.__proto__ = PathNode;
    TextNode.prototype = Object.create( PathNode && PathNode.prototype );
    TextNode.prototype.constructor = TextNode;

    TextNode.prototype.renderTo = function renderTo (ctx) {
        var text = this.srcElement;
        var pos = text.position();
        var size = text.measure();

        ctx.save();

        this.setTransform(ctx);
        this.setClip(ctx);
        this.setOpacity(ctx);

        ctx.beginPath();

        ctx.font = text.options.font;
        ctx.textAlign = 'left';

        if (this.setFill(ctx)) {
            ctx.fillText(text.content(), pos.x, pos.y + size.baseline);
        }

        if (this.setStroke(ctx)) {
            this.setLineDash(ctx);
            ctx.strokeText(text.content(), pos.x, pos.y + size.baseline);
        }

        ctx.restore();
    };

    return TextNode;
}(PathNode$2));


NODE_MAP$2.Text = TextNode$2;

var MultiPathNode$2 = (function (PathNode) {
    function MultiPathNode () {
        PathNode.apply(this, arguments);
    }

    if ( PathNode ) MultiPathNode.__proto__ = PathNode;
    MultiPathNode.prototype = Object.create( PathNode && PathNode.prototype );
    MultiPathNode.prototype.constructor = MultiPathNode;

    MultiPathNode.prototype.renderPoints = function renderPoints (ctx) {
        var paths = this.srcElement.paths;
        for (var i = 0; i < paths.length; i++) {
            renderPath(ctx, paths[i]);
        }
    };

    return MultiPathNode;
}(PathNode$2));

NODE_MAP$2.MultiPath = MultiPathNode$2;



var canvas = Object.freeze({
	Surface: Surface$3,
	RootNode: RootNode$2,
	Node: Node$2,
	GroupNode: GroupNode$2,
	ArcNode: ArcNode$2,
	CircleNode: CircleNode$2,
	RectNode: RectNode$2,
	ImageNode: ImageNode$2,
	TextNode: TextNode$2,
	PathNode: PathNode$2,
	MultiPathNode: MultiPathNode$2
});

function exportImage(group, options) {
    var defaults = {
        width: "800px", height: "600px",
        cors: "Anonymous"
    };

    var exportRoot = group;
    var bbox = group.clippedBBox();


    if (bbox) {
        var origin = bbox.getOrigin();
        exportRoot = new Group();
        exportRoot.transform(transform$1().translate(-origin.x, -origin.y));
        exportRoot.children.push(group);

        var size = bbox.getSize();
        defaults.width = size.width + "px";
        defaults.height = size.height + "px";
    }

    var surfaceOptions = Object.assign(defaults, options);

    var container = document.createElement("div");
    var style = container.style;

    style.display = "none";
    style.width = surfaceOptions.width;
    style.height = surfaceOptions.height;
    document.body.appendChild(container);

    var surface = new Surface$3(container, surfaceOptions);
    surface.suspendTracking();
    surface.draw(exportRoot);

    var promise = surface.image();
    var destroy = function () {
        surface.destroy();
        document.body.removeChild(container);
    };
    promise.then(destroy, destroy);

    return promise;
}

function exportSVG(group, options) {
    var svg = exportGroup(group);

    if (!options || !options.raw) {
        svg = "data:image/svg+xml;base64," + encodeBase64(svg);
    }

    return createPromise().resolve(svg);
}



var drawing = Object.freeze({
	svg: svg$1,
	canvas: canvas,
	util: util,
	PathParser: PathParser,
	Surface: Surface,
	BaseNode: BaseNode,
	SurfaceFactory: SurfaceFactory,
	OptionsStore: OptionsStore,
	exportImage: exportImage,
	exportSVG: exportSVG,
	QuadNode: QuadNode,
	ShapesQuadTree: ShapesQuadTree,
	ObserversMixin: ObserversMixin,
	Element: Element$1,
	Circle: Circle$1,
	Arc: Arc$2,
	Path: Path,
	MultiPath: MultiPath,
	Text: Text,
	Image: Image$1,
	Group: Group,
	Layout: Layout,
	Rect: Rect$2,
	align: align,
	vAlign: vAlign,
	stack: stack,
	vStack: vStack,
	wrap: wrap,
	vWrap: vWrap,
	fit: fit,
	LinearGradient: LinearGradient,
	RadialGradient: RadialGradient,
	GradientStop: GradientStop,
	Gradient: Gradient,
	Animation: Animation,
	AnimationFactory: AnimationFactory
});

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

// XXX: remove this junk (assume `true`) when we no longer have to support IE < 10
// IE 9 (at least compatibility) reports having Uint8Array but the request response does not contain ArrayBuffer which results in missing table head error
var HAS_TYPED_ARRAYS = typeof Uint8Array !== 'undefined' && support.browser && (!support.browser.msie || support.browser.version > 9);

var BASE64 = (function(){
    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    return {
        decode: function(str) {
            var input = str.replace(/[^A-Za-z0-9\+\/\=]/g, ""), i = 0, n = input.length, output = [];

            while (i < n) {
                var enc1 = keyStr.indexOf(input.charAt(i++));
                var enc2 = keyStr.indexOf(input.charAt(i++));
                var enc3 = keyStr.indexOf(input.charAt(i++));
                var enc4 = keyStr.indexOf(input.charAt(i++));

                var chr1 = (enc1 << 2) | (enc2 >>> 4);
                var chr2 = ((enc2 & 15) << 4) | (enc3 >>> 2);
                var chr3 = ((enc3 & 3) << 6) | enc4;

                output.push(chr1);
                if (enc3 != 64) {
                    output.push(chr2);
                }
                if (enc4 != 64) {
                    output.push(chr3);
                }
            }

            return output;
        },
        encode: function(bytes) {
            var i = 0, n = bytes.length;
            var output = "";

            while (i < n) {
                var chr1 = bytes[i++];
                var chr2 = bytes[i++];
                var chr3 = bytes[i++];

                var enc1 = chr1 >>> 2;
                var enc2 = ((chr1 & 3) << 4) | (chr2 >>> 4);
                var enc3 = ((chr2 & 15) << 2) | (chr3 >>> 6);
                var enc4 = chr3 & 63;

                if (i - n == 2) {
                    enc3 = enc4 = 64;
                } else if (i - n == 1) {
                    enc4 = 64;
                }

                output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
            }
            return output;
        }
    };
}());

function BinaryStream(data) {
    var offset = 0, length = 0;
    if (data == null) {
        data = HAS_TYPED_ARRAYS ? new Uint8Array(256) : [];
    } else {
        length = data.length;
    }

    var ensure = HAS_TYPED_ARRAYS ? function(len) {
        if (len >= data.length) {
            var tmp = new Uint8Array(Math.max(len + 256, data.length * 2));
            tmp.set(data, 0);
            data = tmp;
        }
    } : function() {};

    var get = HAS_TYPED_ARRAYS ? function() {
        return new Uint8Array(data.buffer, 0, length);
    } : function() {
        return data;
    };

    var write = HAS_TYPED_ARRAYS ? function(bytes) {
        if (typeof bytes == "string") {
            return writeString(bytes);
        }
        var len = bytes.length;
        ensure(offset + len);
        data.set(bytes, offset);
        offset += len;
        if (offset > length) {
            length = offset;
        }
    } : function(bytes) {
        if (typeof bytes == "string") {
            return writeString(bytes);
        }
        for (var i = 0; i < bytes.length; ++i) {
            writeByte(bytes[i]);
        }
    };

    var slice = HAS_TYPED_ARRAYS ? function(start, length) {
        if (data.buffer.slice) {
            return new Uint8Array(data.buffer.slice(start, start + length));
        } else {
            // IE10
            var x = new Uint8Array(length);
            x.set(new Uint8Array(data.buffer, start, length));
            return x;
        }
    } : function(start, length) {
        return data.slice(start, start + length);
    };

    function eof() {
        return offset >= length;
    }
    function readByte() {
        return offset < length ? data[offset++] : 0;
    }
    function writeByte(b) {
        ensure(offset);
        data[offset++] = b & 0xFF;
        if (offset > length) {
            length = offset;
        }
    }
    function readShort() {
        return (readByte() << 8) | readByte();
    }
    function writeShort(w) {
        writeByte(w >> 8);
        writeByte(w);
    }
    function readShort_() {
        var w = readShort();
        return w >= 0x8000 ? w - 0x10000 : w;
    }
    function writeShort_(w) {
        writeShort(w < 0 ? w + 0x10000 : w);
    }
    function readLong() {
        return (readShort() * 0x10000) + readShort();
    }
    function writeLong(w) {
        writeShort((w >>> 16) & 0xFFFF);
        writeShort(w & 0xFFFF);
    }
    function readLong_() {
        var w = readLong();
        return w >= 0x80000000 ? w - 0x100000000 : w;
    }
    function writeLong_(w) {
        writeLong(w < 0 ? w + 0x100000000 : w);
    }
    function readFixed() {
        return readLong() / 0x10000;
    }
    function writeFixed(f) {
        writeLong(Math.round(f * 0x10000));
    }
    function readFixed_() {
        return readLong_() / 0x10000;
    }
    function writeFixed_(f) {
        writeLong_(Math.round(f * 0x10000));
    }
    function read(len) {
        return times(len, readByte);
    }
    function readString(len) {
        return String.fromCharCode.apply(String, read(len));
    }
    function writeString(str) {
        for (var i = 0; i < str.length; ++i) {
            writeByte(str.charCodeAt(i));
        }
    }
    function times(n, reader) {
        for (var ret = new Array(n), i = 0; i < n; ++i) {
            ret[i] = reader();
        }
        return ret;
    }

    var stream = {
        eof         : eof,
        readByte    : readByte,
        writeByte   : writeByte,
        readShort   : readShort,
        writeShort  : writeShort,
        readLong    : readLong,
        writeLong   : writeLong,
        readFixed   : readFixed,
        writeFixed  : writeFixed,

        // signed numbers.
        readShort_  : readShort_,
        writeShort_ : writeShort_,
        readLong_   : readLong_,
        writeLong_  : writeLong_,
        readFixed_  : readFixed_,
        writeFixed_ : writeFixed_,

        read        : read,
        write       : write,
        readString  : readString,
        writeString : writeString,

        times       : times,
        get         : get,
        slice       : slice,

        offset: function(pos) {
            if (pos != null) {
                offset = pos;
                return stream;
            }
            return offset;
        },

        skip: function(nbytes) {
            offset += nbytes;
        },

        toString: function() {
            throw new Error("FIX CALLER.  BinaryStream is no longer convertible to string!");
        },

        length: function() { return length; },

        saveExcursion: function(f) {
            var pos = offset;
            try {
                return f();
            } finally {
                offset = pos;
            }
        },

        writeBase64: function(base64) {
            if (window.atob) {
                writeString(window.atob(base64));
            } else {
                write(BASE64.decode(base64));
            }
        },
        base64: function() {
            return BASE64.encode(get());
        }
    };

    return stream;
}

function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;
    while (counter < length) {
        value = string.charCodeAt(counter++);
        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
            // high surrogate, and there is a next character
            extra = string.charCodeAt(counter++);
            if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
            } else {
                // unmatched surrogate; only append this code unit, in case the next
                // code unit is the high surrogate of a surrogate pair
                output.push(value);
                counter--;
            }
        } else {
            output.push(value);
        }
    }
    return output;
}

function ucs2encode(array) {
    return array.map(function(value){
        var output = "";
        if (value > 0xFFFF) {
            value -= 0x10000;
            output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);
            value = 0xDC00 | value & 0x3FF;
        }
        output += String.fromCharCode(value);
        return output;
    }).join("");
}

function atobUint8Array(base64) {
    var data = window.atob(base64);
    var result = new Uint8Array(data.length);

    for (var idx = 0; idx < data.length; idx++) {
        result[idx] = data.charCodeAt(idx);
    }

    return result;
}

function createUint8Array(data) {
    var result = new Uint8Array(data.length);

    for (var idx = 0; idx < data.length; idx++) {
        result[idx] = data[idx];
    }

    return result;
}

function base64ToUint8Array(base64) {
    if (window.atob) {
        return atobUint8Array(base64);
    }

    return createUint8Array(BASE64.decode(base64));
}

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

/*****************************************************************************\
 *
 * The code in this file, although written from scratch, is influenced by the
 * TrueType parser/encoder in PDFKit -- http://pdfkit.org/ (a CoffeeScript
 * library for producing PDF files).
 *
 * PDFKit is (c) Devon Govett 2014 and released under the MIT License.
 *
\*****************************************************************************/

function hasOwnProperty$1(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}

function sortedKeys(obj) {
    return Object.keys(obj).sort(function(a, b){ return a - b; }).map(parseFloat);
}

///

function Directory(data) {
    this.raw = data;
    this.scalerType = data.readLong();
    this.tableCount = data.readShort();
    this.searchRange = data.readShort();
    this.entrySelector = data.readShort();
    this.rangeShift = data.readShort();

    var tables = this.tables = {};
    for (var i = 0; i < this.tableCount; ++i) {
        var entry = {
            tag      : data.readString(4),
            checksum : data.readLong(),
            offset   : data.readLong(),
            length   : data.readLong()
        };
        tables[entry.tag] = entry;
    }
}

Directory.prototype = {

    readTable: function(name, Ctor) {
        var def = this.tables[name];
        if (!def) {
            throw new Error("Table " + name + " not found in directory");
        }
        return (this[name] = def.table = new Ctor(this, def));
    },

    render: function(tables) {
        var this$1 = this;

        var tableCount = Object.keys(tables).length;

        var maxpow2 = Math.pow(2, Math.floor(Math.log(tableCount) / Math.LN2));
        var searchRange = maxpow2 * 16;
        var entrySelector = Math.floor(Math.log(maxpow2) / Math.LN2);
        var rangeShift = tableCount * 16 - searchRange;

        var out = BinaryStream();
        out.writeLong(this.scalerType);
        out.writeShort(tableCount);
        out.writeShort(searchRange);
        out.writeShort(entrySelector);
        out.writeShort(rangeShift);

        var directoryLength = tableCount * 16;
        var offset = out.offset() + directoryLength;
        var headOffset = null;
        var tableData = BinaryStream();

        for (var tag in tables) {
            if (hasOwnProperty$1(tables, tag)) {
                var table = tables[tag];

                out.writeString(tag);
                out.writeLong(this$1.checksum(table));
                out.writeLong(offset);
                out.writeLong(table.length);

                tableData.write(table);
                if (tag == "head") {
                    headOffset = offset;
                }
                offset += table.length;

                while (offset % 4) {
                    tableData.writeByte(0);
                    offset++;
                }
            }
        }

        out.write(tableData.get());
        var sum = this.checksum(out.get());
        var adjustment = 0xB1B0AFBA - sum;

        out.offset(headOffset + 8);
        out.writeLong(adjustment);
        return out.get();
    },

    checksum: function(data) {
        data = BinaryStream(data);
        var sum = 0;
        while (!data.eof()) {
            sum += data.readLong();
        }
        return sum & 0xFFFFFFFF;
    }
};

function deftable(methods) {
    function Ctor(file, def) {
        this.definition = def;
        this.length = def.length;
        this.offset = def.offset;
        this.file = file;
        this.rawData = file.raw;
        this.parse(file.raw);
    }
    Ctor.prototype.raw = function() {
        return this.rawData.slice(this.offset, this.length);
    };
    for (var i in methods) {
        if (hasOwnProperty$1(methods, i)) {
            Ctor[i] = Ctor.prototype[i] = methods[i];
        }
    }
    return Ctor;
}

var HeadTable = deftable({
    parse: function(data) {
        data.offset(this.offset);
        this.version             = data.readLong();
        this.revision            = data.readLong();
        this.checkSumAdjustment  = data.readLong();
        this.magicNumber         = data.readLong();
        this.flags               = data.readShort();
        this.unitsPerEm          = data.readShort();
        this.created             = data.read(8);
        this.modified            = data.read(8);

        this.xMin = data.readShort_();
        this.yMin = data.readShort_();
        this.xMax = data.readShort_();
        this.yMax = data.readShort_();

        this.macStyle           = data.readShort();
        this.lowestRecPPEM      = data.readShort();
        this.fontDirectionHint  = data.readShort_();
        this.indexToLocFormat   = data.readShort_();
        this.glyphDataFormat    = data.readShort_();
    },
    render: function(indexToLocFormat) {
        var out = BinaryStream();
        out.writeLong(this.version);
        out.writeLong(this.revision);
        out.writeLong(0);       // checksum adjustment; shall be computed later
        out.writeLong(this.magicNumber);
        out.writeShort(this.flags);
        out.writeShort(this.unitsPerEm);
        out.write(this.created);
        out.write(this.modified);
        out.writeShort_(this.xMin);
        out.writeShort_(this.yMin);
        out.writeShort_(this.xMax);
        out.writeShort_(this.yMax);
        out.writeShort(this.macStyle);
        out.writeShort(this.lowestRecPPEM);
        out.writeShort_(this.fontDirectionHint);
        out.writeShort_(indexToLocFormat); // this will depend on the `loca` table
        out.writeShort_(this.glyphDataFormat);
        return out.get();
    }
});

var LocaTable = deftable({
    parse: function(data) {
        data.offset(this.offset);
        var format = this.file.head.indexToLocFormat;
        if (format === 0) {
            this.offsets = data.times(this.length / 2, function(){
                return 2 * data.readShort();
            });
        } else {
            this.offsets = data.times(this.length / 4, data.readLong);
        }
    },
    offsetOf: function(id) {
        return this.offsets[id];
    },
    lengthOf: function(id) {
        return this.offsets[id + 1] - this.offsets[id];
    },
    render: function(offsets) {
        var out = BinaryStream();
        var needsLongFormat = offsets[offsets.length - 1] > 0xFFFF;
        for (var i = 0; i < offsets.length; ++i) {
            if (needsLongFormat) {
                out.writeLong(offsets[i]);
            } else {
                out.writeShort(offsets[i] / 2);
            }
        }
        return {
            format: needsLongFormat ? 1 : 0,
            table: out.get()
        };
    }
});

var HheaTable = deftable({
    parse: function(data) {
        data.offset(this.offset);

        this.version              = data.readLong();
        this.ascent               = data.readShort_();
        this.descent              = data.readShort_();
        this.lineGap              = data.readShort_();
        this.advanceWidthMax      = data.readShort();
        this.minLeftSideBearing   = data.readShort_();
        this.minRightSideBearing  = data.readShort_();
        this.xMaxExtent           = data.readShort_();
        this.caretSlopeRise       = data.readShort_();
        this.caretSlopeRun        = data.readShort_();
        this.caretOffset          = data.readShort_();

        data.skip(4 * 2);       // reserved

        this.metricDataFormat     = data.readShort_();
        this.numOfLongHorMetrics  = data.readShort();
    },
    render: function(ids) {
        var out = BinaryStream();
        out.writeLong(this.version);
        out.writeShort_(this.ascent);
        out.writeShort_(this.descent);
        out.writeShort_(this.lineGap);
        out.writeShort(this.advanceWidthMax);
        out.writeShort_(this.minLeftSideBearing);
        out.writeShort_(this.minRightSideBearing);
        out.writeShort_(this.xMaxExtent);
        out.writeShort_(this.caretSlopeRise);
        out.writeShort_(this.caretSlopeRun);
        out.writeShort_(this.caretOffset);

        out.write([ 0, 0, 0, 0, 0, 0, 0, 0 ]); // reserved bytes

        out.writeShort_(this.metricDataFormat);
        out.writeShort(ids.length);
        return out.get();
    }
});

var MaxpTable = deftable({
    parse: function(data) {
        data.offset(this.offset);
        this.version = data.readLong();
        this.numGlyphs = data.readShort();
        this.maxPoints = data.readShort();
        this.maxContours = data.readShort();
        this.maxComponentPoints = data.readShort();
        this.maxComponentContours = data.readShort();
        this.maxZones = data.readShort();
        this.maxTwilightPoints = data.readShort();
        this.maxStorage = data.readShort();
        this.maxFunctionDefs = data.readShort();
        this.maxInstructionDefs = data.readShort();
        this.maxStackElements = data.readShort();
        this.maxSizeOfInstructions = data.readShort();
        this.maxComponentElements = data.readShort();
        this.maxComponentDepth = data.readShort();
    },
    render: function(glyphIds) {
        var out = BinaryStream();
        out.writeLong(this.version);
        out.writeShort(glyphIds.length);
        out.writeShort(this.maxPoints);
        out.writeShort(this.maxContours);
        out.writeShort(this.maxComponentPoints);
        out.writeShort(this.maxComponentContours);
        out.writeShort(this.maxZones);
        out.writeShort(this.maxTwilightPoints);
        out.writeShort(this.maxStorage);
        out.writeShort(this.maxFunctionDefs);
        out.writeShort(this.maxInstructionDefs);
        out.writeShort(this.maxStackElements);
        out.writeShort(this.maxSizeOfInstructions);
        out.writeShort(this.maxComponentElements);
        out.writeShort(this.maxComponentDepth);
        return out.get();
    }
});

var HmtxTable = deftable({
    parse: function(data) {
        data.offset(this.offset);
        var dir = this.file, hhea = dir.hhea;
        this.metrics = data.times(hhea.numOfLongHorMetrics, function(){
            return {
                advance: data.readShort(),
                lsb: data.readShort_()
            };
        });
        var lsbCount = dir.maxp.numGlyphs - dir.hhea.numOfLongHorMetrics;
        this.leftSideBearings = data.times(lsbCount, data.readShort_);
    },
    forGlyph: function(id) {
        var metrics = this.metrics;
        var n = metrics.length;
        if (id < n) {
            return metrics[id];
        }
        return {
            advance: metrics[n - 1].advance,
            lsb: this.leftSideBearings[id - n]
        };
    },
    render: function(glyphIds) {
        var this$1 = this;

        var out = BinaryStream();
        for (var i = 0; i < glyphIds.length; ++i) {
            var m = this$1.forGlyph(glyphIds[i]);
            out.writeShort(m.advance);
            out.writeShort_(m.lsb);
        }
        return out.get();
    }
});

var GlyfTable = (function(){

    function SimpleGlyph(raw) {
        this.raw = raw;
    }
    SimpleGlyph.prototype = {
        compound: false,
        render: function() {
            return this.raw.get();
        }
    };

    var ARG_1_AND_2_ARE_WORDS     = 0x0001;
    var WE_HAVE_A_SCALE           = 0x0008;
    var MORE_COMPONENTS           = 0x0020;
    var WE_HAVE_AN_X_AND_Y_SCALE  = 0x0040;
    var WE_HAVE_A_TWO_BY_TWO      = 0x0080;
    //var WE_HAVE_INSTRUCTIONS      = 0x0100;

    function CompoundGlyph(data) {
        this.raw = data;
        var ids = this.glyphIds = [];
        var offsets = this.idOffsets = [];
        while (true) {          // eslint-disable-line no-constant-condition
            var flags = data.readShort();
            offsets.push(data.offset());
            ids.push(data.readShort());

            if (!(flags & MORE_COMPONENTS)) {
                break;
            }

            data.skip(flags & ARG_1_AND_2_ARE_WORDS ? 4 : 2);

            if (flags & WE_HAVE_A_TWO_BY_TWO) {
                data.skip(8);
            } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
                data.skip(4);
            } else if (flags & WE_HAVE_A_SCALE) {
                data.skip(2);
            }
        }
    }

    CompoundGlyph.prototype = {
        compound: true,
        render: function(old2new) {
            var this$1 = this;

            var out = BinaryStream(this.raw.get());
            for (var i = 0; i < this.glyphIds.length; ++i) {
                var id = this$1.glyphIds[i];
                out.offset(this$1.idOffsets[i]);
                out.writeShort(old2new[id]);
            }
            return out.get();
        }
    };

    return deftable({
        parse: function() {
            this.cache = {};
        },
        glyphFor: function(id) {
            var cache = this.cache;
            if (hasOwnProperty$1(cache, id)) {
                return cache[id];
            }

            var loca = this.file.loca;
            var length = loca.lengthOf(id);

            if (length === 0) {
                return (cache[id] = null);
            }

            var data = this.rawData;
            var offset = this.offset + loca.offsetOf(id);
            var raw = BinaryStream(data.slice(offset, length));

            var numberOfContours = raw.readShort_();
            var xMin = raw.readShort_();
            var yMin = raw.readShort_();
            var xMax = raw.readShort_();
            var yMax = raw.readShort_();

            var glyph = cache[id] = numberOfContours == -1 ? new CompoundGlyph(raw) : new SimpleGlyph(raw);

            glyph.numberOfContours = numberOfContours;
            glyph.xMin = xMin;
            glyph.yMin = yMin;
            glyph.xMax = xMax;
            glyph.yMax = yMax;

            return glyph;
        },
        render: function(glyphs, oldIds, old2new) {
            var out = BinaryStream(), offsets = [];
            for (var i = 0; i < oldIds.length; ++i) {
                var id = oldIds[i];
                var glyph = glyphs[id];
                offsets.push(out.offset());
                if (glyph) {
                    out.write(glyph.render(old2new));
                }
            }
            offsets.push(out.offset());
            return {
                table: out.get(),
                offsets: offsets
            };
        }
    });

}());

var NameTable = (function(){

    function NameEntry(text, entry) {
        this.text = text;
        this.length = text.length;
        this.platformID = entry.platformID;
        this.platformSpecificID = entry.platformSpecificID;
        this.languageID = entry.languageID;
        this.nameID = entry.nameID;
    }

    return deftable({
        parse: function(data) {
            data.offset(this.offset);
            data.readShort();   // format
            var count = data.readShort();
            var stringOffset = this.offset + data.readShort();
            var nameRecords = data.times(count, function(){
                return {
                    platformID         : data.readShort(),
                    platformSpecificID : data.readShort(),
                    languageID         : data.readShort(),
                    nameID             : data.readShort(),
                    length             : data.readShort(),
                    offset             : data.readShort() + stringOffset
                };
            });
            var strings = this.strings = {};
            for (var i = 0; i < nameRecords.length; ++i) {
                var rec = nameRecords[i];
                data.offset(rec.offset);
                var text = data.readString(rec.length);
                if (!strings[rec.nameID]) {
                    strings[rec.nameID] = [];
                }
                strings[rec.nameID].push(new NameEntry(text, rec));
            }
            this.postscriptEntry = strings[6][0];
            this.postscriptName = this.postscriptEntry.text.replace(/[^\x20-\x7F]/g, "");
        },

        render: function(psName) {
            var this$1 = this;

            var strings = this.strings;
            var strCount = 0;
            for (var i in strings) {
                if (hasOwnProperty$1(strings, i)) {
                    strCount += strings[i].length;
                }
            }
            var out = BinaryStream();
            var strTable = BinaryStream();

            out.writeShort(0);  // format
            out.writeShort(strCount);
            out.writeShort(6 + 12 * strCount); // stringOffset

            for (i in strings) {
                if (hasOwnProperty$1(strings, i)) {
                    var list = i == 6 ? [
                        new NameEntry(psName, this$1.postscriptEntry)
                    ] : strings[i];
                    for (var j = 0; j < list.length; ++j) {
                        var str = list[j];
                        out.writeShort(str.platformID);
                        out.writeShort(str.platformSpecificID);
                        out.writeShort(str.languageID);
                        out.writeShort(str.nameID);
                        out.writeShort(str.length);
                        out.writeShort(strTable.offset());

                        strTable.writeString(str.text);
                    }
                }
            }

            out.write(strTable.get());

            return out.get();
        }
    });

})();

var PostTable = (function(){

    var POSTSCRIPT_GLYPHS = ".notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat".split(/\s+/g);

    return deftable({
        parse: function(data) {
            var this$1 = this;

            data.offset(this.offset);

            this.format = data.readLong();
            this.italicAngle = data.readFixed_();
            this.underlinePosition = data.readShort_();
            this.underlineThickness = data.readShort_();
            this.isFixedPitch = data.readLong();
            this.minMemType42 = data.readLong();
            this.maxMemType42 = data.readLong();
            this.minMemType1 = data.readLong();
            this.maxMemType1 = data.readLong();

            var numberOfGlyphs;

            switch (this.format) {
              case 0x00010000:
              case 0x00030000:
                break;

              case 0x00020000:
                numberOfGlyphs = data.readShort();
                this.glyphNameIndex = data.times(numberOfGlyphs, data.readShort);
                this.names = [];
                var limit = this.offset + this.length;
                while (data.offset() < limit) {
                    this$1.names.push(data.readString(data.readByte()));
                }
                break;

              case 0x00025000:
                numberOfGlyphs = data.readShort();
                this.offsets = data.read(numberOfGlyphs);
                break;

              case 0x00040000:
                this.map = data.times(this.file.maxp.numGlyphs, data.readShort);
                break;
            }
        },
        glyphFor: function(code) {
            switch (this.format) {
              case 0x00010000:
                return POSTSCRIPT_GLYPHS[code] || ".notdef";

              case 0x00020000:
                var index = this.glyphNameIndex[code];
                if (index < POSTSCRIPT_GLYPHS.length) {
                    return POSTSCRIPT_GLYPHS[index];
                }
                return this.names[index - POSTSCRIPT_GLYPHS.length] || ".notdef";

              case 0x00025000:

              case 0x00030000:
                return ".notdef";

              case 0x00040000:
                return this.map[code] || 0xFFFF;
            }
        },
        render: function(mapping) {
            var this$1 = this;

            if (this.format == 0x00030000) {
                return this.raw();
            }

            // keep original header, but set format to 2.0
            var out = BinaryStream(this.rawData.slice(this.offset, 32));
            out.writeLong(0x00020000);
            out.offset(32);

            var indexes = [];
            var strings = [];

            for (var i = 0; i < mapping.length; ++i) {
                var id = mapping[i];
                var post = this$1.glyphFor(id);
                var index = POSTSCRIPT_GLYPHS.indexOf(post);
                if (index >= 0) {
                    indexes.push(index);
                } else {
                    indexes.push(POSTSCRIPT_GLYPHS.length + strings.length);
                    strings.push(post);
                }
            }

            out.writeShort(mapping.length);

            for (i = 0; i < indexes.length; ++i) {
                out.writeShort(indexes[i]);
            }

            for (i = 0; i < strings.length; ++i) {
                out.writeByte(strings[i].length);
                out.writeString(strings[i]);
            }

            return out.get();
        }
    });
})();

var CmapTable = (function(){

    function CmapEntry(data, offset, codeMap) {
        var self = this;
        self.platformID = data.readShort();
        self.platformSpecificID = data.readShort();
        self.offset = offset + data.readLong();

        data.saveExcursion(function(){
            var code;
            data.offset(self.offset);
            self.format = data.readShort();

            switch (self.format) {
              case 0:
                self.length = data.readShort();
                self.language = data.readShort();
                for (var i = 0; i < 256; ++i) {
                    codeMap[i] = data.readByte();
                }
                break;

              case 4:
                self.length = data.readShort();
                self.language = data.readShort();
                var segCount = data.readShort() / 2;

                data.skip(6);       // searchRange, entrySelector, rangeShift
                var endCode = data.times(segCount, data.readShort);
                data.skip(2);       // reserved pad
                var startCode = data.times(segCount, data.readShort);
                var idDelta = data.times(segCount, data.readShort_);
                var idRangeOffset = data.times(segCount, data.readShort);

                var count = (self.length + self.offset - data.offset()) / 2;
                var glyphIds = data.times(count, data.readShort);

                for (i = 0; i < segCount; ++i) {
                    var start = startCode[i], end = endCode[i];
                    for (code = start; code <= end; ++code) {
                        var glyphId;
                        if (idRangeOffset[i] === 0) {
                            glyphId = code + idDelta[i];
                        } else {
                            ///
                            // When non-zero, idRangeOffset contains for each segment the byte offset of the Glyph ID
                            // into the glyphIds table, from the *current* `i` cell of idRangeOffset.  In other words,
                            // this offset spans from the first into the second array.  This works, because the arrays
                            // are consecutive in the TTF file:
                            //
                            //     [ ...idRangeOffset... ][ ...glyphIds... ]
                            //       ...... 48 ......       .... ID ....
                            //              ^----- 48 bytes -----^
                            //
                            // (but I can't stop wondering why is it not just a plain index, possibly incremented by 1
                            // so that we can have that special `zero` value.)
                            //
                            // The elements of idRangeOffset are even numbers, because both arrays contain 16-bit words,
                            // yet the offset is in bytes.  That is why we divide it by 2.  Then we subtract the
                            // remaining segments (segCount-i), and add the code-start offset, to which we need to add
                            // the corresponding delta to get the actual glyph ID.
                            ///
                            var index = idRangeOffset[i] / 2 - (segCount - i) + (code - start);
                            glyphId = glyphIds[index] || 0;
                            if (glyphId !== 0) {
                                glyphId += idDelta[i];
                            }
                        }
                        codeMap[code] = glyphId & 0xFFFF;
                    }
                }
                break;

              case 6:
                self.length = data.readShort();
                self.language = data.readShort();
                code = data.readShort();
                var length = data.readShort();
                while (length-- > 0) {
                    codeMap[code++] = data.readShort();
                }
                break;

              case 12:
                data.readShort(); // reserved
                self.length = data.readLong();
                self.language = data.readLong();
                var ngroups = data.readLong();
                while (ngroups-- > 0) {
                    code = data.readLong();
                    var endCharCode = data.readLong();
                    var glyphCode = data.readLong();
                    while (code <= endCharCode) {
                        codeMap[code++] = glyphCode++;
                    }
                }
                break;

              default:
                if (window.console) {
                    window.console.error("Unhandled CMAP format: " + self.format);
                }
            }
        });
    }

    function renderCharmap(ncid2ogid, ogid2ngid) {
        var codes = sortedKeys(ncid2ogid);
        var startCodes = [];
        var endCodes = [];
        var last = null;
        var diff = null;

        function new_gid(charcode) {
            return ogid2ngid[ncid2ogid[charcode]];
        }

        for (var i = 0; i < codes.length; ++i) {
            var code = codes[i];
            var gid = new_gid(code);
            var delta = gid - code;
            if (last == null || delta !== diff) {
                if (last) {
                    endCodes.push(last);
                }
                startCodes.push(code);
                diff = delta;
            }
            last = code;
        }

        if (last) {
            endCodes.push(last);
        }
        endCodes.push(0xFFFF);
        startCodes.push(0xFFFF);

        var segCount = startCodes.length;
        var segCountX2 = segCount * 2;
        var searchRange = 2 * Math.pow(2, Math.floor(Math.log(segCount) / Math.LN2));
        var entrySelector = Math.log(searchRange / 2) / Math.LN2;
        var rangeShift = segCountX2 - searchRange;

        var deltas = [];
        var rangeOffsets = [];
        var glyphIds = [];

        for (i = 0; i < segCount; ++i) {
            var startCode = startCodes[i];
            var endCode = endCodes[i];
            if (startCode == 0xFFFF) {
                deltas.push(0);
                rangeOffsets.push(0);
                break;
            }
            var startGlyph = new_gid(startCode);
            if (startCode - startGlyph >= 0x8000) {
                deltas.push(0);
                rangeOffsets.push(2 * (glyphIds.length + segCount - i));
                for (var j = startCode; j <= endCode; ++j) {
                    glyphIds.push(new_gid(j));
                }
            } else {
                deltas.push(startGlyph - startCode);
                rangeOffsets.push(0);
            }
        }

        var out = BinaryStream();

        out.writeShort(3);      // platformID
        out.writeShort(1);      // platformSpecificID
        out.writeLong(12);      // offset
        out.writeShort(4);      // format
        out.writeShort(16 + segCount * 8 + glyphIds.length * 2); // length
        out.writeShort(0);      // language
        out.writeShort(segCountX2);
        out.writeShort(searchRange);
        out.writeShort(entrySelector);
        out.writeShort(rangeShift);

        endCodes.forEach(out.writeShort);
        out.writeShort(0);      // reserved pad
        startCodes.forEach(out.writeShort);
        deltas.forEach(out.writeShort_);
        rangeOffsets.forEach(out.writeShort);
        glyphIds.forEach(out.writeShort);

        return out.get();
    }

    return deftable({
        parse: function(data) {
            var self = this;
            var offset = self.offset;
            data.offset(offset);
            self.codeMap = {};
            self.version = data.readShort();
            var tableCount = data.readShort();
            self.tables = data.times(tableCount, function(){
                return new CmapEntry(data, offset, self.codeMap);
            });
        },
        render: function(ncid2ogid, ogid2ngid) {
            var out = BinaryStream();
            out.writeShort(0);  // version
            out.writeShort(1);  // tableCount
            out.write(renderCharmap(ncid2ogid, ogid2ngid));
            return out.get();
        }
    });

})();

var OS2Table = deftable({
    parse: function(data) {
        data.offset(this.offset);
        this.version = data.readShort();
        this.averageCharWidth = data.readShort_();
        this.weightClass = data.readShort();
        this.widthClass = data.readShort();
        this.type = data.readShort();
        this.ySubscriptXSize = data.readShort_();
        this.ySubscriptYSize = data.readShort_();
        this.ySubscriptXOffset = data.readShort_();
        this.ySubscriptYOffset = data.readShort_();
        this.ySuperscriptXSize = data.readShort_();
        this.ySuperscriptYSize = data.readShort_();
        this.ySuperscriptXOffset = data.readShort_();
        this.ySuperscriptYOffset = data.readShort_();
        this.yStrikeoutSize = data.readShort_();
        this.yStrikeoutPosition = data.readShort_();
        this.familyClass = data.readShort_();

        this.panose = data.times(10, data.readByte);
        this.charRange = data.times(4, data.readLong);

        this.vendorID = data.readString(4);
        this.selection = data.readShort();
        this.firstCharIndex = data.readShort();
        this.lastCharIndex = data.readShort();

        if (this.version > 0) {
            this.ascent = data.readShort_();
            this.descent = data.readShort_();
            this.lineGap = data.readShort_();
            this.winAscent = data.readShort();
            this.winDescent = data.readShort();
            this.codePageRange = data.times(2, data.readLong);

            if (this.version > 1) {
                this.xHeight = data.readShort();
                this.capHeight = data.readShort();
                this.defaultChar = data.readShort();
                this.breakChar = data.readShort();
                this.maxContext = data.readShort();
            }
        }
    },
    render: function() {
        return this.raw();
    }
});

var subsetTag = 100000;

function nextSubsetTag() {
    var ret = "", n = String(subsetTag);
    for (var i = 0; i < n.length; ++i) {
        ret += String.fromCharCode(n.charCodeAt(i) - 48 + 65);
    }
    ++subsetTag;
    return ret;
}

function Subfont(font) {
    this.font = font;
    this.subset = {};
    this.unicodes = {};
    this.ogid2ngid = { 0: 0 };
    this.ngid2ogid = { 0: 0 };
    this.ncid2ogid = {};
    this.next = this.firstChar = 1;
    this.nextGid = 1;
    this.psName = nextSubsetTag() + "+" + this.font.psName;
}

Subfont.prototype = {
    use: function(ch) {
        var self = this;
        if (typeof ch == "string") {
            return ucs2decode(ch).reduce(function(ret, code){
                return ret + String.fromCharCode(self.use(code));
            }, "");
        }
        var code = self.unicodes[ch];
        if (!code) {
            code = self.next++;
            self.subset[code] = ch;
            self.unicodes[ch] = code;

            // generate new GID (glyph ID) and maintain newGID ->
            // oldGID and back mappings
            var old_gid = self.font.cmap.codeMap[ch];
            if (old_gid) {
                self.ncid2ogid[code] = old_gid;
                if (self.ogid2ngid[old_gid] == null) {
                    var new_gid = self.nextGid++;
                    self.ogid2ngid[old_gid] = new_gid;
                    self.ngid2ogid[new_gid] = old_gid;
                }
            }
        }
        return code;
    },
    encodeText: function(text) {
        return this.use(text);
    },
    glyphIds: function() {
        return sortedKeys(this.ogid2ngid);
    },
    glyphsFor: function(glyphIds, result) {
        var this$1 = this;

        if (!result) {
            result = {};
        }
        for (var i = 0; i < glyphIds.length; ++i) {
            var id = glyphIds[i];
            if (!result[id]) {
                var glyph = result[id] = this$1.font.glyf.glyphFor(id);
                if (glyph && glyph.compound) {
                    this$1.glyphsFor(glyph.glyphIds, result);
                }
            }
        }
        return result;
    },
    render: function() {
        var this$1 = this;

        var glyphs = this.glyphsFor(this.glyphIds());

        // add missing sub-glyphs
        for (var old_gid in glyphs) {
            if (hasOwnProperty$1(glyphs, old_gid)) {
                old_gid = parseInt(old_gid, 10);
                if (this$1.ogid2ngid[old_gid] == null) {
                    var new_gid = this$1.nextGid++;
                    this$1.ogid2ngid[old_gid] = new_gid;
                    this$1.ngid2ogid[new_gid] = old_gid;
                }
            }
        }

        // must obtain old_gid_ids in an order matching sorted
        // new_gid_ids
        var new_gid_ids = sortedKeys(this.ngid2ogid);
        var old_gid_ids = new_gid_ids.map(function(id){
            return this.ngid2ogid[id];
        }, this);

        var font = this.font;
        var glyf = font.glyf.render(glyphs, old_gid_ids, this.ogid2ngid);
        var loca = font.loca.render(glyf.offsets);

        this.lastChar = this.next - 1;

        var tables = {
            "cmap" : CmapTable.render(this.ncid2ogid, this.ogid2ngid),
            "glyf" : glyf.table,
            "loca" : loca.table,
            "hmtx" : font.hmtx.render(old_gid_ids),
            "hhea" : font.hhea.render(old_gid_ids),
            "maxp" : font.maxp.render(old_gid_ids),
            "post" : font.post.render(old_gid_ids),
            "name" : font.name.render(this.psName),
            "head" : font.head.render(loca.format),
            "OS/2" : font.os2.render()
        };

        return this.font.directory.render(tables);
    },
    cidToGidMap: function() {
        var this$1 = this;

        var out = BinaryStream(), len = 0;
        for (var cid = this.firstChar; cid < this.next; ++cid) {
            while (len < cid) {
                out.writeShort(0);
                len++;
            }
            var old_gid = this$1.ncid2ogid[cid];
            if (old_gid) {
                var new_gid = this$1.ogid2ngid[old_gid];
                out.writeShort(new_gid);
            } else {
                out.writeShort(0);
            }
            len++;
        }
        return out.get();
    }
};

function TTFFont(rawData, name) {
    var self = this;
    var data = self.contents = BinaryStream(rawData);
    if (data.readString(4) == "ttcf") {
        var offset;
        var parse = function() {
            data.offset(offset);
            self.parse();
        };
        if (!name) {
            throw new Error("Must specify a name for TTC files");
        }
        data.readLong();        // version
        var numFonts = data.readLong();
        for (var i = 0; i < numFonts; ++i) {
            offset = data.readLong();
            data.saveExcursion(parse);
            if (self.psName == name) {
                return;
            }
        }
        throw new Error("Font " + name + " not found in collection");
    } else {
        data.offset(0);
        self.parse();
    }
}

TTFFont.prototype = {
    parse: function() {
        var dir = this.directory = new Directory(this.contents);

        this.head = dir.readTable("head", HeadTable);
        this.loca = dir.readTable("loca", LocaTable);
        this.hhea = dir.readTable("hhea", HheaTable);
        this.maxp = dir.readTable("maxp", MaxpTable);
        this.hmtx = dir.readTable("hmtx", HmtxTable);
        this.glyf = dir.readTable("glyf", GlyfTable);
        this.name = dir.readTable("name", NameTable);
        this.post = dir.readTable("post", PostTable);
        this.cmap = dir.readTable("cmap", CmapTable);
        this.os2  = dir.readTable("OS/2", OS2Table);

        this.psName = this.name.postscriptName;
        this.ascent = this.os2.ascent || this.hhea.ascent;
        this.descent = this.os2.descent || this.hhea.descent;
        this.lineGap = this.os2.lineGap || this.hhea.lineGap;
        this.scale = 1000 / this.head.unitsPerEm;
    },
    widthOfGlyph: function(glyph) {
        return this.hmtx.forGlyph(glyph).advance * this.scale;
    },
    makeSubset: function() {
        return new Subfont(this);
    }
};

var deflate$1 = _progress_pakoEsm.deflate;

function supportsDeflate() {
    return true;
}

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

var browser$1 = support.browser;
var NL = "\n";

var RESOURCE_COUNTER = 0;

var PAPER_SIZE = {
    a0        : [ 2383.94 , 3370.39 ],
    a1        : [ 1683.78 , 2383.94 ],
    a2        : [ 1190.55 , 1683.78 ],
    a3        : [ 841.89  , 1190.55 ],
    a4        : [ 595.28  , 841.89  ],
    a5        : [ 419.53  , 595.28  ],
    a6        : [ 297.64  , 419.53  ],
    a7        : [ 209.76  , 297.64  ],
    a8        : [ 147.40  , 209.76  ],
    a9        : [ 104.88  , 147.40  ],
    a10       : [ 73.70   , 104.88  ],
    b0        : [ 2834.65 , 4008.19 ],
    b1        : [ 2004.09 , 2834.65 ],
    b2        : [ 1417.32 , 2004.09 ],
    b3        : [ 1000.63 , 1417.32 ],
    b4        : [ 708.66  , 1000.63 ],
    b5        : [ 498.90  , 708.66  ],
    b6        : [ 354.33  , 498.90  ],
    b7        : [ 249.45  , 354.33  ],
    b8        : [ 175.75  , 249.45  ],
    b9        : [ 124.72  , 175.75  ],
    b10       : [ 87.87   , 124.72  ],
    c0        : [ 2599.37 , 3676.54 ],
    c1        : [ 1836.85 , 2599.37 ],
    c2        : [ 1298.27 , 1836.85 ],
    c3        : [ 918.43  , 1298.27 ],
    c4        : [ 649.13  , 918.43  ],
    c5        : [ 459.21  , 649.13  ],
    c6        : [ 323.15  , 459.21  ],
    c7        : [ 229.61  , 323.15  ],
    c8        : [ 161.57  , 229.61  ],
    c9        : [ 113.39  , 161.57  ],
    c10       : [ 79.37   , 113.39  ],
    executive : [ 521.86  , 756.00  ],
    folio     : [ 612.00  , 936.00  ],
    legal     : [ 612.00  , 1008.00 ],
    letter    : [ 612.00  , 792.00  ],
    tabloid   : [ 792.00  , 1224.00 ]
};

function makeOutput() {
    var indentLevel = 0, output = BinaryStream();
    function out() {
        var arguments$1 = arguments;

        for (var i = 0; i < arguments.length; ++i) {
            var x = arguments$1[i];
            if (x === undefined) {
                throw new Error("Cannot output undefined to PDF");
            }
            else if (x instanceof PDFValue) {
                x.beforeRender(out);
                x.render(out);
            }
            else if (isArray(x)) {
                renderArray(x, out);
            }
            else if (isDate(x)) {
                renderDate(x, out);
            }
            else if (typeof x == "number") {
                if (isNaN(x)) {
                    throw new Error("Cannot output NaN to PDF");
                }
                // make sure it doesn't end up in exponent notation
                var num = x.toFixed(7);
                if (num.indexOf(".") >= 0) {
                    num = num.replace(/\.?0+$/, "");
                }
                if (num == "-0") {
                    num = "0";
                }
                output.writeString(num);
            }
            else if (/string|boolean/.test(typeof x)) {
                output.writeString(String(x));
            }
            else if (typeof x.get == "function") {
                output.write(x.get());
            }
            else if (typeof x == "object") {
                if (!x) {
                    output.writeString("null");
                } else {
                    out(new PDFDictionary(x));
                }
            }
        }
    }
    out.writeData = function(data) {
        output.write(data);
    };
    out.withIndent = function(f) {
        ++indentLevel;
        f(out);
        --indentLevel;
    };
    out.indent = function() {
        out(NL, pad("", indentLevel * 2, "  "));
        out.apply(null, arguments);
    };
    out.offset = function() {
        return output.offset();
    };
    out.toString = function() {
        throw new Error("FIX CALLER");
    };
    out.get = function() {
        return output.get();
    };
    out.stream = function() {
        return output;
    };
    return out;
}

function wrapObject(value, id) {
    var beforeRender = value.beforeRender;
    var renderValue = value.render;

    value.beforeRender = function(){};

    value.render = function(out) {
        out(id, " 0 R");
    };

    value.renderFull = function(out) {
        value._offset = out.offset();
        out(id, " 0 obj ");
        beforeRender.call(value, out);
        renderValue.call(value, out);
        out(" endobj");
    };
}

function getPaperOptions(getOption) {
    if (typeof getOption != "function") {
        var options = getOption;
        getOption = function(key, def) {
            return key in options ? options[key] : def;
        };
    }
    var paperSize = getOption("paperSize", PAPER_SIZE.a4);
    if (!paperSize) {
        return {};
    }
    if (typeof paperSize == "string") {
        paperSize = PAPER_SIZE[paperSize.toLowerCase()];
        if (paperSize == null) {
            throw new Error("Unknown paper size");
        }
    }

    paperSize[0] = unitsToPoints(paperSize[0]);
    paperSize[1] = unitsToPoints(paperSize[1]);

    if (getOption("landscape", false)) {
        paperSize = [
            Math.max(paperSize[0], paperSize[1]),
            Math.min(paperSize[0], paperSize[1])
        ];
    }

    var margin = getOption("margin");
    if (margin) {
        if (typeof margin == "string" || typeof margin == "number") {
            margin = unitsToPoints(margin, 0);
            margin = { left: margin, top: margin, right: margin, bottom: margin };
        } else {
            margin = {
                left   : unitsToPoints(margin.left, 0),
                top    : unitsToPoints(margin.top, 0),
                right  : unitsToPoints(margin.right, 0),
                bottom : unitsToPoints(margin.bottom, 0)
            };
        }
        if (getOption("addMargin")) {
            paperSize[0] += margin.left + margin.right;
            paperSize[1] += margin.top + margin.bottom;
        }
    }
    return { paperSize: paperSize, margin: margin };
}

function PDFDocument(options) {
    var self = this;
    var out = makeOutput();
    var objcount = 0;
    var objects = [];

    function getOption(name, defval) {
        return (options && options[name] != null) ? options[name] : defval;
    }

    self.getOption = getOption;

    self.attach = function(value) {
        if (objects.indexOf(value) < 0) {
            wrapObject(value, ++objcount);
            objects.push(value);
        }
        return value;
    };

    self.pages = [];

    self.FONTS = {};
    self.IMAGES = {};
    self.GRAD_COL_FUNCTIONS = {}; // cache for color gradient functions
    self.GRAD_OPC_FUNCTIONS = {}; // cache for opacity gradient functions
    self.GRAD_COL = {};     // cache for whole color gradient objects
    self.GRAD_OPC = {};     // cache for whole opacity gradient objects

    var catalog = self.attach(new PDFCatalog());
    var pageTree = self.attach(new PDFPageTree());

    if (getOption("autoPrint")) {
        var nameTree = {};
        nameTree.JavaScript = new PDFDictionary({ Names: [
            new PDFString("JS"), self.attach(new PDFDictionary({
                S: _("JavaScript"),
                JS: new PDFString("print(true);")
            }))
        ] });
        catalog.props.Names = new PDFDictionary(nameTree);
    }

    catalog.setPages(pageTree);

    var info = self.attach(new PDFDictionary({
        Producer     : new PDFString(getOption("producer", "Kendo UI PDF Generator"), true), // XXX: kendo.version?
        Title        : new PDFString(getOption("title", ""), true),
        Author       : new PDFString(getOption("author", ""), true),
        Subject      : new PDFString(getOption("subject", ""), true),
        Keywords     : new PDFString(getOption("keywords", ""), true),
        Creator      : new PDFString(getOption("creator", "Kendo UI PDF Generator"), true),
        CreationDate : getOption("date", new Date())
    }));

    self.addPage = function(options) {
        var paperOptions  = getPaperOptions(function(name, defval){
            return (options && options[name] != null) ? options[name] : defval;
        });
        var paperSize     = paperOptions.paperSize;
        var margin        = paperOptions.margin;
        var contentWidth  = paperSize[0];
        var contentHeight = paperSize[1];
        if (margin) {
            contentWidth -= margin.left + margin.right;
            contentHeight -= margin.top + margin.bottom;
        }
        var content = new PDFStream(makeOutput(), null, true);
        var props = {
            Contents : self.attach(content),
            Parent   : pageTree,
            MediaBox : [ 0, 0, paperSize[0], paperSize[1] ]
        };
        var page = new PDFPage(self, props);
        page._content = content;
        pageTree.addPage(self.attach(page));

        // canvas-like coord. system.  (0,0) is upper-left.
        // text must be vertically mirorred before drawing.
        page.transform(1, 0, 0, -1, 0, paperSize[1]);

        if (margin) {
            page.translate(margin.left, margin.top);
            // XXX: clip to right/bottom margin.  Make this optional?
            page.rect(0, 0, contentWidth, contentHeight);
            page.clip();
        }

        self.pages.push(page);
        return page;
    };

    self.render = function() {
        var i;
        /// file header
        out("%PDF-1.4", NL, "%\xc2\xc1\xda\xcf\xce", NL, NL);

        /// file body
        for (i = 0; i < objects.length; ++i) {
            objects[i].renderFull(out);
            out(NL, NL);
        }

        /// cross-reference table
        var xrefOffset = out.offset();
        out("xref", NL, 0, " ", objects.length + 1, NL);
        out("0000000000 65535 f ", NL);
        for (i = 0; i < objects.length; ++i) {
            out(zeropad(objects[i]._offset, 10), " 00000 n ", NL);
        }
        out(NL);

        /// trailer
        out("trailer", NL);
        out(new PDFDictionary({
            Size: objects.length + 1,
            Root: catalog,
            Info: info
        }), NL, NL);

        /// end
        out("startxref", NL, xrefOffset, NL);
        out("%%EOF", NL);

        return out.stream().offset(0);
    };
}

var FONT_CACHE = {
    "Times-Roman"           : true,
    "Times-Bold"            : true,
    "Times-Italic"          : true,
    "Times-BoldItalic"      : true,
    "Helvetica"             : true,
    "Helvetica-Bold"        : true,
    "Helvetica-Oblique"     : true,
    "Helvetica-BoldOblique" : true,
    "Courier"               : true,
    "Courier-Bold"          : true,
    "Courier-Oblique"       : true,
    "Courier-BoldOblique"   : true,
    "Symbol"                : true,
    "ZapfDingbats"          : true
};

function loadBinary(url, cont) {
    // IE throws Accesss denied error for Data URIs
    var m;
    if (browser$1.msie && (m = /^data:.*?;base64,/i.exec(url))) {
        cont(base64ToUint8Array(url.substr(m[0].length)));
        return;
    }

    function error() {
        if (window.console) {
            if (window.console.error) {
                window.console.error("Cannot load URL: %s", url);
            } else {
                window.console.log("Cannot load URL: %s", url);
            }
        }
        cont(null);
    }
    var req = new XMLHttpRequest();
    req.open('GET', url, true);
    if (HAS_TYPED_ARRAYS) {
        req.responseType = "arraybuffer";
    }
    req.onload = function() {
        if (req.status == 200 || req.status == 304) {
            if (HAS_TYPED_ARRAYS) {
                cont(new Uint8Array(req.response));
            } else {
                cont(new window.VBArray(req.responseBody).toArray()); // IE9 only
            }
        } else {
            error();
        }
    };
    req.onerror = error;
    req.send(null);
}

function loadFont(url, cont) {
    var font = FONT_CACHE[url];
    if (font) {
        cont(font);
    } else {
        loadBinary(url, function(data){
            if (data == null) {
                throw new Error("Cannot load font from " + url);
            } else {
                var font = new TTFFont(data);
                FONT_CACHE[url] = font;
                cont(font);
            }
        });
    }
}

var IMAGE_CACHE = {};

function clearImageCache() {
    IMAGE_CACHE = {};
}

function loadImage(url, size, cont, options) {
    var img = IMAGE_CACHE[url], bloburl, blob;
    if (img) {
        cont(img);
    } else {
        img = new Image();
        if (!(/^data:/i.test(url))) {
            img.crossOrigin = "Anonymous";
        }
        if (HAS_TYPED_ARRAYS && !(/^data:/i.test(url))) {
            // IE10 fails to load images from another domain even when the server sends the
            // proper CORS headers.  a XHR, however, will be able to load the data.
            // http://stackoverflow.com/a/19734516/154985
            //
            // On the other hand, it's worth doing it this way for all browsers which support
            // responseType = "blob" (HAS_TYPED_ARRAYS will be true), because we can inspect the
            // mime type and if it's a JPEG (very common case) we can save a lot of time in
            // _load below.
            var xhr = new XMLHttpRequest();
            xhr.onload = function() {
                blob = xhr.response;
                bloburl = URL.createObjectURL(blob);
                _load(bloburl);
            };
            xhr.onerror = _onerror;
            xhr.open("GET", url, true);
            xhr.responseType = "blob";
            xhr.send();
        } else {
            _load(url);
        }
    }

    function _load(url) {
        img.src = url;
        if (img.complete && !browser$1.msie) {
            // IE, bless it's little heart, says img.complete == true even though the image is
            // not loaded (width=0), therefore we must go the onload route (ticket 929635).
            _onload();
        } else {
            img.onload = _onload;
            img.onerror = _onerror;
        }
    }

    function _trycanvas() {
        if (!size) {
            size = { width: img.width, height: img.height };
        }

        var canvas = document.createElement("canvas");
        canvas.width = size.width;
        canvas.height = size.height;

        var ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0, size.width, size.height);

        var imgdata;
        try {
            imgdata = ctx.getImageData(0, 0, size.width, size.height);
        } catch (ex) {
            // it tainted the canvas -- can't draw it.
            _onerror();
            return;
        } finally {
            if (bloburl) {
                URL.revokeObjectURL(bloburl);
            }
        }

        // in case it contains transparency, we must separate rgb data from the alpha
        // channel and create a PDFRawImage image with opacity.  otherwise we can use a
        // PDFJpegImage.
        //
        // to do this in one step, we create the rgb and alpha streams anyway, even if
        // we might end up not using them if hasAlpha remains false.

        var hasAlpha = false, rgb = BinaryStream(), alpha = BinaryStream();
        var rawbytes = imgdata.data;
        var i = 0;
        while (i < rawbytes.length) {
            rgb.writeByte(rawbytes[i++]);
            rgb.writeByte(rawbytes[i++]);
            rgb.writeByte(rawbytes[i++]);
            var a = rawbytes[i++];
            if (a < 255) {
                hasAlpha = true;
            }
            alpha.writeByte(a);
        }

        if (hasAlpha || options.keepPNG) {
            img = new PDFRawImage(size.width, size.height, rgb, alpha);
        } else {
            // no transparency, encode as JPEG.
            var data = canvas.toDataURL("image/jpeg", options.jpegQuality);
            data = data.substr(data.indexOf(";base64,") + 8);

            var stream = BinaryStream();
            stream.writeBase64(data);
            img = new PDFJpegImage(stream);
        }

        cont(IMAGE_CACHE[url] = img);
    }

    function _onerror() {
        cont(IMAGE_CACHE[url] = "ERROR");
    }

    function _onload() {
        if (size) {
            // but if requested size is bigger than the image, just use the original image.
            if (size.width >= img.width || size.height >= img.height) {
                size = null;
            }
        }
        if (!size && blob && /^image\/jpe?g$/i.test(blob.type)) {
            // If we know we got a JPEG, we can skip the process of rendering it to a
            // canvas, getting the pixel data, searching for transparency we know we won't
            // find, getting back a data URI and then decoding the BASE64 to finally get the
            // binary we already have.  Also, we avoid downgrading the image quality, with
            // the possible drawback of making a bigger PDF; still, seems legit.
            //
            // Besides saving a lot of work, this also reuses the buffer memory
            // (BinaryStream does not create a copy), potentially saving some GC cycles.
            var reader = new FileReader();
            reader.onload = function() {
                try {
                    var img = new PDFJpegImage(BinaryStream(new Uint8Array(this.result)));
                    URL.revokeObjectURL(bloburl);
                    cont(IMAGE_CACHE[url] = img);
                } catch (ex) {
                    // if there's an error parsing the JPEG stream, it could be due to a
                    // misconfigured server (improper content-type:
                    // https://github.com/telerik/kendo-ui-core/issues/4184).  If that's the case,
                    // the canvas will still be able to draw it.
                    _trycanvas();
                }
            };
            reader.readAsArrayBuffer(blob);
        } else {
            _trycanvas();
        }
    }
}

function manyLoader(loadOne) {
    return function(urls, callback) {
        var n = urls.length, i = n;
        if (n === 0) {
            return callback();
        }
        function next() {
            if (--n === 0) {
                callback();
            }
        }
        while (i-- > 0) {
            loadOne(urls[i], next);
        }
    };
}

var loadFonts = manyLoader(loadFont);
var loadImages = function(images, callback, options) {
    options = Object.assign({
        jpegQuality : 0.92,
        keepPNG     : false
    }, options);
    var urls = Object.keys(images), n = urls.length;
    if (n === 0) {
        return callback();
    }
    function next() {
        if (--n === 0) {
            callback();
        }
    }
    urls.forEach(function(url){
        loadImage(url, images[url], next, options);
    });
};

PDFDocument.prototype = {
    loadFonts: loadFonts,
    loadImages: loadImages,

    getFont: function(url) {
        var font = this.FONTS[url];
        if (!font) {
            font = FONT_CACHE[url];
            if (!font) {
                throw new Error("Font " + url + " has not been loaded");
            }
            if (font === true) {
                font = this.attach(new PDFStandardFont(url));
            } else {
                font = this.attach(new PDFFont(this, font));
            }
            this.FONTS[url] = font;
        }
        return font;
    },

    getImage: function(url) {
        var img = this.IMAGES[url];
        if (!img) {
            img = IMAGE_CACHE[url];
            if (!img) {
                throw new Error("Image " + url + " has not been loaded");
            }
            if (img === "ERROR") {
                return null;
            }
            img = this.IMAGES[url] = this.attach(img.asStream(this));
        }
        return img;
    },

    getOpacityGS: function(opacity, forStroke) {
        var id = parseFloat(opacity).toFixed(3);
        opacity = parseFloat(id);
        id += forStroke ? "S" : "F";
        var cache = this._opacityGSCache || (this._opacityGSCache = {});
        var gs = cache[id];
        if (!gs) {
            var props = {
                Type: _("ExtGState")
            };
            if (forStroke) {
                props.CA = opacity;
            } else {
                props.ca = opacity;
            }
            gs = this.attach(new PDFDictionary(props));
            gs._resourceName = _("GS" + (++RESOURCE_COUNTER));
            cache[id] = gs;
        }
        return gs;
    },

    dict: function(props) {
        return new PDFDictionary(props);
    },

    name: function(str) {
        return _(str);
    },

    stream: function(props, content) {
        return new PDFStream(content, props);
    }
};

/* -----[ utils ]----- */

function pad(str, len, ch) {
    while (str.length < len) {
        str = ch + str;
    }
    return str;
}

function zeropad(n, len) {
    return pad(String(n), len, "0");
}

function hasOwnProperty(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}

var isArray = Array.isArray || function(obj) {
    return obj instanceof Array;
};

function isDate(obj) {
    return obj instanceof Date;
}

function renderArray(a, out) {
    out("[");
    if (a.length > 0) {
        out.withIndent(function(){
            for (var i = 0; i < a.length; ++i) {
                if (i > 0 && i % 8 === 0) {
                    out.indent(a[i]);
                } else {
                    out(" ", a[i]);
                }
            }
        });
        //out.indent();
    }
    out(" ]");
}

function renderDate(date, out) {
    out("(D:",
        zeropad(date.getUTCFullYear(), 4),
        zeropad(date.getUTCMonth() + 1, 2),
        zeropad(date.getUTCDate(), 2),
        zeropad(date.getUTCHours(), 2),
        zeropad(date.getUTCMinutes(), 2),
        zeropad(date.getUTCSeconds(), 2),
        "Z)");
}

function mm2pt(mm) {
    return mm * (72/25.4);
}

function cm2pt(cm) {
    return mm2pt(cm * 10);
}

function in2pt(inch)  {
    return inch * 72;
}


function unitsToPoints(x, def) {
    if (typeof x == "number") {
        return x;
    }
    if (typeof x == "string") {
        var m;
        m = /^\s*([0-9.]+)\s*(mm|cm|in|pt)\s*$/.exec(x);
        if (m) {
            var num = parseFloat(m[1]);
            if (!isNaN(num)) {
                if (m[2] == "pt") {
                    return num;
                }
                return {
                    "mm": mm2pt,
                    "cm": cm2pt,
                    "in": in2pt
                }[m[2]](num);
            }
        }
    }
    if (def != null) {
        return def;
    }
    throw new Error("Can't parse unit: " + x);
}

/* -----[ PDF basic objects ]----- */

function PDFValue(){}

PDFValue.prototype.beforeRender = function(){};

function defclass(Ctor, proto, Base) {
    if (!Base) {
        Base = PDFValue;
    }
    Ctor.prototype = new Base();
    for (var i in proto) {
        if (hasOwnProperty(proto, i)) {
            Ctor.prototype[i] = proto[i];
        }
    }
    return Ctor;
}

var PDFString = defclass(function PDFString(value, utf16be){
    this.value = value;
    this.utf16be = Boolean(utf16be);
}, {
    render: function(out) {
        var txt = this.value;
        if (this.utf16be) {
            txt = BOM + encodeUTF16BE(txt);
            txt = txt.replace(/([\(\)\\])/g, "\\$1");
            out("(", txt, ")");
        } else {
            // out.writeString truncates charcodes to 8 bits and
            // 0x128 & 0xFF is 40, the code for open paren.
            // therefore we need to do the chopping here to make
            // sure we backslash all cases.
            var data = [ 40 ]; // open PDF string '('
            for (var i = 0; i < txt.length; ++i) {
                var code = txt.charCodeAt(i) & 0xFF;
                if (code == 40 || code == 41 || code == 92) {
                    // backslash before (, ) and \
                    data.push(92);
                }
                data.push(code);
            }
            data.push(41);  // ')' close PDF string
            out.writeData(data);
        }
    },
    toString: function() {
        return this.value;
    }
});

var PDFHexString = defclass(function PDFHexString(value){
    this.value = value;
}, {
    render: function(out) {
        var this$1 = this;

        out("<");
        for (var i = 0; i < this.value.length; ++i) {
            out(zeropad(this$1.value.charCodeAt(i).toString(16), 4));
        }
        out(">");
    }
}, PDFString);

/// names

var PDFName = defclass(function PDFName(name) {
    this.name = name;
}, {
    render: function(out) {
        out("/" + this.escape());
    },
    escape: function() {
        return this.name.replace(/[^\x21-\x7E]/g, function(c){
            return "#" + zeropad(c.charCodeAt(0).toString(16), 2);
        });
    },
    toString: function() {
        return this.name;
    }
});

var PDFName_cache = {};
PDFName.get = _;

function _(name) {
    if (hasOwnProperty(PDFName_cache, name)) {
        return PDFName_cache[name];
    }
    return (PDFName_cache[name] = new PDFName(name));
}

/// dictionary

var PDFDictionary = defclass(function PDFDictionary(props) {
    this.props = props;
}, {
    render: function(out) {
        var props = this.props, empty = true;
        out("<<");
        out.withIndent(function(){
            for (var i in props) {
                if (hasOwnProperty(props, i) && !/^_/.test(i)) {
                    empty = false;
                    out.indent(_(i), " ", props[i]);
                }
            }
        });
        if (!empty) {
            out.indent();
        }
        out(">>");
    }
});

/// streams

var PDFStream = defclass(function PDFStream(data, props, compress) {
    if (typeof data == "string") {
        var tmp = BinaryStream();
        tmp.write(data);
        data = tmp;
    }
    this.data = data;
    this.props = props || {};
    this.compress = compress;
}, {
    render: function(out) {
        var data = this.data.get(), props = this.props;
        if (this.compress && supportsDeflate()) {
            if (!props.Filter) {
                props.Filter = [];
            } else if (!(props.Filter instanceof Array)) {
                props.Filter = [ props.Filter ];
            }
            props.Filter.unshift(_("FlateDecode"));
            data = deflate$1(data);
        }
        props.Length = data.length;
        out(new PDFDictionary(props), " stream", NL);
        out.writeData(data);
        out(NL, "endstream");
    }
});

/// catalog

var PDFCatalog = defclass(function PDFCatalog(){
    this.props = {
        Type: _("Catalog")
    };
}, {
    setPages: function(pagesObj) {
        this.props.Pages = pagesObj;
    }
}, PDFDictionary);

/// page tree

var PDFPageTree = defclass(function PDFPageTree(){
    this.props = {
        Type  : _("Pages"),
        Kids  : [],
        Count : 0
    };
}, {
    addPage: function(pageObj) {
        this.props.Kids.push(pageObj);
        this.props.Count++;
    }
}, PDFDictionary);

/// images

// JPEG

var SOF_CODES = [0xc0, 0xc1, 0xc2, 0xc3, 0xc5, 0xc6, 0xc7, 0xc9, 0xca, 0xcb, 0xcd, 0xce, 0xcf];

function PDFJpegImage(data) {
    // we must determine the correct color space.  we'll parse a bit
    // of the JPEG stream for this, it's still better than going
    // through the canvas.
    // https://github.com/telerik/kendo-ui-core/issues/2845
    data.offset(0);
    var width, height, colorSpace, bitsPerComponent;
    var soi = data.readShort();
    if (soi != 0xFFD8) {
        // XXX: do we have some better options here?
        throw new Error("Invalid JPEG image");
    }
    while (!data.eof()) {
        var ff = data.readByte();
        if (ff != 0xFF) {
            throw new Error("Invalid JPEG image");
        }
        var marker = data.readByte();
        var length = data.readShort();
        if (SOF_CODES.indexOf(marker) >= 0) {
            // "start of frame" marker
            bitsPerComponent = data.readByte();
            height = data.readShort();
            width = data.readShort();
            colorSpace = data.readByte();
            break;
        }
        data.skip(length - 2);
    }

    if (colorSpace == null) {
        throw new Error("Invalid JPEG image");
    }

    var props = {
        Type             : _("XObject"),
        Subtype          : _("Image"),
        Width            : width,
        Height           : height,
        BitsPerComponent : bitsPerComponent,
        Filter           : _("DCTDecode")
    };

    switch (colorSpace) {
      case 1:
        props.ColorSpace = _("DeviceGray");
        break;
      case 3:
        props.ColorSpace = _("DeviceRGB");
        break;
      case 4:
        props.ColorSpace = _("DeviceCMYK");
        props.Decode = [ 1, 0, 1, 0, 1, 0, 1, 0 ]; // invert colors
        break;
    }

    this.asStream = function() {
        data.offset(0);
        var stream = new PDFStream(data, props);
        stream._resourceName = _("I" + (++RESOURCE_COUNTER));
        return stream;
    };
}

// PDFRawImage will be used for images with transparency (PNG)

function PDFRawImage(width, height, rgb, alpha) {
    this.asStream = function(pdf) {
        var mask = new PDFStream(alpha, {
            Type             : _("XObject"),
            Subtype          : _("Image"),
            Width            : width,
            Height           : height,
            BitsPerComponent : 8,
            ColorSpace       : _("DeviceGray")
        }, true);
        var stream = new PDFStream(rgb, {
            Type             : _("XObject"),
            Subtype          : _("Image"),
            Width            : width,
            Height           : height,
            BitsPerComponent : 8,
            ColorSpace       : _("DeviceRGB"),
            SMask            : pdf.attach(mask)
        }, true);
        stream._resourceName = _("I" + (++RESOURCE_COUNTER));
        return stream;
    };
}

/// standard fonts

var PDFStandardFont = defclass(function PDFStandardFont(name){
    this.props = {
        Type     : _("Font"),
        Subtype  : _("Type1"),
        BaseFont : _(name)
    };
    this._resourceName = _("F" + (++RESOURCE_COUNTER));
}, {
    encodeText: function(str) {
        return new PDFString(String(str));
    }
}, PDFDictionary);

/// TTF fonts

var PDFFont = defclass(function PDFFont(pdf, font, props){
    props = this.props = props || {};
    props.Type = _("Font");
    props.Subtype = _("Type0");
    props.Encoding = _("Identity-H");

    this._pdf = pdf;
    this._font = font;
    this._sub = font.makeSubset();
    this._resourceName = _("F" + (++RESOURCE_COUNTER));

    var head = font.head;

    this.name = font.psName;
    var scale = this.scale = font.scale;
    this.bbox = [
        head.xMin * scale,
        head.yMin * scale,
        head.xMax * scale,
        head.yMax * scale
    ];

    this.italicAngle = font.post.italicAngle;
    this.ascent = font.ascent * scale;
    this.descent = font.descent * scale;
    this.lineGap = font.lineGap * scale;
    this.capHeight = font.os2.capHeight || this.ascent;
    this.xHeight = font.os2.xHeight || 0;
    this.stemV = 0;

    this.familyClass = (font.os2.familyClass || 0) >> 8;
    this.isSerif = this.familyClass >= 1 && this.familyClass <= 7;
    this.isScript = this.familyClass == 10;

    this.flags = ((font.post.isFixedPitch ? 1 : 0) |
                  (this.isSerif ? 1 << 1 : 0) |
                  (this.isScript ? 1 << 3 : 0) |
                  (this.italicAngle !== 0 ? 1 << 6 : 0) |
                  (1 << 5));
}, {
    encodeText: function(text) {
        return new PDFHexString(this._sub.encodeText(String(text)));
    },
    getTextWidth: function(fontSize, text) {
        var this$1 = this;

        var width = 0, codeMap = this._font.cmap.codeMap;
        for (var i = 0; i < text.length; ++i) {
            var glyphId = codeMap[text.charCodeAt(i)];
            width += this$1._font.widthOfGlyph(glyphId || 0);
        }
        return width * fontSize / 1000;
    },
    beforeRender: function() {
        var self = this;
        var sub = self._sub;

        // write the TTF data
        var data = sub.render();
        var fontStream = new PDFStream(BinaryStream(data), {
            Length1: data.length
        }, true);

        var descriptor = self._pdf.attach(new PDFDictionary({
            Type         : _("FontDescriptor"),
            FontName     : _(self._sub.psName),
            FontBBox     : self.bbox,
            Flags        : self.flags,
            StemV        : self.stemV,
            ItalicAngle  : self.italicAngle,
            Ascent       : self.ascent,
            Descent      : self.descent,
            CapHeight    : self.capHeight,
            XHeight      : self.xHeight,
            FontFile2    : self._pdf.attach(fontStream)
        }));

        var cmap = sub.ncid2ogid;
        var firstChar = sub.firstChar;
        var lastChar = sub.lastChar;
        var charWidths = [];
        (function loop(i, chunk){
            if (i <= lastChar) {
                var gid = cmap[i];
                if (gid == null) {
                    loop(i + 1);
                } else {
                    if (!chunk) {
                        charWidths.push(i, chunk = []);
                    }
                    chunk.push(self._font.widthOfGlyph(gid));
                    loop(i + 1, chunk);
                }
            }
        })(firstChar);

        // As if two dictionaries weren't enough, we need another
        // one, the "descendant font".  Only that one can be of
        // Subtype CIDFontType2.  PDF is the X11 of document
        // formats: portable but full of legacy that nobody cares
        // about anymore.

        var descendant = new PDFDictionary({
            Type: _("Font"),
            Subtype: _("CIDFontType2"),
            BaseFont: _(self._sub.psName),
            CIDSystemInfo: new PDFDictionary({
                Registry   : new PDFString("Adobe"),
                Ordering   : new PDFString("Identity"),
                Supplement : 0
            }),
            FontDescriptor: descriptor,
            FirstChar: firstChar,
            LastChar: lastChar,
            DW: Math.round(self._font.widthOfGlyph(0)),
            W: charWidths,
            CIDToGIDMap: self._pdf.attach(self._makeCidToGidMap())
        });

        var dict = self.props;
        dict.BaseFont = _(self._sub.psName);
        dict.DescendantFonts = [ self._pdf.attach(descendant) ];

        // Compute the ToUnicode map so that apps can extract
        // meaningful text from the PDF.
        var unimap = new PDFToUnicodeCmap(firstChar, lastChar, sub.subset);
        var unimapStream = new PDFStream(makeOutput(), null, true);
        unimapStream.data(unimap);
        dict.ToUnicode = self._pdf.attach(unimapStream);
    },
    _makeCidToGidMap: function() {
        return new PDFStream(BinaryStream(this._sub.cidToGidMap()), null, true);
    }
}, PDFDictionary);

var PDFToUnicodeCmap = defclass(function PDFUnicodeCMap(firstChar, lastChar, map){
    this.firstChar = firstChar;
    this.lastChar = lastChar;
    this.map = map;
}, {
    render: function(out) {
        out.indent("/CIDInit /ProcSet findresource begin");
        out.indent("12 dict begin");
        out.indent("begincmap");
        out.indent("/CIDSystemInfo <<");
        out.indent("  /Registry (Adobe)");
        out.indent("  /Ordering (UCS)");
        out.indent("  /Supplement 0");
        out.indent(">> def");
        out.indent("/CMapName /Adobe-Identity-UCS def");
        out.indent("/CMapType 2 def");
        out.indent("1 begincodespacerange");
        out.indent("  <0000><ffff>");
        out.indent("endcodespacerange");

        var self = this;
        out.indent(self.lastChar - self.firstChar + 1, " beginbfchar");
        out.withIndent(function(){
            for (var code = self.firstChar; code <= self.lastChar; ++code) {
                var unicode = self.map[code];
                var str = ucs2encode([ unicode ]);
                out.indent("<", zeropad(code.toString(16), 4), ">", "<");
                for (var i = 0; i < str.length; ++i) {
                    out(zeropad(str.charCodeAt(i).toString(16), 4));
                }
                out(">");
            }
        });
        out.indent("endbfchar");

        out.indent("endcmap");
        out.indent("CMapName currentdict /CMap defineresource pop");
        out.indent("end");
        out.indent("end");
    }
});

/// gradients

function makeHash(a) {
    return a.map(function(x){
        return isArray(x) ? makeHash(x)
            : typeof x == "number" ? (Math.round(x * 1000) / 1000).toFixed(3)
            : x;
    }).join(" ");
}

function cacheColorGradientFunction(pdf, r1, g1, b1, r2, g2, b2) {
    var hash = makeHash([ r1, g1, b1, r2, g2, b2 ]);
    var func = pdf.GRAD_COL_FUNCTIONS[hash];
    if (!func) {
        func = pdf.GRAD_COL_FUNCTIONS[hash] = pdf.attach(new PDFDictionary({
            FunctionType: 2,
            Domain: [ 0, 1 ],
            Range: [ 0, 1, 0, 1, 0, 1 ],
            N: 1,
            C0: [ r1 , g1 , b1 ],
            C1: [ r2 , g2 , b2 ]
        }));
    }
    return func;
}

function cacheOpacityGradientFunction(pdf, a1, a2) {
    var hash = makeHash([ a1, a2 ]);
    var func = pdf.GRAD_OPC_FUNCTIONS[hash];
    if (!func) {
        func = pdf.GRAD_OPC_FUNCTIONS[hash] = pdf.attach(new PDFDictionary({
            FunctionType: 2,
            Domain: [ 0, 1 ],
            Range: [ 0, 1 ],
            N: 1,
            C0: [ a1 ],
            C1: [ a2 ]
        }));
    }
    return func;
}

function makeGradientFunctions(pdf, stops) {
    var hasAlpha = false;
    var opacities = [];
    var colors = [];
    var offsets = [];
    var encode = [];
    var i, prev, cur, prevColor, curColor;
    for (i = 1; i < stops.length; ++i) {
        prev = stops[i - 1];
        cur = stops[i];
        prevColor = prev.color;
        curColor = cur.color;
        colors.push(cacheColorGradientFunction(
            pdf,
            prevColor.r, prevColor.g, prevColor.b,
            curColor.r,  curColor.g,  curColor.b
        ));
        if (prevColor.a < 1 || curColor.a < 1) {
            hasAlpha = true;
        }
        offsets.push(cur.offset);
        encode.push(0, 1);
    }
    if (hasAlpha) {
        for (i = 1; i < stops.length; ++i) {
            prev = stops[i - 1];
            cur = stops[i];
            prevColor = prev.color;
            curColor = cur.color;
            opacities.push(cacheOpacityGradientFunction(
                pdf, prevColor.a, curColor.a
            ));
        }
    }
    offsets.pop();
    return {
        hasAlpha  : hasAlpha,
        colors    : assemble(colors),
        opacities : hasAlpha ? assemble(opacities) : null
    };
    function assemble(funcs) {
        if (funcs.length == 1) {
            return funcs[0];
        }
        return {
            FunctionType: 3,
            Functions: funcs,
            Domain: [ 0, 1 ],
            Bounds: offsets,
            Encode: encode
        };
    }
}

function cacheColorGradient(pdf, isRadial, stops, coords, funcs, box) {
    var shading, hash;
    // if box is given then we have user-space coordinates, which
    // means the gradient is designed for a certain position/size
    // on page.  caching won't do any good.
    if (!box) {
        var a = [ isRadial ].concat(coords);
        stops.forEach(function(x){
            a.push(x.offset, x.color.r, x.color.g, x.color.b);
        });
        hash = makeHash(a);
        shading = pdf.GRAD_COL[hash];
    }
    if (!shading) {
        shading = new PDFDictionary({
            Type: _("Shading"),
            ShadingType: isRadial ? 3 : 2,
            ColorSpace: _("DeviceRGB"),
            Coords: coords,
            Domain: [ 0, 1 ],
            Function: funcs,
            Extend: [ true, true ]
        });
        pdf.attach(shading);
        shading._resourceName = "S" + (++RESOURCE_COUNTER);
        if (hash) {
            pdf.GRAD_COL[hash] = shading;
        }
    }
    return shading;
}

function cacheOpacityGradient(pdf, isRadial, stops, coords, funcs, box) {
    var opacity, hash;
    // if box is given then we have user-space coordinates, which
    // means the gradient is designed for a certain position/size
    // on page.  caching won't do any good.
    if (!box) {
        var a = [ isRadial ].concat(coords);
        stops.forEach(function(x){
            a.push(x.offset, x.color.a);
        });
        hash = makeHash(a);
        opacity = pdf.GRAD_OPC[hash];
    }
    if (!opacity) {
        opacity = new PDFDictionary({
            Type: _("ExtGState"),
            AIS: false,
            CA: 1,
            ca: 1,
            SMask: {
                Type: _("Mask"),
                S: _("Luminosity"),
                G: pdf.attach(new PDFStream("/a0 gs /s0 sh", {
                    Type: _("XObject"),
                    Subtype: _("Form"),
                    FormType: 1,
                    BBox: (box ? [
                        box.left, box.top + box.height, box.left + box.width, box.top
                    ] : [ 0, 1, 1, 0 ]),
                    Group: {
                        Type: _("Group"),
                        S: _("Transparency"),
                        CS: _("DeviceGray"),
                        I: true
                    },
                    Resources: {
                        ExtGState: {
                            a0: { CA: 1, ca: 1 }
                        },
                        Shading: {
                            s0: {
                                ColorSpace: _("DeviceGray"),
                                Coords: coords,
                                Domain: [ 0, 1 ],
                                ShadingType: isRadial ? 3 : 2,
                                Function: funcs,
                                Extend: [ true, true ]
                            }
                        }
                    }
                }))
            }
        });
        pdf.attach(opacity);
        opacity._resourceName = "O" + (++RESOURCE_COUNTER);
        if (hash) {
            pdf.GRAD_OPC[hash] = opacity;
        }
    }
    return opacity;
}

function cacheGradient(pdf, gradient, box) {
    var isRadial = gradient.type == "radial";
    var funcs = makeGradientFunctions(pdf, gradient.stops);
    var coords = isRadial ? [
        gradient.start.x , gradient.start.y , gradient.start.r,
        gradient.end.x   , gradient.end.y   , gradient.end.r
    ] : [
        gradient.start.x , gradient.start.y,
        gradient.end.x   , gradient.end.y
    ];
    var shading = cacheColorGradient(
        pdf, isRadial, gradient.stops, coords, funcs.colors, gradient.userSpace && box
    );
    var opacity = funcs.hasAlpha ? cacheOpacityGradient(
        pdf, isRadial, gradient.stops, coords, funcs.opacities, gradient.userSpace && box
    ) : null;
    return {
        hasAlpha: funcs.hasAlpha,
        shading: shading,
        opacity: opacity
    };
}

/// page object

var PDFPage = defclass(function PDFPage(pdf, props){
    this._pdf = pdf;
    this._rcount = 0;
    this._textMode = false;
    this._fontResources = {};
    this._gsResources = {};
    this._xResources = {};
    this._patResources = {};
    this._shResources = {};
    this._opacity = 1;
    this._matrix = [ 1, 0, 0, 1, 0, 0 ];
    this._annotations = [];

    this._font = null;
    this._fontSize = null;

    this._contextStack = [];

    props = this.props = props || {};
    props.Type = _("Page");
    props.ProcSet = [
        _("PDF"),
        _("Text"),
        _("ImageB"),
        _("ImageC"),
        _("ImageI")
    ];
    props.Resources = new PDFDictionary({
        Font      : new PDFDictionary(this._fontResources),
        ExtGState : new PDFDictionary(this._gsResources),
        XObject   : new PDFDictionary(this._xResources),
        Pattern   : new PDFDictionary(this._patResources),
        Shading   : new PDFDictionary(this._shResources)
    });
    props.Annots = this._annotations;
}, {
    _out: function() {
        this._content.data.apply(null, arguments);
    },
    transform: function(a, b, c, d, e, f) {
        if (!isIdentityMatrix(arguments)) {
            this._matrix = mmul(arguments, this._matrix);
            this._out(a, " ", b, " ", c, " ", d, " ", e, " ", f, " cm");
            // XXX: debug
            // this._out(" % current matrix: ", this._matrix);
            this._out(NL);
        }
    },
    translate: function(dx, dy) {
        this.transform(1, 0, 0, 1, dx, dy);
    },
    scale: function(sx, sy) {
        this.transform(sx, 0, 0, sy, 0, 0);
    },
    rotate: function(angle) {
        var cos = Math.cos(angle), sin = Math.sin(angle);
        this.transform(cos, sin, -sin, cos, 0, 0);
    },
    beginText: function() {
        this._textMode = true;
        this._out("BT", NL);
    },
    endText: function() {
        this._textMode = false;
        this._out("ET", NL);
    },
    _requireTextMode: function() {
        if (!this._textMode) {
            throw new Error("Text mode required; call page.beginText() first");
        }
    },
    _requireFont: function() {
        if (!this._font) {
            throw new Error("No font selected; call page.setFont() first");
        }
    },
    setFont: function(font, size) {
        this._requireTextMode();
        if (font == null) {
            font = this._font;
        } else if (!(font instanceof PDFFont)) {
            font = this._pdf.getFont(font);
        }
        if (size == null) {
            size = this._fontSize;
        }
        this._fontResources[font._resourceName] = font;
        this._font = font;
        this._fontSize = size;
        this._out(font._resourceName, " ", size, " Tf", NL);
    },
    setTextLeading: function(size) {
        this._requireTextMode();
        this._out(size, " TL", NL);
    },
    setTextRenderingMode: function(mode) {
        this._requireTextMode();
        this._out(mode, " Tr", NL);
    },
    showText: function(text, requestedWidth) {
        this._requireFont();
        if (text.length > 1 && requestedWidth && this._font instanceof PDFFont) {
            var outputWidth = this._font.getTextWidth(this._fontSize, text);
            var scale = requestedWidth / outputWidth * 100;
            this._out(scale, " Tz ");
        }
        this._out(this._font.encodeText(text), " Tj", NL);
    },
    showTextNL: function(text) {
        this._requireFont();
        this._out(this._font.encodeText(text), " '", NL);
    },
    addLink: function(uri, box) {
        var ll = this._toPage({ x: box.left, y: box.bottom });
        var ur = this._toPage({ x: box.right, y: box.top });
        this._annotations.push(new PDFDictionary({
            Type    : _("Annot"),
            Subtype : _("Link"),
            Rect    : [ ll.x, ll.y, ur.x, ur.y ],
            Border  : [ 0, 0, 0 ],
            A       : new PDFDictionary({
                Type : _("Action"),
                S    : _("URI"),
                URI  : new PDFString(uri)
            })
        }));
    },
    setStrokeColor: function(r, g, b) {
        this._out(r, " ", g, " ", b, " RG", NL);
    },
    setOpacity: function(opacity) {
        this.setFillOpacity(opacity);
        this.setStrokeOpacity(opacity);
        this._opacity *= opacity;
    },
    setStrokeOpacity: function(opacity) {
        if (opacity < 1) {
            var gs = this._pdf.getOpacityGS(this._opacity * opacity, true);
            this._gsResources[gs._resourceName] = gs;
            this._out(gs._resourceName, " gs", NL);
        }
    },
    setFillColor: function(r, g, b) {
        this._out(r, " ", g, " ", b, " rg", NL);
    },
    setFillOpacity: function(opacity) {
        if (opacity < 1) {
            var gs = this._pdf.getOpacityGS(this._opacity * opacity, false);
            this._gsResources[gs._resourceName] = gs;
            this._out(gs._resourceName, " gs", NL);
        }
    },
    gradient: function(gradient, box) {
        this.save();
        this.rect(box.left, box.top, box.width, box.height);
        this.clip();
        if (!gradient.userSpace) {
            this.transform(box.width, 0, 0, box.height, box.left, box.top);
        }
        var g = cacheGradient(this._pdf, gradient, box);
        var sname = g.shading._resourceName, oname;
        this._shResources[sname] = g.shading;
        if (g.hasAlpha) {
            oname = g.opacity._resourceName;
            this._gsResources[oname] = g.opacity;
            this._out("/" + oname + " gs ");
        }
        this._out("/" + sname + " sh", NL);
        this.restore();
    },
    setDashPattern: function(dashArray, dashPhase) {
        this._out(dashArray, " ", dashPhase, " d", NL);
    },
    setLineWidth: function(width) {
        this._out(width, " w", NL);
    },
    setLineCap: function(lineCap) {
        this._out(lineCap, " J", NL);
    },
    setLineJoin: function(lineJoin) {
        this._out(lineJoin, " j", NL);
    },
    setMitterLimit: function(mitterLimit) {
        this._out(mitterLimit, " M", NL);
    },
    save: function() {
        this._contextStack.push(this._context());
        this._out("q", NL);
    },
    restore: function() {
        this._out("Q", NL);
        this._context(this._contextStack.pop());
    },

    // paths
    moveTo: function(x, y) {
        this._out(x, " ", y, " m", NL);
    },
    lineTo: function(x, y) {
        this._out(x, " ", y, " l", NL);
    },
    bezier: function(x1, y1, x2, y2, x3, y3) {
        this._out(x1, " ", y1, " ", x2, " ", y2, " ", x3, " ", y3, " c", NL);
    },
    bezier1: function(x1, y1, x3, y3) {
        this._out(x1, " ", y1, " ", x3, " ", y3, " y", NL);
    },
    bezier2: function(x2, y2, x3, y3) {
        this._out(x2, " ", y2, " ", x3, " ", y3, " v", NL);
    },
    close: function() {
        this._out("h", NL);
    },
    rect: function(x, y, w, h) {
        this._out(x, " ", y, " ", w, " ", h, " re", NL);
    },
    ellipse: function(x, y, rx, ry) {
        function _X(v) { return x + v; }
        function _Y(v) { return y + v; }

        // how to get to the "magic number" is explained here:
        // http://www.whizkidtech.redprince.net/bezier/circle/kappa/
        var k = 0.5522847498307936;

        this.moveTo(_X(0), _Y(ry));
        this.bezier(
            _X(rx * k) , _Y(ry),
            _X(rx)     , _Y(ry * k),
            _X(rx)     , _Y(0)
        );
        this.bezier(
            _X(rx)     , _Y(-ry * k),
            _X(rx * k) , _Y(-ry),
            _X(0)      , _Y(-ry)
        );
        this.bezier(
            _X(-rx * k) , _Y(-ry),
            _X(-rx)     , _Y(-ry * k),
            _X(-rx)     , _Y(0)
        );
        this.bezier(
            _X(-rx)     , _Y(ry * k),
            _X(-rx * k) , _Y(ry),
            _X(0)       , _Y(ry)
        );
    },
    circle: function(x, y, r) {
        this.ellipse(x, y, r, r);
    },
    stroke: function() {
        this._out("S", NL);
    },
    nop: function() {
        this._out("n", NL);
    },
    clip: function() {
        this._out("W n", NL);
    },
    clipStroke: function() {
        this._out("W S", NL);
    },
    closeStroke: function() {
        this._out("s", NL);
    },
    fill: function() {
        this._out("f", NL);
    },
    fillStroke: function() {
        this._out("B", NL);
    },
    drawImage: function(url) {
        var img = this._pdf.getImage(url);
        if (img) { // the result can be null for a cross-domain image
            this._xResources[img._resourceName] = img;
            this._out(img._resourceName, " Do", NL);
        }
    },
    comment: function(txt) {
        var self = this;
        txt.split(/\r?\n/g).forEach(function(line){
            self._out("% ", line, NL);
        });
    },

    // internal
    _context: function(val) {
        if (val != null) {
            this._opacity = val.opacity;
            this._matrix = val.matrix;
        } else {
            return {
                opacity: this._opacity,
                matrix: this._matrix
            };
        }
    },

    _toPage: function(p) {
        var m = this._matrix;
        var a = m[0], b = m[1], c = m[2], d = m[3], e = m[4], f = m[5];
        return {
            x: a*p.x + c*p.y + e,
            y: b*p.x + d*p.y + f
        };
    }
}, PDFDictionary);

function unquote(str) {
    return str.replace(/^\s*(['"])(.*)\1\s*$/, "$2");
}

function parseFontDef(fontdef) {
    // XXX: this is very crude for now and buggy.  Proper parsing is quite involved.
    var rx = /^\s*((normal|italic)\s+)?((normal|small-caps)\s+)?((normal|bold|\d+)\s+)?(([0-9.]+)(px|pt))(\/(([0-9.]+)(px|pt)|normal))?\s+(.*?)\s*$/i;
    var m = rx.exec(fontdef);
    if (!m) {
        return { fontSize: 12, fontFamily: "sans-serif" };
    }
    var fontSize = m[8] ? parseInt(m[8], 10) : 12;
    return {
        italic     : m[2] && m[2].toLowerCase() == "italic",
        variant    : m[4],
        bold       : m[6] && /bold|700/i.test(m[6]),
        fontSize   : fontSize,
        lineHeight : m[12] ? m[12] == "normal" ? fontSize : parseInt(m[12], 10) : null,
        fontFamily : m[14].split(/\s*,\s*/g).map(unquote)
    };
}

function getFontURL(style) {
    function mkFamily(name) {
        if (style.bold) {
            name += "|bold";
        }
        if (style.italic) {
            name += "|italic";
        }
        return name.toLowerCase();
    }
    var fontFamily = style.fontFamily;
    var name, url;
    if (fontFamily instanceof Array) {
        for (var i = 0; i < fontFamily.length; ++i) {
            name = mkFamily(fontFamily[i]);
            url = FONT_MAPPINGS[name];
            if (url) {
                break;
            }
        }
    } else {
        url = FONT_MAPPINGS[fontFamily.toLowerCase()];
    }
    while (typeof url == "function") {
        url = url();
    }
    if (!url) {
        url = "Times-Roman";
    }
    return url;
}

var FONT_MAPPINGS = {
    "serif"                    : "Times-Roman",
    "serif|bold"               : "Times-Bold",
    "serif|italic"             : "Times-Italic",
    "serif|bold|italic"        : "Times-BoldItalic",
    "sans-serif"               : "Helvetica",
    "sans-serif|bold"          : "Helvetica-Bold",
    "sans-serif|italic"        : "Helvetica-Oblique",
    "sans-serif|bold|italic"   : "Helvetica-BoldOblique",
    "monospace"                : "Courier",
    "monospace|bold"           : "Courier-Bold",
    "monospace|italic"         : "Courier-Oblique",
    "monospace|bold|italic"    : "Courier-BoldOblique",
    "zapfdingbats"             : "ZapfDingbats",
    "zapfdingbats|bold"        : "ZapfDingbats",
    "zapfdingbats|italic"      : "ZapfDingbats",
    "zapfdingbats|bold|italic" : "ZapfDingbats"
};

function fontAlias(alias, name) {
    alias = alias.toLowerCase();
    FONT_MAPPINGS[alias] = function() {
        return FONT_MAPPINGS[name];
    };
    FONT_MAPPINGS[alias + "|bold"] = function() {
        return FONT_MAPPINGS[name + "|bold"];
    };
    FONT_MAPPINGS[alias + "|italic"] = function() {
        return FONT_MAPPINGS[name + "|italic"];
    };
    FONT_MAPPINGS[alias + "|bold|italic"] = function() {
        return FONT_MAPPINGS[name + "|bold|italic"];
    };
}

// Let's define some common names to an appropriate replacement.
// These are overridable via pdf.defineFont, should the user want to
// include the proper versions.

fontAlias("Times New Roman" , "serif");
fontAlias("Courier New"     , "monospace");
fontAlias("Arial"           , "sans-serif");
fontAlias("Helvetica"       , "sans-serif");
fontAlias("Verdana"         , "sans-serif");
fontAlias("Tahoma"          , "sans-serif");
fontAlias("Georgia"         , "sans-serif");
fontAlias("Monaco"          , "monospace");
fontAlias("Andale Mono"     , "monospace");

function defineFont(name, url) {
    if (arguments.length == 1) {
        for (var i in name) {
            if (hasOwnProperty(name, i)) {
                defineFont(i, name[i]);
            }
        }
    } else {
        name = name.toLowerCase();
        FONT_MAPPINGS[name] = url;

        // special handling for DejaVu fonts: if they get defined,
        // let them also replace the default families, for good
        // Unicode support out of the box.
        switch (name) {
          case "dejavu sans"               : FONT_MAPPINGS["sans-serif"]              = url; break;
          case "dejavu sans|bold"          : FONT_MAPPINGS["sans-serif|bold"]         = url; break;
          case "dejavu sans|italic"        : FONT_MAPPINGS["sans-serif|italic"]       = url; break;
          case "dejavu sans|bold|italic"   : FONT_MAPPINGS["sans-serif|bold|italic"]  = url; break;
          case "dejavu serif"              : FONT_MAPPINGS["serif"]                   = url; break;
          case "dejavu serif|bold"         : FONT_MAPPINGS["serif|bold"]              = url; break;
          case "dejavu serif|italic"       : FONT_MAPPINGS["serif|italic"]            = url; break;
          case "dejavu serif|bold|italic"  : FONT_MAPPINGS["serif|bold|italic"]       = url; break;
          case "dejavu mono"               : FONT_MAPPINGS["monospace"]               = url; break;
          case "dejavu mono|bold"          : FONT_MAPPINGS["monospace|bold"]          = url; break;
          case "dejavu mono|italic"        : FONT_MAPPINGS["monospace|italic"]        = url; break;
          case "dejavu mono|bold|italic"   : FONT_MAPPINGS["monospace|bold|italic"]   = url; break;
        }
    }
}

function mmul(a, b) {
    var a1 = a[0], b1 = a[1], c1 = a[2], d1 = a[3], e1 = a[4], f1 = a[5];
    var a2 = b[0], b2 = b[1], c2 = b[2], d2 = b[3], e2 = b[4], f2 = b[5];
    return [
        a1*a2 + b1*c2,          a1*b2 + b1*d2,
        c1*a2 + d1*c2,          c1*b2 + d1*d2,
        e1*a2 + f1*c2 + e2,     e1*b2 + f1*d2 + f2
    ];
}

function isIdentityMatrix(m) {
    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0;
}

var TEXT_RENDERING_MODE = {
    fill           : 0,
    stroke         : 1,
    fillAndStroke  : 2,
    invisible      : 3,
    fillAndClip    : 4,
    strokeAndClip  : 5,
    fillStrokeClip : 6,
    clip           : 7
};

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

var TEXT_RENDERING_MODE$1 = TEXT_RENDERING_MODE;

var DASH_PATTERNS = {
    dash           : [ 4 ],
    dashDot        : [ 4, 2, 1, 2 ],
    dot            : [ 1, 2 ],
    longDash       : [ 8, 2 ],
    longDashDot    : [ 8, 2, 1, 2 ],
    longDashDotDot : [ 8, 2, 1, 2, 1, 2 ],
    solid          : []
};

var LINE_CAP = {
    butt   : 0,
    round  : 1,
    square : 2
};

var LINE_JOIN = {
    miter : 0,
    round : 1,
    bevel : 2
};

function render$1(group, callback) {
    var fonts = [], images = {}, options = group.options;

    function getOption(name, defval, hash) {
        if (!hash) {
            hash = options;
        }
        if (hash.pdf && hash.pdf[name] != null) {
            return hash.pdf[name];
        }
        return defval;
    }

    var multiPage = getOption("multiPage");
    var imgDPI = getOption("imgDPI");

    if (imgDPI) {
        clearImageCache();
    }

    group.traverse(function(element){
        dispatch({
            Image: function(element) {
                var url = element.src();
                if (imgDPI) {
                    var box = element.bbox().size;
                    var prev = images[url];
                    box = {
                        width: Math.ceil(box.width * imgDPI / 72),
                        height: Math.ceil(box.height * imgDPI / 72)
                    };
                    if (prev) {
                        box.width = Math.max(prev.width, box.width);
                        box.height = Math.max(prev.height, box.height);
                    }
                    images[url] = box;
                } else {
                    images[url] = null;
                }
            },
            Text: function(element) {
                var style = parseFontDef(element.options.font);
                var url = getFontURL(style);
                if (fonts.indexOf(url) < 0) {
                    fonts.push(url);
                }
            }
        }, element);
    });

    function doIt() {
        if (--count > 0) {
            return;
        }

        var pdf = new (PDFDocument)({
            producer  : getOption("producer"),
            title     : getOption("title"),
            author    : getOption("author"),
            subject   : getOption("subject"),
            keywords  : getOption("keywords"),
            creator   : getOption("creator"),
            date      : getOption("date"),

            autoPrint : getOption("autoPrint")
        });

        function drawPage(group) {
            var options = group.options;

            var tmp = optimize(group);
            var bbox = tmp.bbox;
            group = tmp.root;
            // var tmp, bbox;

            var paperSize = getOption("paperSize", getOption("paperSize", "auto"), options), addMargin = false;
            if (paperSize == "auto") {
                if (bbox) {
                    var size = bbox.getSize();
                    paperSize = [ size.width, size.height ];
                    addMargin = true;
                    var origin = bbox.getOrigin();
                    tmp = new Group();
                    tmp.transform(new Matrix(1, 0, 0, 1, -origin.x, -origin.y));
                    tmp.append(group);
                    group = tmp;
                }
                else {
                    paperSize = "A4";
                }
            }

            var page;
            page = pdf.addPage({
                paperSize : paperSize,
                margin    : getOption("margin", getOption("margin"), options),
                addMargin : addMargin,
                landscape : getOption("landscape", getOption("landscape", false), options)
            });
            drawElement(group, page, pdf);
        }

        if (multiPage) {
            group.children.forEach(drawPage);
        } else {
            drawPage(group);
        }

        callback(pdf.render(), pdf);
    }

    var count = 2;
    loadFonts(fonts, doIt);
    loadImages(images, doIt, {
        jpegQuality : getOption("jpegQuality", 0.92),
        keepPNG     : getOption("keepPNG", false)
    });
}

function toDataURL(group, callback) {
    render$1(group, function(data){
        callback("data:application/pdf;base64," + data.base64());
    });
}

function toBlob(group, callback) {
    render$1(group, function(data){
        callback(new window.Blob([ data.get() ], { type: "application/pdf" }));
    });
}

function saveAs$1(group, filename, proxy, callback) {
    // XXX: Safari has Blob, but does not support the download attribute
    //      so we'd end up converting to dataURL and using the proxy anyway.
    if (window.Blob && !support.browser.safari) {
        toBlob(group, function(blob){
            saveAs({ dataURI: blob, fileName: filename });
            if (callback) {
                callback(blob);
            }
        });
    } else {
        toDataURL(group, function(dataURL){
            saveAs({ dataURI: dataURL, fileName: filename, proxyURL: proxy });
            if (callback) {
                callback(dataURL);
            }
        });
    }
}

function dispatch(handlers, element) {
    var handler = handlers[element.nodeType];
    if (handler) {
        return handler.call.apply(handler, arguments);
    }
    return element;
}

function drawElement(element, page, pdf) {
    if (element.options._pdfDebug) {
        page.comment("BEGIN: " + element.options._pdfDebug);
    }

    var transform$$1 = element.transform();
    var opacity = element.opacity();

    page.save();

    if (opacity != null && opacity < 1) {
        page.setOpacity(opacity);
    }

    setStrokeOptions(element, page, pdf);
    setFillOptions(element, page, pdf);

    if (transform$$1) {
        var m = transform$$1.matrix();
        page.transform(m.a, m.b, m.c, m.d, m.e, m.f);
    }

    setClipping(element, page, pdf);

    dispatch({
        Path      : drawPath,
        MultiPath : drawMultiPath,
        Circle    : drawCircle,
        Arc       : drawArc,
        Text      : drawText,
        Image     : drawImage$1,
        Group     : drawGroup,
        Rect      : drawRect
    }, element, page, pdf);

    page.restore();

    if (element.options._pdfDebug) {
        page.comment("END: " + element.options._pdfDebug);
    }
}

function setStrokeOptions(element, page) {
    var stroke = element.stroke && element.stroke();
    if (!stroke) {
        return;
    }

    var color = stroke.color;
    if (color) {
        color = parseColor$1(color);
        if (color == null) {
            return; // no stroke
        }
        page.setStrokeColor(color.r, color.g, color.b);
        if (color.a != 1) {
            page.setStrokeOpacity(color.a);
        }
    }

    var width = stroke.width;
    if (width != null) {
        if (width === 0) {
            return; // no stroke
        }
        page.setLineWidth(width);
    }

    var dashType = stroke.dashType;
    if (dashType) {
        page.setDashPattern(DASH_PATTERNS[dashType], 0);
    }

    var lineCap = stroke.lineCap;
    if (lineCap) {
        page.setLineCap(LINE_CAP[lineCap]);
    }

    var lineJoin = stroke.lineJoin;
    if (lineJoin) {
        page.setLineJoin(LINE_JOIN[lineJoin]);
    }

    var opacity = stroke.opacity;
    if (opacity != null) {
        page.setStrokeOpacity(opacity);
    }
}

function setFillOptions(element, page) {
    var fill = element.fill && element.fill();
    if (!fill) {
        return;
    }

    if (fill instanceof Gradient) {
        return;
    }

    var color = fill.color;
    if (color) {
        color = parseColor$1(color);
        if (color == null) {
            return; // no fill
        }
        page.setFillColor(color.r, color.g, color.b);
        if (color.a != 1) {
            page.setFillOpacity(color.a);
        }
    }

    var opacity = fill.opacity;
    if (opacity != null) {
        page.setFillOpacity(opacity);
    }
}

function setClipping(element, page, pdf) {
    // XXX: only Path supported at the moment.
    var clip = element.clip();
    if (clip) {
        _drawPath(clip, page, pdf);
        page.clip();
        // page.setStrokeColor(Math.random(), Math.random(), Math.random());
        // page.setLineWidth(1);
        // page.stroke();
    }
}

function shouldDraw(thing) {
    return (thing &&
            (thing instanceof Gradient ||
             (thing.color && !/^(none|transparent)$/i.test(thing.color) &&
              (thing.width == null || thing.width > 0) &&
              (thing.opacity == null || thing.opacity > 0))));
}

function maybeGradient(element, page, pdf, stroke) {
    var fill = element.fill();
    if (fill instanceof Gradient) {
        if (stroke) {
            page.clipStroke();
        } else {
            page.clip();
        }
        var isRadial = fill instanceof RadialGradient;
        var start, end;
        if (isRadial) {
            start = { x: fill.center().x , y: fill.center().y , r: 0 };
            end   = { x: fill.center().x , y: fill.center().y , r: fill.radius() };
        } else {
            start = { x: fill.start().x , y: fill.start().y };
            end   = { x: fill.end().x   , y: fill.end().y   };
        }

        var stops = fill.stops.elements().map(function(stop){
            var offset = stop.offset();
            if (/%$/.test(offset)) {
                offset = parseFloat(offset) / 100;
            } else {
                offset = parseFloat(offset);
            }
            var color = parseColor$1(stop.color());
            color.a *= stop.opacity();
            return {
                offset: offset,
                color: color
            };
        });

        // Duplicats first and last stop to fix
        // https://github.com/telerik/kendo-ui-core/issues/1782
        stops.unshift(stops[0]);
        stops.push(stops[stops.length - 1]);

        var gradient = {
            userSpace : fill.userSpace(),
            type      : isRadial ? "radial" : "linear",
            start     : start,
            end       : end,
            stops     : stops
        };
        var box = element.rawBBox();
        var tl = box.topLeft(), size = box.getSize();
        box = {
            left   : tl.x,
            top    : tl.y,
            width  : size.width,
            height : size.height
        };
        page.gradient(gradient, box);
        return true;
    }
}

function maybeFillStroke(element, page, pdf) {
    if (shouldDraw(element.fill()) && shouldDraw(element.stroke())) {
        if (!maybeGradient(element, page, pdf, true)) {
            page.fillStroke();
        }
    } else if (shouldDraw(element.fill())) {
        if (!maybeGradient(element, page, pdf, false)) {
            page.fill();
        }
    } else if (shouldDraw(element.stroke())) {
        page.stroke();
    } else {
        // we should not get here; the path should have been
        // optimized away.  but let's be prepared.
        page.nop();
    }
}

function maybeDrawRect(path, page) {
    var segments = path.segments;
    if (segments.length == 4 && path.options.closed) {
        // detect if this path looks like a rectangle parallel to the axis
        var a = [];
        for (var i = 0; i < segments.length; ++i) {
            if (segments[i].controlIn()) { // has curve?
                return false;
            }
            a[i] = segments[i].anchor();
        }
        // it's a rectangle if the y/x/y/x or x/y/x/y coords of
        // consecutive points are the same.
        var isRect = (
            a[0].y == a[1].y && a[1].x == a[2].x && a[2].y == a[3].y && a[3].x == a[0].x
        ) || (
            a[0].x == a[1].x && a[1].y == a[2].y && a[2].x == a[3].x && a[3].y == a[0].y
        );
        if (isRect) {
            // this saves a bunch of instructions in PDF:
            // moveTo, lineTo, lineTo, lineTo, close -> rect.
            page.rect(a[0].x, a[0].y,
                      a[2].x - a[0].x /*width*/,
                      a[2].y - a[0].y /*height*/);
            return true;
        }
    }
}

function _drawPath(element, page, pdf) {
    var segments = element.segments;
    if (segments.length === 0) {
        return;
    }
    if (!maybeDrawRect(element, page, pdf)) {
        for (var prev, i = 0; i < segments.length; ++i) {
            var seg = segments[i];
            var anchor = seg.anchor();
            if (!prev) {
                page.moveTo(anchor.x, anchor.y);
            } else {
                var prevOut = prev.controlOut();
                var controlIn = seg.controlIn();
                if (prevOut && controlIn) {
                    page.bezier(
                        prevOut.x   , prevOut.y,
                        controlIn.x , controlIn.y,
                        anchor.x    , anchor.y
                    );
                } else {
                    page.lineTo(anchor.x, anchor.y);
                }
            }
            prev = seg;
        }
        if (element.options.closed) {
            page.close();
        }
    }
}

function drawPath(element, page, pdf) {
    _drawPath(element, page, pdf);
    maybeFillStroke(element, page, pdf);
}

function drawMultiPath(element, page, pdf) {
    var paths = element.paths;
    for (var i = 0; i < paths.length; ++i) {
        _drawPath(paths[i], page, pdf);
    }
    maybeFillStroke(element, page, pdf);
}

function drawCircle(element, page, pdf) {
    var g = element.geometry();
    page.circle(g.center.x, g.center.y, g.radius);
    maybeFillStroke(element, page, pdf);
}

function drawArc(element, page, pdf) {
    var points = element.geometry().curvePoints();
    page.moveTo(points[0].x, points[0].y);
    for (var i = 1; i < points.length;) {
        page.bezier(
            points[i].x, points[i++].y,
            points[i].x, points[i++].y,
            points[i].x, points[i++].y
        );
    }
    maybeFillStroke(element, page, pdf);
}

function drawText(element, page) {
    var style = parseFontDef(element.options.font);
    var pos = element._position;
    var mode;
    if (element.fill() && element.stroke()) {
        mode = TEXT_RENDERING_MODE$1.fillAndStroke;
    } else if (element.fill()) {
        mode = TEXT_RENDERING_MODE$1.fill;
    } else if (element.stroke()) {
        mode = TEXT_RENDERING_MODE$1.stroke;
    }

    page.transform(1, 0, 0, -1, pos.x, pos.y + style.fontSize);
    page.beginText();
    page.setFont(getFontURL(style), style.fontSize);
    page.setTextRenderingMode(mode);
    page.showText(element.content(), element._pdfRect ? element._pdfRect.width() : null);
    page.endText();
}

function drawGroup(element, page, pdf) {
    if (element._pdfLink) {
        page.addLink(element._pdfLink.url, element._pdfLink);
    }
    var children = element.children;
    for (var i = 0; i < children.length; ++i) {
        drawElement(children[i], page, pdf);
    }
}

function drawImage$1(element, page) {
    var url = element.src();
    if (!url) {
        return;
    }

    var rect = element.rect();
    var tl = rect.getOrigin();
    var sz = rect.getSize();
    page.transform(sz.width, 0, 0, -sz.height, tl.x, tl.y + sz.height);
    page.drawImage(url);
}

function drawRect(element, page, pdf) {
    var geometry = element.geometry();
    page.rect(geometry.origin.x, geometry.origin.y, geometry.size.width, geometry.size.height);
    maybeFillStroke(element, page, pdf);
}

function parseColor$1(value) {
    var color = parseColor(value, true);
    return color ? color.toRGB() : null;
}

function optimize(root) {
    var clipbox = false;
    var matrix = Matrix.unit();
    var currentBox = null;
    var changed;
    do {
        changed = false;
        root = opt(root);
    } while (root && changed);
    return { root: root, bbox: currentBox };

    function change(newShape) {
        changed = true;
        return newShape;
    }

    function visible(shape) {
        return (shape.visible() && shape.opacity() > 0 &&
                ( shouldDraw(shape.fill()) ||
                  shouldDraw(shape.stroke()) ));
    }

    function optArray(a) {
        var b = [];
        for (var i = 0; i < a.length; ++i) {
            var el = opt(a[i]);
            if (el != null) {
                b.push(el);
            }
        }
        return b;
    }

    function withClipping(shape, f) {
        var saveclipbox = clipbox;
        var savematrix = matrix;

        if (shape.transform()) {
            matrix = matrix.multiplyCopy(shape.transform().matrix());
        }

        var clip = shape.clip();
        if (clip) {
            clip = clip.bbox();
            if (clip) {
                clip = clip.bbox(matrix);
                clipbox = clipbox ? Rect.intersect(clipbox, clip) : clip;
            }
        }

        try {
            return f();
        }
        finally {
            clipbox = saveclipbox;
            matrix = savematrix;
        }
    }

    function inClipbox(shape) {
        if (clipbox == null) {
            return false;
        }
        var box = shape.rawBBox().bbox(matrix);
        if (clipbox && box) {
            box = Rect.intersect(box, clipbox);
        }
        return box;
    }

    function opt(shape) {
        return withClipping(shape, function(){
            if (!(shape instanceof Group || shape instanceof MultiPath)) {
                var box = inClipbox(shape);
                if (!box) {
                    return change(null);
                }
                currentBox = currentBox ? Rect.union(currentBox, box) : box;
            }
            return dispatch({
                Path: function(shape) {
                    if (shape.segments.length === 0 || !visible(shape)) {
                        return change(null);
                    }
                    return shape;
                },
                MultiPath: function(shape) {
                    if (!visible(shape)) {
                        return change(null);
                    }
                    var el = new MultiPath(shape.options);
                    el.paths = optArray(shape.paths);
                    if (el.paths.length === 0) {
                        return change(null);
                    }
                    return el;
                },
                Circle: function(shape) {
                    if (!visible(shape)) {
                        return change(null);
                    }
                    return shape;
                },
                Arc: function(shape) {
                    if (!visible(shape)) {
                        return change(null);
                    }
                    return shape;
                },
                Text: function(shape) {
                    if (!/\S/.test(shape.content()) || !visible(shape)) {
                        return change(null);
                    }
                    return shape;
                },
                Image: function(shape) {
                    if (!(shape.visible() && shape.opacity() > 0)) {
                        return change(null);
                    }
                    return shape;
                },
                Group: function(shape) {
                    if (!(shape.visible() && shape.opacity() > 0)) {
                        return change(null);
                    }
                    var el = new Group(shape.options);
                    el.children = optArray(shape.children);
                    el._pdfLink = shape._pdfLink;
                    if (shape !== root && el.children.length === 0 && !shape._pdfLink) {
                        return change(null);
                    }
                    return el;
                },
                Rect: function(shape) {
                    if (!visible(shape)) {
                        return change(null);
                    }
                    return shape;
                }
            }, shape);
        });
    }
}

function exportPDF(group, options) {
    var promise = createPromise();

    for (var i in options) {
        if (i == "margin" && group.options.pdf && group.options.pdf._ignoreMargin) {
            // This hackish option is set by the page breaking code in drawDOM.  The idea is
            // that margin is already taken into account there (that's required to do proper
            // page breaking) and we don't want to set it again here, as it would double the
            // top-left margin, and truncate the content on bottom/right.
            continue;
        }
        group.options.set("pdf." + i, options[i]);
    }

    toDataURL(group, promise.resolve);

    return promise;
}



var pdf = Object.freeze({
	Document: PDFDocument,
	BinaryStream: BinaryStream,
	defineFont: defineFont,
	parseFontDef: parseFontDef,
	getFontURL: getFontURL,
	loadFonts: loadFonts,
	loadImages: loadImages,
	getPaperOptions: getPaperOptions,
	clearImageCache: clearImageCache,
	TEXT_RENDERING_MODE: TEXT_RENDERING_MODE,
	exportPDF: exportPDF,
	saveAs: saveAs$1,
	toDataURL: toDataURL,
	toBlob: toBlob,
	render: render$1
});

/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */
/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */
/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty, yoda */
/* eslint-disable no-param-reassign, no-var, block-scoped-var */

var browser$2 = support.browser || {};
/*

  XXX: to test:

  - cloneNodes function:
    - drawing document containing canvas with page breaking
    - drawing document with named radio <input>-s (should not clear selection)
    - IE9/IE10 don't support el.dataset; do they copy user data?

  - repeating table headers/footers on page breaking

  - forceBreak, keepTogether

  - avoidLinks

 */

/* -----[ local vars ]----- */

function slice$1$1(thing) {
    return Array.prototype.slice.call(thing);
}

var KENDO_PSEUDO_ELEMENT = "KENDO-PSEUDO-ELEMENT";

var IMAGE_CACHE$1 = {};

var nodeInfo = {};
nodeInfo._root = nodeInfo;

/* -----[ Custom Text node to speed up rendering in PDF ]----- */

var inBrowser = typeof window !== 'undefined';
var microsoft = inBrowser ? browser$2.msie || browser$2.edge : false;

var TextRect = (function (Text$$1) {
  function TextRect(str, rect, options) {
        Text$$1.call(this, str, rect.getOrigin(), options);
        this._pdfRect = rect;
    }

  if ( Text$$1 ) TextRect.__proto__ = Text$$1;
  TextRect.prototype = Object.create( Text$$1 && Text$$1.prototype );
  TextRect.prototype.constructor = TextRect;
    TextRect.prototype.rect = function rect () {
        // this is the crux of it: we can avoid a call to
        // measure(), which is what the base class does, since we
        // already know the rect.  measure() is s-l-o-w.
        return this._pdfRect;
    };
    TextRect.prototype.rawBBox = function rawBBox () {
        // also let's avoid creating a new rectangle.
        return this._pdfRect;
    };

  return TextRect;
}(Text));

function addClass(el, cls) {
    if (el.classList) {
        el.classList.add(cls);
    } else {
        el.className += " " + cls;
    }
}

function removeClass(el, cls) {
    if (el.classList) {
        el.classList.remove(cls);
    } else {
        el.className = el.className.split(/\s+/).reduce(function(a, word){
            if (word != cls) {
                a.push(word);
            }
            return a;
        }, []).join(" ");
    }
}

function setCSS(el, styles) {
    Object.keys(styles).forEach(function(key){
        el.style[key] = styles[key];
    });
}

var matches = typeof Element !== "undefined" && Element.prototype && (function(p){
    if (p.matches) {
        return function(el, selector) { return el.matches(selector); };
    }
    if (p.webkitMatchesSelector) {
        return function(el, selector) { return el.webkitMatchesSelector(selector); };
    }
    if (p.mozMatchesSelector) {
        return function(el, selector) { return el.mozMatchesSelector(selector); };
    }
    if (p.msMatchesSelector) {
        return function(el, selector) { return el.msMatchesSelector(selector); };
    }
    return function(s) {
	return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
    };
})(Element.prototype);

function closest(el, selector) {
    if (el.closest) {
        return el.closest(selector);
    }
    // IE: stringifying rather than simply comparing with `document`,
    // which is not iframe-proof and fails in editor export —
    // https://github.com/telerik/kendo/issues/6721
    while (el && !/^\[object (?:HTML)?Document\]$/.test(String(el))) {
        if (el.nodeType == 1 /* Element */ && matches(el, selector)) {
            return el;
        }
        el = el.parentNode;
    }
}

// clone nodes ourselves, so that we redraw <canvas> (DOM or
// jQuery clone will not)
var cloneNodes = (function($){
    if ($) {
        // if we have Kendo and jQuery, use this version as it will
        // maintain proper links between cloned element and Kendo
        // widgets (i.e. it clones jQuery data(), which isn't the same
        // as element's data attributes).
        // https://github.com/telerik/kendo-ui-core/issues/2750
        return function cloneNodes(el) {
            var clone = el.cloneNode(false);
            if (el.nodeType == 1 /* Element */) {
                var $el = $(el), $clone = $(clone), i;
                var data = $el.data();
                for (i in data) {
                    $clone.data(i, data[i]);
                }
                if (/^canvas$/i.test(el.tagName)) {
                    clone.getContext("2d").drawImage(el, 0, 0);
                } else if (/^(?:input|select|textarea|option)$/i.test(el.tagName)) {
                    // drop the name attributes so that we don't affect the selection of the
                    // original nodes (i.e. checked status of radio buttons) when we insert our copy
                    // into the DOM.  https://github.com/telerik/kendo/issues/5409
                    clone.removeAttribute("id");
                    clone.removeAttribute("name");
                    if (!/^textarea$/i.test(el.tagName)) {
                        clone.value = el.value;
                    }
                    clone.checked = el.checked;
                    clone.selected = el.selected;
                }
                for (i = el.firstChild; i; i = i.nextSibling) {
                    clone.appendChild(cloneNodes(i));
                }
            }
            return clone;
        };
    } else {
        // the no-jQuery version
        return function cloneNodes(el) {
            var clone = (function dive(node){
                var clone = node.cloneNode(false);
                if (node._kendoExportVisual) {
                    clone._kendoExportVisual = node._kendoExportVisual;
                }
                for (var i = node.firstChild; i; i = i.nextSibling) {
                    clone.appendChild(dive(i));
                }
                return clone;
            })(el);

            // re-draw canvases - https://github.com/telerik/kendo/issues/4872
            var canvases = el.querySelectorAll("canvas");
            if (canvases.length) {
                slice$1$1(clone.querySelectorAll("canvas")).forEach(function (canvas$$1, i) {
                    canvas$$1.getContext("2d").drawImage(canvases[i], 0, 0);
                });
            }

            // remove "name" attributes from <input> elements -
            // https://github.com/telerik/kendo/issues/5409
            var orig = el.querySelectorAll("input, select, textarea, option");
            slice$1$1(clone.querySelectorAll("input, select, textarea, option")).forEach(function (el, i) {
                el.removeAttribute("id");
                el.removeAttribute("name");
                if (!/^textarea$/i.test(el.tagName)) {
                    el.value = orig[i].value;
                }
                el.checked = orig[i].checked;
                el.selected = orig[i].selected;
            });

            return clone;
        };
    }
})(typeof window !== "undefined" && window.kendo && window.kendo.jQuery);

function getXY(thing) {
    if (typeof thing == "number") {
        return { x: thing, y: thing };
    }
    if (Array.isArray(thing)) {
        return { x: thing[0], y: thing[1] };
    }
    return { x: thing.x, y: thing.y };
}

function drawDOM(element, options) {
    if (!options) {
        options = {};
    }
    var promise = createPromise();

    if (!element) {
        return promise.reject("No element to export");
    }

    if (typeof window.getComputedStyle != "function") {
        throw new Error("window.getComputedStyle is missing.  You are using an unsupported browser, or running in IE8 compatibility mode.  Drawing HTML is supported in Chrome, Firefox, Safari and IE9+.");
    }

    defineFont(getFontFaces(element.ownerDocument));

    var scale = getXY(options.scale || 1);

    function doOne(element) {
        var group = new Group();

        // translate to start of page
        var pos = element.getBoundingClientRect();
        setTransform$1(group, [
            scale.x,
            0,
            0,
            scale.y,
            (-pos.left * scale.x),
            (-pos.top * scale.y)
        ]);

        nodeInfo._clipbox = false;
        nodeInfo._matrix = Matrix.unit();
        nodeInfo._stackingContext = {
            element: element,
            group: group
        };

        if (options.avoidLinks === true) {
            nodeInfo._avoidLinks = "a";
        } else {
            nodeInfo._avoidLinks = options.avoidLinks;
        }

        addClass(element, "k-pdf-export");
        renderElement(element, group);
        removeClass(element, "k-pdf-export");

        return group;
    }

    cacheImages(element, function(){
        var forceBreak = options && options.forcePageBreak;
        var hasPaperSize = options && options.paperSize && options.paperSize != "auto";
        var paperOptions = getPaperOptions(function(key, def){
            if (key == "paperSize") {
                // PDF.getPaperOptions croaks on "auto", just pass dummy A4 as we might
                // still be interested in margins.
                return hasPaperSize ? options[key] : "A4";
            }
            return key in options ? options[key] : def;
        });
        var pageWidth = hasPaperSize && paperOptions.paperSize[0];
        var pageHeight = hasPaperSize && paperOptions.paperSize[1];
        var margin = options.margin && paperOptions.margin;
        var hasMargin = Boolean(margin);
        if (forceBreak || pageHeight) {
            if (!margin) {
                margin = { left: 0, top: 0, right: 0, bottom: 0 };
            }

            // we want paper size and margin to be unaffected by
            // scaling in the output, so we have to reverse-scale
            // before our calculations begin.
            if (pageWidth)  { pageWidth  /= scale.x; }
            if (pageHeight) { pageHeight /= scale.y; }
            margin.left   /= scale.x;
            margin.right  /= scale.x;
            margin.top    /= scale.y;
            margin.bottom /= scale.y;

            var group = new Group({
                pdf: {
                    multiPage     : true,
                    paperSize     : hasPaperSize ? paperOptions.paperSize : "auto",
                    _ignoreMargin : hasMargin // HACK!  see exportPDF in pdf/drawing.js
                }
            });
            handlePageBreaks(
                function(x) {
                    if (options.progress) {
                        var canceled = false, pageNum = 0;
                        (function next(){
                            if (pageNum < x.pages.length) {
                                var page = doOne(x.pages[pageNum]);
                                group.append(page);
                                options.progress({
                                    page: page,
                                    pageNum: ++pageNum,
                                    totalPages: x.pages.length,
                                    cancel: function() {
                                        canceled = true;
                                    }
                                });
                                if (!canceled) {
                                    setTimeout(next);
                                } else {
                                    // XXX: should we also fail() the deferred object?
                                    x.container.parentNode.removeChild(x.container);
                                }
                            } else {
                                x.container.parentNode.removeChild(x.container);
                                promise.resolve(group);
                            }
                        })();
                    } else {
                        x.pages.forEach(function(page){
                            group.append(doOne(page));
                        });
                        x.container.parentNode.removeChild(x.container);
                        promise.resolve(group);
                    }
                },
                element,
                forceBreak,
                pageWidth ? pageWidth - margin.left - margin.right : null,
                pageHeight ? pageHeight - margin.top - margin.bottom : null,
                margin,
                options
            );
        } else {
            promise.resolve(doOne(element));
        }
    });

    function makeTemplate(template$$1) {
        if (template$$1 != null) {
            if (typeof template$$1 == "string") {
                template$$1 = template$1(template$$1.replace(/^\s+|\s+$/g, ""));
            }
            if (typeof template$$1 == "function") {
                return function(data) {
                    var el = template$$1(data);
                    if (el && typeof el == "string") {
                        var div = document.createElement("div");
                        div.innerHTML = el;
                        el = div.firstElementChild;
                    }
                    return el;
                };
            }
            // assumed DOM element
            return function() {
                return template$$1.cloneNode(true);
            };
        }
    }

    function handlePageBreaks(callback, element, forceBreak, pageWidth, pageHeight, margin, options) {
        var template$$1 = makeTemplate(options.template);
        var doc = element.ownerDocument;
        var pages = [];
        var copy = options._destructive ? element : cloneNodes(element);
        var container = doc.createElement("KENDO-PDF-DOCUMENT");
        var adjust = 0;

        // make sure <tfoot> elements are at the end (Grid widget
        // places TFOOT before TBODY, tricking our algorithm to
        // insert a page break right after the header).
        // https://github.com/telerik/kendo/issues/4699
        slice$1$1(copy.querySelectorAll("tfoot")).forEach(function(tfoot){
            tfoot.parentNode.appendChild(tfoot);
        });

        // remember the index of each LI from an ordered list.
        // we'll use it to reconstruct the proper numbering.
        slice$1$1(copy.querySelectorAll("ol")).forEach(function(ol){
            slice$1$1(ol.children).forEach(function(li, index){
                li.setAttribute("kendo-split-index", index);
            });
        });

        setCSS(container, {
            display   : "block",
            position  : "absolute",
            boxSizing : "content-box",
            left      : "-10000px",
            top       : "-10000px"
        });

        if (pageWidth) {
            // subtle: if we don't set the width *and* margins here, the layout in this
            // container will be different from the one in our final page elements, and we'll
            // split at the wrong places.
            setCSS(container, {
                width        : pageWidth + "px",
                paddingLeft  : margin.left + "px",
                paddingRight : margin.right + "px"
            });

            // when the first element has a margin-top (i.e. a <h1>) the page will be
            // inadvertently enlarged by that number (the browser will report the container's
            // bounding box top to start at the element's top, rather than including its
            // margin).  Adding overflow: hidden seems to fix it.
            //
            // to understand the difference, try the following snippets in your browser:
            //
            // 1. <div style="background: yellow">
            //      <h1 style="margin: 3em">Foo</h1>
            //    </div>
            //
            // 2. <div style="background: yellow; overflow: hidden">
            //      <h1 style="margin: 3em">Foo</h1>
            //    </div>
            //
            // this detail is not important when automatic page breaking is not requested, hence
            // doing it only if pageWidth is defined.
            setCSS(copy, { overflow: "hidden" });
        }

        element.parentNode.insertBefore(container, element);
        container.appendChild(copy);

        // we need the timeouts here, so that images dimensions are
        // properly computed in DOM when we start our thing.
        if (options.beforePageBreak) {
            setTimeout(function(){
                options.beforePageBreak(container, doPageBreak);
            }, 15);
        } else {
            setTimeout(doPageBreak, 15);
        }

        function doPageBreak() {
            if (forceBreak != "-" || pageHeight) {
                splitElement(copy);
            }

            {
                var page = makePage();
                copy.parentNode.insertBefore(page, copy);
                page.appendChild(copy);
            }

            if (template$$1) {
                pages.forEach(function(page, i){
                    var el = template$$1({
                        element    : page,
                        pageNum    : i + 1,
                        totalPages : pages.length
                    });
                    if (el) {
                        page.appendChild(el);
                    }
                });
            }

            cacheImages(pages, function() {
                // Even though we already cached images, they simply won't be available
                // immediately in the newly created DOM.  Previously we'd allow a 10ms timeout,
                // but that's arbitrary and clearly not working in all cases
                // (https://github.com/telerik/kendo/issues/5399), so this function will wait
                // for their .complete attribute.
                whenImagesAreActuallyLoaded(pages, function(){
                    callback({ pages: pages, container: container });
                });
            });
        }

        function keepTogether(el) {
            if (options.keepTogether && matches(el, options.keepTogether) && el.offsetHeight <= pageHeight - adjust) {
                return true;
            }

            var tag = el.tagName;
            if (/^h[1-6]$/i.test(tag) && el.offsetHeight >= pageHeight - adjust) {
                return false;
            }

            return (el.getAttribute("data-kendo-chart") ||
                    /^(?:img|tr|thead|th|tfoot|iframe|svg|object|canvas|input|textarea|select|video|h[1-6])/i.test(el.tagName));
        }

        function splitElement(element) {
            if (element.tagName == "TABLE") {
                setCSS(element, { tableLayout: "fixed" });
            }
            if (keepTogether(element)) {
                return;
            }
            var style = getComputedStyle$1(element);
            var bottomPadding = parseFloat(getPropertyValue(style, "padding-bottom"));
            var bottomBorder = parseFloat(getPropertyValue(style, "border-bottom-width"));
            var saveAdjust = adjust;
            adjust += bottomPadding + bottomBorder;
            var isFirst = true;
            for (var el = element.firstChild; el; el = el.nextSibling) {
                if (el.nodeType == 1 /* Element */) {
                    isFirst = false;
                    if (matches(el, forceBreak)) {
                        breakAtElement(el);
                        continue;
                    }
                    if (!pageHeight) {
                        // we're in "manual breaks mode"
                        splitElement(el);
                        continue;
                    }
                    if (!/^(?:static|relative)$/.test(getPropertyValue(getComputedStyle$1(el), "position"))) {
                        continue;
                    }
                    var fall = fallsOnMargin(el);
                    if (fall == 1) {
                        // element starts on next page, break before anyway.
                        breakAtElement(el);
                    }
                    else if (fall) {
                        // elements ends up on next page, or possibly doesn't fit on a page at
                        // all.  break before it anyway if it's an <img> or <tr>, otherwise
                        // attempt to split.
                        if (keepTogether(el)) {
                            breakAtElement(el);
                        } else {
                            splitElement(el);
                        }
                    }
                    else {
                        splitElement(el);
                    }
                }
                else if (el.nodeType == 3 /* Text */ && pageHeight) {
                    splitText(el, isFirst);
                    isFirst = false;
                }
            }
            adjust = saveAdjust;
        }

        function firstInParent(el) {
            var p = el.parentNode, first = p.firstChild;
            if (el === first) {
                return true;
            }
            if (el === p.children[0]) {
                if (first.nodeType == 7 /* comment */ ||
                    first.nodeType == 8 /* processing instruction */) {
                    return true;
                }
                if (first.nodeType == 3 /* text */) {
                    // if whitespace only we can probably consider it's first
                    return !/\S/.test(first.data);
                }
            }
            return false;
        }

        function breakAtElement(el) {
            if (el.nodeType == 1 && el !== copy && firstInParent(el)) {
                return breakAtElement(el.parentNode);
            }
            var table, colgroup, thead, grid, gridHead;
            table = closest(el, "table");
            colgroup = table && table.querySelector("colgroup");
            if (options.repeatHeaders) {
                thead = table && table.querySelector("thead");

                // If we break page in a Kendo Grid, repeat its header.  This ugly hack is
                // necessary because a scrollable grid will keep the header in a separate
                // <table> element from its content.
                //
                // XXX: This is likely to break as soon as the widget HTML is modified.
                grid = closest(el, ".k-grid.k-widget");
                if (grid && grid.querySelector(".k-auto-scrollable")) {
                    gridHead = grid.querySelector(".k-grid-header");
                }
            }
            var page = makePage();
            var range = doc.createRange();
            range.setStartBefore(copy);
            range.setEndBefore(el);
            page.appendChild(range.extractContents());
            copy.parentNode.insertBefore(page, copy);
            preventBulletOnListItem(el.parentNode);
            if (table) {
                table = closest(el, "table"); // that's the <table> on next page!
                if (options.repeatHeaders && thead) {
                    table.insertBefore(thead.cloneNode(true), table.firstChild);
                }
                if (colgroup) {
                    table.insertBefore(colgroup.cloneNode(true), table.firstChild);
                }
            }
            if (options.repeatHeaders && gridHead) {
                grid = closest(el, ".k-grid.k-widget");
                grid.insertBefore(gridHead.cloneNode(true), grid.firstChild);
            }
        }

        function makePage() {
            var page = doc.createElement("KENDO-PDF-PAGE");
            setCSS(page, {
                display  : "block",
                boxSizing: "content-box",
                width    : pageWidth ? (pageWidth + "px") : "auto",
                padding  : (margin.top + "px " +
                            margin.right + "px " +
                            margin.bottom + "px " +
                            margin.left + "px"),

                // allow absolutely positioned elements to be relative to current page
                position : "relative",

                // without the following we might affect layout of subsequent pages
                height   : pageHeight ? (pageHeight + "px") : "auto",
                overflow : pageHeight || pageWidth ? "hidden" : "visible",
                clear    : "both"
            });

            // debug
            // $("<div>").css({
            //     position  : "absolute",
            //     left      : margin.left,
            //     top       : margin.top,
            //     width     : pageWidth,
            //     height    : pageHeight,
            //     boxSizing : "border-box",
            //     background: "rgba(255, 255, 0, 0.5)"
            //     //border    : "1px solid red"
            // }).appendTo(page);

            if (options && options.pageClassName) {
                page.className = options.pageClassName;
            }
            pages.push(page);
            return page;
        }

        function fallsOnMargin(thing) {
            var box = thing.getBoundingClientRect();
            if (box.width === 0 || box.height === 0) {
                // I'd say an element with dimensions zero fits on current page.
                return 0;
            }
            var top = copy.getBoundingClientRect().top;
            var available = pageHeight - adjust;
            return (box.height > available) ? 3
                : (box.top - top > available) ? 1
                : (box.bottom - top > available) ? 2
                : 0;
        }

        function splitText(node, isFirst) {
            if (!/\S/.test(node.data)) {
                return;
            }

            var len = node.data.length;
            var range = doc.createRange();
            range.selectNodeContents(node);
            var fall = fallsOnMargin(range);
            if (!fall) {
                return;     // the whole text fits on current page
            }

            var nextnode = node;
            if (fall == 1) {
                // starts on next page, break before anyway.
                if (isFirst) {
                    // avoid leaving an empty <p>, <li>, etc. on previous page.
                    breakAtElement(node.parentNode);
                } else {
                    breakAtElement(node);
                }
            }
            else {
                (function findEOP(min, pos, max) {
                    range.setEnd(node, pos);
                    if (min == pos || pos == max) {
                        return pos;
                    }
                    if (fallsOnMargin(range)) {
                        return findEOP(min, (min + pos) >> 1, pos);
                    } else {
                        return findEOP(pos, (pos + max) >> 1, max);
                    }
                })(0, len >> 1, len);

                if (!/\S/.test(range.toString()) && isFirst) {
                    // avoid leaving an empty <p>, <li>, etc. on previous page.
                    breakAtElement(node.parentNode);
                } else {
                    // This is only needed for IE, but it feels cleaner to do it anyway.  Without
                    // it, IE will truncate a very long text (playground/pdf-long-text-2.html).
                    nextnode = node.splitText(range.endOffset);

                    var page = makePage();
                    range.setStartBefore(copy);
                    page.appendChild(range.extractContents());
                    copy.parentNode.insertBefore(page, copy);
                    preventBulletOnListItem(nextnode.parentNode);
                }
            }

            splitText(nextnode);
        }

        function preventBulletOnListItem(el) {
            // set a hint on continued LI elements, to tell the
            // renderer not to draw the bullet again.
            // https://github.com/telerik/kendo-ui-core/issues/2732
            var li = closest(el, "li");
            if (li) {
                li.setAttribute("kendo-no-bullet", "1");
                preventBulletOnListItem(li.parentNode);
            }
        }
    }

    return promise;
}

drawDOM.getFontFaces = getFontFaces;

// This is needed for the Spreadsheet print functionality.  Since
// there we only need to draw text, this cuts through the ceremony
// of drawDOM/renderElement and renders the text node directly.
drawDOM.drawText = function(element) {
    var group = new Group();
    nodeInfo._clipbox = false;
    nodeInfo._matrix = Matrix.unit();
    nodeInfo._stackingContext = {
        element: element,
        group: group
    };
    pushNodeInfo(element, getComputedStyle$1(element), group);
    if (element.firstChild.nodeType == 3 /* Text */) {
        // avoid the penalty of renderElement
        renderText(element, element.firstChild, group);
    } else {
        _renderElement(element, group);
    }
    popNodeInfo();
    return group;
};

var parseBackgroundImage = (function(){
    var tok_linear_gradient  = /^((-webkit-|-moz-|-o-|-ms-)?linear-gradient\s*)\(/;
    //var tok_radial_gradient  = /^((-webkit-|-moz-|-o-|-ms-)?radial-gradient\s*)\(/;
    var tok_percent          = /^([-0-9.]+%)/;
    var tok_length           = /^([-0-9.]+px)/;
    var tok_keyword          = /^(left|right|top|bottom|to|center)\W/;
    var tok_angle            = /^([-0-9.]+(deg|grad|rad|turn)|0)/;
    var tok_whitespace       = /^(\s+)/;
    var tok_popen            = /^(\()/;
    var tok_pclose           = /^(\))/;
    var tok_comma            = /^(,)/;
    var tok_url              = /^(url)\(/;
    var tok_content          = /^(.*?)\)/;

    var cache1 = {}, cache2 = {};

    function parse(input) {
        var orig = input;
        if (hasOwnProperty$2(cache1, orig)) {
            return cache1[orig];
        }
        function skip_ws() {
            var m = tok_whitespace.exec(input);
            if (m) {
                input = input.substr(m[1].length);
            }
        }
        function read(token) {
            skip_ws();
            var m = token.exec(input);
            if (m) {
                input = input.substr(m[1].length);
                return m[1];
            }
        }

        function read_stop() {
            var color = parseColor(input, true);
            var length, percent;
            if (color) {
                var match =
                    /^#[0-9a-f]+/i.exec(input) ||
                    /^rgba?\(.*?\)/i.exec(input) ||
                    /^..*?\b/.exec(input); // maybe named color
                input = input.substr(match[0].length);
                color = color.toRGB();
                if (!(length = read(tok_length))) {
                    percent = read(tok_percent);
                }
                return { color: color, length: length, percent: percent };
            }
        }

        function read_linear_gradient(propName) {
            var angle;
            var to1, to2;
            var stops = [];
            var reverse = false;

            if (read(tok_popen)) {
                // 1. [ <angle> || to <side-or-corner>, ]?
                angle = read(tok_angle);
                if (angle == "0") {
                    angle = "0deg"; // Edge
                }
                if (angle) {
                    angle = parseAngle(angle);
                    read(tok_comma);
                }
                else {
                    to1 = read(tok_keyword);
                    if (to1 == "to") {
                        to1 = read(tok_keyword);
                    } else if (to1 && /^-/.test(propName)) {
                        reverse = true;
                    }
                    to2 = read(tok_keyword);
                    read(tok_comma);
                }

                if (/-moz-/.test(propName) && angle == null && to1 == null) {
                    var x = read(tok_percent), y = read(tok_percent);
                    reverse = true;
                    if (x == "0%") {
                        to1 = "left";
                    } else if (x == "100%") {
                        to1 = "right";
                    }
                    if (y == "0%") {
                        to2 = "top";
                    } else if (y == "100%") {
                        to2 = "bottom";
                    }
                    read(tok_comma);
                }

                // 2. color stops
                while (input && !read(tok_pclose)) {
                    var stop = read_stop();
                    if (!stop) {
                        break;
                    }
                    stops.push(stop);
                    read(tok_comma);
                }

                return {
                    type    : "linear",
                    angle   : angle,
                    to      : to1 && to2 ? to1 + " " + to2 : to1 ? to1 : to2 ? to2 : null,
                    stops   : stops,
                    reverse : reverse
                };
            }
        }

        function read_url() {
            if (read(tok_popen)) {
                var url = read(tok_content);
                url = url.replace(/^['"]+|["']+$/g, "");
                read(tok_pclose);
                return { type: "url", url: url };
            }
        }

        var tok;

        if ((tok = read(tok_linear_gradient))) {
            tok = read_linear_gradient(tok);
        }
        else if ((tok = read(tok_url))) {
            tok = read_url();
        }

        return (cache1[orig] = tok || { type: "none" });
    }

    return function(input) {
        if (hasOwnProperty$2(cache2, input)) {
            return cache2[input];
        }
        return (cache2[input] = splitProperty(input).map(parse));
    };
})();

var splitProperty = (function(){
    var cache = {};
    return function(input, separator) {
        if (!separator) {
            separator = /^\s*,\s*/;
        }

        var cacheKey = input + separator;

        if (hasOwnProperty$2(cache, cacheKey)) {
            return cache[cacheKey];
        }

        var ret = [];
        var last$$1 = 0, pos = 0;
        var in_paren = 0;
        var in_string = false;
        var m;

        function looking_at(rx) {
            return (m = rx.exec(input.substr(pos)));
        }

        function trim(str) {
            return str.replace(/^\s+|\s+$/g, "");
        }

        while (pos < input.length) {
            if (!in_string && looking_at(/^[\(\[\{]/)) {
                in_paren++;
                pos++;
            }
            else if (!in_string && looking_at(/^[\)\]\}]/)) {
                in_paren--;
                pos++;
            }
            else if (!in_string && looking_at(/^[\"\']/)) {
                in_string = m[0];
                pos++;
            }
            else if (in_string == "'" && looking_at(/^\\\'/)) {
                pos += 2;
            }
            else if (in_string == '"' && looking_at(/^\\\"/)) {
                pos += 2;
            }
            else if (in_string == "'" && looking_at(/^\'/)) {
                in_string = false;
                pos++;
            }
            else if (in_string == '"' && looking_at(/^\"/)) {
                in_string = false;
                pos++;
            }
            else if (looking_at(separator)) {
                if (!in_string && !in_paren && pos > last$$1) {
                    ret.push(trim(input.substring(last$$1, pos)));
                    last$$1 = pos + m[0].length;
                }
                pos += m[0].length;
            }
            else {
                pos++;
            }
        }
        if (last$$1 < pos) {
            ret.push(trim(input.substring(last$$1, pos)));
        }
        return (cache[cacheKey] = ret);
    };
})();

var getFontURL$1 = (function(cache){
    return function(el){
        // XXX: for IE we get here the whole cssText of the rule,
        // because the computedStyle.src is empty.  Next time we need
        // to fix these regexps we better write a CSS parser. :-\
        var url = cache[el];
        if (!url) {
            var m;
            if ((m = /url\((['"]?)([^'")]*?)\1\)\s+format\((['"]?)truetype\3\)/.exec(el))) {
                url = cache[el] = m[2];
            } else if ((m = /url\((['"]?)([^'")]*?\.ttf)\1\)/.exec(el))) {
                url = cache[el] = m[2];
            }
        }
        return url;
    };
})(Object.create(null));

var getFontHeight = (function(cache){
    return function(font) {
        var height = cache[font];
        if (height == null) {
            height = cache[font] = measureText("Mapq", { font: font }).height;
        }
        return height;
    };
})(Object.create(null));

function getFontFaces(doc) {
    if (doc == null) {
        doc = document;
    }
    var result = {};
    for (var i = 0; i < doc.styleSheets.length; ++i) {
        doStylesheet(doc.styleSheets[i]);
    }
    return result;
    function doStylesheet(ss) {
        if (ss) {
            var rules = null;
            try {
                rules = ss.cssRules;
            } catch (ex) {}
            if (rules) {
                addRules(ss, rules);
            }
        }
    }
    function findFonts(rule) {
        var src = getPropertyValue(rule.style, "src");
        if (src) {
            return splitProperty(src).reduce(function(a, el){
                var font = getFontURL$1(el);
                if (font) {
                    a.push(font);
                }
                return a;
            }, []);
        } else {
            // Internet Explorer
            // XXX: this is gross.  should work though for valid CSS.
            var font = getFontURL$1(rule.cssText);
            return font ? [ font ] : [];
        }
    }
    function addRules(styleSheet, rules) {
        for (var i = 0; i < rules.length; ++i) {
            var r = rules[i];
            switch (r.type) {
              case 3:       // CSSImportRule
                doStylesheet(r.styleSheet);
                break;
              case 5:       // CSSFontFaceRule
                var style  = r.style;
                var family = splitProperty(getPropertyValue(style, "font-family"));
                var bold   = /^([56789]00|bold)$/i.test(getPropertyValue(style, "font-weight"));
                var italic = "italic" == getPropertyValue(style, "font-style");
                var src    = findFonts(r);
                if (src.length > 0) {
                    addRule(styleSheet, family, bold, italic, src[0]);
                }
            }
        }
    }
    function addRule(styleSheet, names, bold, italic, url) {
        // We get full resolved absolute URLs in Chrome, but sadly
        // not in Firefox.
        if (!(/^data:/i.test(url))) {
            if (!(/^[^\/:]+:\/\//.test(url) || /^\//.test(url))) {
                url = String(styleSheet.href).replace(/[^\/]*$/, "") + url;
            }
        }
        names.forEach(function(name){
            name = name.replace(/^(['"]?)(.*?)\1$/, "$2"); // it's quoted
            if (bold) {
                name += "|bold";
            }
            if (italic) {
                name += "|italic";
            }
            result[name] = url;
        });
    }
}

function hasOwnProperty$2(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}

function getCounter(name) {
    name = "_counter_" + name;
    return nodeInfo[name];
}

function getAllCounters(name) {
    var values = [], p = nodeInfo;
    name = "_counter_" + name;
    while (p) {
        if (hasOwnProperty$2(p, name)) {
            values.push(p[name]);
        }
        p = Object.getPrototypeOf(p);
    }
    return values.reverse();
}

function incCounter(name, inc) {
    var p = nodeInfo;
    name = "_counter_" + name;
    while (p && !hasOwnProperty$2(p, name)) {
        p = Object.getPrototypeOf(p);
    }
    if (!p) {
        p = nodeInfo._root;
    }
    p[name] = (p[name] || 0) + (inc == null ? 1 : inc);
}

function resetCounter(name, val) {
    name = "_counter_" + name;
    nodeInfo[name] = val == null ? 0 : val;
}

function doCounters(a, f, def) {
    for (var i = 0; i < a.length;) {
        var name = a[i++];
        var val = parseFloat(a[i]);
        if (isNaN(val)) {
            f(name, def);
        } else {
            f(name, val);
            ++i;
        }
    }
}

function updateCounters(style) {
    var counterReset = getPropertyValue(style, "counter-reset");
    if (counterReset) {
        doCounters(splitProperty(counterReset, /^\s+/), resetCounter, 0);
    }
    var counterIncrement = getPropertyValue(style, "counter-increment");
    if (counterIncrement) {
        doCounters(splitProperty(counterIncrement, /^\s+/), incCounter, 1);
    }
}

function parseColor$2(str, css) {
    var color = parseColor(str, true);
    if (color) {
        color = color.toRGB();
        if (css) {
            color = color.toCssRgba();
        } else if (color.a === 0) {
            color = null;
        }
    }
    return color;
}

function whenImagesAreActuallyLoaded(elements, callback) {
    var pending = 0;
    elements.forEach(function(el){
        var images = el.querySelectorAll("img");
        for (var i = 0; i < images.length; ++i) {
            var img = images[i];
            if (!img.complete) {
                pending++;
                img.onload = img.onerror = next;
            }
        }
    });
    if (!pending) {
        next();
    }
    function next() {
        if (--pending <= 0) {
            callback();
        }
    }
}

function cacheImages(element, callback) {
    var urls = [];
    function add(url) {
        if (!IMAGE_CACHE$1[url]) {
            IMAGE_CACHE$1[url] = true;
            urls.push(url);
        }
    }
    function dive(element){
        if (/^img$/i.test(element.tagName)) {
            add(element.src);
        }
        parseBackgroundImage(
            getPropertyValue(
                getComputedStyle$1(element), "background-image"
            )
        ).forEach(function(bg){
            if (bg.type == "url") {
                add(bg.url);
            }
        });

        if (element.children) {
            slice$1$1(element.children).forEach(dive);
        }
    }

    if (Array.isArray(element)) {
        element.forEach(dive);
    } else {
        dive(element);
    }

    var count = urls.length;
    function next() {
        if (--count <= 0) {
            callback();
        }
    }
    if (count === 0) {
        next();
    }
    urls.forEach(function(url){
        var img = IMAGE_CACHE$1[url] = new window.Image();
        if (!(/^data:/i.test(url))) {
            img.crossOrigin = "Anonymous";
        }
        img.src = url;
        if (img.complete) {
            next();
        } else {
            img.onload = next;
            img.onerror = function() {
                IMAGE_CACHE$1[url] = null;
                next();
            };
        }
    });
}

function alphaNumeral(n) {
    var result = "";
    do {
        var r = n % 26;
        result = String.fromCharCode(97 + r) + result;
        n = Math.floor(n / 26);
    } while (n > 0);
    return result;
}

function pushNodeInfo(element, style, group) {
    nodeInfo = Object.create(nodeInfo);
    nodeInfo[element.tagName.toLowerCase()] = {
        element: element,
        style: style
    };
    var decoration = getPropertyValue(style, "text-decoration");
    if (decoration && decoration != "none") {
        var color = getPropertyValue(style, "color");
        decoration.split(/\s+/g).forEach(function(name){
            if (!nodeInfo[name]) {
                nodeInfo[name] = color;
            }
        });
    }

    if (createsStackingContext(style)) {
        nodeInfo._stackingContext = {
            element: element,
            group: group
        };
    }
}

function popNodeInfo() {
    nodeInfo = Object.getPrototypeOf(nodeInfo);
}

function updateClipbox(path) {
    if (nodeInfo._clipbox != null) {
        var box = path.bbox(nodeInfo._matrix);
        if (nodeInfo._clipbox) {
            nodeInfo._clipbox = Rect.intersect(nodeInfo._clipbox, box);
        } else {
            nodeInfo._clipbox = box;
        }
    }
}

function emptyClipbox() {
    var cb = nodeInfo._clipbox;
    if (cb == null) {
        return true;
    }
    if (cb) {
        return cb.width() === 0 || cb.height() === 0;
    }
}

function createsStackingContext(style) {
    function prop(name) { return getPropertyValue(style, name); }
    if (prop("transform") != "none" ||
        prop("position") != "static" ||
        prop("z-index") != "auto" ||
        prop("opacity") < 1) {
        return true;
    }
}

function getComputedStyle$1(element, pseudoElt) {
    return window.getComputedStyle(element, pseudoElt || null);
}

function getPropertyValue(style, prop, defa) {
    var val = style.getPropertyValue(prop);
    if (val == null || val === "") {
        if (browser$2.webkit) {
            val = style.getPropertyValue("-webkit-" + prop );
        } else if (browser$2.mozilla) {
            val = style.getPropertyValue("-moz-" + prop );
        } else if (browser$2.opera) {
            val = style.getPropertyValue("-o-" + prop);
        } else if (microsoft) {
            val = style.getPropertyValue("-ms-" + prop);
        }
    }
    if (arguments.length > 2 && (val == null || val === "")) {
        return defa;
    } else {
        return val;
    }
}

function pleaseSetPropertyValue(style, prop, value, important) {
    style.setProperty(prop, value, important);
    if (browser$2.webkit) {
        style.setProperty("-webkit-" + prop, value, important);
    } else if (browser$2.mozilla) {
        style.setProperty("-moz-" + prop, value, important);
    } else if (browser$2.opera) {
        style.setProperty("-o-" + prop, value, important);
    } else if (microsoft) {
        style.setProperty("-ms-" + prop, value, important);
        prop = "ms" + prop.replace(/(^|-)([a-z])/g, function(s, p1, p2){
            return p1 + p2.toUpperCase();
        });
        style[prop] = value;
    }
}

function getBorder(style, side) {
    side = "border-" + side;
    return {
        width: parseFloat(getPropertyValue(style, side + "-width")),
        style: getPropertyValue(style, side + "-style"),
        color: parseColor$2(getPropertyValue(style, side + "-color"), true)
    };
}

function saveStyle(element, func) {
    var prev = element.style.cssText;
    var result = func();
    element.style.cssText = prev;
    return result;
}

function getBorderRadius(style, side) {
    var r = getPropertyValue(style, "border-" + side + "-radius").split(/\s+/g).map(parseFloat);
    if (r.length == 1) {
        r.push(r[0]);
    }
    return sanitizeRadius({ x: r[0], y: r[1] });
}

function getContentBox(element) {
    var box = element.getBoundingClientRect();
    box = innerBox(box, "border-*-width", element);
    box = innerBox(box, "padding-*", element);
    return box;
}

function innerBox(box, prop, element) {
    var style, wt, wr, wb, wl;
    if (typeof prop == "string") {
        style = getComputedStyle$1(element);
        wt = parseFloat(getPropertyValue(style, prop.replace("*", "top")));
        wr = parseFloat(getPropertyValue(style, prop.replace("*", "right")));
        wb = parseFloat(getPropertyValue(style, prop.replace("*", "bottom")));
        wl = parseFloat(getPropertyValue(style, prop.replace("*", "left")));
    }
    else if (typeof prop == "number") {
        wt = wr = wb = wl = prop;
    }
    return {
        top    : box.top + wt,
        right  : box.right - wr,
        bottom : box.bottom - wb,
        left   : box.left + wl,
        width  : box.right - box.left - wr - wl,
        height : box.bottom - box.top - wb - wt
    };
}

function getTransform(style) {
    var transform$$1 = getPropertyValue(style, "transform");
    if (transform$$1 == "none") {
        return null;
    }
    var matrix = /^\s*matrix\(\s*(.*?)\s*\)\s*$/.exec(transform$$1);
    if (matrix) {
        var origin = getPropertyValue(style, "transform-origin");
        matrix = matrix[1].split(/\s*,\s*/g).map(parseFloat);
        origin = origin.split(/\s+/g).map(parseFloat);
        return {
            matrix: matrix,
            origin: origin
        };
    }
}

function radiansToDegrees(radians) {
    return ((180 * radians) / Math.PI) % 360;
}

function parseAngle(angle) {
    var num = parseFloat(angle);
    if (/grad$/.test(angle)) {
        return Math.PI * num / 200;
    }
    else if (/rad$/.test(angle)) {
        return num;
    }
    else if (/turn$/.test(angle)) {
        return Math.PI * num * 2;
    }
    else if (/deg$/.test(angle)) {
        return Math.PI * num / 180;
    }
}

function setTransform$1(shape, m) {
    m = new Matrix(m[0], m[1], m[2], m[3], m[4], m[5]);
    shape.transform(m);
    return m;
}

function setClipping$1(shape, clipPath) {
    shape.clip(clipPath);
}

function addArcToPath(path, x, y, options) {
    var points = new Arc([ x, y ], options).curvePoints(), i = 1;
    while (i < points.length) {
        path.curveTo(points[i++], points[i++], points[i++]);
    }
}

function sanitizeRadius(r) {
    if (r.x <= 0 || r.y <= 0) {
        r.x = r.y = 0;
    }
    return r;
}

function adjustBorderRadiusForBox(box, rTL, rTR, rBR, rBL) {
    // adjust border radiuses such that the sum of adjacent
    // radiuses is not bigger than the length of the side.
    // seems the correct algorithm is variant (3) from here:
    // http://www.w3.org/Style/CSS/Tracker/issues/29?changelog
    var tl_x = Math.max(0, rTL.x), tl_y = Math.max(0, rTL.y);
    var tr_x = Math.max(0, rTR.x), tr_y = Math.max(0, rTR.y);
    var br_x = Math.max(0, rBR.x), br_y = Math.max(0, rBR.y);
    var bl_x = Math.max(0, rBL.x), bl_y = Math.max(0, rBL.y);

    var f = Math.min(
        box.width / (tl_x + tr_x),
        box.height / (tr_y + br_y),
        box.width / (br_x + bl_x),
        box.height / (bl_y + tl_y)
    );

    if (f < 1) {
        tl_x *= f; tl_y *= f;
        tr_x *= f; tr_y *= f;
        br_x *= f; br_y *= f;
        bl_x *= f; bl_y *= f;
    }

    return {
        tl: { x: tl_x, y: tl_y },
        tr: { x: tr_x, y: tr_y },
        br: { x: br_x, y: br_y },
        bl: { x: bl_x, y: bl_y }
    };
}

function elementRoundBox(element, box, type) {
    var style = getComputedStyle$1(element);

    var rTL = getBorderRadius(style, "top-left");
    var rTR = getBorderRadius(style, "top-right");
    var rBL = getBorderRadius(style, "bottom-left");
    var rBR = getBorderRadius(style, "bottom-right");

    if (type == "padding" || type == "content") {
        var bt = getBorder(style, "top");
        var br = getBorder(style, "right");
        var bb = getBorder(style, "bottom");
        var bl = getBorder(style, "left");
        rTL.x -= bl.width; rTL.y -= bt.width;
        rTR.x -= br.width; rTR.y -= bt.width;
        rBR.x -= br.width; rBR.y -= bb.width;
        rBL.x -= bl.width; rBL.y -= bb.width;
        if (type == "content") {
            var pt = parseFloat(getPropertyValue(style, "padding-top"));
            var pr = parseFloat(getPropertyValue(style, "padding-right"));
            var pb = parseFloat(getPropertyValue(style, "padding-bottom"));
            var pl = parseFloat(getPropertyValue(style, "padding-left"));
            rTL.x -= pl; rTL.y -= pt;
            rTR.x -= pr; rTR.y -= pt;
            rBR.x -= pr; rBR.y -= pb;
            rBL.x -= pl; rBL.y -= pb;
        }
    }

    if (typeof type == "number") {
        rTL.x -= type; rTL.y -= type;
        rTR.x -= type; rTR.y -= type;
        rBR.x -= type; rBR.y -= type;
        rBL.x -= type; rBL.y -= type;
    }

    return roundBox(box, rTL, rTR, rBR, rBL);
}

// Create a drawing.Path for a rounded rectangle.  Receives the
// bounding box and the border-radiuses in CSS order (top-left,
// top-right, bottom-right, bottom-left).  The radiuses must be
// objects containing x (horiz. radius) and y (vertical radius).
function roundBox(box, rTL0, rTR0, rBR0, rBL0) {
    var tmp = adjustBorderRadiusForBox(box, rTL0, rTR0, rBR0, rBL0);
    var rTL = tmp.tl;
    var rTR = tmp.tr;
    var rBR = tmp.br;
    var rBL = tmp.bl;
    var path = new Path({ fill: null, stroke: null });
    path.moveTo(box.left, box.top + rTL.y);
    if (rTL.x) {
        addArcToPath(path, box.left + rTL.x, box.top + rTL.y, {
            startAngle: -180,
            endAngle: -90,
            radiusX: rTL.x,
            radiusY: rTL.y
        });
    }
    path.lineTo(box.right - rTR.x, box.top);
    if (rTR.x) {
        addArcToPath(path, box.right - rTR.x, box.top + rTR.y, {
            startAngle: -90,
            endAngle: 0,
            radiusX: rTR.x,
            radiusY: rTR.y
        });
    }
    path.lineTo(box.right, box.bottom - rBR.y);
    if (rBR.x) {
        addArcToPath(path, box.right - rBR.x, box.bottom - rBR.y, {
            startAngle: 0,
            endAngle: 90,
            radiusX: rBR.x,
            radiusY: rBR.y
        });
    }
    path.lineTo(box.left + rBL.x, box.bottom);
    if (rBL.x) {
        addArcToPath(path, box.left + rBL.x, box.bottom - rBL.y, {
            startAngle: 90,
            endAngle: 180,
            radiusX: rBL.x,
            radiusY: rBL.y
        });
    }
    return path.close();
}

function formatCounter(val, style) {
    var str = String(parseFloat(val));
    switch (style) {
      case "decimal-leading-zero":
        if (str.length < 2) {
            str = "0" + str;
        }
        return str;
      case "lower-roman":
        return arabicToRoman(val).toLowerCase();
      case "upper-roman":
        return arabicToRoman(val).toUpperCase();
      case "lower-latin":
      case "lower-alpha":
        return alphaNumeral(val - 1);
      case "upper-latin":
      case "upper-alpha":
        return alphaNumeral(val - 1).toUpperCase();
      default:
        return str;
    }
}

function evalPseudoElementContent(element, content) {
    function displayCounter(name, style, separator) {
        if (!separator) {
            return formatCounter(getCounter(name) || 0, style);
        }
        separator = separator.replace(/^\s*(["'])(.*)\1\s*$/, "$2");
        return getAllCounters(name).map(function(val){
            return formatCounter(val, style);
        }).join(separator);
    }
    var a = splitProperty(content, /^\s+/);
    var result = [], m;
    a.forEach(function(el){
        var tmp;
        if ((m = /^\s*(["'])(.*)\1\s*$/.exec(el))) {
            result.push(m[2].replace(/\\([0-9a-f]{4})/gi, function(s, p){
                return String.fromCharCode(parseInt(p, 16));
            }));
        }
        else if ((m = /^\s*counter\((.*?)\)\s*$/.exec(el))) {
            tmp = splitProperty(m[1]);
            result.push(displayCounter(tmp[0], tmp[1]));
        }
        else if ((m = /^\s*counters\((.*?)\)\s*$/.exec(el))) {
            tmp = splitProperty(m[1]);
            result.push(displayCounter(tmp[0], tmp[2], tmp[1]));
        }
        else if ((m = /^\s*attr\((.*?)\)\s*$/.exec(el))) {
            result.push(element.getAttribute(m[1]) || "");
        }
        else {
            result.push(el);
        }
    });
    return result.join("");
}

function getCssText(style) {
    if (style.cssText) {
        return style.cssText;
    }
    // Status: NEW.  Report year: 2002.  Current year: 2014.
    // Nice played, Mozillians.
    // https://bugzilla.mozilla.org/show_bug.cgi?id=137687
    var result = [];
    for (var i = 0; i < style.length; ++i) {
        result.push(style[i] + ": " + getPropertyValue(style, style[i]));
    }
    return result.join(";\n");
}

function _renderWithPseudoElements(element, group) {
    if (element.tagName == KENDO_PSEUDO_ELEMENT) {
        _renderElement(element, group);
        return;
    }
    var fake = [];
    function pseudo(kind, place) {
        var style = getComputedStyle$1(element, kind), content = style.content;
        updateCounters(style);
        if (content && content != "normal" && content != "none" && style.width != "0px") {
            var psel = element.ownerDocument.createElement(KENDO_PSEUDO_ELEMENT);
            psel.style.cssText = getCssText(style);
            psel.textContent = evalPseudoElementContent(element, content);
            element.insertBefore(psel, place);
            fake.push(psel);
        }
    }
    pseudo(":before", element.firstChild);
    pseudo(":after", null);
    if (fake.length > 0) {
        var saveClass = element.className;
        element.className += " kendo-pdf-hide-pseudo-elements";
        _renderElement(element, group);
        element.className = saveClass;
        fake.forEach(function(el){ element.removeChild(el); });
    } else {
        _renderElement(element, group);
    }
}

function _renderElement(element, group) {
    var style = getComputedStyle$1(element);

    var top = getBorder(style, "top");
    var right = getBorder(style, "right");
    var bottom = getBorder(style, "bottom");
    var left = getBorder(style, "left");

    var rTL0 = getBorderRadius(style, "top-left");
    var rTR0 = getBorderRadius(style, "top-right");
    var rBL0 = getBorderRadius(style, "bottom-left");
    var rBR0 = getBorderRadius(style, "bottom-right");

    var dir = getPropertyValue(style, "direction");

    var backgroundColor = getPropertyValue(style, "background-color");
    backgroundColor = parseColor$2(backgroundColor);

    var backgroundImage = parseBackgroundImage( getPropertyValue(style, "background-image") );
    var backgroundRepeat = splitProperty( getPropertyValue(style, "background-repeat") );
    var backgroundPosition = splitProperty( getPropertyValue(style, "background-position") );
    var backgroundOrigin = splitProperty( getPropertyValue(style, "background-origin") );
    var backgroundSize = splitProperty( getPropertyValue(style, "background-size") );

    // IE shrinks the text with text-overflow: ellipsis,
    // apparently because the returned bounding box for the range
    // is limited to the visible area minus space for the dots,
    // instead of being the full width of the text.
    //
    // https://github.com/telerik/kendo/issues/5232
    // https://github.com/telerik/kendo-ui-core/issues/1868
    //
    // We have to test it here rather than in renderText because
    // text-overflow: ellipsis could be set on a parent element (not
    // necessarily the one containing the text); in this case,
    // getComputedStyle(elementWithTheText) will return "clip", not
    // "ellipsis" (which is probably a bug, but oh well...)
    var textOverflow, saveTextOverflow;
    if (microsoft) {
        textOverflow = style.textOverflow;             // computed style
        if (textOverflow == "ellipsis") {
            saveTextOverflow = element.style.textOverflow; // own style.
            element.style.textOverflow = "clip";
        }
    }

    if (browser$2.msie && browser$2.version < 10) {
        // IE9 hacks.  getPropertyValue won't return the correct
        // value.  Sucks that we have to do it here, I'd prefer to
        // move it in getPropertyValue, but we don't have the
        // element.
        backgroundPosition = splitProperty(element.currentStyle.backgroundPosition);
    }

    var innerbox = innerBox(element.getBoundingClientRect(), "border-*-width", element);

    // CSS "clip" property - if present, replace the group with a
    // new one which is clipped.  This must happen before drawing
    // the borders and background.
    (function(){
        var clip = getPropertyValue(style, "clip");
        var m = /^\s*rect\((.*)\)\s*$/.exec(clip);
        if (m) {
            var a = m[1].split(/[ ,]+/g);
            var top = a[0] == "auto" ? innerbox.top : parseFloat(a[0]) + innerbox.top;
            var right = a[1] == "auto" ? innerbox.right : parseFloat(a[1]) + innerbox.left;
            var bottom = a[2] == "auto" ? innerbox.bottom : parseFloat(a[2]) + innerbox.top;
            var left = a[3] == "auto" ? innerbox.left : parseFloat(a[3]) + innerbox.left;
            var tmp = new Group();
            var clipPath = new Path()
                .moveTo(left, top)
                .lineTo(right, top)
                .lineTo(right, bottom)
                .lineTo(left, bottom)
                .close();
            setClipping$1(tmp, clipPath);
            group.append(tmp);
            group = tmp;
            updateClipbox(clipPath);
        }
    })();

    var boxes, i, cells;
    var display = getPropertyValue(style, "display");

    if (display == "table-row") {
        // because of rowspan/colspan, we shouldn't draw background of table row elements on the
        // box given by its getBoundingClientRect, because if we do we risk overwritting a
        // previously rendered cell.  https://github.com/telerik/kendo/issues/4881
        boxes = [];
        for (i = 0, cells = element.children; i < cells.length; ++i) {
            boxes.push(cells[i].getBoundingClientRect());
        }
    } else {
        boxes = element.getClientRects();
        if (boxes.length == 1) {
            // Workaround the missing borders in Chrome!  getClientRects() boxes contains values
            // rounded to integer.  getBoundingClientRect() appears to work fine.  We still need
            // getClientRects() to support cases where there are more boxes (continued inline
            // elements that might have border/background).
            boxes = [ element.getBoundingClientRect() ];
        }
    }

    // This function workarounds another Chrome bug, where boxes returned for a table with
    // border-collapse: collapse will overlap the table border.  Our rendering is not perfect in
    // such case anyway, but with this is better than without it.
    boxes = adjustBoxes(boxes);

    for (i = 0; i < boxes.length; ++i) {
        drawOneBox(boxes[i], i === 0, i == boxes.length - 1);
    }

    // Render links as separate groups.  We can't use boxes returned by element's getClientRects
    // because if display type is "inline" (default for <a>), boxes will not include the height of
    // images inside.  https://github.com/telerik/kendo-ui-core/issues/3359
    if (element.tagName == "A" && element.href && !/^#?$/.test(element.getAttribute("href"))) {
        if (!nodeInfo._avoidLinks || !matches(element, nodeInfo._avoidLinks)) {
            var r = document.createRange();
            r.selectNodeContents(element);
            slice$1$1(r.getClientRects()).forEach(function(box){
                var g = new Group();
                g._pdfLink = {
                    url    : element.href,
                    top    : box.top,
                    right  : box.right,
                    bottom : box.bottom,
                    left   : box.left
                };
                group.append(g);
            });
        }
    }

    if (boxes.length > 0 && display == "list-item" && !element.getAttribute("kendo-no-bullet")) {
        drawBullet(boxes[0]);
    }

    // overflow: hidden/auto - if present, replace the group with
    // a new one clipped by the inner box.
    (function(){
        function clipit() {
            var clipPath = elementRoundBox(element, innerbox, "padding");
            var tmp = new Group();
            setClipping$1(tmp, clipPath);
            group.append(tmp);
            group = tmp;
            updateClipbox(clipPath);
        }
        if (isFormField(element)) {
            clipit();
        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow"))) {
            clipit();
        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow-x"))) {
            clipit();
        } else if (/^(hidden|auto|scroll)/.test(getPropertyValue(style, "overflow-y"))) {
            clipit();
        }
    })();

    if (!maybeRenderWidget(element, group)) {
        renderContents(element, group);
    }

    if (microsoft && textOverflow == "ellipsis") {
        element.style.textOverflow = saveTextOverflow;
    }

    return group; // only utility functions after this line.

    function adjustBoxes(boxes) {
        if (/^td$/i.test(element.tagName)) {
            var table = nodeInfo.table;
            if (table && getPropertyValue(table.style, "border-collapse") == "collapse") {
                var tableBorderLeft = getBorder(table.style, "left").width;
                var tableBorderTop = getBorder(table.style, "top").width;
                // check if we need to adjust
                if (tableBorderLeft === 0 && tableBorderTop === 0) {
                    return boxes; // nope
                }
                var tableBox = table.element.getBoundingClientRect();
                var firstCell = table.element.rows[0].cells[0];
                var firstCellBox = firstCell.getBoundingClientRect();
                if (firstCellBox.top == tableBox.top || firstCellBox.left == tableBox.left) {
                    return slice$1$1(boxes).map(function(box){
                        return {
                            left   : box.left + tableBorderLeft,
                            top    : box.top + tableBorderTop,
                            right  : box.right + tableBorderLeft,
                            bottom : box.bottom + tableBorderTop,
                            height : box.height,
                            width  : box.width
                        };
                    });
                }
            }
        }
        return boxes;
    }

    // this function will be called to draw each border.  it
    // draws starting at origin and the resulted path must be
    // translated/rotated to be placed in the proper position.
    //
    // arguments are named as if it draws the top border:
    //
    //    - `len` the length of the edge
    //    - `Wtop` the width of the edge (i.e. border-top-width)
    //    - `Wleft` the width of the left edge (border-left-width)
    //    - `Wright` the width of the right edge
    //    - `rl` and `rl` -- the border radius on the left and right
    //      (objects containing x and y, for horiz/vertical radius)
    //    - `transform` -- transformation to apply
    //
    function drawEdge(color, len, Wtop, Wleft, Wright, rl, rr, transform$$1) {
        if (Wtop <= 0) {
            return;
        }

        var path, edge = new Group();
        setTransform$1(edge, transform$$1);
        group.append(edge);

        sanitizeRadius(rl);
        sanitizeRadius(rr);

        // draw main border.  this is the area without the rounded corners
        path = new Path({
            fill: { color: color },
            stroke: null
        });
        edge.append(path);
        path.moveTo(rl.x ? Math.max(rl.x, Wleft) : 0, 0)
            .lineTo(len - (rr.x ? Math.max(rr.x, Wright) : 0), 0)
            .lineTo(len - Math.max(rr.x, Wright), Wtop)
            .lineTo(Math.max(rl.x, Wleft), Wtop)
            .close();

        if (rl.x) {
            drawRoundCorner(Wleft, rl, [ -1, 0, 0, 1, rl.x, 0 ]);
        }

        if (rr.x) {
            drawRoundCorner(Wright, rr, [ 1, 0, 0, 1, len - rr.x, 0 ]);
        }

        // draws one round corner, starting at origin (needs to be
        // translated/rotated to be placed properly).
        function drawRoundCorner(Wright, r, transform$$1) {
            var angle = Math.PI/2 * Wright / (Wright + Wtop);

            // not sanitizing this one, because negative values
            // are useful to fill the box correctly.
            var ri = {
                x: r.x - Wright,
                y: r.y - Wtop
            };

            var path = new Path({
                fill: { color: color },
                stroke: null
            }).moveTo(0, 0);

            setTransform$1(path, transform$$1);

            addArcToPath(path, 0, r.y, {
                startAngle: -90,
                endAngle: -radiansToDegrees(angle),
                radiusX: r.x,
                radiusY: r.y
            });

            if (ri.x > 0 && ri.y > 0) {
                path.lineTo(ri.x * Math.cos(angle), r.y - ri.y * Math.sin(angle));
                addArcToPath(path, 0, r.y, {
                    startAngle: -radiansToDegrees(angle),
                    endAngle: -90,
                    radiusX: ri.x,
                    radiusY: ri.y,
                    anticlockwise: true
                });
            }
            else if (ri.x > 0) {
                path.lineTo(ri.x, Wtop)
                    .lineTo(0, Wtop);
            }
            else {
                path.lineTo(ri.x, Wtop)
                    .lineTo(ri.x, 0);
            }

            edge.append(path.close());
        }
    }

    function drawBackground(box) {
        var background = new Group();
        setClipping$1(background, roundBox(box, rTL0, rTR0, rBR0, rBL0));
        group.append(background);

        if (backgroundColor) {
            var path = new Path({
                fill: { color: backgroundColor.toCssRgba() },
                stroke: null
            });
            path.moveTo(box.left, box.top)
                .lineTo(box.right, box.top)
                .lineTo(box.right, box.bottom)
                .lineTo(box.left, box.bottom)
                .close();
            background.append(path);
        }

        for (var i = backgroundImage.length; --i >= 0;) {
            drawOneBackground(
                background, box,
                backgroundImage[i],
                backgroundRepeat[i % backgroundRepeat.length],
                backgroundPosition[i % backgroundPosition.length],
                backgroundOrigin[i % backgroundOrigin.length],
                backgroundSize[i % backgroundSize.length]
            );
        }
    }

    function drawOneBackground(group, box, background, backgroundRepeat, backgroundPosition, backgroundOrigin, backgroundSize) {
        if (!background || (background == "none")) {
            return;
        }

        if (background.type == "url") {
            // SVG taints the canvas, can't draw it.
            if (/^url\(\"data:image\/svg/i.test(background.url)) {
                return;
            }
            var img = IMAGE_CACHE$1[background.url];
            if (img && img.width > 0 && img.height > 0) {
                drawBackgroundImage(group, box, img.width, img.height, function(group, rect){
                    group.append(new Image$1(background.url, rect));
                });
            }
        } else if (background.type == "linear") {
            drawBackgroundImage(group, box, box.width, box.height, gradientRenderer(background));
        } else {
            return;
        }

        function drawBackgroundImage(group, box, img_width, img_height, renderBG) {
            var aspect_ratio = img_width / img_height, f;

            // for background-origin: border-box the box is already appropriate
            var orgBox = box;
            if (backgroundOrigin == "content-box") {
                orgBox = innerBox(orgBox, "border-*-width", element);
                orgBox = innerBox(orgBox, "padding-*", element);
            } else if (backgroundOrigin == "padding-box") {
                orgBox = innerBox(orgBox, "border-*-width", element);
            }

            if (!/^\s*auto(\s+auto)?\s*$/.test(backgroundSize)) {
                if (backgroundSize == "contain") {
                    f = Math.min(orgBox.width / img_width,
                                 orgBox.height / img_height);
                    img_width *= f;
                    img_height *= f;
                }
                else if (backgroundSize == "cover") {
                    f = Math.max(orgBox.width / img_width,
                                 orgBox.height / img_height);
                    img_width *= f;
                    img_height *= f;
                }
                else {
                    var size = backgroundSize.split(/\s+/g);
                    // compute width
                    if (/%$/.test(size[0])) {
                        img_width = orgBox.width * parseFloat(size[0]) / 100;
                    } else {
                        img_width = parseFloat(size[0]);
                    }
                    // compute height
                    if (size.length == 1 || size[1] == "auto") {
                        img_height = img_width / aspect_ratio;
                    } else if (/%$/.test(size[1])) {
                        img_height = orgBox.height * parseFloat(size[1]) / 100;
                    } else {
                        img_height = parseFloat(size[1]);
                    }
                }
            }

            var pos = String(backgroundPosition);

            // IE sometimes reports single-word positions
            // https://github.com/telerik/kendo-ui-core/issues/2786
            //
            // it seems to switch to percentages when the horizontal
            // position is not "center", therefore we don't handle
            // multi-word cases here.  All other browsers return
            // percentages or pixels instead of keywords.  At least
            // for now...
            switch (pos) {
              case "bottom" : pos = "50% 100%"; break;
              case "top"    : pos = "50% 0"; break;
              case "left"   : pos = "0 50%"; break;
              case "right"  : pos = "100% 50%"; break;
              case "center" : pos = "50% 50%"; break;
            }

            pos = pos.split(/\s+/);
            if (pos.length == 1) {
                pos[1] = "50%";
            }

            if (/%$/.test(pos[0])) {
                pos[0] = parseFloat(pos[0]) / 100 * (orgBox.width - img_width);
            } else {
                pos[0] = parseFloat(pos[0]);
            }
            if (/%$/.test(pos[1])) {
                pos[1] = parseFloat(pos[1]) / 100 * (orgBox.height - img_height);
            } else {
                pos[1] = parseFloat(pos[1]);
            }

            var rect = new Rect([ orgBox.left + pos[0], orgBox.top + pos[1] ], [ img_width, img_height ]);

            // XXX: background-repeat could be implemented more
            //      efficiently as a fill pattern (at least for PDF
            //      output, probably SVG too).

            function rewX() {
                while (rect.origin.x > box.left) {
                    rect.origin.x -= img_width;
                }
            }

            function rewY() {
                while (rect.origin.y > box.top) {
                    rect.origin.y -= img_height;
                }
            }

            function repeatX() {
                while (rect.origin.x < box.right) {
                    renderBG(group, rect.clone());
                    rect.origin.x += img_width;
                }
            }

            if (backgroundRepeat == "no-repeat") {
                renderBG(group, rect);
            }
            else if (backgroundRepeat == "repeat-x") {
                rewX();
                repeatX();
            }
            else if (backgroundRepeat == "repeat-y") {
                rewY();
                while (rect.origin.y < box.bottom) {
                    renderBG(group, rect.clone());
                    rect.origin.y += img_height;
                }
            }
            else if (backgroundRepeat == "repeat") {
                rewX();
                rewY();
                var origin = rect.origin.clone();
                while (rect.origin.y < box.bottom) {
                    rect.origin.x = origin.x;
                    repeatX();
                    rect.origin.y += img_height;
                }
            }
        }
    }

    function drawBullet() {
        var listStyleType = getPropertyValue(style, "list-style-type");
        if (listStyleType == "none") {
            return;
        }
        var listStylePosition = getPropertyValue(style, "list-style-position");

        function _drawBullet(f) {
            saveStyle(element, function(){
                element.style.position = "relative";
                var bullet = element.ownerDocument.createElement(KENDO_PSEUDO_ELEMENT);
                bullet.style.position = "absolute";
                bullet.style.boxSizing = "border-box";
                if (listStylePosition == "outside") {
                    bullet.style.width = "6em";
                    bullet.style.left = "-6.8em";
                    bullet.style.textAlign = "right";
                } else {
                    bullet.style.left = "0px";
                }
                f(bullet);
                element.insertBefore(bullet, element.firstChild);
                renderElement(bullet, group);
                element.removeChild(bullet);
            });
        }

        function elementIndex(f) {
            var a = element.parentNode.children;
            var k = element.getAttribute("kendo-split-index");
            if (k != null) {
                return f(k|0, a.length);
            }
            for (var i = 0; i < a.length; ++i) {
                if (a[i] === element) {
                    return f(i, a.length);
                }
            }
        }

        switch (listStyleType) {
          case "circle":
          case "disc":
          case "square":
            _drawBullet(function(bullet){
                // XXX: the science behind these values is called "trial and error".
                bullet.style.fontSize = "60%";
                bullet.style.lineHeight = "200%";
                bullet.style.paddingRight = "0.5em";
                bullet.style.fontFamily = "DejaVu Serif";
                bullet.innerHTML = {
                    "disc"   : "\u25cf",
                    "circle" : "\u25ef",
                    "square" : "\u25a0"
                }[listStyleType];
            });
            break;

          case "decimal":
          case "decimal-leading-zero":
            _drawBullet(function(bullet){
                elementIndex(function(idx){
                    ++idx;
                    if (listStyleType == "decimal-leading-zero" && idx < 10) {
                        idx = "0" + idx;
                    }
                    bullet.innerHTML = idx + ".";
                });
            });
            break;

          case "lower-roman":
          case "upper-roman":
            _drawBullet(function(bullet){
                elementIndex(function(idx){
                    idx = arabicToRoman(idx + 1);
                    if (listStyleType == "upper-roman") {
                        idx = idx.toUpperCase();
                    }
                    bullet.innerHTML = idx + ".";
                });
            });
            break;

          case "lower-latin":
          case "lower-alpha":
          case "upper-latin":
          case "upper-alpha":
            _drawBullet(function(bullet){
                elementIndex(function(idx){
                    idx = alphaNumeral(idx);
                    if (/^upper/i.test(listStyleType)) {
                        idx = idx.toUpperCase();
                    }
                    bullet.innerHTML = idx + ".";
                });
            });
            break;
        }
    }

    // draws a single border box
    function drawOneBox(box, isFirst, isLast) {
        if (box.width === 0 || box.height === 0) {
            return;
        }

        drawBackground(box);

        var shouldDrawLeft = (left.width > 0 && ((isFirst && dir == "ltr") || (isLast && dir == "rtl")));
        var shouldDrawRight = (right.width > 0 && ((isLast && dir == "ltr") || (isFirst && dir == "rtl")));

        // The most general case is that the 4 borders have different widths and border
        // radiuses.  The way that is handled is by drawing 3 Paths for each border: the
        // straight line, and two round corners which represent half of the entire rounded
        // corner.  To simplify code those shapes are drawed at origin (by the drawEdge
        // function), then translated/rotated into the right position.
        //
        // However, this leads to poor results due to rounding in the simpler cases where
        // borders are straight lines.  Therefore we handle a few such cases separately with
        // straight lines. C^wC^wC^w -- nope, scratch that.  poor rendering was because of a bug
        // in Chrome (getClientRects() returns rounded integer values rather than exact floats.
        // web dev is still a ghetto.)

        // first, just in case there is no border...
        if (top.width === 0 && left.width === 0 && right.width === 0 && bottom.width === 0) {
            return;
        }

        // START paint borders
        // if all borders have equal colors...
        if (top.color == right.color && top.color == bottom.color && top.color == left.color) {

            // if same widths too, we can draw the whole border by stroking a single path.
            if (top.width == right.width && top.width == bottom.width && top.width == left.width)
            {
                if (shouldDrawLeft && shouldDrawRight) {
                    // reduce box by half the border width, so we can draw it by stroking.
                    box = innerBox(box, top.width/2);

                    // adjust the border radiuses, again by top.width/2, and make the path element.
                    var path = elementRoundBox(element, box, top.width/2);
                    path.options.stroke = {
                        color: top.color,
                        width: top.width
                    };
                    group.append(path);
                    return;
                }
            }
        }

        // if border radiuses are zero and widths are at most one pixel, we can again use simple
        // paths.
        if (rTL0.x === 0 && rTR0.x === 0 && rBR0.x === 0 && rBL0.x === 0) {
            // alright, 1.9px will do as well.  the difference in color blending should not be
            // noticeable.
            if (top.width < 2 && left.width < 2 && right.width < 2 && bottom.width < 2) {
                // top border
                if (top.width > 0) {
                    group.append(
                        new Path({
                            stroke: { width: top.width, color: top.color }
                        })
                            .moveTo(box.left, box.top + top.width/2)
                            .lineTo(box.right, box.top + top.width/2)
                    );
                }

                // bottom border
                if (bottom.width > 0) {
                    group.append(
                        new Path({
                            stroke: { width: bottom.width, color: bottom.color }
                        })
                            .moveTo(box.left, box.bottom - bottom.width/2)
                            .lineTo(box.right, box.bottom - bottom.width/2)
                    );
                }

                // left border
                if (shouldDrawLeft) {
                    group.append(
                        new Path({
                            stroke: { width: left.width, color: left.color }
                        })
                            .moveTo(box.left + left.width/2, box.top)
                            .lineTo(box.left + left.width/2, box.bottom)
                    );
                }

                // right border
                if (shouldDrawRight) {
                    group.append(
                        new Path({
                            stroke: { width: right.width, color: right.color }
                        })
                            .moveTo(box.right - right.width/2, box.top)
                            .lineTo(box.right - right.width/2, box.bottom)
                    );
                }

                return;
            }
        }
        // END paint borders

        var tmp = adjustBorderRadiusForBox(box, rTL0, rTR0, rBR0, rBL0);
        var rTL = tmp.tl;
        var rTR = tmp.tr;
        var rBR = tmp.br;
        var rBL = tmp.bl;

        // top border
        drawEdge(top.color,
                 box.width, top.width, left.width, right.width,
                 rTL, rTR,
                 [ 1, 0, 0, 1, box.left, box.top ]);

        // bottom border
        drawEdge(bottom.color,
                 box.width, bottom.width, right.width, left.width,
                 rBR, rBL,
                 [ -1, 0, 0, -1, box.right, box.bottom ]);

        // for left/right borders we need to invert the border-radiuses
        function inv(p) {
            return { x: p.y, y: p.x };
        }

        // left border
        drawEdge(left.color,
                 box.height, left.width, bottom.width, top.width,
                 inv(rBL), inv(rTL),
                 [ 0, -1, 1, 0, box.left, box.bottom ]);

        // right border
        drawEdge(right.color,
                 box.height, right.width, top.width, bottom.width,
                 inv(rTR), inv(rBR),
                 [ 0, 1, -1, 0, box.right, box.top ]);
    }
}

function gradientRenderer(gradient) {
    return function(group, rect) {
        var width = rect.width(), height = rect.height();

        switch (gradient.type) {
          case "linear":

            // figure out the angle.
            var angle = gradient.angle != null ? gradient.angle : Math.PI;
            switch (gradient.to) {
              case "top":
                angle = 0;
                break;
              case "left":
                angle = -Math.PI / 2;
                break;
              case "bottom":
                angle = Math.PI;
                break;
              case "right":
                angle = Math.PI / 2;
                break;
              case "top left": case "left top":
                angle = -Math.atan2(height, width);
                break;
              case "top right": case "right top":
                angle = Math.atan2(height, width);
                break;
              case "bottom left": case "left bottom":
                angle = Math.PI + Math.atan2(height, width);
                break;
              case "bottom right": case "right bottom":
                angle = Math.PI - Math.atan2(height, width);
                break;
            }

            if (gradient.reverse) {
                angle -= Math.PI;
            }

            // limit the angle between 0..2PI
            angle %= 2 * Math.PI;
            if (angle < 0) {
                angle += 2 * Math.PI;
            }

            // compute gradient's start/end points.  here len is the length of the gradient line
            // and x,y is the end point relative to the center of the rectangle in conventional
            // (math) axis direction.

            // this is the original (unscaled) length of the gradient line.  needed to deal with
            // absolutely positioned color stops.  formula from the CSS spec:
            // http://dev.w3.org/csswg/css-images-3/#linear-gradient-syntax
            var pxlen = Math.abs(width * Math.sin(angle)) + Math.abs(height * Math.cos(angle));

            // The math below is pretty simple, but it took a while to figure out.  We compute x
            // and y, the *end* of the gradient line.  However, we want to transform them into
            // element-based coordinates (SVG's gradientUnits="objectBoundingBox").  That means,
            // x=0 is the left edge, x=1 is the right edge, y=0 is the top edge and y=1 is the
            // bottom edge.
            //
            // A naive approach would use the original angle for these calculations.  Say we'd
            // like to draw a gradient angled at 45deg in a 100x400 box.  When we use
            // objectBoundingBox, the renderer will draw it in a 1x1 *square* box, and then
            // scale that to the desired dimensions.  The 45deg angle will look more like 70deg
            // after scaling.  SVG (http://www.w3.org/TR/SVG/pservers.html#LinearGradients) says
            // the following:
            //
            //     When gradientUnits="objectBoundingBox" and 'gradientTransform' is the
            //     identity matrix, the normal of the linear gradient is perpendicular to the
            //     gradient vector in object bounding box space (i.e., the abstract coordinate
            //     system where (0,0) is at the top/left of the object bounding box and (1,1) is
            //     at the bottom/right of the object bounding box). When the object's bounding
            //     box is not square, the gradient normal which is initially perpendicular to
            //     the gradient vector within object bounding box space may render
            //     non-perpendicular relative to the gradient vector in user space. If the
            //     gradient vector is parallel to one of the axes of the bounding box, the
            //     gradient normal will remain perpendicular. This transformation is due to
            //     application of the non-uniform scaling transformation from bounding box space
            //     to user space.
            //
            // which is an extremely long and confusing way to tell what I just said above.
            //
            // For this reason we need to apply the reverse scaling to the original angle, so
            // that when it'll finally be rendered it'll actually be at the desired slope.  Now
            // I'll let you figure out the math yourself.

            var scaledAngle = Math.atan(width * Math.tan(angle) / height);
            var sin = Math.sin(scaledAngle), cos = Math.cos(scaledAngle);
            var len = Math.abs(sin) + Math.abs(cos);
            var x = len/2 * sin;
            var y = len/2 * cos;

            // Because of the arctangent, our scaledAngle ends up between -PI/2..PI/2, possibly
            // losing the intended direction of the gradient.  The following fixes it.
            if (angle > Math.PI/2 && angle <= 3*Math.PI/2) {
                x = -x;
                y = -y;
            }

            // compute the color stops.
            var implicit = [], right = 0;
            var stops = gradient.stops.map(function(s, i){
                var offset = s.percent;
                if (offset) {
                    offset = parseFloat(offset) / 100;
                } else if (s.length) {
                    offset = parseFloat(s.length) / pxlen;
                } else if (i === 0) {
                    offset = 0;
                } else if (i == gradient.stops.length - 1) {
                    offset = 1;
                }
                var stop = {
                    color: s.color.toCssRgba(),
                    offset: offset
                };
                if (offset != null) {
                    right = offset;
                    // fix implicit offsets
                    implicit.forEach(function(s, i){
                        var stop = s.stop;
                        stop.offset = s.left + (right - s.left) * (i + 1) / (implicit.length + 1);
                    });
                    implicit = [];
                } else {
                    implicit.push({ left: right, stop: stop });
                }
                return stop;
            });

            var start = [ 0.5 - x, 0.5 + y ];
            var end = [ 0.5 + x, 0.5 - y ];

            // finally, draw it.
            group.append(
                Path.fromRect(rect)
                    .stroke(null)
                    .fill(new LinearGradient({
                        start     : start,
                        end       : end,
                        stops     : stops,
                        userSpace : false
                    }))
            );
            break;
          case "radial":
            // XXX:
            if (window.console && window.console.log) {
                window.console.log("Radial gradients are not yet supported in HTML renderer");
            }
            break;
        }
    };
}

function maybeRenderWidget(element, group) {
    var visual;

    if (element._kendoExportVisual) {
        visual = element._kendoExportVisual();
    } else if (window.kendo && window.kendo.jQuery && element.getAttribute(window.kendo.attr("role"))) {
        var widget = window.kendo.widgetInstance(window.kendo.jQuery(element));
        if (widget && (widget.exportDOMVisual || widget.exportVisual)) {
            if (widget.exportDOMVisual) {
                visual = widget.exportDOMVisual();
            } else {
                visual = widget.exportVisual();
            }
        }
    }

    if (!visual) {
        return false;
    }

    var wrap$$1 = new Group();
    wrap$$1.children.push(visual);

    var bbox = element.getBoundingClientRect();
    wrap$$1.transform(transform$1().translate(bbox.left, bbox.top));

    group.append(wrap$$1);

    return true;
}

function renderImage(element, url, group) {
    var box = getContentBox(element);
    var rect = new Rect([ box.left, box.top ], [ box.width, box.height ]);
    var image = new Image$1(url, rect);
    setClipping$1(image, elementRoundBox(element, box, "content"));
    group.append(image);
}

function zIndexSort(a, b) {
    var sa = getComputedStyle$1(a);
    var sb = getComputedStyle$1(b);
    var za = parseFloat(getPropertyValue(sa, "z-index"));
    var zb = parseFloat(getPropertyValue(sb, "z-index"));
    var pa = getPropertyValue(sa, "position");
    var pb = getPropertyValue(sb, "position");
    if (isNaN(za) && isNaN(zb)) {
        if ((/static|absolute/.test(pa)) && (/static|absolute/.test(pb))) {
            return 0;
        }
        if (pa == "static") {
            return -1;
        }
        if (pb == "static") {
            return 1;
        }
        return 0;
    }
    if (isNaN(za)) {
        return zb === 0 ? 0 : zb > 0 ? -1 : 1;
    }
    if (isNaN(zb)) {
        return za === 0 ? 0 : za > 0 ? 1 : -1;
    }
    return parseFloat(za) - parseFloat(zb);
}

function isFormField(element) {
    return /^(?:textarea|select|input)$/i.test(element.tagName);
}

function getSelectedOption(element) {
    if (element.selectedOptions && element.selectedOptions.length > 0) {
        return element.selectedOptions[0];
    }
    return element.options[element.selectedIndex];
}

function renderCheckbox(element, group) {
    var style = getComputedStyle$1(element);
    var color = getPropertyValue(style, "color");
    var box = element.getBoundingClientRect();
    if (element.type == "checkbox") {
        group.append(
            Path.fromRect(
                new Rect([ box.left+1, box.top+1 ],
                             [ box.width-2, box.height-2 ])
            ).stroke(color, 1)
        );
        if (element.checked) {
            // fill a rectangle inside?  looks kinda ugly.
            // group.append(
            //     Path.fromRect(
            //         new geo.Rect([ box.left+4, box.top+4 ],
            //                      [ box.width-8, box.height-8])
            //     ).fill(color).stroke(null)
            // );

            // let's draw a checkmark instead.  artistic, eh?
            group.append(
                new Path()
                    .stroke(color, 1.2)
                    .moveTo(box.left + 0.22 * box.width,
                            box.top + 0.55 * box.height)
                    .lineTo(box.left + 0.45 * box.width,
                            box.top + 0.75 * box.height)
                    .lineTo(box.left + 0.78 * box.width,
                            box.top + 0.22 * box.width)
            );
        }
    } else {
        group.append(
            new Circle$1(
                new Circle([
                    (box.left + box.right) / 2,
                    (box.top + box.bottom) / 2
                ], Math.min(box.width-2, box.height-2) / 2)
            ).stroke(color, 1)
        );
        if (element.checked) {
            group.append(
                new Circle$1(
                    new Circle([
                        (box.left + box.right) / 2,
                        (box.top + box.bottom) / 2
                    ], Math.min(box.width-8, box.height-8) / 2)
                ).fill(color).stroke(null)
            );
        }
    }
}

function renderFormField(element, group) {
    var tag = element.tagName.toLowerCase();
    if (tag == "input" && (element.type == "checkbox" || element.type == "radio")) {
        return renderCheckbox(element, group);
    }
    var p = element.parentNode;
    var doc = element.ownerDocument;
    var el = doc.createElement(KENDO_PSEUDO_ELEMENT);
    var option;
    el.style.cssText = getCssText(getComputedStyle$1(element));
    if (tag == "input") {
        el.style.whiteSpace = "pre";
    }
    if (tag == "select" || tag == "textarea") {
        el.style.overflow = "auto";
    }
    if (tag == "select") {
        if (element.multiple) {
            for (var i = 0; i < element.options.length; ++i) {
                option = doc.createElement(KENDO_PSEUDO_ELEMENT);
                option.style.cssText = getCssText(getComputedStyle$1(element.options[i]));
                option.style.display = "block"; // IE9 messes up without this
                option.textContent = element.options[i].textContent;
                el.appendChild(option);
            }
        } else {
            option = getSelectedOption(element);
            if (option) {
                el.textContent = option.textContent;
            }
        }
    } else {
        el.textContent = element.value;
    }
    p.insertBefore(el, element);
    el.scrollLeft = element.scrollLeft;
    el.scrollTop = element.scrollTop;

    // must temporarily hide the original element, otherwise it
    // may affect layout of the fake element we want to render.
    element.style.display = "none";

    renderContents(el, group);
    element.style.display = "";
    p.removeChild(el);
}

function renderContents(element, group) {
    if (nodeInfo._stackingContext.element === element) {
        // the group that was set in pushNodeInfo might have
        // changed due to clipping/transforms, update it here.
        nodeInfo._stackingContext.group = group;
    }
    switch (element.tagName.toLowerCase()) {
      case "img":
        renderImage(element, element.src, group);
        break;

      case "canvas":
        try {
            renderImage(element, element.toDataURL("image/png"), group);
        } catch (ex) {
            // tainted; can't draw it, ignore.
        }
        break;

      case "textarea":
      case "input":
      case "select":
        renderFormField(element, group);
        break;

      default:
        var children = [], floats = [], positioned = [];
        for (var i = element.firstChild; i; i = i.nextSibling) {
            switch (i.nodeType) {
              case 3:         // Text
                if (/\S/.test(i.data)) {
                    renderText(element, i, group);
                }
                break;
              case 1:         // Element
                var style = getComputedStyle$1(i);
                var floating = getPropertyValue(style, "float");
                var position = getPropertyValue(style, "position");
                if (position != "static") {
                    positioned.push(i);
                }
                else if (floating != "none") {
                    floats.push(i);
                } else {
                    children.push(i);
                }
                break;
            }
        }

        mergeSort(children, zIndexSort).forEach(function(el){ renderElement(el, group); });
        mergeSort(floats, zIndexSort).forEach(function(el){ renderElement(el, group); });
        mergeSort(positioned, zIndexSort).forEach(function(el){ renderElement(el, group); });
    }
}

function renderText(element, node, group) {
    if (emptyClipbox()) {
        return;
    }
    var style = getComputedStyle$1(element);

    if (parseFloat(getPropertyValue(style, "text-indent")) < -500) {
        // assume it should not be displayed.  the slider's
        // draggable handle displays a Drag text for some reason,
        // having text-indent: -3333px.
        return;
    }

    var text = node.data;
    var start = 0;
    var end = text.search(/\S\s*$/) + 1;

    if (!end) {
        return; // whitespace-only node
    }

    var fontSize = getPropertyValue(style, "font-size");
    var lineHeight = getPropertyValue(style, "line-height");

    // simply getPropertyValue("font") doesn't work in Firefox :-\
    var font = [
        getPropertyValue(style, "font-style"),
        getPropertyValue(style, "font-variant"),
        getPropertyValue(style, "font-weight"),
        fontSize, // no need for line height here; it breaks layout in FF
        getPropertyValue(style, "font-family")
    ].join(" ");

    fontSize = parseFloat(fontSize);
    lineHeight = parseFloat(lineHeight);

    if (fontSize === 0) {
        return;
    }

    var color = getPropertyValue(style, "color");
    var range = element.ownerDocument.createRange();
    var align$$1 = getPropertyValue(style, "text-align");
    var isJustified = align$$1 == "justify";
    var columnCount = getPropertyValue(style, "column-count", 1);
    var whiteSpace = getPropertyValue(style, "white-space");
    var textTransform = getPropertyValue(style, "text-transform");

    // A line of 500px, with a font of 12px, contains an average of 80 characters, but since we
    // err, we'd like to guess a bigger number rather than a smaller one.  Multiplying by 5
    // seems to be a good option.
    var estimateLineLength = element.getBoundingClientRect().width / fontSize * 5;
    if (estimateLineLength === 0) {
        estimateLineLength = 500;
    }

    // we'll maintain this so we can workaround bugs in Chrome's Range.getClientRects
    // https://github.com/telerik/kendo/issues/5740
    var prevLineBottom = null;

    var underline = nodeInfo["underline"];
    var lineThrough = nodeInfo["line-through"];
    var overline = nodeInfo["overline"];
    var hasDecoration = underline || lineThrough || overline;

    // doChunk returns true when all text has been rendered
    while (!doChunk()) {}

    if (hasDecoration) {
        range.selectNode(node);
        slice$1$1(range.getClientRects()).forEach(decorate);
    }

    return;                 // only function declarations after this line

    function actuallyGetRangeBoundingRect(range) {
        // XXX: to be revised when this Chrome bug is fixed:
        // https://bugs.chromium.org/p/chromium/issues/detail?id=612459
        if (microsoft || browser$2.chrome) {
            // Workaround browser bugs: IE and Chrome would sometimes
            // return 0 or 1-width rectangles before or after the main
            // one.  https://github.com/telerik/kendo/issues/4674

            // Actually Chrome 50 got worse, since the rectangles can now have the width of a
            // full character, making it hard to tell whether it's a bogus rectangle or valid
            // selection location.  The workaround is to ignore rectangles that fall on the
            // previous line.  https://github.com/telerik/kendo/issues/5740
            var rectangles = range.getClientRects(), box = {
                top    :  Infinity,
                right  : -Infinity,
                bottom : -Infinity,
                left   :  Infinity
            }, done = false;
            for (var i = 0; i < rectangles.length; ++i) {
                var b = rectangles[i];
                if (b.width <= 1 || b.bottom === prevLineBottom) {
                    continue;   // bogus rectangle
                }
                box.left   = Math.min(b.left   , box.left);
                box.top    = Math.min(b.top    , box.top);
                box.right  = Math.max(b.right  , box.right);
                box.bottom = Math.max(b.bottom , box.bottom);
                done = true;
            }
            if (!done) {
                return range.getBoundingClientRect();
            }
            box.width = box.right - box.left;
            box.height = box.bottom - box.top;
            return box;
        }
        return range.getBoundingClientRect();
    }

    // Render a chunk of text, typically one line (but for justified text we render each word as
    // a separate Text object, because spacing is variable).  Returns true when it finished the
    // current node.  After each chunk it updates `start` to just after the last rendered
    // character.
    function doChunk() {
        var origStart = start;
        var box, pos = text.substr(start).search(/\S/);
        start += pos;
        if (pos < 0 || start >= end) {
            return true;
        }

        // Select a single character to determine the height of a line of text.  The box.bottom
        // will be essential for us to figure out where the next line begins.
        range.setStart(node, start);
        range.setEnd(node, start + 1);
        box = actuallyGetRangeBoundingRect(range);

        // for justified text we must split at each space, because space has variable width.
        var found = false;
        if (isJustified || columnCount > 1) {
            pos = text.substr(start).search(/\s/);
            if (pos >= 0) {
                // we can only split there if it's on the same line, otherwise we'll fall back
                // to the default mechanism (see findEOL below).
                range.setEnd(node, start + pos);
                var r = actuallyGetRangeBoundingRect(range);
                if (r.bottom == box.bottom) {
                    box = r;
                    found = true;
                    start += pos;
                }
            }
        }

        if (!found) {
            // This code does three things: (1) it selects one line of text in `range`, (2) it
            // leaves the bounding rect of that line in `box` and (3) it returns the position
            // just after the EOL.  We know where the line starts (`start`) but we don't know
            // where it ends.  To figure this out, we select a piece of text and look at the
            // bottom of the bounding box.  If it changes, we have more than one line selected
            // and should retry with a smaller selection.
            //
            // To speed things up, we first try to select all text in the node (`start` ->
            // `end`).  If there's more than one line there, then select only half of it.  And
            // so on.  When we find a value for `end` that fits in one line, we try increasing
            // it (also in halves) until we get to the next line.  The algorithm stops when the
            // right side of the bounding box does not change.
            //
            // One more thing to note is that everything happens in a single Text DOM node.
            // There's no other tags inside it, therefore the left/top coordinates of the
            // bounding box will not change.
            pos = (function findEOL(min, eol, max){
                range.setEnd(node, eol);
                var r = actuallyGetRangeBoundingRect(range);
                if (r.bottom != box.bottom && min < eol) {
                    return findEOL(min, (min + eol) >> 1, eol);
                } else if (r.right != box.right) {
                    box = r;
                    if (eol < max) {
                        return findEOL(eol, (eol + max) >> 1, max);
                    } else {
                        return eol;
                    }
                } else {
                    return eol;
                }
            })(start, Math.min(end, start + estimateLineLength), end);

            if (pos == start) {
                // if EOL is at the start, then no more text fits on this line.  Skip the
                // remainder of this node entirely to avoid a stack overflow.
                return true;
            }
            start = pos;

            pos = range.toString().search(/\s+$/);
            if (pos === 0) {
                return false; // whitespace only; we should not get here.
            }
            if (pos > 0) {
                // eliminate trailing whitespace
                range.setEnd(node, range.startOffset + pos);
                box = actuallyGetRangeBoundingRect(range);
            }
        }

        // another workaround for IE: if we rely on getBoundingClientRect() we'll overlap with the bullet for LI
        // elements.  Calling getClientRects() and using the *first* rect appears to give us the correct location.
        // Note: not to be used in Chrome as it randomly returns a zero-width rectangle from the previous line.
        if (microsoft) {
            box = range.getClientRects()[0];
        }

        var str = range.toString();
        if (!/^(?:pre|pre-wrap)$/i.test(whiteSpace)) {
            // node with non-significant space -- collapse whitespace.
            str = str.replace(/\s+/g, " ");
        }
        else if (/\t/.test(str)) {
            // with significant whitespace we need to do something about literal TAB characters.
            // There's no TAB glyph in a font so they would be rendered in PDF as an empty box,
            // and the whole text will stretch to fill the original width.  The core PDF lib
            // does not have sufficient context to deal with it.

            // calculate the starting column here, since we initially discarded any whitespace.
            var cc = 0;
            for (pos = origStart; pos < range.startOffset; ++pos) {
                var code = text.charCodeAt(pos);
                if (code == 9) {
                    // when we meet a TAB we must round up to the next tab stop.
                    // in all browsers TABs seem to be 8 characters.
                    cc += 8 - cc % 8;
                } else if (code == 10 || code == 13) {
                    // just in case we meet a newline we must restart.
                    cc = 0;
                } else {
                    // ordinary character --> advance one column
                    cc++;
                }
            }

            // based on starting column, replace any TAB characters in the string we actually
            // have to display with spaces so that they align to columns multiple of 8.
            while ((pos = str.search("\t")) >= 0) {
                var indent = "        ".substr(0, 8 - (cc + pos) % 8);
                str = str.substr(0, pos) + indent + str.substr(pos + 1);
            }
        }

        if (!found) {
            prevLineBottom = box.bottom;
        }
        drawText(str, box);
    }

    function drawText(str, box) {
        // In IE the box height will be approximately lineHeight, while in
        // other browsers it'll (correctly) be the height of the bounding
        // box for the current text/font.  Which is to say, IE sucks again.
        // The only good solution I can think of is to measure the text
        // ourselves and center the bounding box.
        if (microsoft && !isNaN(lineHeight)) {
            var height = getFontHeight(font);
            var top = (box.top + box.bottom - height) / 2;
            box = {
                top    : top,
                right  : box.right,
                bottom : top + height,
                left   : box.left,
                height : height,
                width  : box.right - box.left
            };
        }

        // var path = new Path({ stroke: { color: "red" }});
        // path.moveTo(box.left, box.top)
        //     .lineTo(box.right, box.top)
        //     .lineTo(box.right, box.bottom)
        //     .lineTo(box.left, box.bottom)
        //     .close();
        // group.append(path);

        switch (textTransform) {
          case "uppercase":
            str = str.toUpperCase();
            break;
          case "lowercase":
            str = str.toLowerCase();
            break;
          case "capitalize":
            str = str.replace(/(?:^|\s)\S/g, function (l) { return l.toUpperCase(); });
            break;
        }

        var text = new TextRect(
            str, new Rect([ box.left, box.top ],
                              [ box.width, box.height ]),
            {
                font: font,
                fill: { color: color }
            }
        );
        group.append(text);
    }

    function decorate(box) {
        line(underline, box.bottom);
        line(lineThrough, box.bottom - box.height / 2.7);
        line(overline, box.top);
        function line(color, ypos) {
            if (color) {
                var width = fontSize / 12;
                var path = new Path({ stroke: {
                    width: width,
                    color: color
                }});

                ypos -= width;
                path.moveTo(box.left, ypos)
                    .lineTo(box.right, ypos);
                group.append(path);
            }
        }
    }
}

function groupInStackingContext(element, group, zIndex) {
    var main;
    if (zIndex != "auto") {
        // use the current stacking context
        main = nodeInfo._stackingContext.group;
        zIndex = parseFloat(zIndex);
    } else {
        // normal flow — use given container.  we still have to
        // figure out where should we insert this element with the
        // assumption that its z-index is zero, as the group might
        // already contain elements with higher z-index.
        main = group;
        zIndex = 0;
    }
    var a = main.children;
    for (var i = 0; i < a.length; ++i) {
        if (a[i]._dom_zIndex != null && a[i]._dom_zIndex > zIndex) {
            break;
        }
    }

    var tmp = new Group();
    main.insert(i, tmp);
    tmp._dom_zIndex = zIndex;

    if (main !== group) {
        // console.log("Placing", element, "in", nodeInfo._stackingContext.element, "at position", i, " / ", a.length);
        // console.log(a.slice(i+1));

        // if (nodeInfo._matrix) {
        //     tmp.transform(nodeInfo._matrix);
        // }
        if (nodeInfo._clipbox) {
            var m = nodeInfo._matrix.invert();
            var r = nodeInfo._clipbox.transformCopy(m);
            setClipping$1(tmp, Path.fromRect(r));
            // console.log(r);
            // tmp.append(Path.fromRect(r));
            // tmp.append(new Text(element.className || element.id, r.topLeft()));
        }
    }

    return tmp;
}

function renderElement(element, container) {
    var style = getComputedStyle$1(element);

    updateCounters(style);

    if (/^(style|script|link|meta|iframe|svg|col|colgroup)$/i.test(element.tagName)) {
        return;
    }

    if (nodeInfo._clipbox == null) {
        return;
    }

    var opacity = parseFloat(getPropertyValue(style, "opacity"));
    var visibility = getPropertyValue(style, "visibility");
    var display = getPropertyValue(style, "display");

    if (opacity === 0 || visibility == "hidden" || display == "none") {
        return;
    }

    var tr = getTransform(style);
    var group;

    var zIndex = getPropertyValue(style, "z-index");
    if ((tr || opacity < 1) && zIndex == "auto") {
        zIndex = 0;
    }
    group = groupInStackingContext(element, container, zIndex);

    // XXX: remove at some point
    // group._pdfElement = element;
    // group.options._pdfDebug = "";
    // if (element.id) {
    //     group.options._pdfDebug = "#" + element.id;
    // }
    // if (element.className) {
    //     group.options._pdfDebug += "." + element.className.split(" ").join(".");
    // }

    if (opacity < 1) {
        group.opacity(opacity * group.opacity());
    }

    pushNodeInfo(element, style, group);

    if (!tr) {
        _renderWithPseudoElements(element, group);
    }
    else {
        saveStyle(element, function(){
            // must clear transform, so getBoundingClientRect returns correct values.
            pleaseSetPropertyValue(element.style, "transform", "none", "important");

            // must also clear transitions, so correct values are returned *immediately*
            pleaseSetPropertyValue(element.style, "transition", "none", "important");

            // the presence of any transform makes it behave like it had position: relative,
            // because why not.
            // http://meyerweb.com/eric/thoughts/2011/09/12/un-fixing-fixed-elements-with-css-transforms/
            if (getPropertyValue(style, "position") == "static") {
                // but only if it's not already positioned. :-/
                pleaseSetPropertyValue(element.style, "position", "relative", "important");
            }

            // must translate to origin before applying the CSS
            // transformation, then translate back.
            var bbox = element.getBoundingClientRect();
            var x = bbox.left + tr.origin[0];
            var y = bbox.top + tr.origin[1];
            var m = [ 1, 0, 0, 1, -x, -y ];
            m = mmul$1(m, tr.matrix);
            m = mmul$1(m, [ 1, 0, 0, 1, x, y ]);
            m = setTransform$1(group, m);

            nodeInfo._matrix = nodeInfo._matrix.multiplyCopy(m);

            _renderWithPseudoElements(element, group);
        });
    }

    popNodeInfo();

    //drawDebugBox(element.getBoundingClientRect(), container);
}

// function drawDebugBox(box, group, color) {
//     var path = Path.fromRect(new geo.Rect([ box.left, box.top ], [ box.width, box.height ]));
//     if (color) {
//         path.stroke(color);
//     }
//     group.append(path);
// }

// function dumpTextNode(node) {
//     var txt = node.data.replace(/^\s+/, "");
//     if (txt.length < 100) {
//         console.log(node.data.length + ": |" + txt);
//     } else {
//         console.log(node.data.length + ": |" + txt.substr(0, 50) + "|...|" + txt.substr(-50));
//     }
// }

function mmul$1(a, b) {
    var a1 = a[0], b1 = a[1], c1 = a[2], d1 = a[3], e1 = a[4], f1 = a[5];
    var a2 = b[0], b2 = b[1], c2 = b[2], d2 = b[3], e2 = b[4], f2 = b[5];
    return [
        a1*a2 + b1*c2,          a1*b2 + b1*d2,
        c1*a2 + d1*c2,          c1*b2 + d1*d2,
        e1*a2 + f1*c2 + e2,     e1*b2 + f1*d2 + f2
    ];
}

exports.drawing = drawing;
exports.geometry = geometry;
exports.pdf = pdf;
exports.exportPDF = exportPDF;
exports.exportImage = exportImage;
exports.exportSVG = exportSVG;
exports.animationFrame = animationFrameProxy;
exports.Class = Class;
exports.Color = Color;
exports.htmlEncode = htmlEncode;
exports.logToConsole = logToConsole;
exports.Observable = Observable;
exports.saveAs = saveAs;
exports.support = support;
exports.template = template$1;
exports.throttle = throttle;
exports.parseColor = parseColor;
exports.namedColors = namedColors;
exports.Animation = Animation;
exports.AnimationFactory = AnimationFactory;
exports.Arc = Arc$2;
exports.BaseNode = BaseNode;
exports.Circle = Circle$1;
exports.Element = Element$1;
exports.Gradient = Gradient;
exports.GradientStop = GradientStop;
exports.Group = Group;
exports.Image = Image$1;
exports.Layout = Layout;
exports.LinearGradient = LinearGradient;
exports.MultiPath = MultiPath;
exports.ObserversMixin = ObserversMixin;
exports.OptionsStore = OptionsStore;
exports.Path = Path;
exports.PathParser = PathParser;
exports.QuadNode = QuadNode;
exports.RadialGradient = RadialGradient;
exports.Rect = Rect$2;
exports.ShapesQuadTree = ShapesQuadTree;
exports.Surface = Surface;
exports.SurfaceFactory = SurfaceFactory;
exports.Text = Text;
exports.align = align;
exports.fit = fit;
exports.stack = stack;
exports.vAlign = vAlign;
exports.vStack = vStack;
exports.vWrap = vWrap;
exports.wrap = wrap;
exports.drawDOM = drawDOM;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvbWl4aW5zL29ic2VydmVycy1taXhpbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvY29tbW9uL2FuaW1hdGlvbi1mcmFtZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvY29tbW9uL2NsYXNzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9jb21tb24vaHRtbC1lbmNvZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NvbW1vbi9sb2ctdG8tY29uc29sZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvY29tbW9uL29ic2VydmFibGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NvbW1vbi9zYXZlLWFzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9jb21tb24vc3VwcG9ydC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvY29tbW9uL3RlbXBsYXRlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9jb21tb24vdGhyb3R0bGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NvbW1vbi9jb2xvci9uYW1lZC1jb2xvcnMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NvbW1vbi9jb2xvci9wYXJzZS1jb2xvci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvY29tbW9uL2NvbG9yL2NvbG9yLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2FwcGVuZC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9hcmFiaWMtdG8tcm9tYW4uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvY3JlYXRlLXByb21pc2UuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvZGVmaW5lZC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9kZWZpbml0aW9uLWlkLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2NvbnN0YW50cy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9kZWcuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvZW5jb2RlLXV0Zi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9lbmNvZGUtYmFzZTY0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2V2ZW50LWNvb3JkaW5hdGVzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2V2ZW50LWVsZW1lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvaXMtdHJhbnNwYXJlbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3V0aWwvbGFzdC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9saW1pdC12YWx1ZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9tZXJnZS1zb3J0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL3Byb21pc2UtYWxsLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL3JhZC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvdXRpbC9yb3VuZC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvdXRpbC92YWx1ZS1vci1kZWZhdWx0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2JpbmQtZXZlbnRzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2VsZW1lbnQtb2Zmc2V0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2VsZW1lbnQtc3R5bGVzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2VsZW1lbnQtc2l6ZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvdXRpbC91bmJpbmQtZXZlbnRzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2VsZW1lbnQtcGFkZGluZy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvYWNjZXNzb3JzL2RlZmluZS1hY2Nlc3NvcnMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdHJpeC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvdG8tbWF0cml4LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS9wb2ludC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvc2l6ZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvcmVjdC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvbWF0aC9lbGxpcHNlLWV4dHJlbWUtYW5nbGVzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS9jaXJjbGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L2NvbnN0YW50cy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvbWF0aC9jbG9zZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvbWF0aC9jbG9zZS1vci1sZXNzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS9tYXRoL2xpbmUtaW50ZXJzZWN0aW9uLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS90cmFuc2Zvcm1hdGlvbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvZ2VvbWV0cnkvdHJhbnNmb3JtLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS9hcmMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2FjY2Vzc29ycy9kZWZpbmUtcG9pbnQtYWNjZXNzb3JzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS9tYXRoL2lzLW91dC1vZi1lbmQtcG9pbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdGgvY2FsY3VsYXRlLWN1cnZlLWF0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS9tYXRoL3RvLWN1YmljLXBvbHlub21pYWwuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdGgvY29tcGxleC1udW1iZXIuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdGgvc29sdmUtY3ViaWMtZXF1YXRpb24uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdGgvaGFzLXJvb3RzLWluLXJhbmdlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS9tYXRoL2N1cnZlLWludGVyc2VjdGlvbnMtY291bnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2dlb21ldHJ5L21hdGgvbGluZS1pbnRlcnNlY3Rpb25zLWNvdW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9nZW9tZXRyeS9zZWdtZW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy91dGlsL2VsZW1lbnQtc2NhbGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3RleHQtbWV0cmljcy9scnUtY2FjaGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3RleHQtbWV0cmljcy91dGlsLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy90ZXh0LW1ldHJpY3MvdGV4dC1tZXRyaWNzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy90ZXh0LW1ldHJpY3MvbWVhc3VyZS10ZXh0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9jb3JlL29wdGlvbnMtc3RvcmUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy9lbGVtZW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9taXhpbnMvcGFpbnRhYmxlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9taXhpbnMvbWVhc3VyYWJsZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvYWNjZXNzb3JzL2RlZmluZS1nZW9tZXRyeS1hY2Nlc3NvcnMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy9jaXJjbGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy9lbGVtZW50cy1hcnJheS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvc2hhcGVzL2dlb21ldHJ5LWVsZW1lbnRzLWFycmF5LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zaGFwZXMvdXRpbHMvZWxlbWVudHMtYm91bmRpbmctYm94LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zaGFwZXMvdXRpbHMvZWxlbWVudHMtY2xpcHBlbmQtYm91bmRpbmctYm94LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zaGFwZXMvbXVsdGktcGF0aC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvcGFyc2luZy9zaGFwZS1tYXAuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3BhcnNpbmcvcGF0aC1wYXJzZXIuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy9wYXRoLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zaGFwZXMvYXJjLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zaGFwZXMvdGV4dC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvc2hhcGVzL2ltYWdlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9taXhpbnMvdHJhdmVyc2FibGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3NoYXBlcy9ncm91cC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L3RyYW5zbGF0ZS10by1wb2ludC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L2FsaWduLXN0YXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9hbGlnbm1lbnQvYWxpZ24tc3RhcnQtcmV2ZXJzZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvc2hhcGVzL2xheW91dC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvc2hhcGVzL3JlY3QuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2FsaWdubWVudC9hbGlnbi1lbGVtZW50cy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L2FsaWduLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9hbGlnbm1lbnQvdi1hbGlnbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L3N0YWNrLWVsZW1lbnRzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9hbGlnbm1lbnQvY3JlYXRlLXN0YWNrLWVsZW1lbnRzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9hbGlnbm1lbnQvc3RhY2suanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2FsaWdubWVudC92LXN0YWNrLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9hbGlnbm1lbnQvd3JhcC1lbGVtZW50cy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvYWxpZ25tZW50L3dyYXAuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2FsaWdubWVudC92LXdyYXAuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2FsaWdubWVudC9maXQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2dyYWRpZW50cy9zdG9wcy1hcnJheS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvYWNjZXNzb3JzL2RlZmluZS1vcHRpb25zLWFjY2Vzc29ycy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvZ3JhZGllbnRzL2dyYWRpZW50LXN0b3AuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2dyYWRpZW50cy9ncmFkaWVudC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvZ3JhZGllbnRzL2xpbmVhci1ncmFkaWVudC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvZ3JhZGllbnRzL3JhZGlhbC1ncmFkaWVudC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvYW5pbWF0aW9ucy9lYXNpbmctZnVuY3Rpb25zLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9hbmltYXRpb25zL2FuaW1hdGlvbi1mYWN0b3J5LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9hbmltYXRpb25zL2FuaW1hdGlvbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvY29yZS9zdXJmYWNlLWZhY3RvcnkuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NvcmUvc3VyZmFjZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvY29yZS9iYXNlLW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy91dGlscy9yZW5kZXItYXR0cmlidXRlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zdmcvdXRpbHMvcmVuZGVyLWFsbC1hdHRyaWJ1dGVzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zdmcvdXRpbHMvcmVuZGVyLXN0eWxlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zdmcvbm9kZS1tYXAuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9jb25zdGFudHMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy91dGlscy9yZW5kZXItc3ZnLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zdmcvbm9kZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvc3ZnL2dyYWRpZW50LXN0b3Atbm9kZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvc3ZnL2dyYWRpZW50LW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9saW5lYXItZ3JhZGllbnQtbm9kZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvc3ZnL3JhZGlhbC1ncmFkaWVudC1ub2RlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zdmcvY2xpcC1ub2RlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zdmcvZGVmaW5pdGlvbi1ub2RlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zdmcvcm9vdC1ub2RlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zdmcvc3VyZmFjZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvc3ZnL2dyb3VwLW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NvcmUvY29uc3RhbnRzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zdmcvcGF0aC1ub2RlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9zdmcvYXJjLW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9jaXJjbGUtbm9kZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvc3ZnL3JlY3Qtbm9kZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvc3ZnL2ltYWdlLW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy90ZXh0LW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9tdWx0aS1wYXRoLW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9leHBvcnQtZ3JvdXAuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NhbnZhcy9ub2RlLW1hcC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvY2FudmFzL3V0aWxzL3JlbmRlci1wYXRoLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9jYW52YXMvbm9kZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvY2FudmFzL2dyb3VwLW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NhbnZhcy9yb290LW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3NlYXJjaC9xdWFkLXJvb3QuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3NlYXJjaC9xdWFkLW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3NlYXJjaC9zaGFwZXMtcXVhZC10cmVlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9jYW52YXMvc3VyZmFjZS1jdXJzb3IuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NhbnZhcy9zdXJmYWNlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9jYW52YXMvcGF0aC1ub2RlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9jYW52YXMvYXJjLW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NhbnZhcy9jaXJjbGUtbm9kZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvY2FudmFzL3JlY3Qtbm9kZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvY2FudmFzL2ltYWdlLW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NhbnZhcy90ZXh0LW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NhbnZhcy9tdWx0aS1wYXRoLW5vZGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2NhbnZhcy9leHBvcnQtaW1hZ2UuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3N2Zy9leHBvcnQtc3ZnLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9wZGYvdXRpbHMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3BkZi90dGYuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL3BkZi9kZWZsYXRlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1kcmF3aW5nL3NyYy9wZGYvY29yZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZHJhd2luZy9zcmMvcGRmL2RyYXdpbmcuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWRyYXdpbmcvc3JjL2h0bWwvY29yZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IE9ic2VydmVyc01peGluID0ge1xuICAgIGV4dGVuZDogZnVuY3Rpb24ocHJvdG8pIHtcbiAgICAgICAgZm9yIChsZXQgbWV0aG9kIGluIHRoaXMpIHtcbiAgICAgICAgICAgIGlmIChtZXRob2QgIT09IFwiZXh0ZW5kXCIpIHtcbiAgICAgICAgICAgICAgICBwcm90b1ttZXRob2RdID0gdGhpc1ttZXRob2RdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG9ic2VydmVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX29ic2VydmVycyA9IHRoaXMuX29ic2VydmVycyB8fCBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29ic2VydmVycztcbiAgICB9LFxuXG4gICAgYWRkT2JzZXJ2ZXI6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9vYnNlcnZlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVycyA9IFsgZWxlbWVudCBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzLnB1c2goZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIHJlbW92ZU9ic2VydmVyOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzKCk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gb2JzZXJ2ZXJzLmluZGV4T2YoZWxlbWVudCk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICB0cmlnZ2VyOiBmdW5jdGlvbihtZXRob2ROYW1lLCBldmVudCkge1xuICAgICAgICBjb25zdCBvYnNlcnZlcnMgPSB0aGlzLl9vYnNlcnZlcnM7XG5cbiAgICAgICAgaWYgKG9ic2VydmVycyAmJiAhdGhpcy5fc3VzcGVuZGVkKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBvYnNlcnZlcnMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIGxldCBvYnNlcnZlciA9IG9ic2VydmVyc1tpZHhdO1xuICAgICAgICAgICAgICAgIGlmIChvYnNlcnZlclttZXRob2ROYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlclttZXRob2ROYW1lXShldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBvcHRpb25zQ2hhbmdlOiBmdW5jdGlvbihlID0ge30pIHtcbiAgICAgICAgZS5lbGVtZW50ID0gdGhpcztcbiAgICAgICAgdGhpcy50cmlnZ2VyKFwib3B0aW9uc0NoYW5nZVwiLCBlKTtcbiAgICB9LFxuXG4gICAgZ2VvbWV0cnlDaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoXCJnZW9tZXRyeUNoYW5nZVwiLCB7XG4gICAgICAgICAgICBlbGVtZW50OiB0aGlzXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBzdXNwZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fc3VzcGVuZGVkID0gKHRoaXMuX3N1c3BlbmRlZCB8fCAwKSArIDE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICByZXN1bWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9zdXNwZW5kZWQgPSBNYXRoLm1heCgodGhpcy5fc3VzcGVuZGVkIHx8IDApIC0gMSwgMCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBfb2JzZXJ2ZXJGaWVsZDogZnVuY3Rpb24oZmllbGQsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzW2ZpZWxkXSkge1xuICAgICAgICAgICAgdGhpc1tmaWVsZF0ucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1tmaWVsZF0gPSB2YWx1ZTtcbiAgICAgICAgdmFsdWUuYWRkT2JzZXJ2ZXIodGhpcyk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgT2JzZXJ2ZXJzTWl4aW47IiwiY29uc3Qgd25kID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9O1xuXG5jb25zdCBhbmltYXRpb25GcmFtZSA9IHduZC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgd25kLndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICB3bmQubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgIHduZC5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgIHduZC5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihjYWxsYmFjaykgeyBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApOyB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhbmltYXRpb25GcmFtZVByb3h5KGNhbGxiYWNrKSB7XG4gICAgYW5pbWF0aW9uRnJhbWUuY2FsbCh3bmQsIGNhbGxiYWNrKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENsYXNzIHtcbn0iLCJjb25zdCBhbXBSZWdFeHAgPSAvJi9nO1xuY29uc3QgbHRSZWdFeHAgPSAvPC9nO1xuY29uc3QgcXVvdGVSZWdFeHAgPSAvXCIvZztcbmNvbnN0IGFwb3NSZWdFeHAgPSAvJy9nO1xuY29uc3QgZ3RSZWdFeHAgPSAvPi9nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBodG1sRW5jb2RlKHZhbHVlKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSkucmVwbGFjZShhbXBSZWdFeHAsIFwiJmFtcDtcIikucmVwbGFjZShsdFJlZ0V4cCwgXCImbHQ7XCIpLnJlcGxhY2UoZ3RSZWdFeHAsIFwiJmd0O1wiKS5yZXBsYWNlKHF1b3RlUmVnRXhwLCBcIiZxdW90O1wiKS5yZXBsYWNlKGFwb3NSZWdFeHAsIFwiJiMzOTtcIik7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2dUb0NvbnNvbGUobWVzc2FnZSkge1xuICAgIGNvbnN0IGNvbnNvbGUgPSB3aW5kb3cuY29uc29sZTtcblxuICAgIGlmICh0eXBlb2YoY29uc29sZSkgIT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLmxvZykge1xuICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICB9XG59IiwiaW1wb3J0IENsYXNzIGZyb20gJy4vY2xhc3MnO1xuXG5jbGFzcyBPYnNlcnZhYmxlIGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIH1cblxuICAgIGJpbmQoZXZlbnROYW1lLCBoYW5kbGVycywgb25lKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50TmFtZXMgPSBnZXRBcnJheShldmVudE5hbWUpO1xuICAgICAgICBjb25zdCBoYW5kbGVyc0lzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKGhhbmRsZXJzKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gZXZlbnROYW1lcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGhhbmRsZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGZpZWxkIGluIGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYmluZChmaWVsZCwgZXZlbnROYW1lW2ZpZWxkXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IGV2ZW50TmFtZXNbaWR4XTtcblxuICAgICAgICAgICAgbGV0IGhhbmRsZXIgPSBoYW5kbGVyc0lzRnVuY3Rpb24gPyBoYW5kbGVycyA6IGhhbmRsZXJzW2V2ZW50TmFtZV07XG5cbiAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbCA9IGhhbmRsZXI7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIgPSAoKSA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuYmluZChldmVudE5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5vcmlnaW5hbCA9IG9yaWdpbmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgZXZlbnRzID0gdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gPSB0aGlzLl9ldmVudHNbZXZlbnROYW1lXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBldmVudHMucHVzaChoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9uZShldmVudE5hbWVzLCBoYW5kbGVycykge1xuICAgICAgICByZXR1cm4gdGhpcy5iaW5kKGV2ZW50TmFtZXMsIGhhbmRsZXJzLCB0cnVlKTtcbiAgICB9XG5cbiAgICBmaXJzdChldmVudE5hbWUsIGhhbmRsZXJzKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50TmFtZXMgPSBnZXRBcnJheShldmVudE5hbWUpO1xuICAgICAgICBjb25zdCBoYW5kbGVyc0lzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKGhhbmRsZXJzKTtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAwLCBsZW5ndGggPSBldmVudE5hbWVzLmxlbmd0aDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3QgZXZlbnROYW1lID0gZXZlbnROYW1lc1tpZHhdO1xuXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNJc0Z1bmN0aW9uID8gaGFuZGxlcnMgOiBoYW5kbGVyc1tldmVudE5hbWVdO1xuXG4gICAgICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tldmVudE5hbWVdID0gdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gfHwgW107XG4gICAgICAgICAgICAgICAgZXZlbnRzLnVuc2hpZnQoaGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0cmlnZ2VyKGV2ZW50TmFtZSwgZSA9IHt9KSB7XG4gICAgICAgIGxldCBldmVudHMgPSB0aGlzLl9ldmVudHNbZXZlbnROYW1lXTtcblxuICAgICAgICBpZiAoZXZlbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBldmVudHMubGVuZ3RoO1xuXG4gICAgICAgICAgICBlLnNlbmRlciA9IHRoaXM7XG4gICAgICAgICAgICBlLl9kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQ7XG4gICAgICAgICAgICBlLmlzRGVmYXVsdFByZXZlbnRlZCA9IGlzRGVmYXVsdFByZXZlbnRlZDtcblxuICAgICAgICAgICAgZXZlbnRzID0gZXZlbnRzLnNsaWNlKCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBldmVudHNbaWR4XS5jYWxsKHRoaXMsIGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZS5fZGVmYXVsdFByZXZlbnRlZCA9PT0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB1bmJpbmQoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tldmVudE5hbWVdO1xuXG4gICAgICAgIGlmIChldmVudE5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IGV2ZW50cy5sZW5ndGggLSAxOyBpZHggPj0gMDsgaWR4LS0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50c1tpZHhdID09PSBoYW5kbGVyIHx8IGV2ZW50c1tpZHhdLm9yaWdpbmFsID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbmZ1bmN0aW9uIGdldEFycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IFsgdmFsdWUgXSA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICB0aGlzLl9kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNEZWZhdWx0UHJldmVudGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWZhdWx0UHJldmVudGVkID09PSB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBPYnNlcnZhYmxlOyIsIi8vIFhYWDogdGhlIGZvbGxvd2luZyB3aWxsIG5vdCB3b3JrIHdpdGggSUU5IChyZXF1aXJlcyBzZXJ2ZXIgcHJveHkpLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2F2ZUFzKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGRhdGFVUkksIGZpbGVOYW1lIH0gPSBvcHRpb25zO1xuICAgIGxldCBkYXRhID0gZGF0YVVSSTtcblxuICAgIGlmICh0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiICYmIHdpbmRvdy5CbG9iKSB7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gZGF0YS5zcGxpdChcIjtiYXNlNjQsXCIpO1xuICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IHBhcnRzWzBdO1xuICAgICAgICBjb25zdCBiYXNlNjQgPSBhdG9iKHBhcnRzWzFdKTtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBuZXcgVWludDhBcnJheShiYXNlNjQubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgYmFzZTY0Lmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGFycmF5W2lkeF0gPSBiYXNlNjQuY2hhckNvZGVBdChpZHgpO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSBuZXcgQmxvYihbIGFycmF5LmJ1ZmZlciBdLCB7IHR5cGU6IGNvbnRlbnRUeXBlIH0pO1xuICAgIH1cbiAgICBpZiAobmF2aWdhdG9yLm1zU2F2ZUJsb2IpIHtcbiAgICAgICAgbmF2aWdhdG9yLm1zU2F2ZUJsb2IoZGF0YSwgZmlsZU5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgbGluay5kb3dubG9hZCA9IGZpbGVOYW1lO1xuICAgICAgICBkYXRhID0gbGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChkYXRhKTtcbiAgICAgICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7XG4gICAgICAgIGUuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCB0cnVlLCBmYWxzZSwgd2luZG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgIDAsIDAsIDAsIDAsIDAsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTtcbiAgICAgICAgbGluay5kaXNwYXRjaEV2ZW50KGUpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgfVxufSIsImNvbnN0IHN1cHBvcnQgPSB7fTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3VwcG9ydC5icm93c2VyID0gKGZ1bmN0aW9uKHVzZXJBZ2VudCkge1xuICAgICAgICBjb25zdCBicm93c2VyUnhzID0ge1xuICAgICAgICAgICAgZWRnZTogLyhlZGdlKVsgXFwvXShbXFx3Ll0rKS9pLFxuICAgICAgICAgICAgd2Via2l0OiAvKGNocm9tZSlbIFxcL10oW1xcdy5dKykvaSxcbiAgICAgICAgICAgIHNhZmFyaTogLyh3ZWJraXQpWyBcXC9dKFtcXHcuXSspL2ksXG4gICAgICAgICAgICBvcGVyYTogLyhvcGVyYSkoPzouKnZlcnNpb258KVsgXFwvXShbXFx3Ll0rKS9pLFxuICAgICAgICAgICAgbXNpZTogLyhtc2llXFxzfHRyaWRlbnQuKj8gcnY6KShbXFx3Ll0rKS9pLFxuICAgICAgICAgICAgbW96aWxsYTogLyhtb3ppbGxhKSg/Oi4qPyBydjooW1xcdy5dKyl8KS9pXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGJyb3dzZXI7XG5cbiAgICAgICAgZm9yIChsZXQgYWdlbnQgaW4gYnJvd3NlclJ4cykge1xuICAgICAgICAgICAgaWYgKGJyb3dzZXJSeHMuaGFzT3duUHJvcGVydHkoYWdlbnQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goYnJvd3NlclJ4c1thZ2VudF0pO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBicm93c2VyID0ge307XG4gICAgICAgICAgICAgICAgICAgIGJyb3dzZXJbYWdlbnRdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJvd3NlclttYXRjaFsxXS50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiIFwiKVswXS5zcGxpdChcIi9cIilbMF1dID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0gcGFyc2VJbnQoZG9jdW1lbnQuZG9jdW1lbnRNb2RlIHx8IG1hdGNoWzJdLCAxMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJyb3dzZXI7XG5cbiAgICB9KSh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN1cHBvcnQ7XG5cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRlbXBsYXRlKCkge1xuICAgIC8vIFhYWDogbm8gdGVtcGxhdGUgZW5naW5lIGZvciBub3dcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmcgdGVtcGxhdGUgbm90IHlldCBzdXBwb3J0ZWQuICBQYXNzIGEgZnVuY3Rpb24gYW5kIHVzZSB5b3VyIHByZWZlcnJlZCB0ZW1wbGF0ZSBlbmdpbmUuXCIpO1xufSIsImZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRocm90dGxlKGZuLCBkZWxheSkge1xuICAgIGxldCBsYXN0RXhlY1RpbWUgPSAwO1xuICAgIGxldCB0aW1lb3V0O1xuXG4gICAgaWYgKCFkZWxheSB8fCBkZWxheSA8PSAwKSB7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICB9XG5cbiAgICBjb25zdCB0aHJvdHRsZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgZWxhcHNlZCA9IG5vdygpIC0gbGFzdEV4ZWNUaW1lO1xuICAgICAgICBjb25zdCBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICAgIGNvbnN0IGV4ZWMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICAgICAgbGFzdEV4ZWNUaW1lID0gbm93KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZmlyc3QgZXhlY3V0aW9uXG4gICAgICAgIGlmICghbGFzdEV4ZWNUaW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhlYygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbGFwc2VkID4gZGVsYXkpIHtcbiAgICAgICAgICAgIGV4ZWMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGV4ZWMsIGRlbGF5IC0gZWxhcHNlZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhyb3R0bGVkLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgfTtcblxuICAgIHJldHVybiB0aHJvdHRsZWQ7XG59IiwiY29uc3QgbmFtZWRDb2xvcnMgPSB7XG4gICAgYWxpY2VibHVlOiBcImYwZjhmZlwiLCBhbnRpcXVld2hpdGU6IFwiZmFlYmQ3XCIsIGFxdWE6IFwiMDBmZmZmXCIsXG4gICAgYXF1YW1hcmluZTogXCI3ZmZmZDRcIiwgYXp1cmU6IFwiZjBmZmZmXCIsIGJlaWdlOiBcImY1ZjVkY1wiLFxuICAgIGJpc3F1ZTogXCJmZmU0YzRcIiwgYmxhY2s6IFwiMDAwMDAwXCIsIGJsYW5jaGVkYWxtb25kOiBcImZmZWJjZFwiLFxuICAgIGJsdWU6IFwiMDAwMGZmXCIsIGJsdWV2aW9sZXQ6IFwiOGEyYmUyXCIsIGJyb3duOiBcImE1MmEyYVwiLFxuICAgIGJ1cmx5d29vZDogXCJkZWI4ODdcIiwgY2FkZXRibHVlOiBcIjVmOWVhMFwiLCBjaGFydHJldXNlOiBcIjdmZmYwMFwiLFxuICAgIGNob2NvbGF0ZTogXCJkMjY5MWVcIiwgY29yYWw6IFwiZmY3ZjUwXCIsIGNvcm5mbG93ZXJibHVlOiBcIjY0OTVlZFwiLFxuICAgIGNvcm5zaWxrOiBcImZmZjhkY1wiLCBjcmltc29uOiBcImRjMTQzY1wiLCBjeWFuOiBcIjAwZmZmZlwiLFxuICAgIGRhcmtibHVlOiBcIjAwMDA4YlwiLCBkYXJrY3lhbjogXCIwMDhiOGJcIiwgZGFya2dvbGRlbnJvZDogXCJiODg2MGJcIixcbiAgICBkYXJrZ3JheTogXCJhOWE5YTlcIiwgZGFya2dyZXk6IFwiYTlhOWE5XCIsIGRhcmtncmVlbjogXCIwMDY0MDBcIixcbiAgICBkYXJra2hha2k6IFwiYmRiNzZiXCIsIGRhcmttYWdlbnRhOiBcIjhiMDA4YlwiLCBkYXJrb2xpdmVncmVlbjogXCI1NTZiMmZcIixcbiAgICBkYXJrb3JhbmdlOiBcImZmOGMwMFwiLCBkYXJrb3JjaGlkOiBcIjk5MzJjY1wiLCBkYXJrcmVkOiBcIjhiMDAwMFwiLFxuICAgIGRhcmtzYWxtb246IFwiZTk5NjdhXCIsIGRhcmtzZWFncmVlbjogXCI4ZmJjOGZcIiwgZGFya3NsYXRlYmx1ZTogXCI0ODNkOGJcIixcbiAgICBkYXJrc2xhdGVncmF5OiBcIjJmNGY0ZlwiLCBkYXJrc2xhdGVncmV5OiBcIjJmNGY0ZlwiLCBkYXJrdHVycXVvaXNlOiBcIjAwY2VkMVwiLFxuICAgIGRhcmt2aW9sZXQ6IFwiOTQwMGQzXCIsIGRlZXBwaW5rOiBcImZmMTQ5M1wiLCBkZWVwc2t5Ymx1ZTogXCIwMGJmZmZcIixcbiAgICBkaW1ncmF5OiBcIjY5Njk2OVwiLCBkaW1ncmV5OiBcIjY5Njk2OVwiLCBkb2RnZXJibHVlOiBcIjFlOTBmZlwiLFxuICAgIGZpcmVicmljazogXCJiMjIyMjJcIiwgZmxvcmFsd2hpdGU6IFwiZmZmYWYwXCIsIGZvcmVzdGdyZWVuOiBcIjIyOGIyMlwiLFxuICAgIGZ1Y2hzaWE6IFwiZmYwMGZmXCIsIGdhaW5zYm9ybzogXCJkY2RjZGNcIiwgZ2hvc3R3aGl0ZTogXCJmOGY4ZmZcIixcbiAgICBnb2xkOiBcImZmZDcwMFwiLCBnb2xkZW5yb2Q6IFwiZGFhNTIwXCIsIGdyYXk6IFwiODA4MDgwXCIsXG4gICAgZ3JleTogXCI4MDgwODBcIiwgZ3JlZW46IFwiMDA4MDAwXCIsIGdyZWVueWVsbG93OiBcImFkZmYyZlwiLFxuICAgIGhvbmV5ZGV3OiBcImYwZmZmMFwiLCBob3RwaW5rOiBcImZmNjliNFwiLCBpbmRpYW5yZWQ6IFwiY2Q1YzVjXCIsXG4gICAgaW5kaWdvOiBcIjRiMDA4MlwiLCBpdm9yeTogXCJmZmZmZjBcIiwga2hha2k6IFwiZjBlNjhjXCIsXG4gICAgbGF2ZW5kZXI6IFwiZTZlNmZhXCIsIGxhdmVuZGVyYmx1c2g6IFwiZmZmMGY1XCIsIGxhd25ncmVlbjogXCI3Y2ZjMDBcIixcbiAgICBsZW1vbmNoaWZmb246IFwiZmZmYWNkXCIsIGxpZ2h0Ymx1ZTogXCJhZGQ4ZTZcIiwgbGlnaHRjb3JhbDogXCJmMDgwODBcIixcbiAgICBsaWdodGN5YW46IFwiZTBmZmZmXCIsIGxpZ2h0Z29sZGVucm9keWVsbG93OiBcImZhZmFkMlwiLCBsaWdodGdyYXk6IFwiZDNkM2QzXCIsXG4gICAgbGlnaHRncmV5OiBcImQzZDNkM1wiLCBsaWdodGdyZWVuOiBcIjkwZWU5MFwiLCBsaWdodHBpbms6IFwiZmZiNmMxXCIsXG4gICAgbGlnaHRzYWxtb246IFwiZmZhMDdhXCIsIGxpZ2h0c2VhZ3JlZW46IFwiMjBiMmFhXCIsIGxpZ2h0c2t5Ymx1ZTogXCI4N2NlZmFcIixcbiAgICBsaWdodHNsYXRlZ3JheTogXCI3Nzg4OTlcIiwgbGlnaHRzbGF0ZWdyZXk6IFwiNzc4ODk5XCIsIGxpZ2h0c3RlZWxibHVlOiBcImIwYzRkZVwiLFxuICAgIGxpZ2h0eWVsbG93OiBcImZmZmZlMFwiLCBsaW1lOiBcIjAwZmYwMFwiLCBsaW1lZ3JlZW46IFwiMzJjZDMyXCIsXG4gICAgbGluZW46IFwiZmFmMGU2XCIsIG1hZ2VudGE6IFwiZmYwMGZmXCIsIG1hcm9vbjogXCI4MDAwMDBcIixcbiAgICBtZWRpdW1hcXVhbWFyaW5lOiBcIjY2Y2RhYVwiLCBtZWRpdW1ibHVlOiBcIjAwMDBjZFwiLCBtZWRpdW1vcmNoaWQ6IFwiYmE1NWQzXCIsXG4gICAgbWVkaXVtcHVycGxlOiBcIjkzNzBkOFwiLCBtZWRpdW1zZWFncmVlbjogXCIzY2IzNzFcIiwgbWVkaXVtc2xhdGVibHVlOiBcIjdiNjhlZVwiLFxuICAgIG1lZGl1bXNwcmluZ2dyZWVuOiBcIjAwZmE5YVwiLCBtZWRpdW10dXJxdW9pc2U6IFwiNDhkMWNjXCIsIG1lZGl1bXZpb2xldHJlZDogXCJjNzE1ODVcIixcbiAgICBtaWRuaWdodGJsdWU6IFwiMTkxOTcwXCIsIG1pbnRjcmVhbTogXCJmNWZmZmFcIiwgbWlzdHlyb3NlOiBcImZmZTRlMVwiLFxuICAgIG1vY2Nhc2luOiBcImZmZTRiNVwiLCBuYXZham93aGl0ZTogXCJmZmRlYWRcIiwgbmF2eTogXCIwMDAwODBcIixcbiAgICBvbGRsYWNlOiBcImZkZjVlNlwiLCBvbGl2ZTogXCI4MDgwMDBcIiwgb2xpdmVkcmFiOiBcIjZiOGUyM1wiLFxuICAgIG9yYW5nZTogXCJmZmE1MDBcIiwgb3JhbmdlcmVkOiBcImZmNDUwMFwiLCBvcmNoaWQ6IFwiZGE3MGQ2XCIsXG4gICAgcGFsZWdvbGRlbnJvZDogXCJlZWU4YWFcIiwgcGFsZWdyZWVuOiBcIjk4ZmI5OFwiLCBwYWxldHVycXVvaXNlOiBcImFmZWVlZVwiLFxuICAgIHBhbGV2aW9sZXRyZWQ6IFwiZDg3MDkzXCIsIHBhcGF5YXdoaXA6IFwiZmZlZmQ1XCIsIHBlYWNocHVmZjogXCJmZmRhYjlcIixcbiAgICBwZXJ1OiBcImNkODUzZlwiLCBwaW5rOiBcImZmYzBjYlwiLCBwbHVtOiBcImRkYTBkZFwiLFxuICAgIHBvd2RlcmJsdWU6IFwiYjBlMGU2XCIsIHB1cnBsZTogXCI4MDAwODBcIiwgcmVkOiBcImZmMDAwMFwiLFxuICAgIHJvc3licm93bjogXCJiYzhmOGZcIiwgcm95YWxibHVlOiBcIjQxNjllMVwiLCBzYWRkbGVicm93bjogXCI4YjQ1MTNcIixcbiAgICBzYWxtb246IFwiZmE4MDcyXCIsIHNhbmR5YnJvd246IFwiZjRhNDYwXCIsIHNlYWdyZWVuOiBcIjJlOGI1N1wiLFxuICAgIHNlYXNoZWxsOiBcImZmZjVlZVwiLCBzaWVubmE6IFwiYTA1MjJkXCIsIHNpbHZlcjogXCJjMGMwYzBcIixcbiAgICBza3libHVlOiBcIjg3Y2VlYlwiLCBzbGF0ZWJsdWU6IFwiNmE1YWNkXCIsIHNsYXRlZ3JheTogXCI3MDgwOTBcIixcbiAgICBzbGF0ZWdyZXk6IFwiNzA4MDkwXCIsIHNub3c6IFwiZmZmYWZhXCIsIHNwcmluZ2dyZWVuOiBcIjAwZmY3ZlwiLFxuICAgIHN0ZWVsYmx1ZTogXCI0NjgyYjRcIiwgdGFuOiBcImQyYjQ4Y1wiLCB0ZWFsOiBcIjAwODA4MFwiLFxuICAgIHRoaXN0bGU6IFwiZDhiZmQ4XCIsIHRvbWF0bzogXCJmZjYzNDdcIiwgdHVycXVvaXNlOiBcIjQwZTBkMFwiLFxuICAgIHZpb2xldDogXCJlZTgyZWVcIiwgd2hlYXQ6IFwiZjVkZWIzXCIsIHdoaXRlOiBcImZmZmZmZlwiLFxuICAgIHdoaXRlc21va2U6IFwiZjVmNWY1XCIsIHllbGxvdzogXCJmZmZmMDBcIiwgeWVsbG93Z3JlZW46IFwiOWFjZDMyXCJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG5hbWVkQ29sb3JzOyIsImltcG9ydCBDbGFzcyBmcm9tICcuLi9jbGFzcyc7XG5pbXBvcnQgc3VwcG9ydCBmcm9tICcuLi9zdXBwb3J0JztcbmltcG9ydCBuYW1lZENvbG9ycyBmcm9tICcuL25hbWVkLWNvbG9ycyc7XG5cbmNvbnN0IGJyb3dzZXIgPSBzdXBwb3J0LmJyb3dzZXI7XG5cbmxldCBtYXRjaE5hbWVkQ29sb3IgPSAoY29sb3IpID0+IHtcbiAgICBjb25zdCBjb2xvck5hbWVzID0gT2JqZWN0LmtleXMobmFtZWRDb2xvcnMpO1xuICAgIGNvbG9yTmFtZXMucHVzaChcInRyYW5zcGFyZW50XCIpO1xuXG4gICAgY29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cChcIl4oXCIgKyBjb2xvck5hbWVzLmpvaW4oXCJ8XCIpICsgXCIpKFxcXFxXfCQpXCIsIFwiaVwiKTtcbiAgICBtYXRjaE5hbWVkQ29sb3IgPSAoY29sb3IpID0+IHJlZ2V4cC5leGVjKGNvbG9yKTtcblxuICAgIHJldHVybiByZWdleHAuZXhlYyhjb2xvcik7XG59O1xuXG5jbGFzcyBCYXNlQ29sb3IgZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoKSB7IHN1cGVyKCk7IH1cbiAgICB0b0hTVigpIHsgcmV0dXJuIHRoaXM7IH1cblxuICAgIHRvUkdCKCkgeyByZXR1cm4gdGhpczsgfVxuXG4gICAgdG9IZXgoKSB7IHJldHVybiB0aGlzLnRvQnl0ZXMoKS50b0hleCgpOyB9XG5cbiAgICB0b0J5dGVzKCkgeyByZXR1cm4gdGhpczsgfVxuXG4gICAgdG9Dc3MoKSB7IHJldHVybiBcIiNcIiArIHRoaXMudG9IZXgoKTsgfVxuXG4gICAgdG9Dc3NSZ2JhKCkge1xuICAgICAgICBjb25zdCByZ2IgPSB0aGlzLnRvQnl0ZXMoKTtcbiAgICAgICAgcmV0dXJuIGByZ2JhKCR7IHJnYi5yIH0sICR7IHJnYi5nIH0sICR7IHJnYi5iIH0sICR7IHBhcnNlRmxvYXQoKE51bWJlcih0aGlzLmEpKS50b0ZpeGVkKDMpKSB9KWA7XG4gICAgfVxuXG4gICAgdG9EaXNwbGF5KCkge1xuICAgICAgICBpZiAoYnJvd3Nlci5tc2llICYmIGJyb3dzZXIudmVyc2lvbiA8IDkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvQ3NzKCk7IC8vIG5vIFJHQkEgc3VwcG9ydDsgZG9lcyBpdCBzdXBwb3J0IGFueSBvcGFjaXR5IGluIGNvbG9ycz9cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50b0Nzc1JnYmEoKTtcbiAgICB9XG5cbiAgICBlcXVhbHMoYykge1xuICAgICAgICByZXR1cm4gYyA9PT0gdGhpcyB8fCBjICE9PSBudWxsICYmIHRoaXMudG9Dc3NSZ2JhKCkgPT09IHBhcnNlQ29sb3IoYykudG9Dc3NSZ2JhKCk7XG4gICAgfVxuXG4gICAgZGlmZihvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjMSA9IHRoaXMudG9CeXRlcygpO1xuICAgICAgICBjb25zdCBjMiA9IG90aGVyLnRvQnl0ZXMoKTtcblxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KChjMS5yIC0gYzIucikgKiAwLjMwLCAyKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5wb3coKGMxLmcgLSBjMi5nKSAqIDAuNTksIDIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnBvdygoYzEuYiAtIGMyLmIpICogMC4xMSwgMikpO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICBsZXQgYyA9IHRoaXMudG9CeXRlcygpO1xuICAgICAgICBpZiAoYyA9PT0gdGhpcykge1xuICAgICAgICAgICAgYyA9IG5ldyBCeXRlcyhjLnIsIGMuZywgYy5iLCBjLmEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfVxufVxuXG5jbGFzcyBSR0IgZXh0ZW5kcyBCYXNlQ29sb3Ige1xuICAgIGNvbnN0cnVjdG9yKHIsIGcsIGIsIGEpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICB0aGlzLmcgPSBnO1xuICAgICAgICB0aGlzLmIgPSBiO1xuICAgICAgICB0aGlzLmEgPSBhO1xuICAgIH1cblxuICAgIHRvSFNWKCkge1xuICAgICAgICBjb25zdCB7IHIsIGcsIGIgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICAgICAgY29uc3QgZGVsdGEgPSBtYXggLSBtaW47XG4gICAgICAgIGNvbnN0IHYgPSBtYXg7XG4gICAgICAgIGxldCBoLCBzO1xuXG4gICAgICAgIGlmIChkZWx0YSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBIU1YoMCwgMCwgdiwgdGhpcy5hKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXggIT09IDApIHtcbiAgICAgICAgICAgIHMgPSBkZWx0YSAvIG1heDtcbiAgICAgICAgICAgIGlmIChyID09PSBtYXgpIHtcbiAgICAgICAgICAgICAgICBoID0gKGcgLSBiKSAvIGRlbHRhO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChnID09PSBtYXgpIHtcbiAgICAgICAgICAgICAgICBoID0gMiArIChiIC0gcikgLyBkZWx0YTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaCA9IDQgKyAociAtIGcpIC8gZGVsdGE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGggKj0gNjA7XG4gICAgICAgICAgICBpZiAoaCA8IDApIHtcbiAgICAgICAgICAgICAgICBoICs9IDM2MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMgPSAwO1xuICAgICAgICAgICAgaCA9IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBIU1YoaCwgcywgdiwgdGhpcy5hKTtcbiAgICB9XG5cbiAgICB0b0hTTCgpIHtcbiAgICAgICAgY29uc3QgeyByLCBnLCBiIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgICAgIGxldCBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICAgICAgaCA9IHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZCA9IG1heCAtIG1pbjtcbiAgICAgICAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgICAgICAgIHN3aXRjaCAobWF4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSByOiBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgZzogaCA9IChiIC0gcikgLyBkICsgMjsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBiOiBoID0gKHIgLSBnKSAvIGQgKyA0OyBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgSFNMKGggKiA2MCwgcyAqIDEwMCwgbCAqIDEwMCwgdGhpcy5hKTtcbiAgICB9XG5cbiAgICB0b0J5dGVzKCkge1xuICAgICAgICByZXR1cm4gbmV3IEJ5dGVzKHRoaXMuciAqIDI1NSwgdGhpcy5nICogMjU1LCB0aGlzLmIgKiAyNTUsIHRoaXMuYSk7XG4gICAgfVxufVxuXG5jbGFzcyBCeXRlcyBleHRlbmRzIFJHQiB7XG4gICAgY29uc3RydWN0b3IociwgZywgYiwgYSkge1xuICAgICAgICBzdXBlcihNYXRoLnJvdW5kKHIpLCBNYXRoLnJvdW5kKGcpLCBNYXRoLnJvdW5kKGIpLCBhKTtcbiAgICB9XG5cbiAgICB0b1JHQigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSR0IodGhpcy5yIC8gMjU1LCB0aGlzLmcgLyAyNTUsIHRoaXMuYiAvIDI1NSwgdGhpcy5hKTtcbiAgICB9XG5cbiAgICB0b0hTVigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9SR0IoKS50b0hTVigpO1xuICAgIH1cblxuICAgIHRvSFNMKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b1JHQigpLnRvSFNMKCk7XG4gICAgfVxuXG4gICAgdG9IZXgoKSB7XG4gICAgICAgIHJldHVybiBoZXgodGhpcy5yLCAyKSArIGhleCh0aGlzLmcsIDIpICsgaGV4KHRoaXMuYiwgMik7XG4gICAgfVxuXG4gICAgdG9CeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoZXgobiwgd2lkdGgsIHBhZCA9IFwiMFwiKSB7XG4gICAgbGV0IHJlc3VsdCA9IG4udG9TdHJpbmcoMTYpO1xuICAgIHdoaWxlICh3aWR0aCA+IHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gcGFkICsgcmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmNsYXNzIEhTViBleHRlbmRzIEJhc2VDb2xvciB7XG4gICAgY29uc3RydWN0b3IoaCwgcywgdiwgYSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuaCA9IGg7XG4gICAgICAgIHRoaXMucyA9IHM7XG4gICAgICAgIHRoaXMudiA9IHY7XG4gICAgICAgIHRoaXMuYSA9IGE7XG4gICAgfVxuXG4gICAgdG9SR0IoKSB7XG4gICAgICAgIGxldCB7IGgsIHMsIHYgfSA9IHRoaXM7XG4gICAgICAgIGxldCByLCBnLCBiO1xuXG4gICAgICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgICAgICByID0gZyA9IGIgPSB2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaCAvPSA2MDtcblxuICAgICAgICAgICAgY29uc3QgaSA9IE1hdGguZmxvb3IoaCk7XG4gICAgICAgICAgICBjb25zdCBmID0gaCAtIGk7XG4gICAgICAgICAgICBjb25zdCBwID0gdiAqICgxIC0gcyk7XG4gICAgICAgICAgICBjb25zdCBxID0gdiAqICgxIC0gcyAqIGYpO1xuICAgICAgICAgICAgY29uc3QgdCA9IHYgKiAoMSAtIHMgKiAoMSAtIGYpKTtcblxuICAgICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiByID0gdjsgZyA9IHQ7IGIgPSBwOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHIgPSBxOyBnID0gdjsgYiA9IHA7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjogciA9IHA7IGcgPSB2OyBiID0gdDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByID0gcDsgZyA9IHE7IGIgPSB2OyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHIgPSB0OyBnID0gcDsgYiA9IHY7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHIgPSB2OyBnID0gcDsgYiA9IHE7IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBSR0IociwgZywgYiwgdGhpcy5hKTtcbiAgICB9XG5cbiAgICB0b0hTTCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9SR0IoKS50b0hTTCgpO1xuICAgIH1cblxuICAgIHRvQnl0ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvUkdCKCkudG9CeXRlcygpO1xuICAgIH1cbn1cblxuY2xhc3MgSFNMIGV4dGVuZHMgQmFzZUNvbG9yIHtcbiAgICBjb25zdHJ1Y3RvcihoLCBzLCBsLCBhKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5oID0gaDtcbiAgICAgICAgdGhpcy5zID0gcztcbiAgICAgICAgdGhpcy5sID0gbDtcbiAgICAgICAgdGhpcy5hID0gYTtcbiAgICB9XG5cbiAgICB0b1JHQigpIHtcbiAgICAgICAgbGV0IGggPSB0aGlzLmggLyAzNjA7XG4gICAgICAgIGxldCBzID0gdGhpcy5zIC8gMTAwO1xuICAgICAgICBsZXQgbCA9IHRoaXMubCAvIDEwMDtcbiAgICAgICAgbGV0IHIsIGcsIGI7XG5cbiAgICAgICAgaWYgKHMgPT09IDApIHtcbiAgICAgICAgICAgIHIgPSBnID0gYiA9IGw7IC8vIGFjaHJvbWF0aWNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICAgICAgY29uc3QgcCA9IDIgKiBsIC0gcTtcbiAgICAgICAgICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxIC8gMyk7XG4gICAgICAgICAgICBnID0gaHVlMnJnYihwLCBxLCBoKTtcbiAgICAgICAgICAgIGIgPSBodWUycmdiKHAsIHEsIGggLSAxIC8gMyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFJHQihyLCBnLCBiLCB0aGlzLmEpO1xuICAgIH1cblxuICAgIHRvSFNWKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b1JHQigpLnRvSFNWKCk7XG4gICAgfVxuXG4gICAgdG9CeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9SR0IoKS50b0J5dGVzKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBodWUycmdiKHAsIHEsIHMpIHtcbiAgICBsZXQgdCA9IHM7XG5cbiAgICBpZiAodCA8IDApIHtcbiAgICAgICAgdCArPSAxO1xuICAgIH1cblxuICAgIGlmICh0ID4gMSkge1xuICAgICAgICB0IC09IDE7XG4gICAgfVxuXG4gICAgaWYgKHQgPCAxIC8gNikge1xuICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDtcbiAgICB9XG5cbiAgICBpZiAodCA8IDEgLyAyKSB7XG4gICAgICAgIHJldHVybiBxO1xuICAgIH1cblxuICAgIGlmICh0IDwgMiAvIDMpIHtcbiAgICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2O1xuICAgIH1cblxuICAgIHJldHVybiBwO1xufVxuXG5leHBvcnQgeyBSR0IsIEJ5dGVzLCBIU1YsIEhTTCB9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUNvbG9yKHZhbHVlLCBzYWZlKSB7XG4gICAgbGV0IG0sIHJldDtcblxuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBcIm5vbmVcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBCYXNlQ29sb3IpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGxldCBjb2xvciA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKChtID0gbWF0Y2hOYW1lZENvbG9yKGNvbG9yKSkpIHtcbiAgICAgICAgaWYgKG1bMV0gPT09IFwidHJhbnNwYXJlbnRcIikge1xuICAgICAgICAgICAgY29sb3IgPSBuZXcgUkdCKDEsIDEsIDEsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29sb3IgPSBwYXJzZUNvbG9yKG5hbWVkQ29sb3JzW21bMV1dLCBzYWZlKTtcbiAgICAgICAgfVxuICAgICAgICBjb2xvci5tYXRjaCA9IFsgbVsxXSBdO1xuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuICAgIGlmICgobSA9IC9eIz8oWzAtOWEtZl17Mn0pKFswLTlhLWZdezJ9KShbMC05YS1mXXsyfSlcXGIvaS5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0ID0gbmV3IEJ5dGVzKHBhcnNlSW50KG1bMV0sIDE2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KG1bMl0sIDE2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KG1bM10sIDE2KSwgMSk7XG4gICAgfSBlbHNlIGlmICgobSA9IC9eIz8oWzAtOWEtZl0pKFswLTlhLWZdKShbMC05YS1mXSlcXGIvaS5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0ID0gbmV3IEJ5dGVzKHBhcnNlSW50KG1bMV0gKyBtWzFdLCAxNiksXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludChtWzJdICsgbVsyXSwgMTYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQobVszXSArIG1bM10sIDE2KSwgMSk7XG4gICAgfSBlbHNlIGlmICgobSA9IC9ecmdiXFwoXFxzKihbMC05XSspXFxzKixcXHMqKFswLTldKylcXHMqLFxccyooWzAtOV0rKVxccypcXCkvLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXQgPSBuZXcgQnl0ZXMocGFyc2VJbnQobVsxXSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQobVsyXSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQobVszXSwgMTApLCAxKTtcbiAgICB9IGVsc2UgaWYgKChtID0gL15yZ2JhXFwoXFxzKihbMC05XSspXFxzKixcXHMqKFswLTldKylcXHMqLFxccyooWzAtOV0rKVxccyosXFxzKihbMC05Ll0rKVxccypcXCkvLmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXQgPSBuZXcgQnl0ZXMocGFyc2VJbnQobVsxXSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQobVsyXSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQobVszXSwgMTApLCBwYXJzZUZsb2F0KG1bNF0pKTtcbiAgICB9IGVsc2UgaWYgKChtID0gL15yZ2JcXChcXHMqKFswLTldKlxcLj9bMC05XSspJVxccyosXFxzKihbMC05XSpcXC4/WzAtOV0rKSVcXHMqLFxccyooWzAtOV0qXFwuP1swLTldKyklXFxzKlxcKS8uZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldCA9IG5ldyBSR0IocGFyc2VGbG9hdChtWzFdKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KG1bMl0pIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQobVszXSkgLyAxMDAsIDEpO1xuICAgIH0gZWxzZSBpZiAoKG0gPSAvXnJnYmFcXChcXHMqKFswLTldKlxcLj9bMC05XSspJVxccyosXFxzKihbMC05XSpcXC4/WzAtOV0rKSVcXHMqLFxccyooWzAtOV0qXFwuP1swLTldKyklXFxzKixcXHMqKFswLTkuXSspXFxzKlxcKS8uZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldCA9IG5ldyBSR0IocGFyc2VGbG9hdChtWzFdKSAvIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KG1bMl0pIC8gMTAwLFxuICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQobVszXSkgLyAxMDAsIHBhcnNlRmxvYXQobVs0XSkpO1xuICAgIH1cblxuICAgIGlmIChyZXQpIHtcbiAgICAgICAgcmV0Lm1hdGNoID0gbTtcbiAgICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBwYXJzZSBjb2xvcjogXCIgKyBjb2xvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbn1cbiIsImltcG9ydCBDbGFzcyBmcm9tICcuLi9jbGFzcyc7XG5pbXBvcnQgbmFtZWRDb2xvcnMgZnJvbSAnLi9uYW1lZC1jb2xvcnMnO1xuaW1wb3J0IHsgQnl0ZXMsIFJHQiwgSFNWLCBIU0wgfSBmcm9tICcuL3BhcnNlLWNvbG9yJztcblxuY29uc3QgREFSS19UUkVTSE9MRCA9IDE4MDtcblxuY2xhc3MgQ29sb3IgZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0cyA9IENvbG9yLmZvcm1hdHM7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZENvbG9yID0gdGhpcy5yZXNvbHZlQ29sb3IodmFsdWUpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBmb3JtYXRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXRSZWdleCA9IGZvcm1hdHNbaWR4XS5yZTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9jZXNzb3IgPSBmb3JtYXRzW2lkeF0ucHJvY2VzcztcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0cyA9IGZvcm1hdFJlZ2V4LmV4ZWMocmVzb2x2ZWRDb2xvcik7XG5cbiAgICAgICAgICAgICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhbm5lbHMgPSBwcm9jZXNzb3IocGFydHMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnIgPSBjaGFubmVsc1swXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nID0gY2hhbm5lbHNbMV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYiA9IGNoYW5uZWxzWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuciA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHRoaXMuZyA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHRoaXMuYiA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuciA9IHRoaXMubm9ybWFsaXplQnl0ZSh0aGlzLnIpO1xuICAgICAgICB0aGlzLmcgPSB0aGlzLm5vcm1hbGl6ZUJ5dGUodGhpcy5nKTtcbiAgICAgICAgdGhpcy5iID0gdGhpcy5ub3JtYWxpemVCeXRlKHRoaXMuYik7XG4gICAgfVxuXG4gICAgdG9IZXgoKSB7XG4gICAgICAgIGNvbnN0IHBhZCA9IHRoaXMucGFkRGlnaXQ7XG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLnIudG9TdHJpbmcoMTYpO1xuICAgICAgICBjb25zdCBnID0gdGhpcy5nLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY29uc3QgYiA9IHRoaXMuYi50b1N0cmluZygxNik7XG5cbiAgICAgICAgcmV0dXJuIFwiI1wiICsgcGFkKHIpICsgcGFkKGcpICsgcGFkKGIpO1xuICAgIH1cblxuICAgIHJlc29sdmVDb2xvcih2YWx1ZSkge1xuICAgICAgICBsZXQgY29sb3IgPSB2YWx1ZSB8fCBcImJsYWNrXCI7XG5cbiAgICAgICAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIGNvbG9yID0gY29sb3Iuc3Vic3RyKDEsIDYpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKC8gL2csIFwiXCIpO1xuICAgICAgICBjb2xvciA9IGNvbG9yLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbG9yID0gQ29sb3IubmFtZWRDb2xvcnNbY29sb3JdIHx8IGNvbG9yO1xuXG4gICAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9XG5cbiAgICBub3JtYWxpemVCeXRlKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA8IDAgfHwgaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZSA+IDI1NSA/IDI1NSA6IHZhbHVlO1xuICAgIH1cblxuICAgIHBhZERpZ2l0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUubGVuZ3RoID09PSAxKSA/IFwiMFwiICsgdmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICBicmlnaHRuZXNzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHJvdW5kID0gTWF0aC5yb3VuZDtcblxuICAgICAgICB0aGlzLnIgPSByb3VuZCh0aGlzLm5vcm1hbGl6ZUJ5dGUodGhpcy5yICogdmFsdWUpKTtcbiAgICAgICAgdGhpcy5nID0gcm91bmQodGhpcy5ub3JtYWxpemVCeXRlKHRoaXMuZyAqIHZhbHVlKSk7XG4gICAgICAgIHRoaXMuYiA9IHJvdW5kKHRoaXMubm9ybWFsaXplQnl0ZSh0aGlzLmIgKiB2YWx1ZSkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHBlcmNCcmlnaHRuZXNzKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KDAuMjQxICogdGhpcy5yICogdGhpcy5yICsgMC42OTEgKiB0aGlzLmcgKiB0aGlzLmcgKyAwLjA2OCAqIHRoaXMuYiAqIHRoaXMuYik7XG4gICAgfVxuXG4gICAgaXNEYXJrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wZXJjQnJpZ2h0bmVzcygpIDwgREFSS19UUkVTSE9MRDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUJ5dGVzKHIsIGcsIGIsIGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCeXRlcyhyLCBnLCBiLCBhICE9IG51bGwgPyBhIDogMSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21SR0IociwgZywgYiwgYSkge1xuICAgICAgICByZXR1cm4gbmV3IFJHQihyLCBnLCBiLCBhICE9IG51bGwgPyBhIDogMSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21IU1YoaCwgcywgdiwgYSkge1xuICAgICAgICByZXR1cm4gbmV3IEhTVihoLCBzLCB2LCBhICE9IG51bGwgPyBhIDogMSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21IU0woaCwgcywgbCwgYSkge1xuICAgICAgICByZXR1cm4gbmV3IEhTTChoLCBzLCBsLCBhICE9IG51bGwgPyBhIDogMSk7XG4gICAgfVxufVxuXG5Db2xvci5mb3JtYXRzID0gWyB7XG4gICAgcmU6IC9ecmdiXFwoKFxcZHsxLDN9KSxcXHMqKFxcZHsxLDN9KSxcXHMqKFxcZHsxLDN9KVxcKSQvLFxuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKHBhcnRzKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBwYXJzZUludChwYXJ0c1sxXSwgMTApLCBwYXJzZUludChwYXJ0c1syXSwgMTApLCBwYXJzZUludChwYXJ0c1szXSwgMTApXG4gICAgICAgIF07XG4gICAgfVxufSwge1xuICAgIHJlOiAvXihcXHd7Mn0pKFxcd3syfSkoXFx3ezJ9KSQvLFxuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKHBhcnRzKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBwYXJzZUludChwYXJ0c1sxXSwgMTYpLCBwYXJzZUludChwYXJ0c1syXSwgMTYpLCBwYXJzZUludChwYXJ0c1szXSwgMTYpXG4gICAgICAgIF07XG4gICAgfVxufSwge1xuICAgIHJlOiAvXihcXHd7MX0pKFxcd3sxfSkoXFx3ezF9KSQvLFxuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKHBhcnRzKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBwYXJzZUludChwYXJ0c1sxXSArIHBhcnRzWzFdLCAxNiksXG4gICAgICAgICAgICBwYXJzZUludChwYXJ0c1syXSArIHBhcnRzWzJdLCAxNiksXG4gICAgICAgICAgICBwYXJzZUludChwYXJ0c1szXSArIHBhcnRzWzNdLCAxNilcbiAgICAgICAgXTtcbiAgICB9XG59IF07XG5cbkNvbG9yLm5hbWVkQ29sb3JzID0gbmFtZWRDb2xvcnM7XG5cbmV4cG9ydCBkZWZhdWx0IENvbG9yOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGVuZChmaXJzdCwgc2Vjb25kKSB7XG4gICAgZmlyc3QucHVzaC5hcHBseShmaXJzdCwgc2Vjb25kKTtcbiAgICByZXR1cm4gZmlyc3Q7XG59IiwiLyogZXNsaW50LWRpc2FibGUga2V5LXNwYWNpbmcsbm8tbXVsdGktc3BhY2VzLG5vLXBhcmFtLXJlYXNzaWduICovXG5cbmNvbnN0IGxpdGVyYWxzID0ge1xuICAgIDEgICAgOiBcImlcIiwgICAgICAgMTAgICA6IFwieFwiLCAgICAgICAxMDAgIDogXCJjXCIsXG4gICAgMiAgICA6IFwiaWlcIiwgICAgICAyMCAgIDogXCJ4eFwiLCAgICAgIDIwMCAgOiBcImNjXCIsXG4gICAgMyAgICA6IFwiaWlpXCIsICAgICAzMCAgIDogXCJ4eHhcIiwgICAgIDMwMCAgOiBcImNjY1wiLFxuICAgIDQgICAgOiBcIml2XCIsICAgICAgNDAgICA6IFwieGxcIiwgICAgICA0MDAgIDogXCJjZFwiLFxuICAgIDUgICAgOiBcInZcIiwgICAgICAgNTAgICA6IFwibFwiLCAgICAgICA1MDAgIDogXCJkXCIsXG4gICAgNiAgICA6IFwidmlcIiwgICAgICA2MCAgIDogXCJseFwiLCAgICAgIDYwMCAgOiBcImRjXCIsXG4gICAgNyAgICA6IFwidmlpXCIsICAgICA3MCAgIDogXCJseHhcIiwgICAgIDcwMCAgOiBcImRjY1wiLFxuICAgIDggICAgOiBcInZpaWlcIiwgICAgODAgICA6IFwibHh4eFwiLCAgICA4MDAgIDogXCJkY2NjXCIsXG4gICAgOSAgICA6IFwiaXhcIiwgICAgICA5MCAgIDogXCJ4Y1wiLCAgICAgIDkwMCAgOiBcImNtXCIsXG4gICAgMTAwMCA6IFwibVwiXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcmFiaWNUb1JvbWFuKG4pIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBbIDEwMDAsXG4gICAgICAgICAgICAgICAgICAgOTAwICwgODAwLCA3MDAsIDYwMCwgNTAwLCA0MDAsIDMwMCwgMjAwLCAxMDAsXG4gICAgICAgICAgICAgICAgICAgOTAgICwgODAgLCA3MCAsIDYwICwgNTAgLCA0MCAsIDMwICwgMjAgLCAxMCAsXG4gICAgICAgICAgICAgICAgICAgOSAgICwgOCAgLCA3ICAsIDYgICwgNSAgLCA0ICAsIDMgICwgMiAgLCAxIF07XG5cbiAgICBsZXQgcm9tYW4gPSBcIlwiO1xuICAgIHdoaWxlIChuID4gMCkge1xuICAgICAgICBpZiAobiA8IHZhbHVlc1swXSkge1xuICAgICAgICAgICAgdmFsdWVzLnNoaWZ0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByb21hbiArPSBsaXRlcmFsc1t2YWx1ZXNbMF1dO1xuICAgICAgICAgICAgbiAtPSB2YWx1ZXNbMF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJvbWFuO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVByb21pc2UoKSB7XG4gICAgbGV0IHJlc29sdmVGbiwgcmVqZWN0Rm47XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgcmVzb2x2ZUZuID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHByb21pc2UuX3N0YXRlID0gXCJyZXNvbHZlZFwiO1xuICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9O1xuICAgICAgICByZWplY3RGbiA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlLl9zdGF0ZSA9IFwicmVqZWN0ZWRcIjtcbiAgICAgICAgICAgIHJlamVjdChkYXRhKTtcblxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcHJvbWlzZS5fc3RhdGUgPSBcInBlbmRpbmdcIjtcbiAgICBwcm9taXNlLnJlc29sdmUgPSByZXNvbHZlRm47XG4gICAgcHJvbWlzZS5yZWplY3QgPSByZWplY3RGbjtcbiAgICBwcm9taXNlLnN0YXRlID0gKCkgPT4gcHJvbWlzZS5fc3RhdGU7XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbiIsImNvbnN0IFVOREVGSU5FRCA9IFwidW5kZWZpbmVkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSBVTkRFRklORUQ7XG59IiwibGV0IGRlZklkID0gMTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmaW5pdGlvbklkKCkge1xuICAgIHJldHVybiBcImtkZWZcIiArIGRlZklkKys7XG59IiwiY29uc3QgREVHX1RPX1JBRCA9IE1hdGguUEkgLyAxODA7XG5jb25zdCBNQVhfTlVNID0gTnVtYmVyLk1BWF9WQUxVRTtcbmNvbnN0IE1JTl9OVU0gPSAtTnVtYmVyLk1BWF9WQUxVRTtcblxuZXhwb3J0IHsgREVHX1RPX1JBRCwgTUFYX05VTSwgTUlOX05VTSB9OyIsImltcG9ydCB7IERFR19UT19SQUQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgLyBERUdfVE9fUkFEO1xufSIsImNvbnN0IGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbmV4cG9ydCBjb25zdCBCT00gPSAnXFx4ZmVcXHhmZic7XG5cbi8vIEVuY29kZXMgYSBzdHJpbmcgYXMgVVRGLThcbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVVVEY4KGlucHV0KSB7XG4gICAgbGV0IG91dHB1dCA9IFwiXCI7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGMgPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgLy8gT25lIGJ5dGVcbiAgICAgICAgICAgIG91dHB1dCArPSBmcm9tQ2hhckNvZGUoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAgICAgICAvLyBUd28gYnl0ZXNcbiAgICAgICAgICAgIG91dHB1dCArPSBmcm9tQ2hhckNvZGUoMHhDMCB8IChjID4+PiA2KSk7XG4gICAgICAgICAgICBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKDB4ODAgfCAoYyAmIDB4M2YpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjIDwgMHgxMDAwMCkge1xuICAgICAgICAgICAgLy8gVGhyZWUgYnl0ZXNcbiAgICAgICAgICAgIG91dHB1dCArPSBmcm9tQ2hhckNvZGUoMHhFMCB8IChjID4+PiAxMikpO1xuICAgICAgICAgICAgb3V0cHV0ICs9IGZyb21DaGFyQ29kZSgweDgwIHwgKGMgPj4+IDYgJiAweDNmKSk7XG4gICAgICAgICAgICBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKDB4ODAgfCAoYyAmIDB4M2YpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGVuY29kZVVuaXQoY29kZVVuaXQpIHtcbiAgICByZXR1cm4gZnJvbUNoYXJDb2RlKGNvZGVVbml0ID4+IDgpICsgZnJvbUNoYXJDb2RlKGNvZGVVbml0ICYgMHgwMGZmKTtcbn1cblxuLy8gRW5jb2RlcyBhIHN0cmluZyBhcyBVVEYtMTYgYmlnLWVuZGlhblxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVVURjE2QkUoaW5wdXQpIHtcbiAgICBsZXQgb3V0cHV0ID0gJyc7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGMgPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xuXG4gICAgICAgIGlmIChjIDwgMHhGRkZGKSB7XG4gICAgICAgICAgICBvdXRwdXQgKz0gZW5jb2RlVW5pdChjKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxlYWQgPSAoKGMgLSAweDEwMDAwKSA+PiAxMCkgKyAweEQ4MDA7XG4gICAgICAgICAgICBjb25zdCB0cmFpbCA9ICgoYyAtIDB4MTAwMDApICYgMHgzRkYpICsgMHhEQzAwO1xuICAgICAgICAgICAgb3V0cHV0ICs9IGVuY29kZVVuaXQobGVhZCk7XG4gICAgICAgICAgICBvdXRwdXQgKz0gZW5jb2RlVW5pdCh0cmFpbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuIiwiaW1wb3J0IHsgZW5jb2RlVVRGOCB9IGZyb20gJy4vZW5jb2RlLXV0Zic7XG5cbmNvbnN0IEtFWV9TVFIgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuY29kZUJhc2U2NChpbnB1dCkge1xuICAgIGxldCBvdXRwdXQgPSBcIlwiO1xuICAgIGxldCBpID0gMDtcblxuICAgIGNvbnN0IHV0ZklucHV0ID0gZW5jb2RlVVRGOChpbnB1dCk7XG5cbiAgICB3aGlsZSAoaSA8IHV0ZklucHV0Lmxlbmd0aCkge1xuICAgICAgICBsZXQgY2hyMSA9IHV0ZklucHV0LmNoYXJDb2RlQXQoaSsrKTtcbiAgICAgICAgbGV0IGNocjIgPSB1dGZJbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICAgIGxldCBjaHIzID0gdXRmSW5wdXQuY2hhckNvZGVBdChpKyspO1xuXG4gICAgICAgIGxldCBlbmMxID0gY2hyMSA+PiAyO1xuICAgICAgICBsZXQgZW5jMiA9ICgoY2hyMSAmIDMpIDw8IDQpIHwgKGNocjIgPj4gNCk7XG4gICAgICAgIGxldCBlbmMzID0gKChjaHIyICYgMTUpIDw8IDIpIHwgKGNocjMgPj4gNik7XG4gICAgICAgIGxldCBlbmM0ID0gY2hyMyAmIDYzO1xuXG4gICAgICAgIGlmIChpc05hTihjaHIyKSkge1xuICAgICAgICAgICAgZW5jMyA9IGVuYzQgPSA2NDtcbiAgICAgICAgfSBlbHNlIGlmIChpc05hTihjaHIzKSkge1xuICAgICAgICAgICAgZW5jNCA9IDY0O1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0ID0gb3V0cHV0ICtcbiAgICAgICAgICAgIEtFWV9TVFIuY2hhckF0KGVuYzEpICsgS0VZX1NUUi5jaGFyQXQoZW5jMikgK1xuICAgICAgICAgICAgS0VZX1NUUi5jaGFyQXQoZW5jMykgKyBLRVlfU1RSLmNoYXJBdChlbmM0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCBkZWZpbmVkIGZyb20gJy4vZGVmaW5lZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV2ZW50Q29vcmRpbmF0ZXMoZSkge1xuICAgIGlmIChkZWZpbmVkKChlLnggfHwge30pLmxvY2F0aW9uKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogZS54LmxvY2F0aW9uLFxuICAgICAgICAgICAgeTogZS55LmxvY2F0aW9uXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogZS5wYWdlWCB8fCBlLmNsaWVudFggfHwgMCxcbiAgICAgICAgeTogZS5wYWdlWSB8fCBlLmNsaWVudFkgfHwgMFxuICAgIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXZlbnRFbGVtZW50KGUgPSB7fSkge1xuICAgIHJldHVybiBlLnRvdWNoID8gZS50b3VjaC5pbml0aWFsVG91Y2ggOiBlLnRhcmdldDtcbn0iLCJpbXBvcnQgZGVmaW5lZCBmcm9tICcuL2RlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RyYW5zcGFyZW50KGNvbG9yKSB7XG4gICAgcmV0dXJuIGNvbG9yID09PSBcIlwiIHx8IGNvbG9yID09PSBudWxsIHx8IGNvbG9yID09PSBcIm5vbmVcIiB8fCBjb2xvciA9PT0gXCJ0cmFuc3BhcmVudFwiIHx8ICFkZWZpbmVkKGNvbG9yKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgaWYgKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4odmFsdWUsIG1heCksIG1pbik7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbm8tbXVsdGktc3BhY2VzLCBrZXktc3BhY2luZywgaW5kZW50LCBjYW1lbGNhc2UsIHNwYWNlLWJlZm9yZS1ibG9ja3MsIGVxZXFlcSwgYnJhY2Utc3R5bGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIHNwYWNlLWluZml4LW9wcywgc3BhY2UtYmVmb3JlLWZ1bmN0aW9uLXBhcmVuLCBhcnJheS1icmFja2V0LXNwYWNpbmcsIG9iamVjdC1jdXJseS1zcGFjaW5nICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1uZXN0ZWQtdGVybmFyeSwgbWF4LXBhcmFtcywgZGVmYXVsdC1jYXNlLCBuby1lbHNlLXJldHVybiwgbm8tZW1wdHkgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduLCBuby12YXIsIGJsb2NrLXNjb3BlZC12YXIgKi9cblxuLy8gbWVyZ2VTb3J0IGlzIHN0YWJsZS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlU29ydChhLCBjbXApIHtcbiAgICBpZiAoYS5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBhLnNsaWNlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1lcmdlKGEsIGIpIHtcbiAgICAgICAgdmFyIHIgPSBbXSwgYWkgPSAwLCBiaSA9IDAsIGkgPSAwO1xuICAgICAgICB3aGlsZSAoYWkgPCBhLmxlbmd0aCAmJiBiaSA8IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoY21wKGFbYWldLCBiW2JpXSkgPD0gMCkge1xuICAgICAgICAgICAgICAgIHJbaSsrXSA9IGFbYWkrK107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJbaSsrXSA9IGJbYmkrK107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFpIDwgYS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHIucHVzaC5hcHBseShyLCBhLnNsaWNlKGFpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJpIDwgYi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHIucHVzaC5hcHBseShyLCBiLnNsaWNlKGJpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICAgIHJldHVybiAoZnVuY3Rpb24gc29ydChhKSB7XG4gICAgICAgIGlmIChhLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbSA9IE1hdGguZmxvb3IoYS5sZW5ndGggLyAyKTtcbiAgICAgICAgdmFyIGxlZnQgPSBhLnNsaWNlKDAsIG0pO1xuICAgICAgICB2YXIgcmlnaHQgPSBhLnNsaWNlKG0pO1xuICAgICAgICBsZWZ0ID0gc29ydChsZWZ0KTtcbiAgICAgICAgcmlnaHQgPSBzb3J0KHJpZ2h0KTtcbiAgICAgICAgcmV0dXJuIG1lcmdlKGxlZnQsIHJpZ2h0KTtcbiAgICB9KShhKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9taXNlQWxsKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn0iLCJpbXBvcnQgeyBERUdfVE9fUkFEIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYWQoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1RPX1JBRDtcbn1cbiIsImZ1bmN0aW9uIHBvdyhwKSB7XG4gICAgaWYgKHApIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KDEwLCBwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm91bmQodmFsdWUsIHByZWNpc2lvbikge1xuICAgIGNvbnN0IHBvd2VyID0gcG93KHByZWNpc2lvbik7XG4gICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBwb3dlcikgLyBwb3dlcjtcbn0iLCJpbXBvcnQgZGVmaW5lZCBmcm9tICcuL2RlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIGRlZmluZWQodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZEV2ZW50cyhlbGVtZW50LCBldmVudHMpIHtcbiAgICBmb3IgKGxldCBldmVudE5hbWUgaW4gZXZlbnRzKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50TmFtZXMgPSBldmVudE5hbWUudHJpbSgpLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZXZlbnROYW1lcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lc1tpZHhdLCBldmVudHNbZXZlbnROYW1lXSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsZW1lbnRPZmZzZXQoZWxlbWVudCkge1xuICAgIGNvbnN0IGJveCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBjb25zdCBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IGJveC50b3AgKyAod2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApIC0gKGRvY3VtZW50RWxlbWVudC5jbGllbnRUb3AgfHwgMCksXG4gICAgICAgIGxlZnQ6IGJveC5sZWZ0ICsgKHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCkgLSAoZG9jdW1lbnRFbGVtZW50LmNsaWVudExlZnQgfHwgMClcbiAgICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsZW1lbnRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB8fCB7fTtcbiAgICBjb25zdCBzdHlsZXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc3R5bGVzKSA/IHN0eWxlcyA6IFsgc3R5bGVzIF07XG5cbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBzdHlsZXNBcnJheS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGxldCBmaWVsZCA9IHN0eWxlc0FycmF5W2lkeF07XG4gICAgICAgIHJlc3VsdFtmaWVsZF0gPSBzdHlsZVtmaWVsZF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgZWxlbWVudFN0eWxlcyBmcm9tICcuL2VsZW1lbnQtc3R5bGVzJztcbmltcG9ydCBkZWZpbmVkIGZyb20gJy4vZGVmaW5lZCc7XG5cbmZ1bmN0aW9uIGdldFBpeGVscyh2YWx1ZSkge1xuICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgKyBcInB4XCI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsZW1lbnRTaXplKGVsZW1lbnQsIHNpemUpIHtcbiAgICBpZiAoc2l6ZSkge1xuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHNpemU7XG5cbiAgICAgICAgaWYgKGRlZmluZWQod2lkdGgpKSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gZ2V0UGl4ZWxzKHdpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWZpbmVkKGhlaWdodCkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gZ2V0UGl4ZWxzKGhlaWdodCk7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBlbGVtZW50U3R5bGVzKGVsZW1lbnQsIFsgJ3dpZHRoJywgJ2hlaWdodCcgXSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiBwYXJzZUludChzaXplLndpZHRoLCAxMCksXG4gICAgICAgICAgICBoZWlnaHQ6IHBhcnNlSW50KHNpemUuaGVpZ2h0LCAxMClcbiAgICAgICAgfTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5iaW5kRXZlbnRzKGVsZW1lbnQsIGV2ZW50cyA9IHt9KSB7XG4gICAgZm9yIChsZXQgbmFtZSBpbiBldmVudHMpIHtcbiAgICAgICAgY29uc3QgZXZlbnROYW1lcyA9IG5hbWUudHJpbSgpLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZXZlbnROYW1lcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lc1tpZHhdLCBldmVudHNbbmFtZV0sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBkZWZhdWx0IGFzIGVsZW1lbnRTdHlsZXMgfSBmcm9tICcuL2VsZW1lbnQtc3R5bGVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxlbWVudFBhZGRpbmcoZWxlbWVudCkge1xuICAgIGNvbnN0IHsgcGFkZGluZ0xlZnQsIHBhZGRpbmdUb3AgfSA9IGVsZW1lbnRTdHlsZXMoZWxlbWVudCwgWyBcInBhZGRpbmdMZWZ0XCIsIFwicGFkZGluZ1RvcFwiIF0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogcGFyc2VGbG9hdChwYWRkaW5nVG9wKSxcbiAgICAgICAgbGVmdDogcGFyc2VGbG9hdChwYWRkaW5nTGVmdClcbiAgICB9O1xufVxuIiwiZnVuY3Rpb24gc2V0QWNjZXNzb3IoZmllbGQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXNbZmllbGRdICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpc1tmaWVsZF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldEFjY2Vzc29yKGZpZWxkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1tmaWVsZF07XG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3JzKGZuLCBmaWVsZHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbmFtZSA9IGZpZWxkc1tpXTtcbiAgICAgICAgbGV0IGNhcGl0YWxpemVkID0gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUuc3Vic3RyaW5nKDEsIG5hbWUubGVuZ3RoKTtcblxuICAgICAgICBmbltcInNldFwiICsgY2FwaXRhbGl6ZWRdID0gc2V0QWNjZXNzb3IobmFtZSk7XG4gICAgICAgIGZuW1wiZ2V0XCIgKyBjYXBpdGFsaXplZF0gPSBnZXRBY2Nlc3NvcihuYW1lKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgZGVmaW5lZCwgcmFkLCByb3VuZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jbGFzcyBNYXRyaXggZXh0ZW5kcyBDbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3RvcihhID0gMCwgYiA9IDAsIGMgPSAwLCBkID0gMCwgZSA9IDAsIGYgPSAwKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5hID0gYTtcbiAgICAgICAgdGhpcy5iID0gYjtcbiAgICAgICAgdGhpcy5jID0gYztcbiAgICAgICAgdGhpcy5kID0gZDtcbiAgICAgICAgdGhpcy5lID0gZTtcbiAgICAgICAgdGhpcy5mID0gZjtcbiAgICB9XG5cbiAgICBtdWx0aXBseUNvcHkobWF0cml4KSB7XG4gICAgICAgIHJldHVybiBuZXcgTWF0cml4KFxuICAgICAgICAgICAgdGhpcy5hICogbWF0cml4LmEgKyB0aGlzLmMgKiBtYXRyaXguYixcbiAgICAgICAgICAgIHRoaXMuYiAqIG1hdHJpeC5hICsgdGhpcy5kICogbWF0cml4LmIsXG4gICAgICAgICAgICB0aGlzLmEgKiBtYXRyaXguYyArIHRoaXMuYyAqIG1hdHJpeC5kLFxuICAgICAgICAgICAgdGhpcy5iICogbWF0cml4LmMgKyB0aGlzLmQgKiBtYXRyaXguZCxcbiAgICAgICAgICAgIHRoaXMuYSAqIG1hdHJpeC5lICsgdGhpcy5jICogbWF0cml4LmYgKyB0aGlzLmUsXG4gICAgICAgICAgICB0aGlzLmIgKiBtYXRyaXguZSArIHRoaXMuZCAqIG1hdHJpeC5mICsgdGhpcy5mXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaW52ZXJ0KCkge1xuICAgICAgICBjb25zdCB7IGEsIGIsIGM6IGQsIGQ6IGUsIGU6IGcsIGY6IGggfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGRldCA9IGEgKiBlIC0gYiAqIGQ7XG5cbiAgICAgICAgaWYgKGRldCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeChlIC8gZGV0LCAtYiAvIGRldCwgLWQgLyBkZXQsIGEgLyBkZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChkICogaCAtIGUgKiBnKSAvIGRldCwgKGIgKiBnIC0gYSAqIGgpIC8gZGV0KTtcbiAgICB9XG5cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgodGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGhpcy5kLCB0aGlzLmUsIHRoaXMuZik7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIGlmICghb3RoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmEgPT09IG90aGVyLmEgJiYgdGhpcy5iID09PSBvdGhlci5iICYmXG4gICAgICAgICAgICAgICB0aGlzLmMgPT09IG90aGVyLmMgJiYgdGhpcy5kID09PSBvdGhlci5kICYmXG4gICAgICAgICAgICAgICB0aGlzLmUgPT09IG90aGVyLmUgJiYgdGhpcy5mID09PSBvdGhlci5mO1xuICAgIH1cblxuICAgIHJvdW5kKHByZWNpc2lvbikge1xuICAgICAgICB0aGlzLmEgPSByb3VuZCh0aGlzLmEsIHByZWNpc2lvbik7XG4gICAgICAgIHRoaXMuYiA9IHJvdW5kKHRoaXMuYiwgcHJlY2lzaW9uKTtcbiAgICAgICAgdGhpcy5jID0gcm91bmQodGhpcy5jLCBwcmVjaXNpb24pO1xuICAgICAgICB0aGlzLmQgPSByb3VuZCh0aGlzLmQsIHByZWNpc2lvbik7XG4gICAgICAgIHRoaXMuZSA9IHJvdW5kKHRoaXMuZSwgcHJlY2lzaW9uKTtcbiAgICAgICAgdGhpcy5mID0gcm91bmQodGhpcy5mLCBwcmVjaXNpb24pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvQXJyYXkocHJlY2lzaW9uKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFsgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGhpcy5kLCB0aGlzLmUsIHRoaXMuZiBdO1xuXG4gICAgICAgIGlmIChkZWZpbmVkKHByZWNpc2lvbikpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gcm91bmQocmVzdWx0W2ldLCBwcmVjaXNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB0b1N0cmluZyhwcmVjaXNpb24sIHNlcGFyYXRvciA9IFwiLFwiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkocHJlY2lzaW9uKS5qb2luKHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgc3RhdGljIHRyYW5zbGF0ZSh4LCB5KSB7XG4gICAgICAgIHJldHVybiBuZXcgTWF0cml4KDEsIDAsIDAsIDEsIHgsIHkpO1xuICAgIH1cblxuICAgIHN0YXRpYyB1bml0KCkge1xuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcm90YXRlKGFuZ2xlLCB4LCB5KSB7XG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgbWF0cml4LmEgPSBNYXRoLmNvcyhyYWQoYW5nbGUpKTtcbiAgICAgICAgbWF0cml4LmIgPSBNYXRoLnNpbihyYWQoYW5nbGUpKTtcbiAgICAgICAgbWF0cml4LmMgPSAtbWF0cml4LmI7XG4gICAgICAgIG1hdHJpeC5kID0gbWF0cml4LmE7XG4gICAgICAgIG1hdHJpeC5lID0gKHggLSB4ICogbWF0cml4LmEgKyB5ICogbWF0cml4LmIpIHx8IDA7XG4gICAgICAgIG1hdHJpeC5mID0gKHkgLSB5ICogbWF0cml4LmEgLSB4ICogbWF0cml4LmIpIHx8IDA7XG5cbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2NhbGUoc2NhbGVYLCBzY2FsZVkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgoc2NhbGVYLCAwLCAwLCBzY2FsZVksIDAsIDApO1xuICAgIH1cbn1cblxuTWF0cml4LklERU5USVRZID0gTWF0cml4LnVuaXQoKTtcblxuZXhwb3J0IGRlZmF1bHQgTWF0cml4OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvTWF0cml4KHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgaWYgKHRyYW5zZm9ybWF0aW9uICYmIHR5cGVvZiB0cmFuc2Zvcm1hdGlvbi5tYXRyaXggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtYXRpb24ubWF0cml4KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zZm9ybWF0aW9uO1xufSIsImltcG9ydCBkZWZpbmVBY2Nlc3NvcnMgZnJvbSAnLi4vYWNjZXNzb3JzL2RlZmluZS1hY2Nlc3NvcnMnO1xuaW1wb3J0IE9ic2VydmVyc01peGluIGZyb20gJy4uL21peGlucy9vYnNlcnZlcnMtbWl4aW4nO1xuaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgZGVmaW5lZCwgTUlOX05VTSwgTUFYX05VTSwgcm91bmQgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBNYXRyaXggZnJvbSAnLi9tYXRyaXgnO1xuaW1wb3J0IHRvTWF0cml4IGZyb20gJy4vdG8tbWF0cml4JztcblxuY2xhc3MgUG9pbnQgZXh0ZW5kcyBDbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy54ID0geCB8fCAwO1xuICAgICAgICB0aGlzLnkgPSB5IHx8IDA7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBvdGhlciAmJiBvdGhlci54ID09PSB0aGlzLnggJiYgb3RoZXIueSA9PT0gdGhpcy55O1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCwgdGhpcy55KTtcbiAgICB9XG5cbiAgICByb3RhdGUoYW5nbGUsIG9yaWdpbikge1xuICAgICAgICBjb25zdCBvcmlnaW5Qb2ludCA9IFBvaW50LmNyZWF0ZShvcmlnaW4pIHx8IFBvaW50LlpFUk87XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKE1hdHJpeC5yb3RhdGUoYW5nbGUsIG9yaWdpblBvaW50LngsIG9yaWdpblBvaW50LnkpKTtcbiAgICB9XG5cbiAgICB0cmFuc2xhdGUoeCwgeSkge1xuICAgICAgICB0aGlzLnggKz0geDtcbiAgICAgICAgdGhpcy55ICs9IHk7XG5cbiAgICAgICAgdGhpcy5nZW9tZXRyeUNoYW5nZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZVdpdGgocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlKHBvaW50LngsIHBvaW50LnkpO1xuICAgIH1cblxuICAgIG1vdmUoeCwgeSkge1xuICAgICAgICB0aGlzLnggPSB0aGlzLnkgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGUoeCwgeSk7XG4gICAgfVxuXG4gICAgc2NhbGUoc2NhbGVYLCBzY2FsZVkgPSBzY2FsZVgpIHtcbiAgICAgICAgdGhpcy54ICo9IHNjYWxlWDtcbiAgICAgICAgdGhpcy55ICo9IHNjYWxlWTtcblxuICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2NhbGVDb3B5KHNjYWxlWCwgc2NhbGVZKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybSh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCBtYXRyaXggPSB0b01hdHJpeCh0cmFuc2Zvcm1hdGlvbik7XG4gICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcztcblxuICAgICAgICB0aGlzLnggPSBtYXRyaXguYSAqIHggKyBtYXRyaXguYyAqIHkgKyBtYXRyaXguZTtcbiAgICAgICAgdGhpcy55ID0gbWF0cml4LmIgKiB4ICsgbWF0cml4LmQgKiB5ICsgbWF0cml4LmY7XG5cbiAgICAgICAgdGhpcy5nZW9tZXRyeUNoYW5nZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybUNvcHkodHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgICAgICBwb2ludC50cmFuc2Zvcm0odHJhbnNmb3JtYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cblxuICAgIGRpc3RhbmNlVG8ocG9pbnQpIHtcbiAgICAgICAgY29uc3QgZHggPSB0aGlzLnggLSBwb2ludC54O1xuICAgICAgICBjb25zdCBkeSA9IHRoaXMueSAtIHBvaW50Lnk7XG5cbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgfVxuXG4gICAgcm91bmQoZGlnaXRzKSB7XG4gICAgICAgIHRoaXMueCA9IHJvdW5kKHRoaXMueCwgZGlnaXRzKTtcbiAgICAgICAgdGhpcy55ID0gcm91bmQodGhpcy55LCBkaWdpdHMpO1xuXG4gICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0b0FycmF5KGRpZ2l0cykge1xuICAgICAgICBjb25zdCBkb1JvdW5kID0gZGVmaW5lZChkaWdpdHMpO1xuICAgICAgICBjb25zdCB4ID0gZG9Sb3VuZCA/IHJvdW5kKHRoaXMueCwgZGlnaXRzKSA6IHRoaXMueDtcbiAgICAgICAgY29uc3QgeSA9IGRvUm91bmQgPyByb3VuZCh0aGlzLnksIGRpZ2l0cykgOiB0aGlzLnk7XG5cbiAgICAgICAgcmV0dXJuIFsgeCwgeSBdO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKGRpZ2l0cywgc2VwYXJhdG9yID0gXCIgXCIpIHtcbiAgICAgICAgbGV0IHsgeCwgeSB9ID0gdGhpcztcblxuICAgICAgICBpZiAoZGVmaW5lZChkaWdpdHMpKSB7XG4gICAgICAgICAgICB4ID0gcm91bmQoeCwgZGlnaXRzKTtcbiAgICAgICAgICAgIHkgPSByb3VuZCh5LCBkaWdpdHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHggKyBzZXBhcmF0b3IgKyB5O1xuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGUoYXJnMCwgYXJnMSkge1xuICAgICAgICBpZiAoZGVmaW5lZChhcmcwKSkge1xuICAgICAgICAgICAgaWYgKGFyZzAgaW5zdGFuY2VvZiBQb2ludCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcmcwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIGFyZzAubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludChhcmcwWzBdLCBhcmcwWzFdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludChhcmcwLCBhcmcxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBtaW4oKSB7XG4gICAgICAgIGxldCBtaW5YID0gTUFYX05VTTtcbiAgICAgICAgbGV0IG1pblkgPSBNQVhfTlVNO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcG9pbnQgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBtaW5YID0gTWF0aC5taW4ocG9pbnQueCwgbWluWCk7XG4gICAgICAgICAgICBtaW5ZID0gTWF0aC5taW4ocG9pbnQueSwgbWluWSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KG1pblgsIG1pblkpO1xuICAgIH1cblxuICAgIHN0YXRpYyBtYXgoKSB7XG4gICAgICAgIGxldCBtYXhYID0gTUlOX05VTTtcbiAgICAgICAgbGV0IG1heFkgPSBNSU5fTlVNO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIG1heFggPSBNYXRoLm1heChwb2ludC54LCBtYXhYKTtcbiAgICAgICAgICAgIG1heFkgPSBNYXRoLm1heChwb2ludC55LCBtYXhZKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQobWF4WCwgbWF4WSk7XG4gICAgfVxuXG4gICAgc3RhdGljIG1pblBvaW50KCkge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KE1JTl9OVU0sIE1JTl9OVU0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBtYXhQb2ludCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludChNQVhfTlVNLCBNQVhfTlVNKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IFpFUk8oKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQoMCwgMCk7XG4gICAgfVxufVxuXG5kZWZpbmVBY2Nlc3NvcnMoUG9pbnQucHJvdG90eXBlLCBbIFwieFwiLCBcInlcIiBdKTtcbk9ic2VydmVyc01peGluLmV4dGVuZChQb2ludC5wcm90b3R5cGUpO1xuXG5leHBvcnQgZGVmYXVsdCBQb2ludDtcbiIsImltcG9ydCBkZWZpbmVBY2Nlc3NvcnMgZnJvbSAnLi4vYWNjZXNzb3JzL2RlZmluZS1hY2Nlc3NvcnMnO1xuaW1wb3J0IE9ic2VydmVyc01peGluIGZyb20gJy4uL21peGlucy9vYnNlcnZlcnMtbWl4aW4nO1xuaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgZGVmaW5lZCwgcm91bmQgfSBmcm9tICcuLi91dGlsJztcblxuY2xhc3MgU2l6ZSBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoIHx8IDA7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0IHx8IDA7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBvdGhlciAmJiBvdGhlci53aWR0aCA9PT0gdGhpcy53aWR0aCAmJiBvdGhlci5oZWlnaHQgPT09IHRoaXMuaGVpZ2h0O1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNpemUodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgIH1cblxuICAgIHRvQXJyYXkoZGlnaXRzKSB7XG4gICAgICAgIGNvbnN0IGRvUm91bmQgPSBkZWZpbmVkKGRpZ2l0cyk7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gZG9Sb3VuZCA/IHJvdW5kKHRoaXMud2lkdGgsIGRpZ2l0cykgOiB0aGlzLndpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBkb1JvdW5kID8gcm91bmQodGhpcy5oZWlnaHQsIGRpZ2l0cykgOiB0aGlzLmhlaWdodDtcblxuICAgICAgICByZXR1cm4gWyB3aWR0aCwgaGVpZ2h0IF07XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShhcmcwLCBhcmcxKSB7XG4gICAgICAgIGlmIChkZWZpbmVkKGFyZzApKSB7XG4gICAgICAgICAgICBpZiAoYXJnMCBpbnN0YW5jZW9mIFNpemUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJnMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiBhcmcwLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU2l6ZShhcmcwWzBdLCBhcmcwWzFdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaXplKGFyZzAsIGFyZzEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBaRVJPKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNpemUoMCwgMCk7XG4gICAgfVxufVxuXG5kZWZpbmVBY2Nlc3NvcnMoU2l6ZS5wcm90b3R5cGUsIFsgXCJ3aWR0aFwiLCBcImhlaWdodFwiIF0pO1xuT2JzZXJ2ZXJzTWl4aW4uZXh0ZW5kKFNpemUucHJvdG90eXBlKTtcblxuZXhwb3J0IGRlZmF1bHQgU2l6ZTsiLCJpbXBvcnQgT2JzZXJ2ZXJzTWl4aW4gZnJvbSAnLi4vbWl4aW5zL29ic2VydmVycy1taXhpbic7XG5pbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi9wb2ludCc7XG5pbXBvcnQgU2l6ZSBmcm9tICcuL3NpemUnO1xuXG5jbGFzcyBSZWN0IGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKG9yaWdpbiA9IG5ldyBQb2ludCgpLCBzaXplID0gbmV3IFNpemUoKSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuc2V0T3JpZ2luKG9yaWdpbik7XG4gICAgICAgIHRoaXMuc2V0U2l6ZShzaXplKTtcbiAgICB9XG5cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN0KFxuICAgICAgICAgICAgdGhpcy5vcmlnaW4uY2xvbmUoKSxcbiAgICAgICAgICAgIHRoaXMuc2l6ZS5jbG9uZSgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBvdGhlciAmJlxuICAgICAgICAgICAgICAgb3RoZXIub3JpZ2luLmVxdWFscyh0aGlzLm9yaWdpbikgJiZcbiAgICAgICAgICAgICAgIG90aGVyLnNpemUuZXF1YWxzKHRoaXMuc2l6ZSk7XG4gICAgfVxuXG4gICAgc2V0T3JpZ2luKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX29ic2VydmVyRmllbGQoXCJvcmlnaW5cIiwgUG9pbnQuY3JlYXRlKHZhbHVlKSk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0T3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW47XG4gICAgfVxuXG4gICAgc2V0U2l6ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9vYnNlcnZlckZpZWxkKFwic2l6ZVwiLCBTaXplLmNyZWF0ZSh2YWx1ZSkpO1xuICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldFNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemU7XG4gICAgfVxuXG4gICAgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpemUud2lkdGg7XG4gICAgfVxuXG4gICAgaGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplLmhlaWdodDtcbiAgICB9XG5cbiAgICB0b3BMZWZ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW4uY2xvbmUoKTtcbiAgICB9XG5cbiAgICBib3R0b21SaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luLmNsb25lKCkudHJhbnNsYXRlKHRoaXMud2lkdGgoKSwgdGhpcy5oZWlnaHQoKSk7XG4gICAgfVxuXG4gICAgdG9wUmlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5jbG9uZSgpLnRyYW5zbGF0ZSh0aGlzLndpZHRoKCksIDApO1xuICAgIH1cblxuICAgIGJvdHRvbUxlZnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5jbG9uZSgpLnRyYW5zbGF0ZSgwLCB0aGlzLmhlaWdodCgpKTtcbiAgICB9XG5cbiAgICBjZW50ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbi5jbG9uZSgpLnRyYW5zbGF0ZSh0aGlzLndpZHRoKCkgLyAyLCB0aGlzLmhlaWdodCgpIC8gMik7XG4gICAgfVxuXG4gICAgYmJveChtYXRyaXgpIHtcbiAgICAgICAgY29uc3QgdGwgPSB0aGlzLnRvcExlZnQoKS50cmFuc2Zvcm1Db3B5KG1hdHJpeCk7XG4gICAgICAgIGNvbnN0IHRyID0gdGhpcy50b3BSaWdodCgpLnRyYW5zZm9ybUNvcHkobWF0cml4KTtcbiAgICAgICAgY29uc3QgYnIgPSB0aGlzLmJvdHRvbVJpZ2h0KCkudHJhbnNmb3JtQ29weShtYXRyaXgpO1xuICAgICAgICBjb25zdCBibCA9IHRoaXMuYm90dG9tTGVmdCgpLnRyYW5zZm9ybUNvcHkobWF0cml4KTtcblxuICAgICAgICByZXR1cm4gUmVjdC5mcm9tUG9pbnRzKHRsLCB0ciwgYnIsIGJsKTtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm1Db3B5KG0pIHtcbiAgICAgICAgcmV0dXJuIFJlY3QuZnJvbVBvaW50cyhcbiAgICAgICAgICAgIHRoaXMudG9wTGVmdCgpLnRyYW5zZm9ybShtKSxcbiAgICAgICAgICAgIHRoaXMuYm90dG9tUmlnaHQoKS50cmFuc2Zvcm0obSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBleHBhbmQoeCwgeSA9IHgpIHtcblxuICAgICAgICB0aGlzLnNpemUud2lkdGggKz0gMiAqIHg7XG4gICAgICAgIHRoaXMuc2l6ZS5oZWlnaHQgKz0gMiAqIHk7XG5cbiAgICAgICAgdGhpcy5vcmlnaW4udHJhbnNsYXRlKC14LCAteSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZXhwYW5kQ29weSh4LCB5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuZXhwYW5kKHgsIHkpO1xuICAgIH1cblxuICAgIGNvbnRhaW5zUG9pbnQocG9pbnQpIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luID0gdGhpcy5vcmlnaW47XG4gICAgICAgIGNvbnN0IGJvdHRvbVJpZ2h0ID0gdGhpcy5ib3R0b21SaWdodCgpO1xuICAgICAgICByZXR1cm4gIShwb2ludC54IDwgb3JpZ2luLnggfHwgcG9pbnQueSA8IG9yaWdpbi55IHx8IGJvdHRvbVJpZ2h0LnggPCBwb2ludC54IHx8IGJvdHRvbVJpZ2h0LnkgPCBwb2ludC55KTtcbiAgICB9XG5cbiAgICBfaXNPblBhdGgocG9pbnQsIHdpZHRoKSB7XG4gICAgICAgIGNvbnN0IHJlY3RPdXRlciA9IHRoaXMuZXhwYW5kQ29weSh3aWR0aCwgd2lkdGgpO1xuICAgICAgICBjb25zdCByZWN0SW5uZXIgPSB0aGlzLmV4cGFuZENvcHkoLXdpZHRoLCAtd2lkdGgpO1xuXG4gICAgICAgIHJldHVybiByZWN0T3V0ZXIuY29udGFpbnNQb2ludChwb2ludCkgJiYgIXJlY3RJbm5lci5jb250YWluc1BvaW50KHBvaW50KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVBvaW50cygpIHtcbiAgICAgICAgY29uc3QgdG9wTGVmdCA9IFBvaW50Lm1pbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zdCBib3R0b21SaWdodCA9IFBvaW50Lm1heC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zdCBzaXplID0gbmV3IFNpemUoXG4gICAgICAgICAgICBib3R0b21SaWdodC54IC0gdG9wTGVmdC54LFxuICAgICAgICAgICAgYm90dG9tUmlnaHQueSAtIHRvcExlZnQueVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBuZXcgUmVjdCh0b3BMZWZ0LCBzaXplKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdW5pb24oYSwgYikge1xuICAgICAgICByZXR1cm4gUmVjdC5mcm9tUG9pbnRzKFxuICAgICAgICAgICAgUG9pbnQubWluKGEudG9wTGVmdCgpLCBiLnRvcExlZnQoKSksXG4gICAgICAgICAgICBQb2ludC5tYXgoYS5ib3R0b21SaWdodCgpLCBiLmJvdHRvbVJpZ2h0KCkpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc3RhdGljIGludGVyc2VjdChhLCBiKSB7XG4gICAgICAgIGNvbnN0IHJlY3QxID0ge1xuICAgICAgICAgICAgbGVmdDogYS50b3BMZWZ0KCkueCxcbiAgICAgICAgICAgIHRvcDogYS50b3BMZWZ0KCkueSxcbiAgICAgICAgICAgIHJpZ2h0OiBhLmJvdHRvbVJpZ2h0KCkueCxcbiAgICAgICAgICAgIGJvdHRvbTogYS5ib3R0b21SaWdodCgpLnlcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZWN0MiA9IHtcbiAgICAgICAgICAgIGxlZnQ6IGIudG9wTGVmdCgpLngsXG4gICAgICAgICAgICB0b3A6IGIudG9wTGVmdCgpLnksXG4gICAgICAgICAgICByaWdodDogYi5ib3R0b21SaWdodCgpLngsXG4gICAgICAgICAgICBib3R0b206IGIuYm90dG9tUmlnaHQoKS55XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHJlY3QxLmxlZnQgPD0gcmVjdDIucmlnaHQgJiZcbiAgICAgICAgICAgIHJlY3QyLmxlZnQgPD0gcmVjdDEucmlnaHQgJiZcbiAgICAgICAgICAgIHJlY3QxLnRvcCA8PSByZWN0Mi5ib3R0b20gJiZcbiAgICAgICAgICAgIHJlY3QyLnRvcCA8PSByZWN0MS5ib3R0b20pIHtcbiAgICAgICAgICAgIHJldHVybiBSZWN0LmZyb21Qb2ludHMoXG4gICAgICAgICAgICAgICAgbmV3IFBvaW50KE1hdGgubWF4KHJlY3QxLmxlZnQsIHJlY3QyLmxlZnQpLCBNYXRoLm1heChyZWN0MS50b3AsIHJlY3QyLnRvcCkpLFxuICAgICAgICAgICAgICAgIG5ldyBQb2ludChNYXRoLm1pbihyZWN0MS5yaWdodCwgcmVjdDIucmlnaHQpLCBNYXRoLm1pbihyZWN0MS5ib3R0b20sIHJlY3QyLmJvdHRvbSkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5PYnNlcnZlcnNNaXhpbi5leHRlbmQoUmVjdC5wcm90b3R5cGUpO1xuXG5leHBvcnQgZGVmYXVsdCBSZWN0OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsbGlwc2VFeHRyZW1lQW5nbGVzKGNlbnRlciwgcngsIHJ5LCBtYXRyaXgpIHtcbiAgICBsZXQgZXh0cmVtZVggPSAwO1xuICAgIGxldCBleHRyZW1lWSA9IDA7XG5cbiAgICBpZiAobWF0cml4KSB7XG4gICAgICAgIGV4dHJlbWVYID0gTWF0aC5hdGFuMihtYXRyaXguYyAqIHJ5LCBtYXRyaXguYSAqIHJ4KTtcbiAgICAgICAgaWYgKG1hdHJpeC5iICE9PSAwKSB7XG4gICAgICAgICAgICBleHRyZW1lWSA9IE1hdGguYXRhbjIobWF0cml4LmQgKiByeSwgbWF0cml4LmIgKiByeCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBleHRyZW1lWCxcbiAgICAgICAgeTogZXh0cmVtZVlcbiAgICB9O1xufSIsImltcG9ydCBkZWZpbmVBY2Nlc3NvcnMgZnJvbSAnLi4vYWNjZXNzb3JzL2RlZmluZS1hY2Nlc3NvcnMnO1xuaW1wb3J0IE9ic2VydmVyc01peGluIGZyb20gJy4uL21peGlucy9vYnNlcnZlcnMtbWl4aW4nO1xuaW1wb3J0IFBvaW50IGZyb20gJy4vcG9pbnQnO1xuaW1wb3J0IFJlY3QgZnJvbSAnLi9yZWN0JztcbmltcG9ydCBlbGxpcHNlRXh0cmVtZUFuZ2xlcyBmcm9tICcuL21hdGgvZWxsaXBzZS1leHRyZW1lLWFuZ2xlcyc7XG5pbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyByYWQgfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgUElfRElWXzIgPSBNYXRoLlBJIC8gMjtcblxuY2xhc3MgQ2lyY2xlIGV4dGVuZHMgQ2xhc3Mge1xuXG4gICAgY29uc3RydWN0b3IoY2VudGVyID0gbmV3IFBvaW50KCksIHJhZGl1cyA9IDApIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnNldENlbnRlcihjZW50ZXIpO1xuICAgICAgICB0aGlzLnNldFJhZGl1cyhyYWRpdXMpO1xuICAgIH1cblxuICAgIHNldENlbnRlcih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9vYnNlcnZlckZpZWxkKFwiY2VudGVyXCIsIFBvaW50LmNyZWF0ZSh2YWx1ZSkpO1xuICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldENlbnRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2VudGVyO1xuICAgIH1cblxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICByZXR1cm4gb3RoZXIgJiZcbiAgICAgICAgICAgICAgIG90aGVyLmNlbnRlci5lcXVhbHModGhpcy5jZW50ZXIpICYmXG4gICAgICAgICAgICAgICBvdGhlci5yYWRpdXMgPT09IHRoaXMucmFkaXVzO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IENpcmNsZSh0aGlzLmNlbnRlci5jbG9uZSgpLCB0aGlzLnJhZGl1cyk7XG4gICAgfVxuXG4gICAgcG9pbnRBdChhbmdsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRBdChyYWQoYW5nbGUpKTtcbiAgICB9XG5cbiAgICBiYm94KG1hdHJpeCkge1xuICAgICAgICBjb25zdCBleHRyZW1lQW5nbGVzID0gZWxsaXBzZUV4dHJlbWVBbmdsZXModGhpcy5jZW50ZXIsIHRoaXMucmFkaXVzLCB0aGlzLnJhZGl1cywgbWF0cml4KTtcbiAgICAgICAgbGV0IG1pblBvaW50ID0gUG9pbnQubWF4UG9pbnQoKTtcbiAgICAgICAgbGV0IG1heFBvaW50ID0gUG9pbnQubWluUG9pbnQoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRQb2ludFggPSB0aGlzLl9wb2ludEF0KGV4dHJlbWVBbmdsZXMueCArIGkgKiBQSV9ESVZfMikudHJhbnNmb3JtQ29weShtYXRyaXgpO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRQb2ludFkgPSB0aGlzLl9wb2ludEF0KGV4dHJlbWVBbmdsZXMueSArIGkgKiBQSV9ESVZfMikudHJhbnNmb3JtQ29weShtYXRyaXgpO1xuICAgICAgICAgICAgbGV0IGN1cnJlbnRQb2ludCA9IG5ldyBQb2ludChjdXJyZW50UG9pbnRYLngsIGN1cnJlbnRQb2ludFkueSk7XG5cbiAgICAgICAgICAgIG1pblBvaW50ID0gUG9pbnQubWluKG1pblBvaW50LCBjdXJyZW50UG9pbnQpO1xuICAgICAgICAgICAgbWF4UG9pbnQgPSBQb2ludC5tYXgobWF4UG9pbnQsIGN1cnJlbnRQb2ludCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUmVjdC5mcm9tUG9pbnRzKG1pblBvaW50LCBtYXhQb2ludCk7XG4gICAgfVxuXG4gICAgX3BvaW50QXQoYW5nbGUpIHtcbiAgICAgICAgY29uc3QgeyBjZW50ZXIsIHJhZGl1cyB9ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KFxuICAgICAgICAgICAgY2VudGVyLnggKyByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgICAgICBjZW50ZXIueSArIHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNvbnRhaW5zUG9pbnQocG9pbnQpIHtcbiAgICAgICAgY29uc3QgeyBjZW50ZXIsIHJhZGl1cyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaW5DaXJjbGUgPSBNYXRoLnBvdyhwb2ludC54IC0gY2VudGVyLngsIDIpICtcbiAgICAgICAgICAgIE1hdGgucG93KHBvaW50LnkgLSBjZW50ZXIueSwgMikgPD0gTWF0aC5wb3cocmFkaXVzLCAyKTtcbiAgICAgICAgcmV0dXJuIGluQ2lyY2xlO1xuICAgIH1cblxuICAgIF9pc09uUGF0aChwb2ludCwgd2lkdGgpIHtcbiAgICAgICAgY29uc3QgeyBjZW50ZXIsIHJhZGl1cyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgcG9pbnREaXN0YW5jZSA9IGNlbnRlci5kaXN0YW5jZVRvKHBvaW50KTtcblxuICAgICAgICByZXR1cm4gcmFkaXVzIC0gd2lkdGggPD0gcG9pbnREaXN0YW5jZSAmJiBwb2ludERpc3RhbmNlIDw9IHJhZGl1cyArIHdpZHRoO1xuICAgIH1cbn1cblxuZGVmaW5lQWNjZXNzb3JzKENpcmNsZS5wcm90b3R5cGUsIFsgXCJyYWRpdXNcIiBdKTtcbk9ic2VydmVyc01peGluLmV4dGVuZChDaXJjbGUucHJvdG90eXBlKTtcblxuZXhwb3J0IGRlZmF1bHQgQ2lyY2xlOyIsImNvbnN0IFBSRUNJU0lPTiA9IDEwO1xuXG5leHBvcnQgeyBQUkVDSVNJT04gfTsiLCJpbXBvcnQgeyBQUkVDSVNJT04gfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJy4uLy4uL3V0aWwnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbG9zZShhLCBiLCB0b2xlcmFuY2UgPSBQUkVDSVNJT04pIHtcbiAgICByZXR1cm4gcm91bmQoTWF0aC5hYnMoYSAtIGIpLCB0b2xlcmFuY2UpID09PSAwO1xufSIsImltcG9ydCBjbG9zZSBmcm9tICcuL2Nsb3NlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xvc2VPckxlc3MoYSwgYiwgdG9sZXJhbmNlKSB7XG4gICAgcmV0dXJuIGEgPCBiIHx8IGNsb3NlKGEsIGIsIHRvbGVyYW5jZSk7XG59IiwiaW1wb3J0IFBvaW50IGZyb20gJy4uL3BvaW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZUludGVyc2VjdGlvbihwMCwgcDEsIHAyLCBwMykge1xuICAgIGNvbnN0IHMxeCA9IHAxLnggLSBwMC54O1xuICAgIGNvbnN0IHMyeCA9IHAzLnggLSBwMi54O1xuICAgIGNvbnN0IHMxeSA9IHAxLnkgLSBwMC55O1xuICAgIGNvbnN0IHMyeSA9IHAzLnkgLSBwMi55O1xuICAgIGNvbnN0IG54ID0gcDAueCAtIHAyLng7XG4gICAgY29uc3QgbnkgPSBwMC55IC0gcDIueTtcbiAgICBjb25zdCBkID0gczF4ICogczJ5IC0gczJ4ICogczF5O1xuICAgIGNvbnN0IHMgPSAoczF4ICogbnkgLSBzMXkgKiBueCkgLyBkO1xuICAgIGNvbnN0IHQgPSAoczJ4ICogbnkgLSBzMnkgKiBueCkgLyBkO1xuXG4gICAgaWYgKHMgPj0gMCAmJiBzIDw9IDEgJiYgdCA+PSAwICYmIHQgPD0gMSkge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHAwLnggKyB0ICogczF4LCBwMC55ICsgdCAqIHMxeSk7XG4gICAgfVxufSIsImltcG9ydCBPYnNlcnZlcnNNaXhpbiBmcm9tICcuLi9taXhpbnMvb2JzZXJ2ZXJzLW1peGluJztcbmltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB0b01hdHJpeCBmcm9tICcuL3RvLW1hdHJpeCc7XG5pbXBvcnQgTWF0cml4IGZyb20gJy4vbWF0cml4JztcbmltcG9ydCBQb2ludCBmcm9tICcuL3BvaW50JztcblxuY2xhc3MgVHJhbnNmb3JtYXRpb24gZXh0ZW5kcyBDbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3RvcihtYXRyaXggPSBNYXRyaXgudW5pdCgpKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5fbWF0cml4ID0gbWF0cml4O1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybWF0aW9uKFxuICAgICAgICAgICAgdGhpcy5fbWF0cml4LmNsb25lKClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG90aGVyICYmXG4gICAgICAgICAgICAgICBvdGhlci5fbWF0cml4LmVxdWFscyh0aGlzLl9tYXRyaXgpO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZSh4LCB5KSB7XG4gICAgICAgIHRoaXMuX21hdHJpeCA9IHRoaXMuX21hdHJpeC5tdWx0aXBseUNvcHkoTWF0cml4LnRyYW5zbGF0ZSh4LCB5KSk7XG5cbiAgICAgICAgdGhpcy5fb3B0aW9uc0NoYW5nZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzY2FsZShzY2FsZVgsIHNjYWxlWSA9IHNjYWxlWCwgb3JpZ2luID0gbnVsbCkge1xuICAgICAgICBsZXQgb3JpZ2luUG9pbnQgPSBvcmlnaW47XG5cbiAgICAgICAgaWYgKG9yaWdpblBvaW50KSB7XG4gICAgICAgICAgICBvcmlnaW5Qb2ludCA9IFBvaW50LmNyZWF0ZShvcmlnaW5Qb2ludCk7XG4gICAgICAgICAgICB0aGlzLl9tYXRyaXggPSB0aGlzLl9tYXRyaXgubXVsdGlwbHlDb3B5KE1hdHJpeC50cmFuc2xhdGUob3JpZ2luUG9pbnQueCwgb3JpZ2luUG9pbnQueSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbWF0cml4ID0gdGhpcy5fbWF0cml4Lm11bHRpcGx5Q29weShNYXRyaXguc2NhbGUoc2NhbGVYLCBzY2FsZVkpKTtcblxuICAgICAgICBpZiAob3JpZ2luUG9pbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX21hdHJpeCA9IHRoaXMuX21hdHJpeC5tdWx0aXBseUNvcHkoTWF0cml4LnRyYW5zbGF0ZSgtb3JpZ2luUG9pbnQueCwgLW9yaWdpblBvaW50LnkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX29wdGlvbnNDaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcm90YXRlKGFuZ2xlLCBvcmlnaW4pIHtcbiAgICAgICAgY29uc3Qgb3JpZ2luUG9pbnQgPSBQb2ludC5jcmVhdGUob3JpZ2luKSB8fCBQb2ludC5aRVJPO1xuXG4gICAgICAgIHRoaXMuX21hdHJpeCA9IHRoaXMuX21hdHJpeC5tdWx0aXBseUNvcHkoTWF0cml4LnJvdGF0ZShhbmdsZSwgb3JpZ2luUG9pbnQueCwgb3JpZ2luUG9pbnQueSkpO1xuXG4gICAgICAgIHRoaXMuX29wdGlvbnNDaGFuZ2UoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbXVsdGlwbHkodHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gdG9NYXRyaXgodHJhbnNmb3JtYXRpb24pO1xuXG4gICAgICAgIHRoaXMuX21hdHJpeCA9IHRoaXMuX21hdHJpeC5tdWx0aXBseUNvcHkobWF0cml4KTtcblxuICAgICAgICB0aGlzLl9vcHRpb25zQ2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG1hdHJpeCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX21hdHJpeCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9uc0NoYW5nZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fbWF0cml4O1xuICAgIH1cblxuICAgIF9vcHRpb25zQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnNDaGFuZ2Uoe1xuICAgICAgICAgICAgZmllbGQ6IFwidHJhbnNmb3JtXCIsXG4gICAgICAgICAgICB2YWx1ZTogdGhpc1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbk9ic2VydmVyc01peGluLmV4dGVuZChUcmFuc2Zvcm1hdGlvbi5wcm90b3R5cGUpO1xuXG5leHBvcnQgZGVmYXVsdCBUcmFuc2Zvcm1hdGlvbjtcbiIsImltcG9ydCBUcmFuc2Zvcm1hdGlvbiBmcm9tICcuL3RyYW5zZm9ybWF0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtKG1hdHJpeCkge1xuICAgIGlmIChtYXRyaXggPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKG1hdHJpeCBpbnN0YW5jZW9mIFRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm1hdGlvbihtYXRyaXgpO1xufSIsImltcG9ydCBkZWZpbmVBY2Nlc3NvcnMgZnJvbSAnLi4vYWNjZXNzb3JzL2RlZmluZS1hY2Nlc3NvcnMnO1xuaW1wb3J0IE9ic2VydmVyc01peGluIGZyb20gJy4uL21peGlucy9vYnNlcnZlcnMtbWl4aW4nO1xuaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgZGVnLCByYWQsIHJvdW5kIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCBjbG9zZU9yTGVzcyBmcm9tICcuL21hdGgvY2xvc2Utb3ItbGVzcyc7XG5pbXBvcnQgbGluZUludGVyc2VjdGlvbiBmcm9tICcuL21hdGgvbGluZS1pbnRlcnNlY3Rpb24nO1xuaW1wb3J0IGVsbGlwc2VFeHRyZW1lQW5nbGVzIGZyb20gJy4vbWF0aC9lbGxpcHNlLWV4dHJlbWUtYW5nbGVzJztcblxuaW1wb3J0IHsgUFJFQ0lTSU9OIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4vcG9pbnQnO1xuaW1wb3J0IFJlY3QgZnJvbSAnLi9yZWN0JztcbmltcG9ydCB0cmFuc2Zvcm0gZnJvbSAnLi90cmFuc2Zvcm0nO1xuXG5jb25zdCBNQVhfSU5URVJWQUwgPSA0NTtcbmNvbnN0IHBvdyA9IE1hdGgucG93O1xuXG5jbGFzcyBBcmMgZXh0ZW5kcyBDbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3RvcihjZW50ZXIgPSBuZXcgUG9pbnQoKSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5zZXRDZW50ZXIoY2VudGVyKTtcblxuICAgICAgICB0aGlzLnJhZGl1c1ggPSBvcHRpb25zLnJhZGl1c1g7XG4gICAgICAgIHRoaXMucmFkaXVzWSA9IG9wdGlvbnMucmFkaXVzWSB8fCBvcHRpb25zLnJhZGl1c1g7XG4gICAgICAgIHRoaXMuc3RhcnRBbmdsZSA9IG9wdGlvbnMuc3RhcnRBbmdsZTtcbiAgICAgICAgdGhpcy5lbmRBbmdsZSA9IG9wdGlvbnMuZW5kQW5nbGU7XG4gICAgICAgIHRoaXMuYW50aWNsb2Nrd2lzZSA9IG9wdGlvbnMuYW50aWNsb2Nrd2lzZSB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy54Um90YXRpb24gPSBvcHRpb25zLnhSb3RhdGlvbjtcbiAgICB9XG5cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcmModGhpcy5jZW50ZXIsIHtcbiAgICAgICAgICAgIHJhZGl1c1g6IHRoaXMucmFkaXVzWCxcbiAgICAgICAgICAgIHJhZGl1c1k6IHRoaXMucmFkaXVzWSxcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IHRoaXMuc3RhcnRBbmdsZSxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiB0aGlzLmVuZEFuZ2xlLFxuICAgICAgICAgICAgYW50aWNsb2Nrd2lzZTogdGhpcy5hbnRpY2xvY2t3aXNlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldENlbnRlcih2YWx1ZSkge1xuICAgICAgICB0aGlzLl9vYnNlcnZlckZpZWxkKFwiY2VudGVyXCIsIFBvaW50LmNyZWF0ZSh2YWx1ZSkpO1xuICAgICAgICB0aGlzLmdlb21ldHJ5Q2hhbmdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldENlbnRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2VudGVyO1xuICAgIH1cblxuICAgIHBvaW50QXQoYW5nbGUpIHtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5jZW50ZXI7XG4gICAgICAgIGNvbnN0IHJhZGlhbiA9IHJhZChhbmdsZSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludChcbiAgICAgICAgICAgIGNlbnRlci54ICsgdGhpcy5yYWRpdXNYICogTWF0aC5jb3MocmFkaWFuKSxcbiAgICAgICAgICAgIGNlbnRlci55ICsgdGhpcy5yYWRpdXNZICogTWF0aC5zaW4ocmFkaWFuKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGN1cnZlUG9pbnRzKCkge1xuICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gdGhpcy5zdGFydEFuZ2xlO1xuICAgICAgICBjb25zdCBkaXIgPSB0aGlzLmFudGljbG9ja3dpc2UgPyAtMSA6IDE7XG4gICAgICAgIGNvbnN0IGN1cnZlUG9pbnRzID0gWyB0aGlzLnBvaW50QXQoc3RhcnRBbmdsZSkgXTtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSB0aGlzLl9hcmNJbnRlcnZhbCgpO1xuICAgICAgICBjb25zdCBpbnRlcnZhbEFuZ2xlID0gaW50ZXJ2YWwuZW5kQW5nbGUgLSBpbnRlcnZhbC5zdGFydEFuZ2xlO1xuICAgICAgICBjb25zdCBzdWJJbnRlcnZhbHNDb3VudCA9IE1hdGguY2VpbChpbnRlcnZhbEFuZ2xlIC8gTUFYX0lOVEVSVkFMKTtcbiAgICAgICAgY29uc3Qgc3ViSW50ZXJ2YWxBbmdsZSA9IGludGVydmFsQW5nbGUgLyBzdWJJbnRlcnZhbHNDb3VudDtcbiAgICAgICAgbGV0IGN1cnJlbnRBbmdsZSA9IHN0YXJ0QW5nbGU7XG4gICAgICAgIGxldCB0cmFuc2Zvcm1hdGlvbjtcbiAgICAgICAgaWYgKHRoaXMueFJvdGF0aW9uKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1hdGlvbiA9IHRyYW5zZm9ybSgpLnJvdGF0ZSh0aGlzLnhSb3RhdGlvbiwgdGhpcy5jZW50ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gc3ViSW50ZXJ2YWxzQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbmV4dEFuZ2xlID0gY3VycmVudEFuZ2xlICsgZGlyICogc3ViSW50ZXJ2YWxBbmdsZTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMuX2ludGVydmFsQ3VydmVQb2ludHMoY3VycmVudEFuZ2xlLCBuZXh0QW5nbGUsIHRyYW5zZm9ybWF0aW9uKTtcblxuICAgICAgICAgICAgY3VydmVQb2ludHMucHVzaChwb2ludHMuY3AxLCBwb2ludHMuY3AyLCBwb2ludHMucDIpO1xuICAgICAgICAgICAgY3VycmVudEFuZ2xlID0gbmV4dEFuZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGN1cnZlUG9pbnRzO1xuICAgIH1cblxuICAgIGJib3gobWF0cml4KSB7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gdGhpcy5fYXJjSW50ZXJ2YWwoKTtcbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IGludGVydmFsLnN0YXJ0QW5nbGU7XG4gICAgICAgIGNvbnN0IGVuZEFuZ2xlID0gaW50ZXJ2YWwuZW5kQW5nbGU7XG4gICAgICAgIGNvbnN0IGV4dHJlbWVBbmdsZXMgPSBlbGxpcHNlRXh0cmVtZUFuZ2xlcyh0aGlzLmNlbnRlciwgdGhpcy5yYWRpdXNYLCB0aGlzLnJhZGl1c1ksIG1hdHJpeCk7XG4gICAgICAgIGNvbnN0IGV4dHJlbWVYID0gZGVnKGV4dHJlbWVBbmdsZXMueCk7XG4gICAgICAgIGNvbnN0IGV4dHJlbWVZID0gZGVnKGV4dHJlbWVBbmdsZXMueSk7XG4gICAgICAgIGNvbnN0IGVuZFBvaW50ID0gdGhpcy5wb2ludEF0KGVuZEFuZ2xlKS50cmFuc2Zvcm1Db3B5KG1hdHJpeCk7XG4gICAgICAgIGxldCBjdXJyZW50QW5nbGVYID0gYmJveFN0YXJ0QW5nbGUoZXh0cmVtZVgsIHN0YXJ0QW5nbGUpO1xuICAgICAgICBsZXQgY3VycmVudEFuZ2xlWSA9IGJib3hTdGFydEFuZ2xlKGV4dHJlbWVZLCBzdGFydEFuZ2xlKTtcbiAgICAgICAgbGV0IGN1cnJlbnRQb2ludCA9IHRoaXMucG9pbnRBdChzdGFydEFuZ2xlKS50cmFuc2Zvcm1Db3B5KG1hdHJpeCk7XG4gICAgICAgIGxldCBtaW5Qb2ludCA9IFBvaW50Lm1pbihjdXJyZW50UG9pbnQsIGVuZFBvaW50KTtcbiAgICAgICAgbGV0IG1heFBvaW50ID0gUG9pbnQubWF4KGN1cnJlbnRQb2ludCwgZW5kUG9pbnQpO1xuXG4gICAgICAgIHdoaWxlIChjdXJyZW50QW5nbGVYIDwgZW5kQW5nbGUgfHwgY3VycmVudEFuZ2xlWSA8IGVuZEFuZ2xlKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudFBvaW50WDtcbiAgICAgICAgICAgIGlmIChjdXJyZW50QW5nbGVYIDwgZW5kQW5nbGUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UG9pbnRYID0gdGhpcy5wb2ludEF0KGN1cnJlbnRBbmdsZVgpLnRyYW5zZm9ybUNvcHkobWF0cml4KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50QW5nbGVYICs9IDkwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY3VycmVudFBvaW50WTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50QW5nbGVZIDwgZW5kQW5nbGUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UG9pbnRZID0gdGhpcy5wb2ludEF0KGN1cnJlbnRBbmdsZVkpLnRyYW5zZm9ybUNvcHkobWF0cml4KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50QW5nbGVZICs9IDkwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXJyZW50UG9pbnQgPSBuZXcgUG9pbnQoY3VycmVudFBvaW50WC54LCBjdXJyZW50UG9pbnRZLnkpO1xuICAgICAgICAgICAgbWluUG9pbnQgPSBQb2ludC5taW4obWluUG9pbnQsIGN1cnJlbnRQb2ludCk7XG4gICAgICAgICAgICBtYXhQb2ludCA9IFBvaW50Lm1heChtYXhQb2ludCwgY3VycmVudFBvaW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBSZWN0LmZyb21Qb2ludHMobWluUG9pbnQsIG1heFBvaW50KTtcbiAgICB9XG5cbiAgICBfYXJjSW50ZXJ2YWwoKSB7XG4gICAgICAgIGxldCB7IHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBhbnRpY2xvY2t3aXNlIH0gPSB0aGlzO1xuXG4gICAgICAgIGlmIChhbnRpY2xvY2t3aXNlKSB7XG4gICAgICAgICAgICBsZXQgb2xkU3RhcnQgPSBzdGFydEFuZ2xlO1xuICAgICAgICAgICAgc3RhcnRBbmdsZSA9IGVuZEFuZ2xlO1xuICAgICAgICAgICAgZW5kQW5nbGUgPSBvbGRTdGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydEFuZ2xlID4gZW5kQW5nbGUgfHwgKGFudGljbG9ja3dpc2UgJiYgc3RhcnRBbmdsZSA9PT0gZW5kQW5nbGUpKSB7XG4gICAgICAgICAgICBlbmRBbmdsZSArPSAzNjA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhcnRBbmdsZTogc3RhcnRBbmdsZSxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiBlbmRBbmdsZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9pbnRlcnZhbEN1cnZlUG9pbnRzKHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCB0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCBwMSA9IHRoaXMucG9pbnRBdChzdGFydEFuZ2xlKTtcbiAgICAgICAgY29uc3QgcDIgPSB0aGlzLnBvaW50QXQoZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCBwMURlcml2YXRpdmUgPSB0aGlzLl9kZXJpdmF0aXZlQXQoc3RhcnRBbmdsZSk7XG4gICAgICAgIGNvbnN0IHAyRGVyaXZhdGl2ZSA9IHRoaXMuX2Rlcml2YXRpdmVBdChlbmRBbmdsZSk7XG4gICAgICAgIGNvbnN0IHQgPSAocmFkKGVuZEFuZ2xlKSAtIHJhZChzdGFydEFuZ2xlKSkgLyAzO1xuICAgICAgICBjb25zdCBjcDEgPSBuZXcgUG9pbnQocDEueCArIHQgKiBwMURlcml2YXRpdmUueCwgcDEueSArIHQgKiBwMURlcml2YXRpdmUueSk7XG4gICAgICAgIGNvbnN0IGNwMiA9IG5ldyBQb2ludChwMi54IC0gdCAqIHAyRGVyaXZhdGl2ZS54LCBwMi55IC0gdCAqIHAyRGVyaXZhdGl2ZS55KTtcbiAgICAgICAgaWYgKHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgICAgICBwMS50cmFuc2Zvcm0odHJhbnNmb3JtYXRpb24pO1xuICAgICAgICAgICAgcDIudHJhbnNmb3JtKHRyYW5zZm9ybWF0aW9uKTtcbiAgICAgICAgICAgIGNwMS50cmFuc2Zvcm0odHJhbnNmb3JtYXRpb24pO1xuICAgICAgICAgICAgY3AyLnRyYW5zZm9ybSh0cmFuc2Zvcm1hdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcDE6IHAxLFxuICAgICAgICAgICAgY3AxOiBjcDEsXG4gICAgICAgICAgICBjcDI6IGNwMixcbiAgICAgICAgICAgIHAyOiBwMlxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9kZXJpdmF0aXZlQXQoYW5nbGUpIHtcbiAgICAgICAgY29uc3QgcmFkaWFuID0gcmFkKGFuZ2xlKTtcblxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KC10aGlzLnJhZGl1c1ggKiBNYXRoLnNpbihyYWRpYW4pLCB0aGlzLnJhZGl1c1kgKiBNYXRoLmNvcyhyYWRpYW4pKTtcbiAgICB9XG5cbiAgICBjb250YWluc1BvaW50KHBvaW50KSB7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gdGhpcy5fYXJjSW50ZXJ2YWwoKTtcbiAgICAgICAgY29uc3QgaW50ZXJ2YWxBbmdsZSA9IGludGVydmFsLmVuZEFuZ2xlIC0gaW50ZXJ2YWwuc3RhcnRBbmdsZTtcbiAgICAgICAgY29uc3QgeyBjZW50ZXIsIHJhZGl1c1gsIHJhZGl1c1kgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gY2VudGVyLmRpc3RhbmNlVG8ocG9pbnQpO1xuICAgICAgICBjb25zdCBhbmdsZVJhZCA9IE1hdGguYXRhbjIocG9pbnQueSAtIGNlbnRlci55LCBwb2ludC54IC0gY2VudGVyLngpO1xuICAgICAgICBjb25zdCBwb2ludFJhZGl1cyA9IChyYWRpdXNYICogcmFkaXVzWSkgL1xuICAgICAgICAgICAgTWF0aC5zcXJ0KHBvdyhyYWRpdXNYLCAyKSAqIHBvdyhNYXRoLnNpbihhbmdsZVJhZCksIDIpICsgcG93KHJhZGl1c1ksIDIpICogcG93KE1hdGguY29zKGFuZ2xlUmFkKSwgMikpO1xuICAgICAgICBjb25zdCBzdGFydFBvaW50ID0gdGhpcy5wb2ludEF0KHRoaXMuc3RhcnRBbmdsZSkucm91bmQoUFJFQ0lTSU9OKTtcbiAgICAgICAgY29uc3QgZW5kUG9pbnQgPSB0aGlzLnBvaW50QXQodGhpcy5lbmRBbmdsZSkucm91bmQoUFJFQ0lTSU9OKTtcbiAgICAgICAgY29uc3QgaW50ZXJzZWN0aW9uID0gbGluZUludGVyc2VjdGlvbihjZW50ZXIsIHBvaW50LnJvdW5kKFBSRUNJU0lPTiksIHN0YXJ0UG9pbnQsIGVuZFBvaW50KTtcbiAgICAgICAgbGV0IGNvbnRhaW5zUG9pbnQ7XG5cbiAgICAgICAgaWYgKGludGVydmFsQW5nbGUgPCAxODApIHtcbiAgICAgICAgICAgIGNvbnRhaW5zUG9pbnQgPSBpbnRlcnNlY3Rpb24gJiYgY2xvc2VPckxlc3MoY2VudGVyLmRpc3RhbmNlVG8oaW50ZXJzZWN0aW9uKSwgZGlzdGFuY2UpICYmIGNsb3NlT3JMZXNzKGRpc3RhbmNlLCBwb2ludFJhZGl1cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgYW5nbGUgPSBjYWxjdWxhdGVBbmdsZShjZW50ZXIueCwgY2VudGVyLnksIHJhZGl1c1gsIHJhZGl1c1ksIHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgICAgICAgaWYgKGFuZ2xlICE9PSAzNjApIHtcbiAgICAgICAgICAgICAgICBhbmdsZSA9ICgzNjAgKyBhbmdsZSkgJSAzNjA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBpbkFuZ2xlUmFuZ2UgPSBpbnRlcnZhbC5zdGFydEFuZ2xlIDw9IGFuZ2xlICYmIGFuZ2xlIDw9IGludGVydmFsLmVuZEFuZ2xlO1xuICAgICAgICAgICAgY29udGFpbnNQb2ludCA9IChpbkFuZ2xlUmFuZ2UgJiYgY2xvc2VPckxlc3MoZGlzdGFuY2UsIHBvaW50UmFkaXVzKSkgfHwgKCFpbkFuZ2xlUmFuZ2UgJiYgKCFpbnRlcnNlY3Rpb24gfHwgaW50ZXJzZWN0aW9uLmVxdWFscyhwb2ludCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGFpbnNQb2ludDtcbiAgICB9XG5cbiAgICBfaXNPblBhdGgocG9pbnQsIHdpZHRoKSB7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gdGhpcy5fYXJjSW50ZXJ2YWwoKTtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5jZW50ZXI7XG4gICAgICAgIGxldCBhbmdsZSA9IGNhbGN1bGF0ZUFuZ2xlKGNlbnRlci54LCBjZW50ZXIueSwgdGhpcy5yYWRpdXNYLCB0aGlzLnJhZGl1c1ksIHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgICBpZiAoYW5nbGUgIT09IDM2MCkge1xuICAgICAgICAgICAgYW5nbGUgPSAoMzYwICsgYW5nbGUpICUgMzYwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5BbmdsZVJhbmdlID0gaW50ZXJ2YWwuc3RhcnRBbmdsZSA8PSBhbmdsZSAmJiBhbmdsZSA8PSBpbnRlcnZhbC5lbmRBbmdsZTtcblxuICAgICAgICByZXR1cm4gaW5BbmdsZVJhbmdlICYmIHRoaXMucG9pbnRBdChhbmdsZSkuZGlzdGFuY2VUbyhwb2ludCkgPD0gd2lkdGg7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21Qb2ludHMoc3RhcnQsIGVuZCwgcngsIHJ5LCBsYXJnZUFyYywgc3dpcGUsIHJvdGF0aW9uKSB7Ly8gZXNsaW50LWRpc2FibGUtbGluZSBtYXgtcGFyYW1zXG4gICAgICAgIGNvbnN0IGFyY1BhcmFtZXRlcnMgPSBub3JtYWxpemVBcmNQYXJhbWV0ZXJzKHtcbiAgICAgICAgICAgIHgxOiBzdGFydC54LFxuICAgICAgICAgICAgeTE6IHN0YXJ0LnksXG4gICAgICAgICAgICB4MjogZW5kLngsXG4gICAgICAgICAgICB5MjogZW5kLnksXG4gICAgICAgICAgICByeDogcngsXG4gICAgICAgICAgICByeTogcnksXG4gICAgICAgICAgICBsYXJnZUFyYzogbGFyZ2VBcmMsXG4gICAgICAgICAgICBzd2lwZTogc3dpcGUsXG4gICAgICAgICAgICByb3RhdGlvbjogcm90YXRpb25cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBBcmMoYXJjUGFyYW1ldGVycy5jZW50ZXIsIHtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IGFyY1BhcmFtZXRlcnMuc3RhcnRBbmdsZSxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiBhcmNQYXJhbWV0ZXJzLmVuZEFuZ2xlLFxuICAgICAgICAgICAgcmFkaXVzWDogYXJjUGFyYW1ldGVycy5yYWRpdXNYLFxuICAgICAgICAgICAgcmFkaXVzWTogYXJjUGFyYW1ldGVycy5yYWRpdXNZLFxuICAgICAgICAgICAgeFJvdGF0aW9uOiBhcmNQYXJhbWV0ZXJzLnhSb3RhdGlvbixcbiAgICAgICAgICAgIGFudGljbG9ja3dpc2U6IHN3aXBlID09PSAwXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZGVmaW5lQWNjZXNzb3JzKEFyYy5wcm90b3R5cGUsIFsgXCJyYWRpdXNYXCIsIFwicmFkaXVzWVwiLCBcInN0YXJ0QW5nbGVcIiwgXCJlbmRBbmdsZVwiLCBcImFudGljbG9ja3dpc2VcIiBdKTtcbk9ic2VydmVyc01peGluLmV4dGVuZChBcmMucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlQW5nbGUoY3gsIGN5LCByeCwgcnksIHgsIHkpIHtcbiAgICBjb25zdCBjb3MgPSByb3VuZCgoeCAtIGN4KSAvIHJ4LCAzKTtcbiAgICBjb25zdCBzaW4gPSByb3VuZCgoeSAtIGN5KSAvIHJ5LCAzKTtcblxuICAgIHJldHVybiByb3VuZChkZWcoTWF0aC5hdGFuMihzaW4sIGNvcykpKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJjUGFyYW1ldGVycyhwYXJhbWV0ZXJzKSB7XG4gICAgbGV0IHsgeDEsIHkxLCB4MiwgeTIsIHJ4LCByeSwgbGFyZ2VBcmMsIHN3aXBlLCByb3RhdGlvbiA9IDAgfSA9IHBhcmFtZXRlcnM7XG5cbiAgICBjb25zdCByYWRpYW5zID0gcmFkKHJvdGF0aW9uKTtcbiAgICBjb25zdCBjb3NpbmUgPSBNYXRoLmNvcyhyYWRpYW5zKTtcbiAgICBjb25zdCBzaW5lID0gTWF0aC5zaW4ocmFkaWFucyk7XG5cbiAgICBjb25zdCB4VCA9IGNvc2luZSAqICh4MSAtIHgyKSAvIDIgKyBzaW5lICogKHkxIC0geTIpIC8gMjtcbiAgICBjb25zdCB5VCA9IC1zaW5lICogKHgxIC0geDIpIC8gMiArIGNvc2luZSAqICh5MSAtIHkyKSAvIDI7XG5cbiAgICBjb25zdCBzaWduID0gbGFyZ2VBcmMgIT09IHN3aXBlID8gMSA6IC0xO1xuXG4gICAgY29uc3QgeHQyID0gTWF0aC5wb3coeFQsIDIpO1xuICAgIGNvbnN0IHl0MiA9IE1hdGgucG93KHlULCAyKTtcbiAgICBsZXQgcngyID0gTWF0aC5wb3cocngsIDIpO1xuICAgIGxldCByeTIgPSBNYXRoLnBvdyhyeSwgMik7XG5cbiAgICBsZXQgZGVsdGEgPSB4dDIgLyByeDIgKyB5dDIgLyByeTI7XG5cbiAgICBpZiAoZGVsdGEgPiAxKSB7XG4gICAgICAgIGRlbHRhID0gTWF0aC5zcXJ0KHh0MiAvIHJ4MiArIHl0MiAvIHJ5Mik7XG4gICAgICAgIHJ4ID0gZGVsdGEgKiByeDtcbiAgICAgICAgcngyID0gTWF0aC5wb3cocngsIDIpO1xuXG4gICAgICAgIHJ5ID0gZGVsdGEgKiByeTtcbiAgICAgICAgcnkyID0gTWF0aC5wb3cocnksIDIpO1xuICAgIH1cblxuICAgIGxldCBjb25zdFQgPSBzaWduICogTWF0aC5zcXJ0KChyeDIgKiByeTIgLSByeDIgKiB5dDIgLSByeTIgKiB4dDIpIC8gKHJ4MiAqIHl0MiArIHJ5MiAqIHh0MikpO1xuICAgIC8vIGR1ZSB0byByb3VuZGluZyBlcnJvcnMgdGhlIHZhbHVlIGNvdWxkIGJlY29tZSBOYU4gZXZlbiBhZnRlciByYWRpaSBjb3JyZWN0aW9uXG4gICAgaWYgKGlzTmFOKGNvbnN0VCkpIHtcbiAgICAgICAgY29uc3RUID0gMDtcbiAgICB9XG5cbiAgICBjb25zdCBjeFQgPSBjb25zdFQgKiAocnggKiB5VCkgLyByeTtcbiAgICBjb25zdCBjeVQgPSAtIGNvbnN0VCAqIChyeSAqIHhUKSAvIHJ4O1xuXG4gICAgY29uc3QgY3ggPSBjb3NpbmUgKiBjeFQgLSBzaW5lICogY3lUICsgKHgxICsgeDIpIC8gMjtcbiAgICBjb25zdCBjeSA9IHNpbmUgKiBjeFQgKyBjb3NpbmUgKiBjeVQgKyAoeTEgKyB5MikgLyAyO1xuXG5cbiAgICBjb25zdCB1WCA9ICh4VCAtIGN4VCkgLyByeDtcbiAgICBjb25zdCB1WSA9ICh5VCAtIGN5VCkgLyByeTtcbiAgICBjb25zdCB2WCA9IC0oeFQgKyBjeFQpIC8gcng7XG4gICAgY29uc3QgdlkgPSAtKHlUICsgY3lUKSAvIHJ5O1xuXG4gICAgY29uc3Qgc3RhcnRBbmdsZSA9ICh1WSA+PSAwID8gMSA6IC0xKSAqIGRlZyhNYXRoLmFjb3ModVggLyBNYXRoLnNxcnQodVggKiB1WCArIHVZICogdVkpKSk7XG5cbiAgICBjb25zdCBhbmdsZUNvc2luZSA9IHJvdW5kKCh1WCAqIHZYICsgdVkgKiB2WSkgLyAoTWF0aC5zcXJ0KHVYICogdVggKyB1WSAqIHVZKSAqIE1hdGguc3FydCh2WCAqIHZYICsgdlkgKiB2WSkpLCAxMCk7XG4gICAgbGV0IGFuZ2xlID0gKHVYICogdlkgLSB1WSAqIHZYID49IDAgPyAxIDogLTEpICogZGVnKE1hdGguYWNvcyhhbmdsZUNvc2luZSkpO1xuXG4gICAgaWYgKCFzd2lwZSAmJiBhbmdsZSA+IDApIHtcbiAgICAgICAgYW5nbGUgLT0gMzYwO1xuICAgIH1cblxuICAgIGlmIChzd2lwZSAmJiBhbmdsZSA8IDApIHtcbiAgICAgICAgYW5nbGUgKz0gMzYwO1xuICAgIH1cbiAgICBsZXQgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgYW5nbGU7XG4gICAgY29uc3Qgc2lnbkVuZEFuZ2xlID0gZW5kQW5nbGUgPj0gMCA/IDEgOiAtMTtcbiAgICBlbmRBbmdsZSA9IChNYXRoLmFicyhlbmRBbmdsZSkgJSAzNjApICogc2lnbkVuZEFuZ2xlO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2VudGVyOiBuZXcgUG9pbnQoY3gsIGN5KSxcbiAgICAgICAgc3RhcnRBbmdsZTogc3RhcnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGU6IGVuZEFuZ2xlLFxuICAgICAgICByYWRpdXNYOiByeCxcbiAgICAgICAgcmFkaXVzWTogcnksXG4gICAgICAgIHhSb3RhdGlvbjogcm90YXRpb25cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBiYm94U3RhcnRBbmdsZShhbmdsZSwgc3RhcnQpIHtcbiAgICBsZXQgc3RhcnRBbmdsZSA9IGFuZ2xlO1xuXG4gICAgd2hpbGUgKHN0YXJ0QW5nbGUgPCBzdGFydCkge1xuICAgICAgICBzdGFydEFuZ2xlICs9IDkwO1xuICAgIH1cblxuICAgIHJldHVybiBzdGFydEFuZ2xlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBBcmM7XG4iLCJpbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vZ2VvbWV0cnkvcG9pbnQnO1xuXG5mdW5jdGlvbiBwb2ludEFjY2Vzc29yKG5hbWUpIHtcbiAgICBjb25zdCBmaWVsZE5hbWUgPSBcIl9cIiArIG5hbWU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZXJGaWVsZChmaWVsZE5hbWUsIFBvaW50LmNyZWF0ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgdGhpcy5nZW9tZXRyeUNoYW5nZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpc1tmaWVsZE5hbWVdO1xuICAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmluZVBvaW50QWNjZXNzb3JzKGZuLCBuYW1lcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm5bbmFtZXNbaV1dID0gcG9pbnRBY2Nlc3NvcihuYW1lc1tpXSk7XG4gICAgfVxufSIsImltcG9ydCB7IGRlZyB9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tICcuLi90cmFuc2Zvcm0nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc091dE9mRW5kUG9pbnQoZW5kUG9pbnQsIGNvbnRyb2xQb2ludCwgcG9pbnQpIHtcbiAgICBjb25zdCBhbmdsZSA9IGRlZyhNYXRoLmF0YW4yKGNvbnRyb2xQb2ludC55IC0gZW5kUG9pbnQueSwgY29udHJvbFBvaW50LnggLSBlbmRQb2ludC54KSk7XG4gICAgY29uc3Qgcm90YXRlZFBvaW50ID0gcG9pbnQudHJhbnNmb3JtQ29weSh0cmFuc2Zvcm0oKS5yb3RhdGUoLWFuZ2xlLCBlbmRQb2ludCkpO1xuXG4gICAgcmV0dXJuIHJvdGF0ZWRQb2ludC54IDwgZW5kUG9pbnQueDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxjdWxhdGVDdXJ2ZUF0KHQsIGZpZWxkLCBwb2ludHMpIHtcbiAgICBjb25zdCB0MSA9IDEgLSB0O1xuICAgIHJldHVybiBNYXRoLnBvdyh0MSwgMykgKiBwb2ludHNbMF1bZmllbGRdICtcbiAgICAgICAgMyAqIE1hdGgucG93KHQxLCAyKSAqIHQgKiBwb2ludHNbMV1bZmllbGRdICtcbiAgICAgICAgMyAqIE1hdGgucG93KHQsIDIpICogdDEgKiBwb2ludHNbMl1bZmllbGRdICtcbiAgICAgICAgTWF0aC5wb3codCwgMykgKiBwb2ludHNbM11bZmllbGRdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvQ3ViaWNQb2x5bm9taWFsKHBvaW50cywgZmllbGQpIHtcbiAgICByZXR1cm4gWyAtcG9pbnRzWzBdW2ZpZWxkXSArIDMgKiBwb2ludHNbMV1bZmllbGRdIC0gMyAqIHBvaW50c1syXVtmaWVsZF0gKyBwb2ludHNbM11bZmllbGRdLFxuICAgICAgICAzICogKHBvaW50c1swXVtmaWVsZF0gLSAyICogcG9pbnRzWzFdW2ZpZWxkXSArIHBvaW50c1syXVtmaWVsZF0pLFxuICAgICAgICAzICogKC1wb2ludHNbMF1bZmllbGRdICsgcG9pbnRzWzFdW2ZpZWxkXSksXG4gICAgICAgIHBvaW50c1swXVtmaWVsZF1cbiAgICBdO1xufSIsImltcG9ydCB7IFBSRUNJU0lPTiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJy4uLy4uL3V0aWwnO1xuXG5jbGFzcyBDb21wbGV4TnVtYmVyIGV4dGVuZHMgQ2xhc3Mge1xuXG4gICAgY29uc3RydWN0b3IocmVhbCA9IDAsIGltZyA9IDApIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnJlYWwgPSByZWFsO1xuICAgICAgICB0aGlzLmltZyA9IGltZztcbiAgICB9XG5cbiAgICBhZGQoY051bWJlcikge1xuICAgICAgICByZXR1cm4gbmV3IENvbXBsZXhOdW1iZXIocm91bmQodGhpcy5yZWFsICsgY051bWJlci5yZWFsLCBQUkVDSVNJT04pLCByb3VuZCh0aGlzLmltZyArIGNOdW1iZXIuaW1nLCBQUkVDSVNJT04pKTtcbiAgICB9XG5cbiAgICBhZGRDb25zdGFudCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IENvbXBsZXhOdW1iZXIodGhpcy5yZWFsICsgdmFsdWUsIHRoaXMuaW1nKTtcbiAgICB9XG5cbiAgICBuZWdhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcGxleE51bWJlcigtdGhpcy5yZWFsLCAtdGhpcy5pbWcpO1xuICAgIH1cblxuICAgIG11bHRpcGx5KGNOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4TnVtYmVyKHRoaXMucmVhbCAqIGNOdW1iZXIucmVhbCAtIHRoaXMuaW1nICogY051bWJlci5pbWcsXG4gICAgICAgICAgICB0aGlzLnJlYWwgKiBjTnVtYmVyLmltZyArIHRoaXMuaW1nICogY051bWJlci5yZWFsKTtcbiAgICB9XG5cbiAgICBtdWx0aXBseUNvbnN0YW50KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcGxleE51bWJlcih0aGlzLnJlYWwgKiB2YWx1ZSwgdGhpcy5pbWcgKiB2YWx1ZSk7XG4gICAgfVxuXG4gICAgbnRoUm9vdChuKSB7XG4gICAgICAgIGNvbnN0IHJhZCA9IE1hdGguYXRhbjIodGhpcy5pbWcsIHRoaXMucmVhbCk7XG4gICAgICAgIGNvbnN0IHIgPSBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy5pbWcsIDIpICsgTWF0aC5wb3codGhpcy5yZWFsLCAyKSk7XG4gICAgICAgIGNvbnN0IG50aFIgPSBNYXRoLnBvdyhyLCAxIC8gbik7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4TnVtYmVyKG50aFIgKiBNYXRoLmNvcyhyYWQgLyBuKSwgbnRoUiAqIE1hdGguc2luKHJhZCAvIG4pKTsgLy9Nb2l2cmUncyBmb3JtdWxhXG4gICAgfVxuXG4gICAgZXF1YWxzKGNOdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhbCA9PT0gY051bWJlci5yZWFsICYmIHRoaXMuaW1nID09PSBjTnVtYmVyLmltZztcbiAgICB9XG5cbiAgICBpc1JlYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmltZyA9PT0gMDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBsZXhOdW1iZXI7IiwiaW1wb3J0IENvbXBsZXhOdW1iZXIgZnJvbSAnLi9jb21wbGV4LW51bWJlcic7XG5pbXBvcnQgeyBQUkVDSVNJT04gfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tICcuLi8uLi91dGlsJztcblxuZnVuY3Rpb24gbnVtYmVyU2lnbih4KSB7XG4gICAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xufVxuXG5mdW5jdGlvbiBzb2x2ZVF1YWRyYXRpY0VxdWF0aW9uKGEsIGIsIGMpIHtcbiAgICBjb25zdCBzcXVhcmVSb290ID0gTWF0aC5zcXJ0KE1hdGgucG93KGIsIDIpIC0gNCAqIGEgKiBjKTtcbiAgICByZXR1cm4gW1xuICAgICAgICAoLWIgKyBzcXVhcmVSb290KSAvICgyICogYSksXG4gICAgICAgICgtYiAtIHNxdWFyZVJvb3QpIC8gKDIgKiBhKVxuICAgIF07XG59XG5cbi8vQ2FyZGFubydzIGZvcm11bGFcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNvbHZlQ3ViaWNFcXVhdGlvbihhLCBiLCBjLCBkKSB7XG4gICAgaWYgKGEgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHNvbHZlUXVhZHJhdGljRXF1YXRpb24oYiwgYywgZCk7XG4gICAgfVxuXG4gICAgY29uc3QgcCA9ICgzICogYSAqIGMgLSBNYXRoLnBvdyhiLCAyKSkgLyAoMyAqIE1hdGgucG93KGEsIDIpKTtcbiAgICBjb25zdCBxID0gKDIgKiBNYXRoLnBvdyhiLCAzKSAtIDkgKiBhICogYiAqIGMgKyAyNyAqIE1hdGgucG93KGEsIDIpICogZCkgLyAoMjcgKiBNYXRoLnBvdyhhLCAzKSk7XG4gICAgY29uc3QgUSA9IE1hdGgucG93KHAgLyAzLCAzKSArIE1hdGgucG93KHEgLyAyLCAyKTtcbiAgICBjb25zdCBpID0gbmV3IENvbXBsZXhOdW1iZXIoMCwxKTtcbiAgICBjb25zdCBiM2EgPSAtYiAvICgzICogYSk7XG4gICAgbGV0IHgxLCB4MiwgeTEsIHkyLCB5MywgejEsIHoyO1xuXG4gICAgaWYgKFEgPCAwKSB7XG4gICAgICAgIHgxID0gbmV3IENvbXBsZXhOdW1iZXIoLXEgLyAyLCBNYXRoLnNxcnQoLVEpKS5udGhSb290KDMpO1xuICAgICAgICB4MiA9IG5ldyBDb21wbGV4TnVtYmVyKC1xIC8gMiwgLSBNYXRoLnNxcnQoLVEpKS5udGhSb290KDMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHgxID0gLXEgLyAyICsgTWF0aC5zcXJ0KFEpO1xuICAgICAgICB4MSA9IG5ldyBDb21wbGV4TnVtYmVyKG51bWJlclNpZ24oeDEpICogTWF0aC5wb3coTWF0aC5hYnMoeDEpLCAxIC8gMykpO1xuICAgICAgICB4MiA9IC1xIC8gMiAtIE1hdGguc3FydChRKTtcbiAgICAgICAgeDIgPSBuZXcgQ29tcGxleE51bWJlcihudW1iZXJTaWduKHgyKSAqIE1hdGgucG93KE1hdGguYWJzKHgyKSwgMSAvIDMpKTtcbiAgICB9XG5cbiAgICB5MSA9IHgxLmFkZCh4Mik7XG5cbiAgICB6MSA9IHgxLmFkZCh4MikubXVsdGlwbHlDb25zdGFudCgtMSAvIDIpO1xuICAgIHoyID0geDEuYWRkKHgyLm5lZ2F0ZSgpKS5tdWx0aXBseUNvbnN0YW50KE1hdGguc3FydCgzKSAvIDIpO1xuXG4gICAgeTIgPSB6MS5hZGQoaS5tdWx0aXBseSh6MikpO1xuICAgIHkzID0gejEuYWRkKGkubmVnYXRlKCkubXVsdGlwbHkoejIpKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgaWYgKHkxLmlzUmVhbCgpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHJvdW5kKHkxLnJlYWwgKyBiM2EsIFBSRUNJU0lPTikpO1xuICAgIH1cbiAgICBpZiAoeTIuaXNSZWFsKCkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocm91bmQoeTIucmVhbCArIGIzYSwgUFJFQ0lTSU9OKSk7XG4gICAgfVxuICAgIGlmICh5My5pc1JlYWwoKSkge1xuICAgICAgICByZXN1bHQucHVzaChyb3VuZCh5My5yZWFsICsgYjNhLCBQUkVDSVNJT04pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCB0b0N1YmljUG9seW5vbWlhbCBmcm9tICcuL3RvLWN1YmljLXBvbHlub21pYWwnO1xuaW1wb3J0IHNvbHZlQ3ViaWNFcXVhdGlvbiBmcm9tICcuL3NvbHZlLWN1YmljLWVxdWF0aW9uJztcbmltcG9ydCBjYWxjdWxhdGVDdXJ2ZUF0IGZyb20gJy4vY2FsY3VsYXRlLWN1cnZlLWF0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFzUm9vdHNJblJhbmdlKHBvaW50cywgcG9pbnQsIGZpZWxkLCByb290RmllbGQsIHJhbmdlKSB7XG4gICAgY29uc3QgcG9seW5vbWlhbCA9IHRvQ3ViaWNQb2x5bm9taWFsKHBvaW50cywgcm9vdEZpZWxkKTtcbiAgICBjb25zdCByb290cyA9IHNvbHZlQ3ViaWNFcXVhdGlvbihwb2x5bm9taWFsWzBdLCBwb2x5bm9taWFsWzFdLCBwb2x5bm9taWFsWzJdLCBwb2x5bm9taWFsWzNdIC0gcG9pbnRbcm9vdEZpZWxkXSk7XG4gICAgbGV0IGludGVyc2VjdGlvbjtcblxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHJvb3RzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgaWYgKDAgPD0gcm9vdHNbaWR4XSAmJiByb290c1tpZHhdIDw9IDEpIHtcbiAgICAgICAgICAgIGludGVyc2VjdGlvbiA9IGNhbGN1bGF0ZUN1cnZlQXQocm9vdHNbaWR4XSwgZmllbGQsIHBvaW50cyk7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoaW50ZXJzZWN0aW9uIC0gcG9pbnRbZmllbGRdKSA8PSByYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB0b0N1YmljUG9seW5vbWlhbCBmcm9tICcuL3RvLWN1YmljLXBvbHlub21pYWwnO1xuaW1wb3J0IHNvbHZlQ3ViaWNFcXVhdGlvbiBmcm9tICcuL3NvbHZlLWN1YmljLWVxdWF0aW9uJztcbmltcG9ydCBjYWxjdWxhdGVDdXJ2ZUF0IGZyb20gJy4vY2FsY3VsYXRlLWN1cnZlLWF0JztcbmltcG9ydCBjbG9zZSBmcm9tICcuL2Nsb3NlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3VydmVJbnRlcnNlY3Rpb25zQ291bnQocG9pbnRzLCBwb2ludCwgYmJveCkge1xuICAgIGNvbnN0IHBvbHlub21pYWwgPSB0b0N1YmljUG9seW5vbWlhbChwb2ludHMsIFwieFwiKTtcbiAgICBjb25zdCByb290cyA9IHNvbHZlQ3ViaWNFcXVhdGlvbihwb2x5bm9taWFsWzBdLCBwb2x5bm9taWFsWzFdLCBwb2x5bm9taWFsWzJdLCBwb2x5bm9taWFsWzNdIC0gcG9pbnQueCk7XG4gICAgbGV0IHJheUludGVyc2VjdGlvbiwgaW50ZXJzZWN0c1JheTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm9vdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmF5SW50ZXJzZWN0aW9uID0gY2FsY3VsYXRlQ3VydmVBdChyb290c1tpXSwgXCJ5XCIsIHBvaW50cyk7XG4gICAgICAgIGludGVyc2VjdHNSYXkgPSBjbG9zZShyYXlJbnRlcnNlY3Rpb24sIHBvaW50LnkpIHx8IHJheUludGVyc2VjdGlvbiA+IHBvaW50Lnk7XG4gICAgICAgIGlmIChpbnRlcnNlY3RzUmF5ICYmICgoKHJvb3RzW2ldID09PSAwIHx8IHJvb3RzW2ldID09PSAxKSAmJiBiYm94LmJvdHRvbVJpZ2h0KCkueCA+IHBvaW50LngpIHx8ICgwIDwgcm9vdHNbaV0gJiYgcm9vdHNbaV0gPCAxKSkpIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY291bnQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZUludGVyc2VjdGlvbnNDb3VudChhLCBiLCBwb2ludCkge1xuICAgIGxldCBpbnRlcnNlY3RzO1xuICAgIGlmIChhLnggIT09IGIueCkge1xuICAgICAgICBjb25zdCBtaW5YID0gTWF0aC5taW4oYS54LCBiLngpO1xuICAgICAgICBjb25zdCBtYXhYID0gTWF0aC5tYXgoYS54LCBiLngpO1xuICAgICAgICBjb25zdCBtaW5ZID0gTWF0aC5taW4oYS55LCBiLnkpO1xuICAgICAgICBjb25zdCBtYXhZID0gTWF0aC5tYXgoYS55LCBiLnkpO1xuICAgICAgICBjb25zdCBpblJhbmdlID0gbWluWCA8PSBwb2ludC54ICYmIHBvaW50LnggPCBtYXhYO1xuXG4gICAgICAgIGlmIChtaW5ZID09PSBtYXhZKSB7XG4gICAgICAgICAgICBpbnRlcnNlY3RzID0gcG9pbnQueSA8PSBtaW5ZICYmIGluUmFuZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnRlcnNlY3RzID0gaW5SYW5nZSAmJiAoKChtYXhZIC0gbWluWSkgKiAoKGEueCAtIGIueCkgKiAoYS55IC0gYi55KSA+IDAgPyBwb2ludC54IC0gbWluWCA6IG1heFggLSBwb2ludC54KSkgLyAobWF4WCAtIG1pblgpICsgbWluWSAtIHBvaW50LnkpID49IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJzZWN0cyA/IDEgOiAwO1xufSIsImltcG9ydCBPYnNlcnZlcnNNaXhpbiBmcm9tICcuLi9taXhpbnMvb2JzZXJ2ZXJzLW1peGluJztcbmltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCBkZWZpbmVQb2ludEFjY2Vzc29ycyBmcm9tICcuLi9hY2Nlc3NvcnMvZGVmaW5lLXBvaW50LWFjY2Vzc29ycyc7XG5pbXBvcnQgUmVjdCBmcm9tICcuL3JlY3QnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4vcG9pbnQnO1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tICcuL3RyYW5zZm9ybSc7XG5pbXBvcnQgeyBkZWcsIE1JTl9OVU0sIE1BWF9OVU0gfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBpc091dE9mRW5kUG9pbnQgZnJvbSAnLi9tYXRoL2lzLW91dC1vZi1lbmQtcG9pbnQnO1xuaW1wb3J0IGNhbGN1bGF0ZUN1cnZlQXQgZnJvbSAnLi9tYXRoL2NhbGN1bGF0ZS1jdXJ2ZS1hdCc7XG5pbXBvcnQgaGFzUm9vdHNJblJhbmdlIGZyb20gJy4vbWF0aC9oYXMtcm9vdHMtaW4tcmFuZ2UnO1xuaW1wb3J0IGN1cnZlSW50ZXJzZWN0aW9uc0NvdW50IGZyb20gJy4vbWF0aC9jdXJ2ZS1pbnRlcnNlY3Rpb25zLWNvdW50JztcbmltcG9ydCBsaW5lSW50ZXJzZWN0aW9uc0NvdW50IGZyb20gJy4vbWF0aC9saW5lLWludGVyc2VjdGlvbnMtY291bnQnO1xuXG5jbGFzcyBTZWdtZW50IGV4dGVuZHMgQ2xhc3Mge1xuXG4gICAgY29uc3RydWN0b3IoYW5jaG9yLCBjb250cm9sSW4sIGNvbnRyb2xPdXQpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmFuY2hvcihhbmNob3IgfHwgbmV3IFBvaW50KCkpO1xuICAgICAgICB0aGlzLmNvbnRyb2xJbihjb250cm9sSW4pO1xuICAgICAgICB0aGlzLmNvbnRyb2xPdXQoY29udHJvbE91dCk7XG4gICAgfVxuXG4gICAgYmJveFRvKHRvU2VnbWVudCwgbWF0cml4KSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRBbmNob3IgPSB0aGlzLmFuY2hvcigpLnRyYW5zZm9ybUNvcHkobWF0cml4KTtcbiAgICAgICAgY29uc3QgdG9TZWdtZW50QW5jaG9yID0gdG9TZWdtZW50LmFuY2hvcigpLnRyYW5zZm9ybUNvcHkobWF0cml4KTtcbiAgICAgICAgbGV0IHJlY3Q7XG5cbiAgICAgICAgaWYgKHRoaXMuY29udHJvbE91dCgpICYmIHRvU2VnbWVudC5jb250cm9sSW4oKSkge1xuICAgICAgICAgICAgcmVjdCA9IHRoaXMuX2N1cnZlQm91bmRpbmdCb3goXG4gICAgICAgICAgICAgICAgc2VnbWVudEFuY2hvciwgdGhpcy5jb250cm9sT3V0KCkudHJhbnNmb3JtQ29weShtYXRyaXgpLFxuICAgICAgICAgICAgICAgIHRvU2VnbWVudC5jb250cm9sSW4oKS50cmFuc2Zvcm1Db3B5KG1hdHJpeCksIHRvU2VnbWVudEFuY2hvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlY3QgPSB0aGlzLl9saW5lQm91bmRpbmdCb3goc2VnbWVudEFuY2hvciwgdG9TZWdtZW50QW5jaG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWN0O1xuICAgIH1cblxuICAgIF9saW5lQm91bmRpbmdCb3gocDEsIHAyKSB7XG4gICAgICAgIHJldHVybiBSZWN0LmZyb21Qb2ludHMocDEsIHAyKTtcbiAgICB9XG5cbiAgICBfY3VydmVCb3VuZGluZ0JveChwMSwgY3AxLCBjcDIsIHAyKSB7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IFsgcDEsIGNwMSwgY3AyLCBwMiBdO1xuICAgICAgICBjb25zdCBleHRyZW1lc1ggPSB0aGlzLl9jdXJ2ZUV4dHJlbWVzRm9yKHBvaW50cywgXCJ4XCIpO1xuICAgICAgICBjb25zdCBleHRyZW1lc1kgPSB0aGlzLl9jdXJ2ZUV4dHJlbWVzRm9yKHBvaW50cywgXCJ5XCIpO1xuICAgICAgICBjb25zdCB4TGltaXRzID0gYXJyYXlMaW1pdHMoWyBleHRyZW1lc1gubWluLCBleHRyZW1lc1gubWF4LCBwMS54LCBwMi54IF0pO1xuICAgICAgICBjb25zdCB5TGltaXRzID0gYXJyYXlMaW1pdHMoWyBleHRyZW1lc1kubWluLCBleHRyZW1lc1kubWF4LCBwMS55LCBwMi55IF0pO1xuXG4gICAgICAgIHJldHVybiBSZWN0LmZyb21Qb2ludHMobmV3IFBvaW50KHhMaW1pdHMubWluLCB5TGltaXRzLm1pbiksIG5ldyBQb2ludCh4TGltaXRzLm1heCwgeUxpbWl0cy5tYXgpKTtcbiAgICB9XG5cbiAgICBfY3VydmVFeHRyZW1lc0Zvcihwb2ludHMsIGZpZWxkKSB7XG4gICAgICAgIGNvbnN0IGV4dHJlbWVzID0gdGhpcy5fY3VydmVFeHRyZW1lcyhcbiAgICAgICAgICAgIHBvaW50c1swXVtmaWVsZF0sIHBvaW50c1sxXVtmaWVsZF0sXG4gICAgICAgICAgICBwb2ludHNbMl1bZmllbGRdLCBwb2ludHNbM11bZmllbGRdXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogY2FsY3VsYXRlQ3VydmVBdChleHRyZW1lcy5taW4sIGZpZWxkLCBwb2ludHMpLFxuICAgICAgICAgICAgbWF4OiBjYWxjdWxhdGVDdXJ2ZUF0KGV4dHJlbWVzLm1heCwgZmllbGQsIHBvaW50cylcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfY3VydmVFeHRyZW1lcyh4MSwgeDIsIHgzLCB4NCkge1xuICAgICAgICBjb25zdCBhID0geDEgLSAzICogeDIgKyAzICogeDMgLSB4NDtcbiAgICAgICAgY29uc3QgYiA9IC0gMiAqICh4MSAtIDIgKiB4MiArIHgzKTtcbiAgICAgICAgY29uc3QgYyA9IHgxIC0geDI7XG4gICAgICAgIGNvbnN0IHNxcnQgPSBNYXRoLnNxcnQoYiAqIGIgLSA0ICogYSAqIGMpO1xuICAgICAgICBsZXQgdDEgPSAwO1xuICAgICAgICBsZXQgdDIgPSAxO1xuXG4gICAgICAgIGlmIChhID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoYiAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHQxID0gdDIgPSAtYyAvIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKHNxcnQpKSB7XG4gICAgICAgICAgICB0MSA9ICgtIGIgKyBzcXJ0KSAvICgyICogYSk7XG4gICAgICAgICAgICB0MiA9ICgtIGIgLSBzcXJ0KSAvICgyICogYSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWluID0gTWF0aC5tYXgoTWF0aC5taW4odDEsIHQyKSwgMCk7XG4gICAgICAgIGlmIChtaW4gPCAwIHx8IG1pbiA+IDEpIHtcbiAgICAgICAgICAgIG1pbiA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWF4ID0gTWF0aC5taW4oTWF0aC5tYXgodDEsIHQyKSwgMSk7XG4gICAgICAgIGlmIChtYXggPiAxIHx8IG1heCA8IDApIHtcbiAgICAgICAgICAgIG1heCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiBtaW4sXG4gICAgICAgICAgICBtYXg6IG1heFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9pbnRlcnNlY3Rpb25zVG8oc2VnbWVudCwgcG9pbnQpIHtcbiAgICAgICAgbGV0IGludGVyc2VjdGlvbnNDb3VudDtcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbE91dCgpICYmIHNlZ21lbnQuY29udHJvbEluKCkpIHtcbiAgICAgICAgICAgIGludGVyc2VjdGlvbnNDb3VudCA9IGN1cnZlSW50ZXJzZWN0aW9uc0NvdW50KFsgdGhpcy5hbmNob3IoKSwgdGhpcy5jb250cm9sT3V0KCksIHNlZ21lbnQuY29udHJvbEluKCksIHNlZ21lbnQuYW5jaG9yKCkgXSwgcG9pbnQsIHRoaXMuYmJveFRvKHNlZ21lbnQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVyc2VjdGlvbnNDb3VudCA9IGxpbmVJbnRlcnNlY3Rpb25zQ291bnQodGhpcy5hbmNob3IoKSwgc2VnbWVudC5hbmNob3IoKSwgcG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb25zQ291bnQ7XG4gICAgfVxuXG4gICAgX2lzT25DdXJ2ZVRvKHNlZ21lbnQsIHBvaW50LCB3aWR0aCwgZW5kU2VnbWVudCkge1xuICAgICAgICBjb25zdCBiYm94ID0gdGhpcy5iYm94VG8oc2VnbWVudCkuZXhwYW5kKHdpZHRoLCB3aWR0aCk7XG4gICAgICAgIGlmIChiYm94LmNvbnRhaW5zUG9pbnQocG9pbnQpKSB7XG4gICAgICAgICAgICBjb25zdCBwMSA9IHRoaXMuYW5jaG9yKCk7XG4gICAgICAgICAgICBjb25zdCBwMiA9IHRoaXMuY29udHJvbE91dCgpO1xuICAgICAgICAgICAgY29uc3QgcDMgPSBzZWdtZW50LmNvbnRyb2xJbigpO1xuICAgICAgICAgICAgY29uc3QgcDQgPSBzZWdtZW50LmFuY2hvcigpO1xuXG4gICAgICAgICAgICBpZiAoZW5kU2VnbWVudCA9PT0gXCJzdGFydFwiICYmIHAxLmRpc3RhbmNlVG8ocG9pbnQpIDw9IHdpZHRoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFpc091dE9mRW5kUG9pbnQocDEsIHAyLCBwb2ludCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVuZFNlZ21lbnQgPT09IFwiZW5kXCIgJiYgcDQuZGlzdGFuY2VUbyhwb2ludCkgPD0gd2lkdGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlzT3V0T2ZFbmRQb2ludChwNCwgcDMsIHBvaW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy90aGUgYXBwcm9hY2ggaXMgbm90IGVudGlyZWx5IGNvcnJlY3QgYnV0IGlzIGNsb3NlIGFuZCB0aGUgYWx0ZXJuYXRpdmVzIGFyZSBzb2x2aW5nIGEgNnRoIGRlZ3JlZSBwb2x5bm9taWFsIG9yIHRlc3RpbmcgdGhlIHNlZ21lbnQgcG9pbnRzXG4gICAgICAgICAgICBjb25zdCBwb2ludHMgPSBbIHAxLCBwMiwgcDMsIHA0IF07XG4gICAgICAgICAgICBpZiAoaGFzUm9vdHNJblJhbmdlKHBvaW50cywgcG9pbnQsIFwieFwiLCBcInlcIiwgd2lkdGgpIHx8IGhhc1Jvb3RzSW5SYW5nZShwb2ludHMsIHBvaW50LCBcInlcIiwgXCJ4XCIsIHdpZHRoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgcm90YXRpb24gPSB0cmFuc2Zvcm0oKS5yb3RhdGUoNDUsIHBvaW50KTtcbiAgICAgICAgICAgIGNvbnN0IHJvdGF0ZWRQb2ludHMgPSBbIHAxLnRyYW5zZm9ybUNvcHkocm90YXRpb24pLCBwMi50cmFuc2Zvcm1Db3B5KHJvdGF0aW9uKSwgcDMudHJhbnNmb3JtQ29weShyb3RhdGlvbiksIHA0LnRyYW5zZm9ybUNvcHkocm90YXRpb24pIF07XG4gICAgICAgICAgICByZXR1cm4gaGFzUm9vdHNJblJhbmdlKHJvdGF0ZWRQb2ludHMsIHBvaW50LCBcInhcIiwgXCJ5XCIsIHdpZHRoKSB8fCBoYXNSb290c0luUmFuZ2Uocm90YXRlZFBvaW50cywgcG9pbnQsIFwieVwiLCBcInhcIiwgd2lkdGgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2lzT25MaW5lVG8oc2VnbWVudCwgcG9pbnQsIHdpZHRoKSB7XG4gICAgICAgIGNvbnN0IHAxID0gdGhpcy5hbmNob3IoKTtcbiAgICAgICAgY29uc3QgcDIgPSBzZWdtZW50LmFuY2hvcigpO1xuICAgICAgICBjb25zdCBhbmdsZSA9IGRlZyhNYXRoLmF0YW4yKHAyLnkgLSBwMS55LCBwMi54IC0gcDEueCkpO1xuICAgICAgICBjb25zdCByZWN0ID0gbmV3IFJlY3QoWyBwMS54LCBwMS55IC0gd2lkdGggLyAyIF0sIFsgcDEuZGlzdGFuY2VUbyhwMiksIHdpZHRoIF0pO1xuICAgICAgICByZXR1cm4gcmVjdC5jb250YWluc1BvaW50KHBvaW50LnRyYW5zZm9ybUNvcHkodHJhbnNmb3JtKCkucm90YXRlKC1hbmdsZSwgcDEpKSk7XG4gICAgfVxuXG4gICAgX2lzT25QYXRoVG8oc2VnbWVudCwgcG9pbnQsIHdpZHRoLCBlbmRTZWdtZW50KSB7XG4gICAgICAgIGxldCBpc09uUGF0aDtcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbE91dCgpICYmIHNlZ21lbnQuY29udHJvbEluKCkpIHtcbiAgICAgICAgICAgIGlzT25QYXRoID0gdGhpcy5faXNPbkN1cnZlVG8oc2VnbWVudCwgcG9pbnQsIHdpZHRoIC8gMiwgZW5kU2VnbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpc09uUGF0aCA9IHRoaXMuX2lzT25MaW5lVG8oc2VnbWVudCwgcG9pbnQsIHdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNPblBhdGg7XG4gICAgfVxufVxuXG5kZWZpbmVQb2ludEFjY2Vzc29ycyhTZWdtZW50LnByb3RvdHlwZSwgWyBcImFuY2hvclwiLCBcImNvbnRyb2xJblwiLCBcImNvbnRyb2xPdXRcIiBdKTtcbk9ic2VydmVyc01peGluLmV4dGVuZChTZWdtZW50LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGFycmF5TGltaXRzKGFycikge1xuICAgIGxldCBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgIGxldCBtaW4gPSBNQVhfTlVNO1xuICAgIGxldCBtYXggPSBNSU5fTlVNO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKyspIHtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBhcnJbaV0pO1xuICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIGFycltpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBtaW4sXG4gICAgICAgIG1heDogbWF4XG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VnbWVudDsiLCJpbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi9nZW9tZXRyeSc7XG5cbmNvbnN0IG1hdHJpeFJlZ2V4cCA9IC9tYXRyaXhcXCgoLiopXFwpLztcblxuZnVuY3Rpb24gcGFyc2VNYXRyaXgobWF0cml4U3RyaW5nKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBtYXRyaXhTdHJpbmcubWF0Y2gobWF0cml4UmVnZXhwKTtcbiAgICBpZiAobWF0Y2ggPT09IG51bGwgfHwgbWF0Y2gubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgIHJldHVybiBNYXRyaXgudW5pdCgpO1xuICAgIH1cblxuICAgIGNvbnN0IG1lbWJlcnMgPSBtYXRjaFsxXS5zcGxpdCgnLCcpLm1hcCh4ID0+IHBhcnNlRmxvYXQoeCkpO1xuICAgIHJldHVybiBuZXcgTWF0cml4KC4uLm1lbWJlcnMpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1NYXRyaXgoZWxlbWVudCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkudHJhbnNmb3JtO1xuXG4gICAgaWYgKHRyYW5zZm9ybSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiBNYXRyaXgudW5pdCgpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZU1hdHJpeCh0cmFuc2Zvcm0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGVtZW50U2NhbGUoZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gTWF0cml4LnVuaXQoKTtcbiAgICB9XG5cbiAgICBsZXQgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4KGVsZW1lbnQpO1xuICAgIGxldCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBjb25zdCBwYXJlbnRNYXRyaXggPSB0cmFuc2Zvcm1NYXRyaXgocGFyZW50KTtcbiAgICAgICAgbWF0cml4ID0gbWF0cml4Lm11bHRpcGx5Q29weShwYXJlbnRNYXRyaXgpO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICB9XG5cbiAgICBtYXRyaXguYiA9IG1hdHJpeC5jID0gbWF0cml4LmUgPSBtYXRyaXguZiA9IDA7XG4gICAgcmV0dXJuIG1hdHJpeDtcbn1cbiIsImltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vY29tbW9uJztcblxuY2xhc3MgTFJVQ2FjaGUgZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3Ioc2l6ZSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgICAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9tYXAgPSB7fTtcbiAgICB9XG5cbiAgICBwdXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBtYXAgPSB0aGlzLl9tYXA7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0geyBrZXk6IGtleSwgdmFsdWU6IHZhbHVlIH07XG5cbiAgICAgICAgbWFwW2tleV0gPSBlbnRyeTtcblxuICAgICAgICBpZiAoIXRoaXMuX2hlYWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSB0aGlzLl90YWlsID0gZW50cnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl90YWlsLm5ld2VyID0gZW50cnk7XG4gICAgICAgICAgICBlbnRyeS5vbGRlciA9IHRoaXMuX3RhaWw7XG4gICAgICAgICAgICB0aGlzLl90YWlsID0gZW50cnk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fbGVuZ3RoID49IHRoaXMuX3NpemUpIHtcbiAgICAgICAgICAgIG1hcFt0aGlzLl9oZWFkLmtleV0gPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IHRoaXMuX2hlYWQubmV3ZXI7XG4gICAgICAgICAgICB0aGlzLl9oZWFkLm9sZGVyID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2xlbmd0aCsrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0KGtleSkge1xuICAgICAgICBjb25zdCBlbnRyeSA9IHRoaXMuX21hcFtrZXldO1xuXG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgaWYgKGVudHJ5ID09PSB0aGlzLl9oZWFkICYmIGVudHJ5ICE9PSB0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGVhZCA9IGVudHJ5Lm5ld2VyO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hlYWQub2xkZXIgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZW50cnkgIT09IHRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkub2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkub2xkZXIubmV3ZXIgPSBlbnRyeS5uZXdlcjtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkubmV3ZXIub2xkZXIgPSBlbnRyeS5vbGRlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbnRyeS5vbGRlciA9IHRoaXMuX3RhaWw7XG4gICAgICAgICAgICAgICAgZW50cnkubmV3ZXIgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fdGFpbC5uZXdlciA9IGVudHJ5O1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBlbnRyeTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMUlVDYWNoZTsiLCJjb25zdCBSRVBMQUNFX1JFR0VYID0gL1xccj9cXG58XFxyfFxcdC9nO1xuY29uc3QgU1BBQ0UgPSAnICc7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRleHQodGV4dCkge1xuICAgIHJldHVybiBTdHJpbmcodGV4dCkucmVwbGFjZShSRVBMQUNFX1JFR0VYLCBTUEFDRSk7XG59XG5cbmZ1bmN0aW9uIG9iamVjdEtleShvYmplY3QpIHtcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGZvciAobGV0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgcGFydHMucHVzaChrZXkgKyBvYmplY3Rba2V5XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnRzLnNvcnQoKS5qb2luKFwiXCIpO1xufVxuXG4vLyBDb21wdXRlcyBGTlYtMSBoYXNoXG4vLyBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Gb3dsZXIlRTIlODAlOTNOb2xsJUUyJTgwJTkzVm9faGFzaF9mdW5jdGlvblxuZnVuY3Rpb24gaGFzaEtleShzdHIpIHtcbiAgICAvLyAzMi1iaXQgRk5WLTEgb2Zmc2V0IGJhc2lzXG4gICAgLy8gU2VlIGh0dHA6Ly9pc3RoZS5jb20vY2hvbmdvL3RlY2gvY29tcC9mbnYvI0ZOVi1wYXJhbVxuICAgIGxldCBoYXNoID0gMHg4MTFDOURDNTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGhhc2ggKz0gKGhhc2ggPDwgMSkgKyAoaGFzaCA8PCA0KSArIChoYXNoIDw8IDcpICsgKGhhc2ggPDwgOCkgKyAoaGFzaCA8PCAyNCk7XG4gICAgICAgIGhhc2ggXj0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc2ggPj4+IDA7XG59XG5cbmV4cG9ydCB7IG9iamVjdEtleSwgaGFzaEtleSwgbm9ybWFsaXplVGV4dCB9OyIsImltcG9ydCBMUlVDYWNoZSBmcm9tICcuL2xydS1jYWNoZSc7XG5pbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBvYmplY3RLZXksIGhhc2hLZXksIG5vcm1hbGl6ZVRleHQgfSBmcm9tICcuL3V0aWwnO1xuXG5mdW5jdGlvbiB6ZXJvU2l6ZSgpIHtcbiAgICByZXR1cm4geyB3aWR0aDogMCwgaGVpZ2h0OiAwLCBiYXNlbGluZTogMCB9O1xufVxuXG5jb25zdCBERUZBVUxUX09QVElPTlMgPSB7XG4gICAgYmFzZWxpbmVNYXJrZXJTaXplOiAxXG59O1xuXG5sZXQgZGVmYXVsdE1lYXN1cmVCb3g7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBkZWZhdWx0TWVhc3VyZUJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZGVmYXVsdE1lYXN1cmVCb3guc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7IHRvcDogLTQwMDBweCAhaW1wb3J0YW50OyB3aWR0aDogYXV0byAhaW1wb3J0YW50OyBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcIiArXG4gICAgICAgICAgICAgIFwicGFkZGluZzogMCAhaW1wb3J0YW50OyBtYXJnaW46IDAgIWltcG9ydGFudDsgYm9yZGVyOiAwICFpbXBvcnRhbnQ7XCIgK1xuICAgICAgICAgICAgICBcImxpbmUtaGVpZ2h0OiBub3JtYWwgIWltcG9ydGFudDsgdmlzaWJpbGl0eTogaGlkZGVuICFpbXBvcnRhbnQ7IHdoaXRlLXNwYWNlOiBwcmUhaW1wb3J0YW50O1wiO1xufVxuXG5jbGFzcyBUZXh0TWV0cmljcyBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5fY2FjaGUgPSBuZXcgTFJVQ2FjaGUoMTAwMCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgbWVhc3VyZSh0ZXh0LCBzdHlsZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICghdGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHplcm9TaXplKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdHlsZUtleSA9IG9iamVjdEtleShzdHlsZSk7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gaGFzaEtleSh0ZXh0ICsgc3R5bGVLZXkpO1xuICAgICAgICBjb25zdCBjYWNoZWRSZXN1bHQgPSB0aGlzLl9jYWNoZS5nZXQoY2FjaGVLZXkpO1xuXG4gICAgICAgIGlmIChjYWNoZWRSZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRSZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzaXplID0gemVyb1NpemUoKTtcbiAgICAgICAgY29uc3QgbWVhc3VyZUJveCA9IG9wdGlvbnMuYm94IHx8IGRlZmF1bHRNZWFzdXJlQm94O1xuICAgICAgICBjb25zdCBiYXNlbGluZU1hcmtlciA9IHRoaXMuX2Jhc2VsaW5lTWFya2VyKCkuY2xvbmVOb2RlKGZhbHNlKTtcblxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gc3R5bGUpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHN0eWxlW2tleV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZUJveC5zdHlsZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0ZXh0U3RyID0gb3B0aW9ucy5ub3JtYWxpemVUZXh0ICE9PSBmYWxzZSA/IG5vcm1hbGl6ZVRleHQodGV4dCkgOiBTdHJpbmcodGV4dCk7XG5cbiAgICAgICAgbWVhc3VyZUJveC50ZXh0Q29udGVudCA9IHRleHRTdHI7XG4gICAgICAgIG1lYXN1cmVCb3guYXBwZW5kQ2hpbGQoYmFzZWxpbmVNYXJrZXIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1lYXN1cmVCb3gpO1xuXG4gICAgICAgIGlmICh0ZXh0U3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgc2l6ZS53aWR0aCA9IG1lYXN1cmVCb3gub2Zmc2V0V2lkdGggLSB0aGlzLm9wdGlvbnMuYmFzZWxpbmVNYXJrZXJTaXplO1xuICAgICAgICAgICAgc2l6ZS5oZWlnaHQgPSBtZWFzdXJlQm94Lm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIHNpemUuYmFzZWxpbmUgPSBiYXNlbGluZU1hcmtlci5vZmZzZXRUb3AgKyB0aGlzLm9wdGlvbnMuYmFzZWxpbmVNYXJrZXJTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNpemUud2lkdGggPiAwICYmIHNpemUuaGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUucHV0KGNhY2hlS2V5LCBzaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lYXN1cmVCb3gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtZWFzdXJlQm94KTtcblxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG5cbiAgICBfYmFzZWxpbmVNYXJrZXIoKSB7XG4gICAgICAgIGNvbnN0IG1hcmtlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIG1hcmtlci5zdHlsZS5jc3NUZXh0ID0gXCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTt3aWR0aDogXCIgK1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmJhc2VsaW5lTWFya2VyU2l6ZSArIFwicHg7IGhlaWdodDogXCIgKyB0aGlzLm9wdGlvbnMuYmFzZWxpbmVNYXJrZXJTaXplICsgXCJweDtvdmVyZmxvdzogaGlkZGVuO1wiO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXI7XG4gICAgfVxufVxuXG5UZXh0TWV0cmljcy5jdXJyZW50ID0gbmV3IFRleHRNZXRyaWNzKCk7XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRNZXRyaWNzOyIsImltcG9ydCBUZXh0TWV0cmljcyBmcm9tICcuL3RleHQtbWV0cmljcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lYXN1cmVUZXh0KHRleHQsIHN0eWxlLCBtZWFzdXJlQm94KSB7XG4gICAgcmV0dXJuIFRleHRNZXRyaWNzLmN1cnJlbnQubWVhc3VyZSh0ZXh0LCBzdHlsZSwgbWVhc3VyZUJveCk7XG59XG4iLCJpbXBvcnQgT2JzZXJ2ZXJzTWl4aW4gZnJvbSAnLi4vbWl4aW5zL29ic2VydmVycy1taXhpbic7XG5pbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbmNsYXNzIE9wdGlvbnNTdG9yZSBleHRlbmRzIENsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMsIHByZWZpeCA9IFwiXCIpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcblxuICAgICAgICBmb3IgKGxldCBmaWVsZCBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBsZXQgbWVtYmVyID0gb3B0aW9uc1tmaWVsZF07XG4gICAgICAgICAgICBtZW1iZXIgPSB0aGlzLl93cmFwKG1lbWJlciwgZmllbGQpO1xuICAgICAgICAgICAgdGhpc1tmaWVsZF0gPSBtZW1iZXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQoZmllbGQpIHtcbiAgICAgICAgY29uc3QgcGFydHMgPSBmaWVsZC5zcGxpdChcIi5cIik7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzO1xuXG4gICAgICAgIHdoaWxlIChwYXJ0cy5sZW5ndGggJiYgcmVzdWx0KSB7XG4gICAgICAgICAgICBsZXQgcGFydCA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHRbcGFydF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHNldChmaWVsZCwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuZ2V0KGZpZWxkKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldChmaWVsZCwgdGhpcy5fd3JhcCh2YWx1ZSwgZmllbGQpKTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc0NoYW5nZSh7XG4gICAgICAgICAgICAgICAgZmllbGQ6IHRoaXMucHJlZml4ICsgZmllbGQsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXQoZmllbGQsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvc2l0ZSA9IGZpZWxkLmluZGV4T2YoXCIuXCIpID49IDA7XG4gICAgICAgIGxldCBwYXJlbnRPYmogPSB0aGlzO1xuICAgICAgICBsZXQgZmllbGROYW1lID0gZmllbGQ7XG5cbiAgICAgICAgaWYgKGNvbXBvc2l0ZSkge1xuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBmaWVsZE5hbWUuc3BsaXQoXCIuXCIpO1xuICAgICAgICAgICAgbGV0IHByZWZpeCA9IHRoaXMucHJlZml4O1xuXG4gICAgICAgICAgICB3aGlsZSAocGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGZpZWxkTmFtZSA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgcHJlZml4ICs9IGZpZWxkTmFtZSArIFwiLlwiO1xuXG4gICAgICAgICAgICAgICAgbGV0IG9iaiA9IHBhcmVudE9ialtmaWVsZE5hbWVdO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqID0gbmV3IE9wdGlvbnNTdG9yZSh7fSwgcHJlZml4KTtcbiAgICAgICAgICAgICAgICAgICAgb2JqLmFkZE9ic2VydmVyKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRPYmpbZmllbGROYW1lXSA9IG9iajtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyZW50T2JqID0gb2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmllbGROYW1lID0gcGFydHNbMF07XG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnRPYmouX2NsZWFyKGZpZWxkTmFtZSk7XG4gICAgICAgIHBhcmVudE9ialtmaWVsZE5hbWVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgX2NsZWFyKGZpZWxkKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzW2ZpZWxkXTtcbiAgICAgICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudC5yZW1vdmVPYnNlcnZlcikge1xuICAgICAgICAgICAgY3VycmVudC5yZW1vdmVPYnNlcnZlcih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF93cmFwKG9iamVjdCwgZmllbGQpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHRvU3RyaW5nLmNhbGwob2JqZWN0KTtcbiAgICAgICAgbGV0IHdyYXBwZWQgPSBvYmplY3Q7XG5cbiAgICAgICAgaWYgKHdyYXBwZWQgIT09IG51bGwgJiYgZGVmaW5lZCh3cmFwcGVkKSAmJiB0eXBlID09PSBcIltvYmplY3QgT2JqZWN0XVwiKSB7XG4gICAgICAgICAgICBpZiAoIShvYmplY3QgaW5zdGFuY2VvZiBPcHRpb25zU3RvcmUpICYmICEob2JqZWN0IGluc3RhbmNlb2YgQ2xhc3MpKSB7XG4gICAgICAgICAgICAgICAgd3JhcHBlZCA9IG5ldyBPcHRpb25zU3RvcmUod3JhcHBlZCwgdGhpcy5wcmVmaXggKyBmaWVsZCArIFwiLlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd3JhcHBlZC5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB3cmFwcGVkO1xuICAgIH1cbn1cblxuT2JzZXJ2ZXJzTWl4aW4uZXh0ZW5kKE9wdGlvbnNTdG9yZS5wcm90b3R5cGUpO1xuXG5leHBvcnQgZGVmYXVsdCBPcHRpb25zU3RvcmU7IiwiaW1wb3J0IE9wdGlvbnNTdG9yZSBmcm9tICcuLi9jb3JlL29wdGlvbnMtc3RvcmUnO1xuaW1wb3J0IE9ic2VydmVyc01peGluIGZyb20gJy4uL21peGlucy9vYnNlcnZlcnMtbWl4aW4nO1xuaW1wb3J0IFJlY3QgZnJvbSAnLi4vZ2VvbWV0cnkvcmVjdCc7XG5pbXBvcnQgTWF0cml4IGZyb20gJy4uL2dlb21ldHJ5L21hdHJpeCc7XG5pbXBvcnQgY3JlYXRlVHJhbnNmb3JtIGZyb20gJy4uL2dlb21ldHJ5L3RyYW5zZm9ybSc7XG5pbXBvcnQgdG9NYXRyaXggZnJvbSAnLi4vZ2VvbWV0cnkvdG8tbWF0cml4JztcbmltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IGRlZmluZWQsIGRlZmluaXRpb25JZCwgaXNUcmFuc3BhcmVudCwgdmFsdWVPckRlZmF1bHQgfSBmcm9tICcuLi91dGlsJztcblxuY2xhc3MgRWxlbWVudCBleHRlbmRzIENsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9pbml0T3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG5cbiAgICBfaW5pdE9wdGlvbnMob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgY2xpcCwgdHJhbnNmb3JtIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIG9wdGlvbnMudHJhbnNmb3JtID0gY3JlYXRlVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xpcCAmJiAhY2xpcC5pZCkge1xuICAgICAgICAgICAgY2xpcC5pZCA9IGRlZmluaXRpb25JZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gbmV3IE9wdGlvbnNTdG9yZShvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmFkZE9ic2VydmVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybSh2YWx1ZSkge1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZXQoXCJ0cmFuc2Zvcm1cIiwgY3JlYXRlVHJhbnNmb3JtKHZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmdldChcInRyYW5zZm9ybVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhcmVudFRyYW5zZm9ybSgpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSB0aGlzO1xuICAgICAgICBsZXQgcGFyZW50TWF0cml4O1xuXG4gICAgICAgIHdoaWxlIChlbGVtZW50LnBhcmVudCkge1xuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50O1xuICAgICAgICAgICAgbGV0IHRyYW5zZm9ybWF0aW9uID0gZWxlbWVudC50cmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICAgICAgICAgIHBhcmVudE1hdHJpeCA9IHRyYW5zZm9ybWF0aW9uLm1hdHJpeCgpLm11bHRpcGx5Q29weShwYXJlbnRNYXRyaXggfHwgTWF0cml4LnVuaXQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyZW50TWF0cml4KSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVHJhbnNmb3JtKHBhcmVudE1hdHJpeCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjdXJyZW50VHJhbnNmb3JtKHBhcmVudFRyYW5zZm9ybSA9IHRoaXMucGFyZW50VHJhbnNmb3JtKCkpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudFRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtKCk7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRNYXRyaXggPSB0b01hdHJpeChlbGVtZW50VHJhbnNmb3JtKTtcblxuICAgICAgICBsZXQgcGFyZW50TWF0cml4ID0gdG9NYXRyaXgocGFyZW50VHJhbnNmb3JtKTtcbiAgICAgICAgbGV0IGNvbWJpbmVkTWF0cml4O1xuXG4gICAgICAgIGlmIChlbGVtZW50TWF0cml4ICYmIHBhcmVudE1hdHJpeCkge1xuICAgICAgICAgICAgY29tYmluZWRNYXRyaXggPSBwYXJlbnRNYXRyaXgubXVsdGlwbHlDb3B5KGVsZW1lbnRNYXRyaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tYmluZWRNYXRyaXggPSBlbGVtZW50TWF0cml4IHx8IHBhcmVudE1hdHJpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb21iaW5lZE1hdHJpeCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVRyYW5zZm9ybShjb21iaW5lZE1hdHJpeCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2aXNpYmxlKHZhbHVlKSB7XG4gICAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNldChcInZpc2libGVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmdldChcInZpc2libGVcIikgIT09IGZhbHNlO1xuICAgIH1cblxuICAgIGNsaXAodmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgJiYgIXZhbHVlLmlkKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUuaWQgPSBkZWZpbml0aW9uSWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMuc2V0KFwiY2xpcFwiLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zLmdldChcImNsaXBcIik7XG4gICAgfVxuXG4gICAgb3BhY2l0eSh2YWx1ZSkge1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZXQoXCJvcGFjaXR5XCIsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KHRoaXMub3B0aW9ucy5nZXQoXCJvcGFjaXR5XCIpLCAxKTtcbiAgICB9XG5cbiAgICBjbGlwcGVkQkJveCh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCBiYm94ID0gdGhpcy5fY2xpcHBlZEJCb3godHJhbnNmb3JtYXRpb24pO1xuICAgICAgICBpZiAoYmJveCkge1xuICAgICAgICAgICAgY29uc3QgY2xpcCA9IHRoaXMuY2xpcCgpO1xuICAgICAgICAgICAgcmV0dXJuIGNsaXAgPyBSZWN0LmludGVyc2VjdChiYm94LCBjbGlwLmJib3godHJhbnNmb3JtYXRpb24pKSA6IGJib3g7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb250YWluc1BvaW50KHBvaW50LCBwYXJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgaWYgKHRoaXMudmlzaWJsZSgpKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSB0aGlzLmN1cnJlbnRUcmFuc2Zvcm0ocGFyZW50VHJhbnNmb3JtKTtcbiAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1lZFBvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtZWRQb2ludCA9IHBvaW50LnRyYW5zZm9ybUNvcHkodHJhbnNmb3JtLm1hdHJpeCgpLmludmVydCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAodGhpcy5faGFzRmlsbCgpICYmIHRoaXMuX2NvbnRhaW5zUG9pbnQodHJhbnNmb3JtZWRQb2ludCkpIHx8ICh0aGlzLl9pc09uUGF0aCAmJiB0aGlzLl9oYXNTdHJva2UoKSAmJiB0aGlzLl9pc09uUGF0aCh0cmFuc2Zvcm1lZFBvaW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF9oYXNGaWxsKCkge1xuICAgICAgICBjb25zdCBmaWxsID0gdGhpcy5vcHRpb25zLmZpbGw7XG4gICAgICAgIHJldHVybiBmaWxsICYmICFpc1RyYW5zcGFyZW50KGZpbGwuY29sb3IpO1xuICAgIH1cblxuICAgIF9oYXNTdHJva2UoKSB7XG4gICAgICAgIGNvbnN0IHN0cm9rZSA9IHRoaXMub3B0aW9ucy5zdHJva2U7XG4gICAgICAgIHJldHVybiBzdHJva2UgJiYgc3Ryb2tlLndpZHRoID4gMCAmJiAhaXNUcmFuc3BhcmVudChzdHJva2UuY29sb3IpO1xuICAgIH1cblxuICAgIF9jbGlwcGVkQkJveCh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5iYm94KHRyYW5zZm9ybWF0aW9uKTtcbiAgICB9XG59XG5cbkVsZW1lbnQucHJvdG90eXBlLm5vZGVUeXBlID0gXCJFbGVtZW50XCI7XG5cbk9ic2VydmVyc01peGluLmV4dGVuZChFbGVtZW50LnByb3RvdHlwZSk7XG5cbmV4cG9ydCBkZWZhdWx0IEVsZW1lbnQ7XG4iLCJpbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IEdSQURJRU5UID0gXCJHcmFkaWVudFwiO1xuXG5jb25zdCBQYWludGFibGUgPSB7XG4gICAgZXh0ZW5kOiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBwcm90by5maWxsID0gdGhpcy5maWxsO1xuICAgICAgICBwcm90by5zdHJva2UgPSB0aGlzLnN0cm9rZTtcbiAgICB9LFxuXG4gICAgZmlsbDogZnVuY3Rpb24oY29sb3IsIG9wYWNpdHkpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICBpZiAoZGVmaW5lZChjb2xvcikpIHtcbiAgICAgICAgICAgIGlmIChjb2xvciAmJiBjb2xvci5ub2RlVHlwZSAhPT0gR1JBRElFTlQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdGaWxsID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29sb3JcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChkZWZpbmVkKG9wYWNpdHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0ZpbGwub3BhY2l0eSA9IG9wYWNpdHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2V0KFwiZmlsbFwiLCBuZXdGaWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5zZXQoXCJmaWxsXCIsIGNvbG9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3B0aW9ucy5nZXQoXCJmaWxsXCIpO1xuICAgIH0sXG5cbiAgICBzdHJva2U6IGZ1bmN0aW9uKGNvbG9yLCB3aWR0aCwgb3BhY2l0eSkge1xuICAgICAgICBpZiAoZGVmaW5lZChjb2xvcikpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZXQoXCJzdHJva2UuY29sb3JcIiwgY29sb3IpO1xuXG4gICAgICAgICAgICBpZiAoZGVmaW5lZCh3aWR0aCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0KFwic3Ryb2tlLndpZHRoXCIsIHdpZHRoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRlZmluZWQob3BhY2l0eSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0KFwic3Ryb2tlLm9wYWNpdHlcIiwgb3BhY2l0eSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5nZXQoXCJzdHJva2VcIik7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFpbnRhYmxlOyIsImltcG9ydCBNYXRyaXggZnJvbSAnLi4vZ2VvbWV0cnkvbWF0cml4JztcbmltcG9ydCB0b01hdHJpeCBmcm9tICcuLi9nZW9tZXRyeS90by1tYXRyaXgnO1xuXG5jb25zdCBJREVOVElUWV9NQVRSSVhfSEFTSCA9IE1hdHJpeC5JREVOVElUWS50b1N0cmluZygpO1xuXG5jb25zdCBNZWFzdXJhYmxlID0ge1xuICAgIGV4dGVuZDogZnVuY3Rpb24ocHJvdG8pIHtcbiAgICAgICAgcHJvdG8uYmJveCA9IHRoaXMuYmJveDtcbiAgICAgICAgcHJvdG8uZ2VvbWV0cnlDaGFuZ2UgPSB0aGlzLmdlb21ldHJ5Q2hhbmdlO1xuICAgIH0sXG5cbiAgICBiYm94OiBmdW5jdGlvbih0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCBjb21iaW5lZE1hdHJpeCA9IHRvTWF0cml4KHRoaXMuY3VycmVudFRyYW5zZm9ybSh0cmFuc2Zvcm1hdGlvbikpO1xuICAgICAgICBjb25zdCBtYXRyaXhIYXNoID0gY29tYmluZWRNYXRyaXggPyBjb21iaW5lZE1hdHJpeC50b1N0cmluZygpIDogSURFTlRJVFlfTUFUUklYX0hBU0g7XG4gICAgICAgIGxldCBiYm94O1xuXG4gICAgICAgIGlmICh0aGlzLl9iYm94Q2FjaGUgJiYgdGhpcy5fbWF0cml4SGFzaCA9PT0gbWF0cml4SGFzaCkge1xuICAgICAgICAgICAgYmJveCA9IHRoaXMuX2Jib3hDYWNoZS5jbG9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmJveCA9IHRoaXMuX2Jib3goY29tYmluZWRNYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5fYmJveENhY2hlID0gYmJveCA/IGJib3guY2xvbmUoKSA6IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9tYXRyaXhIYXNoID0gbWF0cml4SGFzaDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gdGhpcy5vcHRpb25zLmdldChcInN0cm9rZS53aWR0aFwiKTtcbiAgICAgICAgaWYgKHN0cm9rZVdpZHRoICYmIGJib3gpIHtcbiAgICAgICAgICAgIGJib3guZXhwYW5kKHN0cm9rZVdpZHRoIC8gMik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYmJveDtcbiAgICB9LFxuXG4gICAgZ2VvbWV0cnlDaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICBkZWxldGUgdGhpcy5fYmJveENhY2hlO1xuICAgICAgICB0aGlzLnRyaWdnZXIoXCJnZW9tZXRyeUNoYW5nZVwiLCB7XG4gICAgICAgICAgICBlbGVtZW50OiB0aGlzXG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lYXN1cmFibGU7IiwiaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5mdW5jdGlvbiBnZW9tZXRyeUFjY2Vzc29yKG5hbWUpIHtcbiAgICBjb25zdCBmaWVsZE5hbWUgPSBcIl9cIiArIG5hbWU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZXJGaWVsZChmaWVsZE5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNbZmllbGROYW1lXTtcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZpbmVHZW9tZXRyeUFjY2Vzc29ycyhmbiwgbmFtZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZuW25hbWVzW2ldXSA9IGdlb21ldHJ5QWNjZXNzb3IobmFtZXNbaV0pO1xuICAgIH1cbn0iLCJpbXBvcnQgR2VvbWV0cnlDaXJjbGUgZnJvbSAnLi4vZ2VvbWV0cnkvY2lyY2xlJztcbmltcG9ydCBQYWludGFibGUgZnJvbSAnLi4vbWl4aW5zL3BhaW50YWJsZSc7XG5pbXBvcnQgTWVhc3VyYWJsZSBmcm9tICcuLi9taXhpbnMvbWVhc3VyYWJsZSc7XG5pbXBvcnQgZGVmaW5lR2VvbWV0cnlBY2Nlc3NvcnMgZnJvbSAnLi4vYWNjZXNzb3JzL2RlZmluZS1nZW9tZXRyeS1hY2Nlc3NvcnMnO1xuaW1wb3J0IEVsZW1lbnQgZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCB7IGRlZmluZWQgfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgREVGQVVMVF9TVFJPS0UgPSBcIiMwMDBcIjtcblxuY2xhc3MgQ2lyY2xlIGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgICBjb25zdHJ1Y3RvcihnZW9tZXRyeSA9IG5ldyBHZW9tZXRyeUNpcmNsZSgpLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkoZ2VvbWV0cnkpO1xuXG4gICAgICAgIGlmICghZGVmaW5lZCh0aGlzLm9wdGlvbnMuc3Ryb2tlKSkge1xuICAgICAgICAgICAgdGhpcy5zdHJva2UoREVGQVVMVF9TVFJPS0UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmF3QkJveCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dlb21ldHJ5LmJib3goKTtcbiAgICB9XG5cbiAgICBfYmJveChtYXRyaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dlb21ldHJ5LmJib3gobWF0cml4KTtcbiAgICB9XG5cbiAgICBfY29udGFpbnNQb2ludChwb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZW9tZXRyeSgpLmNvbnRhaW5zUG9pbnQocG9pbnQpO1xuICAgIH1cblxuICAgIF9pc09uUGF0aChwb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZW9tZXRyeSgpLl9pc09uUGF0aChwb2ludCwgdGhpcy5vcHRpb25zLnN0cm9rZS53aWR0aCAvIDIpO1xuICAgIH1cbn1cblxuQ2lyY2xlLnByb3RvdHlwZS5ub2RlVHlwZSA9IFwiQ2lyY2xlXCI7XG5cblBhaW50YWJsZS5leHRlbmQoQ2lyY2xlLnByb3RvdHlwZSk7XG5NZWFzdXJhYmxlLmV4dGVuZChDaXJjbGUucHJvdG90eXBlKTtcbmRlZmluZUdlb21ldHJ5QWNjZXNzb3JzKENpcmNsZS5wcm90b3R5cGUsIFsgXCJnZW9tZXRyeVwiIF0pO1xuXG5leHBvcnQgZGVmYXVsdCBDaXJjbGU7IiwiaW1wb3J0IE9ic2VydmVyc01peGluIGZyb20gJy4uL21peGlucy9vYnNlcnZlcnMtbWl4aW4nO1xuaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jb25zdCBwdXNoID0gW10ucHVzaDtcbmNvbnN0IHBvcCA9IFtdLnBvcDtcbmNvbnN0IHNwbGljZSA9IFtdLnNwbGljZTtcbmNvbnN0IHNoaWZ0ID0gW10uc2hpZnQ7XG5jb25zdCBzbGljZSA9IFtdLnNsaWNlO1xuY29uc3QgdW5zaGlmdCA9IFtdLnVuc2hpZnQ7XG5cbmNsYXNzIEVsZW1lbnRzQXJyYXkgZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoYXJyYXkgPSBbXSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fc3BsaWNlKDAsIGFycmF5Lmxlbmd0aCwgYXJyYXkpO1xuICAgIH1cblxuICAgIGVsZW1lbnRzKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fc3BsaWNlKDAsIHRoaXMubGVuZ3RoLCB2YWx1ZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5zbGljZSgwKTtcbiAgICB9XG5cbiAgICBwdXNoKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGFyZ3VtZW50cztcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcHVzaC5hcHBseSh0aGlzLCBlbGVtZW50cyk7XG5cbiAgICAgICAgdGhpcy5fYWRkKGVsZW1lbnRzKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHNsaWNlKCkge1xuICAgICAgICByZXR1cm4gc2xpY2UuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBwb3AoKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBwb3AuYXBwbHkodGhpcyk7XG5cbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlKFsgcmVzdWx0IF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBzcGxpY2UoaW5kZXgsIGhvd01hbnkpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3NwbGljZShpbmRleCwgaG93TWFueSwgZWxlbWVudHMpO1xuXG4gICAgICAgIHRoaXMuX2NoYW5nZSgpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgc2hpZnQoKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzaGlmdC5hcHBseSh0aGlzKTtcblxuICAgICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmUoWyByZXN1bHQgXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHVuc2hpZnQoKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gYXJndW1lbnRzO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB1bnNoaWZ0LmFwcGx5KHRoaXMsIGVsZW1lbnRzKTtcblxuICAgICAgICB0aGlzLl9hZGQoZWxlbWVudHMpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgaW5kZXhPZihlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzW2lkeF0gPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWR4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBfc3BsaWNlKGluZGV4LCBob3dNYW55LCBlbGVtZW50cykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzcGxpY2UuYXBwbHkodGhpcywgWyBpbmRleCwgaG93TWFueSBdLmNvbmNhdChlbGVtZW50cykpO1xuXG4gICAgICAgIHRoaXMuX2NsZWFyT2JzZXJ2ZXIocmVzdWx0KTtcbiAgICAgICAgdGhpcy5fc2V0T2JzZXJ2ZXIoZWxlbWVudHMpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgX2FkZChlbGVtZW50cykge1xuICAgICAgICB0aGlzLl9zZXRPYnNlcnZlcihlbGVtZW50cyk7XG4gICAgICAgIHRoaXMuX2NoYW5nZSgpO1xuICAgIH1cblxuICAgIF9yZW1vdmUoZWxlbWVudHMpIHtcbiAgICAgICAgdGhpcy5fY2xlYXJPYnNlcnZlcihlbGVtZW50cyk7XG4gICAgICAgIHRoaXMuX2NoYW5nZSgpO1xuICAgIH1cblxuICAgIF9zZXRPYnNlcnZlcihlbGVtZW50cykge1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBlbGVtZW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBlbGVtZW50c1tpZHhdLmFkZE9ic2VydmVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NsZWFyT2JzZXJ2ZXIoZWxlbWVudHMpIHtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZWxlbWVudHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgZWxlbWVudHNbaWR4XS5yZW1vdmVPYnNlcnZlcih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jaGFuZ2UoKSB7fVxufVxuXG5PYnNlcnZlcnNNaXhpbi5leHRlbmQoRWxlbWVudHNBcnJheS5wcm90b3R5cGUpO1xuXG5leHBvcnQgZGVmYXVsdCBFbGVtZW50c0FycmF5O1xuIiwiaW1wb3J0IEVsZW1lbnRzQXJyYXkgZnJvbSAnLi9lbGVtZW50cy1hcnJheSc7XG5cbmNsYXNzIEdlb21ldHJ5RWxlbWVudHNBcnJheSBleHRlbmRzIEVsZW1lbnRzQXJyYXkge1xuICAgIF9jaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdlb21ldHJ5RWxlbWVudHNBcnJheTsiLCJpbXBvcnQgUmVjdCBmcm9tICcuLi8uLi9nZW9tZXRyeS9yZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWxlbWVudHNCb3VuZGluZ0JveChlbGVtZW50cywgYXBwbHlUcmFuc2Zvcm0sIHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgbGV0IGJvdW5kaW5nQm94O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgICBpZiAoZWxlbWVudC52aXNpYmxlKCkpIHtcbiAgICAgICAgICAgIGxldCBlbGVtZW50Qm91bmRpbmdCb3ggPSBhcHBseVRyYW5zZm9ybSA/IGVsZW1lbnQuYmJveCh0cmFuc2Zvcm1hdGlvbikgOiBlbGVtZW50LnJhd0JCb3goKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Qm91bmRpbmdCb3gpIHtcbiAgICAgICAgICAgICAgICBpZiAoYm91bmRpbmdCb3gpIHtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRpbmdCb3ggPSBSZWN0LnVuaW9uKGJvdW5kaW5nQm94LCBlbGVtZW50Qm91bmRpbmdCb3gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kaW5nQm94ID0gZWxlbWVudEJvdW5kaW5nQm94O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBib3VuZGluZ0JveDtcbn1cblxuIiwiaW1wb3J0IFJlY3QgZnJvbSAnLi4vLi4vZ2VvbWV0cnkvcmVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVsZW1lbnRzQ2xpcHBlZEJvdW5kaW5nQm94KGVsZW1lbnRzLCB0cmFuc2Zvcm1hdGlvbikge1xuICAgIGxldCBib3VuZGluZ0JveDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgICAgaWYgKGVsZW1lbnQudmlzaWJsZSgpKSB7XG4gICAgICAgICAgICBsZXQgZWxlbWVudEJvdW5kaW5nQm94ID0gZWxlbWVudC5jbGlwcGVkQkJveCh0cmFuc2Zvcm1hdGlvbik7XG4gICAgICAgICAgICBpZiAoZWxlbWVudEJvdW5kaW5nQm94KSB7XG4gICAgICAgICAgICAgICAgaWYgKGJvdW5kaW5nQm94KSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kaW5nQm94ID0gUmVjdC51bmlvbihib3VuZGluZ0JveCwgZWxlbWVudEJvdW5kaW5nQm94KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBib3VuZGluZ0JveCA9IGVsZW1lbnRCb3VuZGluZ0JveDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmRpbmdCb3g7XG59IiwiaW1wb3J0IEdlb21ldHJ5RWxlbWVudHNBcnJheSBmcm9tICcuL2dlb21ldHJ5LWVsZW1lbnRzLWFycmF5JztcbmltcG9ydCBFbGVtZW50IGZyb20gJy4vZWxlbWVudCc7XG5pbXBvcnQgUGF0aCBmcm9tICcuL3BhdGgnO1xuaW1wb3J0IFBhaW50YWJsZSBmcm9tICcuLi9taXhpbnMvcGFpbnRhYmxlJztcbmltcG9ydCBNZWFzdXJhYmxlIGZyb20gJy4uL21peGlucy9tZWFzdXJhYmxlJztcbmltcG9ydCBlbGVtZW50c0JvdW5kaW5nQm94IGZyb20gJy4vdXRpbHMvZWxlbWVudHMtYm91bmRpbmctYm94JztcbmltcG9ydCBlbGVtZW50c0NsaXBwZWRCb3VuZGluZ0JveCBmcm9tICcuL3V0aWxzL2VsZW1lbnRzLWNsaXBwZW5kLWJvdW5kaW5nLWJveCc7XG5pbXBvcnQgeyBkZWZpbmVkLCBsYXN0IH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNsYXNzIE11bHRpUGF0aCBleHRlbmRzIEVsZW1lbnQge1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5wYXRocyA9IG5ldyBHZW9tZXRyeUVsZW1lbnRzQXJyYXkoKTtcbiAgICAgICAgdGhpcy5wYXRocy5hZGRPYnNlcnZlcih0aGlzKTtcblxuICAgICAgICBpZiAoIWRlZmluZWQodGhpcy5vcHRpb25zLnN0cm9rZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3Ryb2tlKFwiIzAwMFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1vdmVUbyh4LCB5KSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBuZXcgUGF0aCgpO1xuICAgICAgICBwYXRoLm1vdmVUbyh4LCB5KTtcblxuICAgICAgICB0aGlzLnBhdGhzLnB1c2gocGF0aCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbGluZVRvKHgsIHkpIHtcbiAgICAgICAgaWYgKHRoaXMucGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGFzdCh0aGlzLnBhdGhzKS5saW5lVG8oeCwgeSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjdXJ2ZVRvKGNvbnRyb2xPdXQsIGNvbnRyb2xJbiwgcG9pbnQpIHtcbiAgICAgICAgaWYgKHRoaXMucGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGFzdCh0aGlzLnBhdGhzKS5jdXJ2ZVRvKGNvbnRyb2xPdXQsIGNvbnRyb2xJbiwgcG9pbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYXJjKHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCByYWRpdXNYLCByYWRpdXNZLCBhbnRpY2xvY2t3aXNlKSB7XG4gICAgICAgIGlmICh0aGlzLnBhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxhc3QodGhpcy5wYXRocykuYXJjKHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCByYWRpdXNYLCByYWRpdXNZLCBhbnRpY2xvY2t3aXNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFyY1RvKGVuZCwgcngsIHJ5LCBsYXJnZUFyYywgc3dpcGUsIHJvdGF0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLnBhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxhc3QodGhpcy5wYXRocykuYXJjVG8oZW5kLCByeCwgcnksIGxhcmdlQXJjLCBzd2lwZSwgcm90YXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxhc3QodGhpcy5wYXRocykuY2xvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9iYm94KG1hdHJpeCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudHNCb3VuZGluZ0JveCh0aGlzLnBhdGhzLCB0cnVlLCBtYXRyaXgpO1xuICAgIH1cblxuICAgIHJhd0JCb3goKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50c0JvdW5kaW5nQm94KHRoaXMucGF0aHMsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBfY29udGFpbnNQb2ludChwb2ludCkge1xuICAgICAgICBjb25zdCBwYXRocyA9IHRoaXMucGF0aHM7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgcGF0aHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKHBhdGhzW2lkeF0uX2NvbnRhaW5zUG9pbnQocG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF9pc09uUGF0aChwb2ludCkge1xuICAgICAgICBjb25zdCBwYXRocyA9IHRoaXMucGF0aHM7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5vcHRpb25zLnN0cm9rZS53aWR0aDtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBwYXRocy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBpZiAocGF0aHNbaWR4XS5faXNPblBhdGgocG9pbnQsIHdpZHRoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBfY2xpcHBlZEJCb3godHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzQ2xpcHBlZEJvdW5kaW5nQm94KHRoaXMucGF0aHMsIHRoaXMuY3VycmVudFRyYW5zZm9ybSh0cmFuc2Zvcm1hdGlvbikpO1xuICAgIH1cbn1cblxuTXVsdGlQYXRoLnByb3RvdHlwZS5ub2RlVHlwZSA9IFwiTXVsdGlQYXRoXCI7XG5cblBhaW50YWJsZS5leHRlbmQoTXVsdGlQYXRoLnByb3RvdHlwZSk7XG5NZWFzdXJhYmxlLmV4dGVuZChNdWx0aVBhdGgucHJvdG90eXBlKTtcblxuZXhwb3J0IGRlZmF1bHQgTXVsdGlQYXRoOyIsImltcG9ydCBQb2ludCBmcm9tICcuLi9nZW9tZXRyeS9wb2ludCc7XG5pbXBvcnQgeyBsYXN0IH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IFNoYXBlTWFwID0ge1xuICAgIGw6IGZ1bmN0aW9uKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBwYXJhbWV0ZXJzLCBwb3NpdGlvbiB9ID0gb3B0aW9ucztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlcnMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGxldCBwb2ludCA9IG5ldyBQb2ludChwYXJhbWV0ZXJzW2ldLCBwYXJhbWV0ZXJzW2kgKyAxXSk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlzUmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgICBwb2ludC50cmFuc2xhdGVXaXRoKHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGF0aC5saW5lVG8ocG9pbnQueCwgcG9pbnQueSk7XG5cbiAgICAgICAgICAgIHBvc2l0aW9uLnggPSBwb2ludC54O1xuICAgICAgICAgICAgcG9zaXRpb24ueSA9IHBvaW50Lnk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYzogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHBhcmFtZXRlcnMsIHBvc2l0aW9uIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkgKz0gNikge1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xPdXQgPSBuZXcgUG9pbnQocGFyYW1ldGVyc1tpXSwgcGFyYW1ldGVyc1tpICsgMV0pO1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xJbiA9IG5ldyBQb2ludChwYXJhbWV0ZXJzW2kgKyAyXSwgcGFyYW1ldGVyc1tpICsgM10pO1xuICAgICAgICAgICAgbGV0IHBvaW50ID0gbmV3IFBvaW50KHBhcmFtZXRlcnNbaSArIDRdLCBwYXJhbWV0ZXJzW2kgKyA1XSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pc1JlbGF0aXZlKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbEluLnRyYW5zbGF0ZVdpdGgocG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xPdXQudHJhbnNsYXRlV2l0aChwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgcG9pbnQudHJhbnNsYXRlV2l0aChwb3NpdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhdGguY3VydmVUbyhjb250cm9sT3V0LCBjb250cm9sSW4sIHBvaW50KTtcblxuICAgICAgICAgICAgcG9zaXRpb24ueCA9IHBvaW50Lng7XG4gICAgICAgICAgICBwb3NpdGlvbi55ID0gcG9pbnQueTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICB2OiBmdW5jdGlvbihwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9ucy5pc1JlbGF0aXZlID8gMCA6IG9wdGlvbnMucG9zaXRpb24ueDtcblxuICAgICAgICB0b0xpbmVQYXJhbWF0ZXJzKG9wdGlvbnMucGFyYW1ldGVycywgdHJ1ZSwgdmFsdWUpO1xuICAgICAgICB0aGlzLmwocGF0aCwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIGg6IGZ1bmN0aW9uKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zLmlzUmVsYXRpdmUgPyAwIDogb3B0aW9ucy5wb3NpdGlvbi55O1xuXG4gICAgICAgIHRvTGluZVBhcmFtYXRlcnMob3B0aW9ucy5wYXJhbWV0ZXJzLCBmYWxzZSwgdmFsdWUpO1xuICAgICAgICB0aGlzLmwocGF0aCwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIGE6IGZ1bmN0aW9uKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBwYXJhbWV0ZXJzLCBwb3NpdGlvbiB9ID0gb3B0aW9ucztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtZXRlcnMubGVuZ3RoOyBpICs9IDcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhZGl1c1ggPSBwYXJhbWV0ZXJzW2ldO1xuICAgICAgICAgICAgY29uc3QgcmFkaXVzWSA9IHBhcmFtZXRlcnNbaSArIDFdO1xuICAgICAgICAgICAgY29uc3Qgcm90YXRpb24gPSBwYXJhbWV0ZXJzW2kgKyAyXTtcbiAgICAgICAgICAgIGNvbnN0IGxhcmdlQXJjID0gcGFyYW1ldGVyc1tpICsgM107XG4gICAgICAgICAgICBjb25zdCBzd2lwZSA9IHBhcmFtZXRlcnNbaSArIDRdO1xuICAgICAgICAgICAgY29uc3QgZW5kUG9pbnQgPSBuZXcgUG9pbnQocGFyYW1ldGVyc1tpICsgNV0sIHBhcmFtZXRlcnNbaSArIDZdKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaXNSZWxhdGl2ZSkge1xuICAgICAgICAgICAgICAgIGVuZFBvaW50LnRyYW5zbGF0ZVdpdGgocG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBvc2l0aW9uLnggIT09IGVuZFBvaW50LnggfHwgcG9zaXRpb24ueSAhPT0gZW5kUG9pbnQueSkge1xuICAgICAgICAgICAgICAgIHBhdGguYXJjVG8oZW5kUG9pbnQsIHJhZGl1c1gsIHJhZGl1c1ksIGxhcmdlQXJjLCBzd2lwZSwgcm90YXRpb24pO1xuXG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueCA9IGVuZFBvaW50Lng7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24ueSA9IGVuZFBvaW50Lnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgczogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHBhcmFtZXRlcnMsIHBvc2l0aW9uLCBwcmV2aW91c0NvbW1hbmQgfSA9IG9wdGlvbnM7XG4gICAgICAgIGxldCBsYXN0Q29udHJvbEluO1xuXG4gICAgICAgIGlmIChwcmV2aW91c0NvbW1hbmQgPT09IFwic1wiIHx8IHByZXZpb3VzQ29tbWFuZCA9PT0gXCJjXCIpIHtcbiAgICAgICAgICAgIGxhc3RDb250cm9sSW4gPSBsYXN0KGxhc3QocGF0aC5wYXRocykuc2VnbWVudHMpLmNvbnRyb2xJbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJzLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgICAgICBsZXQgY29udHJvbEluID0gbmV3IFBvaW50KHBhcmFtZXRlcnNbaV0sIHBhcmFtZXRlcnNbaSArIDFdKTtcbiAgICAgICAgICAgIGxldCBlbmRQb2ludCA9IG5ldyBQb2ludChwYXJhbWV0ZXJzW2kgKyAyXSwgcGFyYW1ldGVyc1tpICsgM10pO1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xPdXQ7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmlzUmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sSW4udHJhbnNsYXRlV2l0aChwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgZW5kUG9pbnQudHJhbnNsYXRlV2l0aChwb3NpdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChsYXN0Q29udHJvbEluKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbE91dCA9IHJlZmxlY3Rpb25Qb2ludChsYXN0Q29udHJvbEluLCBwb3NpdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xPdXQgPSBwb3NpdGlvbi5jbG9uZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYXN0Q29udHJvbEluID0gY29udHJvbEluO1xuXG4gICAgICAgICAgICBwYXRoLmN1cnZlVG8oY29udHJvbE91dCwgY29udHJvbEluLCBlbmRQb2ludCk7XG5cbiAgICAgICAgICAgIHBvc2l0aW9uLnggPSBlbmRQb2ludC54O1xuICAgICAgICAgICAgcG9zaXRpb24ueSA9IGVuZFBvaW50Lnk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcTogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHBhcmFtZXRlcnMsIHBvc2l0aW9uIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xQb2ludCA9IG5ldyBQb2ludChwYXJhbWV0ZXJzW2ldLCBwYXJhbWV0ZXJzW2kgKyAxXSk7XG4gICAgICAgICAgICBsZXQgZW5kUG9pbnQgPSBuZXcgUG9pbnQocGFyYW1ldGVyc1tpICsgMl0sIHBhcmFtZXRlcnNbaSArIDNdKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaXNSZWxhdGl2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xQb2ludC50cmFuc2xhdGVXaXRoKHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBlbmRQb2ludC50cmFuc2xhdGVXaXRoKHBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGN1YmljQ29udHJvbFBvaW50cyA9IHF1YWRyYXRpY1RvQ3ViaWNDb250cm9sUG9pbnRzKHBvc2l0aW9uLCBjb250cm9sUG9pbnQsIGVuZFBvaW50KTtcblxuICAgICAgICAgICAgcGF0aC5jdXJ2ZVRvKGN1YmljQ29udHJvbFBvaW50cy5jb250cm9sT3V0LCBjdWJpY0NvbnRyb2xQb2ludHMuY29udHJvbEluLCBlbmRQb2ludCk7XG5cbiAgICAgICAgICAgIHBvc2l0aW9uLnggPSBlbmRQb2ludC54O1xuICAgICAgICAgICAgcG9zaXRpb24ueSA9IGVuZFBvaW50Lnk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdDogZnVuY3Rpb24ocGF0aCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHBhcmFtZXRlcnMsIHBvc2l0aW9uLCBwcmV2aW91c0NvbW1hbmQgfSA9IG9wdGlvbnM7XG4gICAgICAgIGxldCBjb250cm9sUG9pbnQ7XG5cbiAgICAgICAgaWYgKHByZXZpb3VzQ29tbWFuZCA9PT0gXCJxXCIgfHwgcHJldmlvdXNDb21tYW5kID09PSBcInRcIikge1xuICAgICAgICAgICAgbGV0IGxhc3RTZWdtZW50ID0gbGFzdChsYXN0KHBhdGgucGF0aHMpLnNlZ21lbnRzKTtcbiAgICAgICAgICAgIGNvbnRyb2xQb2ludCA9IGxhc3RTZWdtZW50LmNvbnRyb2xJbigpLmNsb25lKClcbiAgICAgICAgICAgICAgICAudHJhbnNsYXRlV2l0aChwb3NpdGlvbi5zY2FsZUNvcHkoLTEgLyAzKSlcbiAgICAgICAgICAgICAgICAuc2NhbGUoMyAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICBsZXQgZW5kUG9pbnQgPSBuZXcgUG9pbnQocGFyYW1ldGVyc1tpXSwgcGFyYW1ldGVyc1tpICsgMV0pO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaXNSZWxhdGl2ZSkge1xuICAgICAgICAgICAgICAgIGVuZFBvaW50LnRyYW5zbGF0ZVdpdGgocG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29udHJvbFBvaW50KSB7XG4gICAgICAgICAgICAgICAgY29udHJvbFBvaW50ID0gcmVmbGVjdGlvblBvaW50KGNvbnRyb2xQb2ludCwgcG9zaXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250cm9sUG9pbnQgPSBwb3NpdGlvbi5jbG9uZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY3ViaWNDb250cm9sUG9pbnRzID0gcXVhZHJhdGljVG9DdWJpY0NvbnRyb2xQb2ludHMocG9zaXRpb24sIGNvbnRyb2xQb2ludCwgZW5kUG9pbnQpO1xuXG4gICAgICAgICAgICBwYXRoLmN1cnZlVG8oY3ViaWNDb250cm9sUG9pbnRzLmNvbnRyb2xPdXQsIGN1YmljQ29udHJvbFBvaW50cy5jb250cm9sSW4sIGVuZFBvaW50KTtcblxuICAgICAgICAgICAgcG9zaXRpb24ueCA9IGVuZFBvaW50Lng7XG4gICAgICAgICAgICBwb3NpdGlvbi55ID0gZW5kUG9pbnQueTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIHRvTGluZVBhcmFtYXRlcnMocGFyYW1ldGVycywgaXNWZXJ0aWNhbCwgdmFsdWUpIHtcbiAgICBjb25zdCBpbnNlcnRQb3NpdGlvbiA9IGlzVmVydGljYWwgPyAwIDogMTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBwYXJhbWV0ZXJzLnNwbGljZShpICsgaW5zZXJ0UG9zaXRpb24sIDAsIHZhbHVlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlZmxlY3Rpb25Qb2ludChwb2ludCwgY2VudGVyKSB7XG4gICAgaWYgKHBvaW50ICYmIGNlbnRlcikge1xuICAgICAgICByZXR1cm4gY2VudGVyLnNjYWxlQ29weSgyKS50cmFuc2xhdGUoLXBvaW50LngsIC1wb2ludC55KTtcbiAgICB9XG59XG5cbmNvbnN0IHRoaXJkID0gMSAvIDM7XG5cbmZ1bmN0aW9uIHF1YWRyYXRpY1RvQ3ViaWNDb250cm9sUG9pbnRzKHBvc2l0aW9uLCBjb250cm9sUG9pbnQsIGVuZFBvaW50KSB7XG4gICAgY29uc3Qgc2NhbGVkUG9pbnQgPSBjb250cm9sUG9pbnQuY2xvbmUoKS5zY2FsZSgyIC8gMyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udHJvbE91dDogc2NhbGVkUG9pbnQuY2xvbmUoKS50cmFuc2xhdGVXaXRoKHBvc2l0aW9uLnNjYWxlQ29weSh0aGlyZCkpLFxuICAgICAgICBjb250cm9sSW46IHNjYWxlZFBvaW50LnRyYW5zbGF0ZVdpdGgoZW5kUG9pbnQuc2NhbGVDb3B5KHRoaXJkKSlcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBTaGFwZU1hcDsiLCJpbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgTXVsdGlQYXRoIGZyb20gJy4uL3NoYXBlcy9tdWx0aS1wYXRoJztcbmltcG9ydCBQb2ludCBmcm9tICcuLi9nZW9tZXRyeS9wb2ludCc7XG5pbXBvcnQgU2hhcGVNYXAgZnJvbSAnLi9zaGFwZS1tYXAnO1xuXG5jb25zdCBTRUdNRU5UX1JFR0VYID0gLyhbYS1kZi16XXsxfSkoW15hLWRmLXpdKikoeik/L2dpO1xuY29uc3QgU1BMSVRfUkVHRVggPSAvWyxcXHNdPyhbK1xcLV0/KD86XFxkKlxcLlxcZCt8XFxkKykoPzpbZUVdWytcXC1dP1xcZCspPykvZztcbmNvbnN0IE1PVkUgPSBcIm1cIjtcbmNvbnN0IENMT1NFID0gXCJ6XCI7XG5cbmZ1bmN0aW9uIHBhcnNlUGFyYW1ldGVycyhzdHIpIHtcbiAgICBjb25zdCBwYXJhbWV0ZXJzID0gW107XG4gICAgc3RyLnJlcGxhY2UoU1BMSVRfUkVHRVgsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIpIHtcbiAgICAgICAgcGFyYW1ldGVycy5wdXNoKHBhcnNlRmxvYXQobnVtYmVyKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcmFtZXRlcnM7XG59XG5cbmNsYXNzIFBhdGhQYXJzZXIgZXh0ZW5kcyBDbGFzcyB7XG5cbiAgICBwYXJzZShzdHIsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbXVsdGlQYXRoID0gbmV3IE11bHRpUGF0aChvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBuZXcgUG9pbnQoKTtcbiAgICAgICAgbGV0IHByZXZpb3VzQ29tbWFuZDtcblxuICAgICAgICBzdHIucmVwbGFjZShTRUdNRU5UX1JFR0VYLCAobWF0Y2gsIGVsZW1lbnQsIHBhcmFtcywgY2xvc2VQYXRoKSA9PiB7XG4gICAgICAgICAgICBsZXQgY29tbWFuZCA9IGVsZW1lbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGlzUmVsYXRpdmUgPSBjb21tYW5kID09PSBlbGVtZW50O1xuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHBhcnNlUGFyYW1ldGVycyhwYXJhbXMudHJpbSgpKTtcblxuICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT09IE1PVkUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNSZWxhdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54ICs9IHBhcmFtZXRlcnNbMF07XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLnkgKz0gcGFyYW1ldGVyc1sxXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi54ID0gcGFyYW1ldGVyc1swXTtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24ueSA9IHBhcmFtZXRlcnNbMV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbXVsdGlQYXRoLm1vdmVUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZCA9IFwibFwiO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLnNwbGljZSgwLCAyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChTaGFwZU1hcFtjb21tYW5kXSkge1xuICAgICAgICAgICAgICAgIFNoYXBlTWFwW2NvbW1hbmRdKFxuICAgICAgICAgICAgICAgICAgICBtdWx0aVBhdGgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnM6IHBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1JlbGF0aXZlOiBpc1JlbGF0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21tYW5kOiBwcmV2aW91c0NvbW1hbmRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VQYXRoICYmIGNsb3NlUGF0aC50b0xvd2VyQ2FzZSgpID09PSBDTE9TRSkge1xuICAgICAgICAgICAgICAgICAgICBtdWx0aVBhdGguY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbW1hbmQgIT09IE1PVkUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciB3aGlsZSBwYXJzaW5nIFNWRyBwYXRoLiBVbnN1cHBvcnRlZCBjb21tYW5kOiBcIiArIGNvbW1hbmQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcmV2aW91c0NvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbXVsdGlQYXRoO1xuICAgIH1cbn1cblxuUGF0aFBhcnNlci5jdXJyZW50ID0gbmV3IFBhdGhQYXJzZXIoKTtcblxuZXhwb3J0IGRlZmF1bHQgUGF0aFBhcnNlcjtcbiIsImltcG9ydCBHZW9tZXRyeUVsZW1lbnRzQXJyYXkgZnJvbSAnLi9nZW9tZXRyeS1lbGVtZW50cy1hcnJheSc7XG5pbXBvcnQgRWxlbWVudCBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IFBhaW50YWJsZSBmcm9tICcuLi9taXhpbnMvcGFpbnRhYmxlJztcbmltcG9ydCBNZWFzdXJhYmxlIGZyb20gJy4uL21peGlucy9tZWFzdXJhYmxlJztcbmltcG9ydCBBcmMgZnJvbSAnLi4vZ2VvbWV0cnkvYXJjJztcbmltcG9ydCBSZWN0IGZyb20gJy4uL2dlb21ldHJ5L3JlY3QnO1xuaW1wb3J0IFNlZ21lbnQgZnJvbSAnLi4vZ2VvbWV0cnkvc2VnbWVudCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vZ2VvbWV0cnkvcG9pbnQnO1xuaW1wb3J0IFNpemUgZnJvbSAnLi4vZ2VvbWV0cnkvc2l6ZSc7XG5pbXBvcnQgbGluZUludGVyc2VjdGlvbnNDb3VudCBmcm9tICcuLi9nZW9tZXRyeS9tYXRoL2xpbmUtaW50ZXJzZWN0aW9ucy1jb3VudCc7XG5pbXBvcnQgeyBkZWZpbmVkLCBsYXN0LCByYWQgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBQYXRoUGFyc2VyIGZyb20gJy4uL3BhcnNpbmcvcGF0aC1wYXJzZXInO1xuXG5jbGFzcyBQYXRoIGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnNlZ21lbnRzID0gbmV3IEdlb21ldHJ5RWxlbWVudHNBcnJheSgpO1xuICAgICAgICB0aGlzLnNlZ21lbnRzLmFkZE9ic2VydmVyKHRoaXMpO1xuXG4gICAgICAgIGlmICghZGVmaW5lZCh0aGlzLm9wdGlvbnMuc3Ryb2tlKSkge1xuICAgICAgICAgICAgdGhpcy5zdHJva2UoXCIjMDAwXCIpO1xuXG4gICAgICAgICAgICBpZiAoIWRlZmluZWQodGhpcy5vcHRpb25zLnN0cm9rZS5saW5lSm9pbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2V0KFwic3Ryb2tlLmxpbmVKb2luXCIsIFwibWl0ZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtb3ZlVG8oeCwgeSkge1xuICAgICAgICB0aGlzLnN1c3BlbmQoKTtcbiAgICAgICAgdGhpcy5zZWdtZW50cy5lbGVtZW50cyhbXSk7XG4gICAgICAgIHRoaXMucmVzdW1lKCk7XG5cbiAgICAgICAgdGhpcy5saW5lVG8oeCwgeSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbGluZVRvKHgsIHkpIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBkZWZpbmVkKHkpID8gbmV3IFBvaW50KHgsIHkpIDogeDtcbiAgICAgICAgY29uc3Qgc2VnbWVudCA9IG5ldyBTZWdtZW50KHBvaW50KTtcblxuICAgICAgICB0aGlzLnNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY3VydmVUbyhjb250cm9sT3V0LCBjb250cm9sSW4sIHBvaW50KSB7XG4gICAgICAgIGlmICh0aGlzLnNlZ21lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RTZWdtZW50ID0gbGFzdCh0aGlzLnNlZ21lbnRzKTtcbiAgICAgICAgICAgIGNvbnN0IHNlZ21lbnQgPSBuZXcgU2VnbWVudChwb2ludCwgY29udHJvbEluKTtcbiAgICAgICAgICAgIHRoaXMuc3VzcGVuZCgpO1xuICAgICAgICAgICAgbGFzdFNlZ21lbnQuY29udHJvbE91dChjb250cm9sT3V0KTtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lKCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGFyYyhzdGFydEFuZ2xlLCBlbmRBbmdsZSwgcmFkaXVzWCwgcmFkaXVzWSwgYW50aWNsb2Nrd2lzZSkge1xuICAgICAgICBpZiAodGhpcy5zZWdtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0U2VnbWVudCA9IGxhc3QodGhpcy5zZWdtZW50cyk7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBsYXN0U2VnbWVudC5hbmNob3IoKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gcmFkKHN0YXJ0QW5nbGUpO1xuICAgICAgICAgICAgY29uc3QgY2VudGVyID0gbmV3IFBvaW50KGFuY2hvci54IC0gcmFkaXVzWCAqIE1hdGguY29zKHN0YXJ0KSxcbiAgICAgICAgICAgICAgICBhbmNob3IueSAtIHJhZGl1c1kgKiBNYXRoLnNpbihzdGFydCkpO1xuICAgICAgICAgICAgY29uc3QgYXJjID0gbmV3IEFyYyhjZW50ZXIsIHtcbiAgICAgICAgICAgICAgICBzdGFydEFuZ2xlOiBzdGFydEFuZ2xlLFxuICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiBlbmRBbmdsZSxcbiAgICAgICAgICAgICAgICByYWRpdXNYOiByYWRpdXNYLFxuICAgICAgICAgICAgICAgIHJhZGl1c1k6IHJhZGl1c1ksXG4gICAgICAgICAgICAgICAgYW50aWNsb2Nrd2lzZTogYW50aWNsb2Nrd2lzZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX2FkZEFyY1NlZ21lbnRzKGFyYyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhcmNUbyhlbmQsIHJ4LCByeSwgbGFyZ2VBcmMsIHN3aXBlLCByb3RhdGlvbikge1xuICAgICAgICBpZiAodGhpcy5zZWdtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0U2VnbWVudCA9IGxhc3QodGhpcy5zZWdtZW50cyk7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBsYXN0U2VnbWVudC5hbmNob3IoKTtcbiAgICAgICAgICAgIGNvbnN0IGFyYyA9IEFyYy5mcm9tUG9pbnRzKGFuY2hvciwgZW5kLCByeCwgcnksIGxhcmdlQXJjLCBzd2lwZSwgcm90YXRpb24pO1xuXG4gICAgICAgICAgICB0aGlzLl9hZGRBcmNTZWdtZW50cyhhcmMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9hZGRBcmNTZWdtZW50cyhhcmMpIHtcbiAgICAgICAgdGhpcy5zdXNwZW5kKCk7XG5cbiAgICAgICAgY29uc3QgY3VydmVQb2ludHMgPSBhcmMuY3VydmVQb2ludHMoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGN1cnZlUG9pbnRzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnZlVG8oY3VydmVQb2ludHNbaV0sIGN1cnZlUG9pbnRzW2kgKyAxXSwgY3VydmVQb2ludHNbaSArIDJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzdW1lKCk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByYXdCQm94KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmJveCgpO1xuICAgIH1cblxuICAgIF9jb250YWluc1BvaW50KHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gc2VnbWVudHMubGVuZ3RoO1xuICAgICAgICBsZXQgaW50ZXJzZWN0aW9uc0NvdW50ID0gMDtcbiAgICAgICAgbGV0IHByZXZpb3VzLCBjdXJyZW50O1xuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDE7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIHByZXZpb3VzID0gc2VnbWVudHNbaWR4IC0gMV07XG4gICAgICAgICAgICBjdXJyZW50ID0gc2VnbWVudHNbaWR4XTtcbiAgICAgICAgICAgIGludGVyc2VjdGlvbnNDb3VudCArPSBwcmV2aW91cy5faW50ZXJzZWN0aW9uc1RvKGN1cnJlbnQsIHBvaW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VkIHx8ICFzZWdtZW50c1swXS5hbmNob3IoKS5lcXVhbHMoc2VnbWVudHNbbGVuZ3RoIC0gMV0uYW5jaG9yKCkpKSB7XG4gICAgICAgICAgICBpbnRlcnNlY3Rpb25zQ291bnQgKz0gbGluZUludGVyc2VjdGlvbnNDb3VudChzZWdtZW50c1swXS5hbmNob3IoKSwgc2VnbWVudHNbbGVuZ3RoIC0gMV0uYW5jaG9yKCksIHBvaW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb25zQ291bnQgJSAyICE9PSAwO1xuICAgIH1cblxuICAgIF9pc09uUGF0aChwb2ludCwgd2lkdGgpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHBhdGhXaWR0aCA9IHdpZHRoIHx8IHRoaXMub3B0aW9ucy5zdHJva2Uud2lkdGg7XG5cbiAgICAgICAgaWYgKGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGlmIChzZWdtZW50c1swXS5faXNPblBhdGhUbyhzZWdtZW50c1sxXSwgcG9pbnQsIHBhdGhXaWR0aCwgXCJzdGFydFwiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAyOyBpZHggPD0gbGVuZ3RoIC0gMjsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VnbWVudHNbaWR4IC0gMV0uX2lzT25QYXRoVG8oc2VnbWVudHNbaWR4XSwgcG9pbnQsIHBhdGhXaWR0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VnbWVudHNbbGVuZ3RoIC0gMl0uX2lzT25QYXRoVG8oc2VnbWVudHNbbGVuZ3RoIC0gMV0sIHBvaW50LCBwYXRoV2lkdGgsIFwiZW5kXCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF9iYm94KG1hdHJpeCkge1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgbGV0IGJvdW5kaW5nQm94O1xuXG4gICAgICAgIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGxldCBhbmNob3IgPSBzZWdtZW50c1swXS5hbmNob3IoKS50cmFuc2Zvcm1Db3B5KG1hdHJpeCk7XG4gICAgICAgICAgICBib3VuZGluZ0JveCA9IG5ldyBSZWN0KGFuY2hvciwgU2l6ZS5aRVJPKTtcbiAgICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlZ21lbnRCb3ggPSBzZWdtZW50c1tpIC0gMV0uYmJveFRvKHNlZ21lbnRzW2ldLCBtYXRyaXgpO1xuICAgICAgICAgICAgICAgIGlmIChib3VuZGluZ0JveCkge1xuICAgICAgICAgICAgICAgICAgICBib3VuZGluZ0JveCA9IFJlY3QudW5pb24oYm91bmRpbmdCb3gsIHNlZ21lbnRCb3gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJvdW5kaW5nQm94ID0gc2VnbWVudEJveDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYm91bmRpbmdCb3g7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21SZWN0KHJlY3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXRoKG9wdGlvbnMpXG4gICAgICAgICAgICAubW92ZVRvKHJlY3QudG9wTGVmdCgpKVxuICAgICAgICAgICAgLmxpbmVUbyhyZWN0LnRvcFJpZ2h0KCkpXG4gICAgICAgICAgICAubGluZVRvKHJlY3QuYm90dG9tUmlnaHQoKSlcbiAgICAgICAgICAgIC5saW5lVG8ocmVjdC5ib3R0b21MZWZ0KCkpXG4gICAgICAgICAgICAuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVBvaW50cyhwb2ludHMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHBvaW50cykge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IG5ldyBQYXRoKG9wdGlvbnMpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBwb2ludCA9IFBvaW50LmNyZWF0ZShwb2ludHNbaV0pO1xuICAgICAgICAgICAgICAgIGlmIChwb2ludCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5tb3ZlVG8ocG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5saW5lVG8ocG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tQXJjKGFyYywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBwYXRoID0gbmV3IFBhdGgob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSBhcmMuc3RhcnRBbmdsZTtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBhcmMucG9pbnRBdChzdGFydEFuZ2xlKTtcbiAgICAgICAgcGF0aC5tb3ZlVG8oc3RhcnQueCwgc3RhcnQueSk7XG4gICAgICAgIHBhdGguYXJjKHN0YXJ0QW5nbGUsIGFyYy5lbmRBbmdsZSwgYXJjLnJhZGl1c1gsIGFyYy5yYWRpdXNZLCBhcmMuYW50aWNsb2Nrd2lzZSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbn1cblxuUGF0aC5wcm90b3R5cGUubm9kZVR5cGUgPSBcIlBhdGhcIjtcblxuUGFpbnRhYmxlLmV4dGVuZChQYXRoLnByb3RvdHlwZSk7XG5NZWFzdXJhYmxlLmV4dGVuZChQYXRoLnByb3RvdHlwZSk7XG5cblBhdGgucGFyc2UgPSBmdW5jdGlvbihzdHIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gUGF0aFBhcnNlci5jdXJyZW50LnBhcnNlKHN0ciwgb3B0aW9ucyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQYXRoO1xuIiwiaW1wb3J0IEdlb21ldHJ5QXJjIGZyb20gJy4uL2dlb21ldHJ5L2FyYyc7XG5pbXBvcnQgRWxlbWVudCBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IFBhdGggZnJvbSAnLi9wYXRoJztcbmltcG9ydCBQYWludGFibGUgZnJvbSAnLi4vbWl4aW5zL3BhaW50YWJsZSc7XG5pbXBvcnQgTWVhc3VyYWJsZSBmcm9tICcuLi9taXhpbnMvbWVhc3VyYWJsZSc7XG5pbXBvcnQgZGVmaW5lR2VvbWV0cnlBY2Nlc3NvcnMgZnJvbSAnLi4vYWNjZXNzb3JzL2RlZmluZS1nZW9tZXRyeS1hY2Nlc3NvcnMnO1xuaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBERUZBVUxUX1NUUk9LRSA9IFwiIzAwMFwiO1xuXG5jbGFzcyBBcmMgZXh0ZW5kcyBFbGVtZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5QXJjKCksIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmdlb21ldHJ5KGdlb21ldHJ5KTtcblxuICAgICAgICBpZiAoIWRlZmluZWQodGhpcy5vcHRpb25zLnN0cm9rZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3Ryb2tlKERFRkFVTFRfU1RST0tFKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9iYm94KG1hdHJpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2VvbWV0cnkuYmJveChtYXRyaXgpO1xuICAgIH1cblxuICAgIHJhd0JCb3goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdlb21ldHJ5KCkuYmJveCgpO1xuICAgIH1cblxuICAgIHRvUGF0aCgpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IG5ldyBQYXRoKCk7XG4gICAgICAgIGNvbnN0IGN1cnZlUG9pbnRzID0gdGhpcy5nZW9tZXRyeSgpLmN1cnZlUG9pbnRzKCk7XG5cbiAgICAgICAgaWYgKGN1cnZlUG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHBhdGgubW92ZVRvKGN1cnZlUG9pbnRzWzBdLngsIGN1cnZlUG9pbnRzWzBdLnkpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGN1cnZlUG9pbnRzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICAgICAgcGF0aC5jdXJ2ZVRvKGN1cnZlUG9pbnRzW2ldLCBjdXJ2ZVBvaW50c1tpICsgMV0sIGN1cnZlUG9pbnRzW2kgKyAyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG5cbiAgICBfY29udGFpbnNQb2ludChwb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZW9tZXRyeSgpLmNvbnRhaW5zUG9pbnQocG9pbnQpO1xuICAgIH1cblxuICAgIF9pc09uUGF0aChwb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZW9tZXRyeSgpLl9pc09uUGF0aChwb2ludCwgdGhpcy5vcHRpb25zLnN0cm9rZS53aWR0aCAvIDIpO1xuICAgIH1cbn1cblxuQXJjLnByb3RvdHlwZS5ub2RlVHlwZSA9IFwiQXJjXCI7XG5cblBhaW50YWJsZS5leHRlbmQoQXJjLnByb3RvdHlwZSk7XG5NZWFzdXJhYmxlLmV4dGVuZChBcmMucHJvdG90eXBlKTtcbmRlZmluZUdlb21ldHJ5QWNjZXNzb3JzKEFyYy5wcm90b3R5cGUsIFsgXCJnZW9tZXRyeVwiIF0pO1xuXG5leHBvcnQgZGVmYXVsdCBBcmM7IiwiaW1wb3J0IEVsZW1lbnQgZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCBQb2ludCBmcm9tICcuLi9nZW9tZXRyeS9wb2ludCc7XG5pbXBvcnQgUmVjdCBmcm9tICcuLi9nZW9tZXRyeS9yZWN0JztcbmltcG9ydCB0b01hdHJpeCBmcm9tICcuLi9nZW9tZXRyeS90by1tYXRyaXgnO1xuaW1wb3J0IFBhaW50YWJsZSBmcm9tICcuLi9taXhpbnMvcGFpbnRhYmxlJztcbmltcG9ydCBkZWZpbmVQb2ludEFjY2Vzc29ycyBmcm9tICcuLi9hY2Nlc3NvcnMvZGVmaW5lLXBvaW50LWFjY2Vzc29ycyc7XG5pbXBvcnQgeyBkZWZpbmVkLCBtZWFzdXJlVGV4dCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBERUZBVUxUX0ZPTlQgPSBcIjEycHggc2Fucy1zZXJpZlwiO1xuY29uc3QgREVGQVVMVF9GSUxMID0gXCIjMDAwXCI7XG5cbmNsYXNzIFRleHQgZXh0ZW5kcyBFbGVtZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRlbnQsIHBvc2l0aW9uID0gbmV3IFBvaW50KCksIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmNvbnRlbnQoY29udGVudCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24ocG9zaXRpb24pO1xuXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmZvbnQpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5mb250ID0gREVGQVVMVF9GT05UO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkZWZpbmVkKHRoaXMub3B0aW9ucy5maWxsKSkge1xuICAgICAgICAgICAgdGhpcy5maWxsKERFRkFVTFRfRklMTCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb250ZW50KHZhbHVlKSB7XG4gICAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNldChcImNvbnRlbnRcIiwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmdldChcImNvbnRlbnRcIik7XG4gICAgfVxuXG4gICAgbWVhc3VyZSgpIHtcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IG1lYXN1cmVUZXh0KHRoaXMuY29udGVudCgpLCB7XG4gICAgICAgICAgICBmb250OiB0aGlzLm9wdGlvbnMuZ2V0KFwiZm9udFwiKVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbWV0cmljcztcbiAgICB9XG5cbiAgICByZWN0KCkge1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5tZWFzdXJlKCk7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMucG9zaXRpb24oKS5jbG9uZSgpO1xuICAgICAgICByZXR1cm4gbmV3IFJlY3QocG9zLCBbIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0IF0pO1xuICAgIH1cblxuICAgIGJib3godHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgY29uc3QgY29tYmluZWRNYXRyaXggPSB0b01hdHJpeCh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0odHJhbnNmb3JtYXRpb24pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVjdCgpLmJib3goY29tYmluZWRNYXRyaXgpO1xuICAgIH1cblxuICAgIHJhd0JCb3goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlY3QoKS5iYm94KCk7XG4gICAgfVxuXG4gICAgX2NvbnRhaW5zUG9pbnQocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVjdCgpLmNvbnRhaW5zUG9pbnQocG9pbnQpO1xuICAgIH1cbn1cblxuVGV4dC5wcm90b3R5cGUubm9kZVR5cGUgPSBcIlRleHRcIjtcblxuUGFpbnRhYmxlLmV4dGVuZChUZXh0LnByb3RvdHlwZSk7XG5cbmRlZmluZVBvaW50QWNjZXNzb3JzKFRleHQucHJvdG90eXBlLCBbIFwicG9zaXRpb25cIiBdKTtcblxuZXhwb3J0IGRlZmF1bHQgVGV4dDsiLCJpbXBvcnQgZGVmaW5lR2VvbWV0cnlBY2Nlc3NvcnMgZnJvbSAnLi4vYWNjZXNzb3JzL2RlZmluZS1nZW9tZXRyeS1hY2Nlc3NvcnMnO1xuaW1wb3J0IEVsZW1lbnQgZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCBSZWN0IGZyb20gJy4uL2dlb21ldHJ5L3JlY3QnO1xuaW1wb3J0IHRvTWF0cml4IGZyb20gJy4uL2dlb21ldHJ5L3RvLW1hdHJpeCc7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNsYXNzIEltYWdlIGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgICBjb25zdHJ1Y3RvcihzcmMsIHJlY3QgPSBuZXcgUmVjdCgpLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5zcmMoc3JjKTtcbiAgICAgICAgdGhpcy5yZWN0KHJlY3QpO1xuICAgIH1cblxuICAgIHNyYyh2YWx1ZSkge1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zZXQoXCJzcmNcIiwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmdldChcInNyY1wiKTtcbiAgICB9XG5cbiAgICBiYm94KHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbWJpbmVkTWF0cml4ID0gdG9NYXRyaXgodGhpcy5jdXJyZW50VHJhbnNmb3JtKHRyYW5zZm9ybWF0aW9uKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWN0LmJib3goY29tYmluZWRNYXRyaXgpO1xuICAgIH1cblxuICAgIHJhd0JCb3goKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWN0LmJib3goKTtcbiAgICB9XG5cbiAgICBfY29udGFpbnNQb2ludChwb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVjdC5jb250YWluc1BvaW50KHBvaW50KTtcbiAgICB9XG5cbiAgICBfaGFzRmlsbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JjKCk7XG4gICAgfVxufVxuXG5JbWFnZS5wcm90b3R5cGUubm9kZVR5cGUgPSBcIkltYWdlXCI7XG5cbmRlZmluZUdlb21ldHJ5QWNjZXNzb3JzKEltYWdlLnByb3RvdHlwZSwgWyBcInJlY3RcIiBdKTtcblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2U7IiwiXG5jb25zdCBUcmF2ZXJzYWJsZSA9IHtcbiAgICBleHRlbmQ6IGZ1bmN0aW9uKHByb3RvLCBjaGlsZHJlbkZpZWxkKSB7XG4gICAgICAgIHByb3RvLnRyYXZlcnNlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpc1tjaGlsZHJlbkZpZWxkXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkLnRyYXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLnRyYXZlcnNlKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhjaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUcmF2ZXJzYWJsZTsiLCJpbXBvcnQgRWxlbWVudCBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IFRyYXZlcnNhYmxlIGZyb20gJy4uL21peGlucy90cmF2ZXJzYWJsZSc7XG5pbXBvcnQgeyBhcHBlbmQgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBlbGVtZW50c0JvdW5kaW5nQm94IGZyb20gJy4vdXRpbHMvZWxlbWVudHMtYm91bmRpbmctYm94JztcbmltcG9ydCBlbGVtZW50c0NsaXBwZWRCb3VuZGluZ0JveCBmcm9tICcuL3V0aWxzL2VsZW1lbnRzLWNsaXBwZW5kLWJvdW5kaW5nLWJveCc7XG5cbmNsYXNzIEdyb3VwIGV4dGVuZHMgRWxlbWVudCB7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgfVxuXG4gICAgY2hpbGRyZW5DaGFuZ2UoYWN0aW9uLCBpdGVtcywgaW5kZXgpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKFwiY2hpbGRyZW5DaGFuZ2VcIix7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhcHBlbmQoKSB7XG4gICAgICAgIGFwcGVuZCh0aGlzLmNoaWxkcmVuLCBhcmd1bWVudHMpO1xuICAgICAgICB0aGlzLl9yZXBhcmVudChhcmd1bWVudHMsIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuY2hpbGRyZW5DaGFuZ2UoXCJhZGRcIiwgYXJndW1lbnRzKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnNlcnQoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDAsIGVsZW1lbnQpO1xuICAgICAgICBlbGVtZW50LnBhcmVudCA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5jaGlsZHJlbkNoYW5nZShcImFkZFwiLCBbIGVsZW1lbnQgXSwgaW5kZXgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGluc2VydEF0KGVsZW1lbnQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmluc2VydChpbmRleCwgZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoZWxlbWVudCk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICBlbGVtZW50LnBhcmVudCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuQ2hhbmdlKFwicmVtb3ZlXCIsIFsgZWxlbWVudCBdLCBpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZW1vdmVBdChpbmRleCkge1xuICAgICAgICBpZiAoMCA8PSBpbmRleCAmJiBpbmRleCA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgZWxlbWVudCA9IHRoaXMuY2hpbGRyZW5baW5kZXhdO1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgZWxlbWVudC5wYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbkNoYW5nZShcInJlbW92ZVwiLCBbIGVsZW1lbnQgXSwgaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICB0aGlzLl9yZXBhcmVudChpdGVtcywgbnVsbCk7XG5cbiAgICAgICAgdGhpcy5jaGlsZHJlbkNoYW5nZShcInJlbW92ZVwiLCBpdGVtcywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYmJveCh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICByZXR1cm4gZWxlbWVudHNCb3VuZGluZ0JveCh0aGlzLmNoaWxkcmVuLCB0cnVlLCB0aGlzLmN1cnJlbnRUcmFuc2Zvcm0odHJhbnNmb3JtYXRpb24pKTtcbiAgICB9XG5cbiAgICByYXdCQm94KCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudHNCb3VuZGluZ0JveCh0aGlzLmNoaWxkcmVuLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgX2NsaXBwZWRCQm94KHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50c0NsaXBwZWRCb3VuZGluZ0JveCh0aGlzLmNoaWxkcmVuLCB0aGlzLmN1cnJlbnRUcmFuc2Zvcm0odHJhbnNmb3JtYXRpb24pKTtcbiAgICB9XG5cbiAgICBjdXJyZW50VHJhbnNmb3JtKHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIHJldHVybiBFbGVtZW50LnByb3RvdHlwZS5jdXJyZW50VHJhbnNmb3JtLmNhbGwodGhpcywgdHJhbnNmb3JtYXRpb24pIHx8IG51bGw7XG4gICAgfVxuXG4gICAgY29udGFpbnNQb2ludChwb2ludCwgcGFyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIGlmICh0aGlzLnZpc2libGUoKSkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gdGhpcy5jdXJyZW50VHJhbnNmb3JtKHBhcmVudFRyYW5zZm9ybSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBjaGlsZHJlbi5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2lkeF0uY29udGFpbnNQb2ludChwb2ludCwgdHJhbnNmb3JtKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF9yZXBhcmVudChlbGVtZW50cywgbmV3UGFyZW50KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gZWxlbWVudHNbaV07XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBjaGlsZC5wYXJlbnQ7XG4gICAgICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudCAhPT0gdGhpcyAmJiBwYXJlbnQucmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LnJlbW92ZShjaGlsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoaWxkLnBhcmVudCA9IG5ld1BhcmVudDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuR3JvdXAucHJvdG90eXBlLm5vZGVUeXBlID0gXCJHcm91cFwiO1xuXG5UcmF2ZXJzYWJsZS5leHRlbmQoR3JvdXAucHJvdG90eXBlLCBcImNoaWxkcmVuXCIpO1xuXG5leHBvcnQgZGVmYXVsdCBHcm91cDsiLCJpbXBvcnQgY3JlYXRlVHJhbnNmb3JtIGZyb20gJy4uL2dlb21ldHJ5L3RyYW5zZm9ybSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zbGF0ZVRvUG9pbnQocG9pbnQsIGJib3gsIGVsZW1lbnQpIHtcbiAgICBjb25zdCB0cmFuc29mcm0gPSBlbGVtZW50LnRyYW5zZm9ybSgpIHx8IGNyZWF0ZVRyYW5zZm9ybSgpO1xuICAgIGNvbnN0IG1hdHJpeCA9IHRyYW5zb2ZybS5tYXRyaXgoKTtcbiAgICBtYXRyaXguZSArPSBwb2ludC54IC0gYmJveC5vcmlnaW4ueDtcbiAgICBtYXRyaXguZiArPSBwb2ludC55IC0gYmJveC5vcmlnaW4ueTtcblxuICAgIHRyYW5zb2ZybS5tYXRyaXgobWF0cml4KTtcbiAgICBlbGVtZW50LnRyYW5zZm9ybSh0cmFuc29mcm0pO1xufSIsIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWxpZ25TdGFydChzaXplLCByZWN0LCBhbGlnbiwgYXhpcywgc2l6ZUZpZWxkKSB7XG4gICAgbGV0IHN0YXJ0O1xuICAgIGlmIChhbGlnbiA9PT0gXCJzdGFydFwiKSB7XG4gICAgICAgIHN0YXJ0ID0gcmVjdC5vcmlnaW5bYXhpc107XG4gICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gXCJlbmRcIikge1xuICAgICAgICBzdGFydCA9IHJlY3Qub3JpZ2luW2F4aXNdICsgcmVjdC5zaXplW3NpemVGaWVsZF0gLSBzaXplO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gcmVjdC5vcmlnaW5bYXhpc10gKyAocmVjdC5zaXplW3NpemVGaWVsZF0gLSBzaXplKSAvIDI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXJ0O1xufSIsIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWxpZ25TdGFydFJldmVyc2Uoc2l6ZSwgcmVjdCwgYWxpZ24sIGF4aXMsIHNpemVGaWVsZCkge1xuICAgIGxldCBzdGFydDtcbiAgICBpZiAoYWxpZ24gPT09IFwic3RhcnRcIikge1xuICAgICAgICBzdGFydCA9IHJlY3Qub3JpZ2luW2F4aXNdICsgcmVjdC5zaXplW3NpemVGaWVsZF0gLSBzaXplO1xuICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09IFwiZW5kXCIpIHtcbiAgICAgICAgc3RhcnQgPSByZWN0Lm9yaWdpbltheGlzXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydCA9IHJlY3Qub3JpZ2luW2F4aXNdICsgKHJlY3Quc2l6ZVtzaXplRmllbGRdIC0gc2l6ZSkgLyAyO1xuICAgIH1cblxuICAgIHJldHVybiBzdGFydDtcbn0iLCJpbXBvcnQgR3JvdXAgZnJvbSAnLi9ncm91cCc7XG5pbXBvcnQgU2l6ZSBmcm9tICcuLi9nZW9tZXRyeS9zaXplJztcbmltcG9ydCBSZWN0IGZyb20gJy4uL2dlb21ldHJ5L3JlY3QnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4uL2dlb21ldHJ5L3BvaW50JztcbmltcG9ydCBjcmVhdGVUcmFuc2Zvcm0gZnJvbSAnLi4vZ2VvbWV0cnkvdHJhbnNmb3JtJztcbmltcG9ydCB0cmFuc2xhdGVUb1BvaW50IGZyb20gJy4uL2FsaWdubWVudC90cmFuc2xhdGUtdG8tcG9pbnQnO1xuaW1wb3J0IGFsaWduU3RhcnQgZnJvbSAnLi4vYWxpZ25tZW50L2FsaWduLXN0YXJ0JztcbmltcG9ydCBhbGlnblN0YXJ0UmV2ZXJzZSBmcm9tICcuLi9hbGlnbm1lbnQvYWxpZ24tc3RhcnQtcmV2ZXJzZSc7XG5cbmNvbnN0IERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgICBhbGlnbkNvbnRlbnQ6IFwic3RhcnRcIixcbiAgICBqdXN0aWZ5Q29udGVudDogXCJzdGFydFwiLFxuICAgIGFsaWduSXRlbXM6IFwic3RhcnRcIixcbiAgICBzcGFjaW5nOiAwLFxuICAgIG9yaWVudGF0aW9uOiBcImhvcml6b250YWxcIixcbiAgICBsaW5lU3BhY2luZzogMCxcbiAgICB3cmFwOiB0cnVlLFxuICAgIHJldmVyczogZmFsc2Vcbn07XG5cbmNvbnN0IGZvckVhY2ggPSAoZWxlbWVudHMsIGNhbGxiYWNrKSA9PiB7XG4gICAgZWxlbWVudHMuZm9yRWFjaChjYWxsYmFjayk7XG59O1xuXG5jb25zdCBmb3JFYWNoUmV2ZXJzZSA9IChlbGVtZW50cywgY2FsbGJhY2spID0+IHtcbiAgICBjb25zdCBsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICBmb3IgKGxldCBpZHggPSBsZW5ndGggLSAxOyBpZHggPj0gMDsgaWR4LS0pIHtcbiAgICAgICAgY2FsbGJhY2soZWxlbWVudHNbaWR4XSwgaWR4KTtcbiAgICB9XG59O1xuXG5jbGFzcyBMYXlvdXQgZXh0ZW5kcyBHcm91cCB7XG5cbiAgICBjb25zdHJ1Y3RvcihyZWN0LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgb3B0aW9ucykpO1xuICAgICAgICB0aGlzLl9yZWN0ID0gcmVjdDtcbiAgICAgICAgdGhpcy5fZmllbGRNYXAgPSB7fTtcbiAgICB9XG5cbiAgICByZWN0KHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVjdCA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fcmVjdDtcbiAgICB9XG5cbiAgICBfaW5pdE1hcCgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgZmllbGRNYXAgPSB0aGlzLl9maWVsZE1hcDtcbiAgICAgICAgaWYgKG9wdGlvbnMub3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgICAgICBmaWVsZE1hcC5zaXplRmllbGQgPSBcIndpZHRoXCI7XG4gICAgICAgICAgICBmaWVsZE1hcC5ncm91cHNTaXplRmllbGQgPSBcImhlaWdodFwiO1xuICAgICAgICAgICAgZmllbGRNYXAuZ3JvdXBBeGlzID0gXCJ4XCI7XG4gICAgICAgICAgICBmaWVsZE1hcC5ncm91cHNBeGlzID0gXCJ5XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWVsZE1hcC5zaXplRmllbGQgPSBcImhlaWdodFwiO1xuICAgICAgICAgICAgZmllbGRNYXAuZ3JvdXBzU2l6ZUZpZWxkID0gXCJ3aWR0aFwiO1xuICAgICAgICAgICAgZmllbGRNYXAuZ3JvdXBBeGlzID0gXCJ5XCI7XG4gICAgICAgICAgICBmaWVsZE1hcC5ncm91cHNBeGlzID0gXCJ4XCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICB0aGlzLmZvckVhY2ggPSBmb3JFYWNoUmV2ZXJzZTtcbiAgICAgICAgICAgIHRoaXMuanVzdGlmeUFsaWduID0gYWxpZ25TdGFydFJldmVyc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZvckVhY2ggPSBmb3JFYWNoO1xuICAgICAgICAgICAgdGhpcy5qdXN0aWZ5QWxpZ24gPSBhbGlnblN0YXJ0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVmbG93KCkge1xuICAgICAgICBpZiAoIXRoaXMuX3JlY3QgfHwgdGhpcy5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbml0TWFwKCk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtKG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuX3JlY3Q7XG4gICAgICAgIGNvbnN0IHsgZ3JvdXBzLCBncm91cHNTaXplIH0gPSB0aGlzLl9pbml0R3JvdXBzKCk7XG4gICAgICAgIGNvbnN0IHsgc2l6ZUZpZWxkLCBncm91cHNTaXplRmllbGQsIGdyb3VwQXhpcywgZ3JvdXBzQXhpcyB9ID0gdGhpcy5fZmllbGRNYXA7XG4gICAgICAgIGNvbnN0IGdyb3VwT3JpZ2luID0gbmV3IFBvaW50KCk7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRPcmlnaW4gPSBuZXcgUG9pbnQoKTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IG5ldyBTaXplKCk7XG4gICAgICAgIGxldCBncm91cFN0YXJ0ID0gYWxpZ25TdGFydChncm91cHNTaXplLCByZWN0LCBvcHRpb25zLmFsaWduQ29udGVudCwgZ3JvdXBzQXhpcywgZ3JvdXBzU2l6ZUZpZWxkKTtcbiAgICAgICAgbGV0IGVsZW1lbnRTdGFydCwgZ3JvdXAsIGdyb3VwQm94O1xuXG4gICAgICAgIGNvbnN0IGFycmFuZ2VFbGVtZW50cyA9IChiYm94LCBpZHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBncm91cC5lbGVtZW50c1tpZHhdO1xuXG4gICAgICAgICAgICBlbGVtZW50T3JpZ2luW2dyb3VwQXhpc10gPSBlbGVtZW50U3RhcnQ7XG4gICAgICAgICAgICBlbGVtZW50T3JpZ2luW2dyb3Vwc0F4aXNdID0gYWxpZ25TdGFydChiYm94LnNpemVbZ3JvdXBzU2l6ZUZpZWxkXSwgZ3JvdXBCb3gsIG9wdGlvbnMuYWxpZ25JdGVtcywgZ3JvdXBzQXhpcywgZ3JvdXBzU2l6ZUZpZWxkKTtcbiAgICAgICAgICAgIHRyYW5zbGF0ZVRvUG9pbnQoZWxlbWVudE9yaWdpbiwgYmJveCwgZWxlbWVudCk7XG4gICAgICAgICAgICBlbGVtZW50U3RhcnQgKz0gYmJveC5zaXplW3NpemVGaWVsZF0gKyBvcHRpb25zLnNwYWNpbmc7XG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yIChsZXQgZ3JvdXBJZHggPSAwOyBncm91cElkeCA8IGdyb3Vwcy5sZW5ndGg7IGdyb3VwSWR4KyspIHtcbiAgICAgICAgICAgIGdyb3VwID0gZ3JvdXBzW2dyb3VwSWR4XTtcbiAgICAgICAgICAgIGdyb3VwT3JpZ2luW2dyb3VwQXhpc10gPSBlbGVtZW50U3RhcnQgPSB0aGlzLmp1c3RpZnlBbGlnbihncm91cC5zaXplLCByZWN0LCBvcHRpb25zLmp1c3RpZnlDb250ZW50LCBncm91cEF4aXMsIHNpemVGaWVsZCk7XG4gICAgICAgICAgICBncm91cE9yaWdpbltncm91cHNBeGlzXSA9IGdyb3VwU3RhcnQ7XG4gICAgICAgICAgICBzaXplW3NpemVGaWVsZF0gPSBncm91cC5zaXplO1xuICAgICAgICAgICAgc2l6ZVtncm91cHNTaXplRmllbGRdID0gZ3JvdXAubGluZVNpemU7XG4gICAgICAgICAgICBncm91cEJveCA9IG5ldyBSZWN0KGdyb3VwT3JpZ2luLCBzaXplKTtcbiAgICAgICAgICAgIHRoaXMuZm9yRWFjaChncm91cC5iYm94ZXMsIGFycmFuZ2VFbGVtZW50cyk7XG5cbiAgICAgICAgICAgIGdyb3VwU3RhcnQgKz0gZ3JvdXAubGluZVNpemUgKyBvcHRpb25zLmxpbmVTcGFjaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLndyYXAgJiYgZ3JvdXAuc2l6ZSA+IHJlY3Quc2l6ZVtzaXplRmllbGRdKSB7XG4gICAgICAgICAgICBjb25zdCBzY2FsZSA9IHJlY3Quc2l6ZVtzaXplRmllbGRdIC8gZ3JvdXBCb3guc2l6ZVtzaXplRmllbGRdO1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVkU3RhcnQgPSBncm91cEJveC50b3BMZWZ0KCkuc2NhbGUoc2NhbGUsIHNjYWxlKTtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlZFNpemUgPSBncm91cEJveC5zaXplW2dyb3Vwc1NpemVGaWVsZF0gKiBzY2FsZTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1N0YXJ0ID0gYWxpZ25TdGFydChzY2FsZWRTaXplLCByZWN0LCBvcHRpb25zLmFsaWduQ29udGVudCwgZ3JvdXBzQXhpcywgZ3JvdXBzU2l6ZUZpZWxkKTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGNyZWF0ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgaWYgKGdyb3VwQXhpcyA9PT0gXCJ4XCIpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0udHJhbnNsYXRlKHJlY3Qub3JpZ2luLnggLSBzY2FsZWRTdGFydC54LCBuZXdTdGFydCAtIHNjYWxlZFN0YXJ0LnkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0udHJhbnNsYXRlKG5ld1N0YXJ0IC0gc2NhbGVkU3RhcnQueCwgcmVjdC5vcmlnaW4ueSAtIHNjYWxlZFN0YXJ0LnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhbnNmb3JtLnNjYWxlKHNjYWxlLCBzY2FsZSk7XG5cbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfaW5pdEdyb3VwcygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBjaGlsZHJlbiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBsaW5lU3BhY2luZywgd3JhcCwgc3BhY2luZyB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2l6ZUZpZWxkID0gdGhpcy5fZmllbGRNYXAuc2l6ZUZpZWxkO1xuICAgICAgICBsZXQgZ3JvdXAgPSB0aGlzLl9uZXdHcm91cCgpO1xuICAgICAgICBjb25zdCBncm91cHMgPSBbXTtcbiAgICAgICAgY29uc3QgYWRkR3JvdXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgICAgICAgICAgIGdyb3Vwc1NpemUgKz0gZ3JvdXAubGluZVNpemUgKyBsaW5lU3BhY2luZztcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGdyb3Vwc1NpemUgPSAtbGluZVNwYWNpbmc7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgY2hpbGRyZW4ubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBjaGlsZHJlbltpZHhdO1xuICAgICAgICAgICAgbGV0IGJib3ggPSBjaGlsZHJlbltpZHhdLmNsaXBwZWRCQm94KCk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC52aXNpYmxlKCkgJiYgYmJveCkge1xuICAgICAgICAgICAgICAgIGlmICh3cmFwICYmIGdyb3VwLnNpemUgKyBiYm94LnNpemVbc2l6ZUZpZWxkXSArIHNwYWNpbmcgPiB0aGlzLl9yZWN0LnNpemVbc2l6ZUZpZWxkXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAuYmJveGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkVG9Hcm91cChncm91cCwgYmJveCwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRHcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAgPSB0aGlzLl9uZXdHcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkR3JvdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwID0gdGhpcy5fbmV3R3JvdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZFRvR3JvdXAoZ3JvdXAsIGJib3gsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkVG9Hcm91cChncm91cCwgYmJveCwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdyb3VwLmJib3hlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFkZEdyb3VwKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ3JvdXBzOiBncm91cHMsXG4gICAgICAgICAgICBncm91cHNTaXplOiBncm91cHNTaXplXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX2FkZFRvR3JvdXAoZ3JvdXAsIGJib3gsIGVsZW1lbnQpIHtcbiAgICAgICAgZ3JvdXAuc2l6ZSArPSBiYm94LnNpemVbdGhpcy5fZmllbGRNYXAuc2l6ZUZpZWxkXSArIHRoaXMub3B0aW9ucy5zcGFjaW5nO1xuICAgICAgICBncm91cC5saW5lU2l6ZSA9IE1hdGgubWF4KGJib3guc2l6ZVt0aGlzLl9maWVsZE1hcC5ncm91cHNTaXplRmllbGRdLCBncm91cC5saW5lU2l6ZSk7XG4gICAgICAgIGdyb3VwLmJib3hlcy5wdXNoKGJib3gpO1xuICAgICAgICBncm91cC5lbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIF9uZXdHcm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxpbmVTaXplOiAwLFxuICAgICAgICAgICAgc2l6ZTogLXRoaXMub3B0aW9ucy5zcGFjaW5nLFxuICAgICAgICAgICAgYmJveGVzOiBbXSxcbiAgICAgICAgICAgIGVsZW1lbnRzOiBbXVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGF5b3V0OyIsImltcG9ydCBkZWZpbmVHZW9tZXRyeUFjY2Vzc29ycyBmcm9tICcuLi9hY2Nlc3NvcnMvZGVmaW5lLWdlb21ldHJ5LWFjY2Vzc29ycyc7XG5pbXBvcnQgRWxlbWVudCBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IFBhaW50YWJsZSBmcm9tICcuLi9taXhpbnMvcGFpbnRhYmxlJztcbmltcG9ydCBNZWFzdXJhYmxlIGZyb20gJy4uL21peGlucy9tZWFzdXJhYmxlJztcbmltcG9ydCBHZW9tZXRyeVJlY3QgZnJvbSAnLi4vZ2VvbWV0cnkvcmVjdCc7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNsYXNzIFJlY3QgZXh0ZW5kcyBFbGVtZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5UmVjdCgpLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZ2VvbWV0cnkoZ2VvbWV0cnkpO1xuXG4gICAgICAgIGlmICghZGVmaW5lZCh0aGlzLm9wdGlvbnMuc3Ryb2tlKSkge1xuICAgICAgICAgICAgdGhpcy5zdHJva2UoXCIjMDAwXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2Jib3gobWF0cml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZW9tZXRyeS5iYm94KG1hdHJpeCk7XG4gICAgfVxuXG4gICAgcmF3QkJveCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dlb21ldHJ5LmJib3goKTtcbiAgICB9XG5cbiAgICBfY29udGFpbnNQb2ludChwb2ludCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2VvbWV0cnkuY29udGFpbnNQb2ludChwb2ludCk7XG4gICAgfVxuXG4gICAgX2lzT25QYXRoKHBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdlb21ldHJ5KCkuX2lzT25QYXRoKHBvaW50LCB0aGlzLm9wdGlvbnMuc3Ryb2tlLndpZHRoIC8gMik7XG4gICAgfVxufVxuXG5SZWN0LnByb3RvdHlwZS5ub2RlVHlwZSA9IFwiUmVjdFwiO1xuXG5QYWludGFibGUuZXh0ZW5kKFJlY3QucHJvdG90eXBlKTtcbk1lYXN1cmFibGUuZXh0ZW5kKFJlY3QucHJvdG90eXBlKTtcbmRlZmluZUdlb21ldHJ5QWNjZXNzb3JzKFJlY3QucHJvdG90eXBlLCBbIFwiZ2VvbWV0cnlcIiBdKTtcblxuZXhwb3J0IGRlZmF1bHQgUmVjdDtcblxuIiwiaW1wb3J0IHRyYW5zbGF0ZVRvUG9pbnQgZnJvbSAnLi90cmFuc2xhdGUtdG8tcG9pbnQnO1xuaW1wb3J0IGFsaWduU3RhcnQgZnJvbSAnLi9hbGlnbi1zdGFydCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFsaWduRWxlbWVudHMoZWxlbWVudHMsIHJlY3QsIGFsaWdubWVudCwgYXhpcywgc2l6ZUZpZWxkKSB7XG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZWxlbWVudHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBjb25zdCBiYm94ID0gZWxlbWVudHNbaWR4XS5jbGlwcGVkQkJveCgpO1xuICAgICAgICBpZiAoYmJveCkge1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBiYm94Lm9yaWdpbi5jbG9uZSgpO1xuICAgICAgICAgICAgcG9pbnRbYXhpc10gPSBhbGlnblN0YXJ0KGJib3guc2l6ZVtzaXplRmllbGRdLCByZWN0LCBhbGlnbm1lbnQgfHwgXCJzdGFydFwiLCBheGlzLCBzaXplRmllbGQpO1xuICAgICAgICAgICAgdHJhbnNsYXRlVG9Qb2ludChwb2ludCwgYmJveCwgZWxlbWVudHNbaWR4XSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiXG5pbXBvcnQgYWxpZ25FbGVtZW50cyBmcm9tICcuL2FsaWduLWVsZW1lbnRzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWxpZ24oZWxlbWVudHMsIHJlY3QsIGFsaWdubWVudCkge1xuICAgIGFsaWduRWxlbWVudHMoZWxlbWVudHMsIHJlY3QsIGFsaWdubWVudCwgXCJ4XCIsIFwid2lkdGhcIik7XG59IiwiaW1wb3J0IGFsaWduRWxlbWVudHMgZnJvbSAnLi9hbGlnbi1lbGVtZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZBbGlnbihlbGVtZW50cywgcmVjdCwgYWxpZ25tZW50KSB7XG4gICAgYWxpZ25FbGVtZW50cyhlbGVtZW50cywgcmVjdCwgYWxpZ25tZW50LCBcInlcIiwgXCJoZWlnaHRcIik7XG59IiwiaW1wb3J0IFBvaW50IGZyb20gJy4uL2dlb21ldHJ5L3BvaW50JztcbmltcG9ydCB0cmFuc2xhdGVUb1BvaW50IGZyb20gJy4vdHJhbnNsYXRlLXRvLXBvaW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhY2tFbGVtZW50cyhlbGVtZW50cywgc3RhY2tBeGlzLCBvdGhlckF4aXMsIHNpemVGaWVsZCkge1xuICAgIGlmIChlbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbiA9IG5ldyBQb2ludCgpO1xuICAgICAgICBsZXQgcHJldmlvdXNCQm94ID0gZWxlbWVudHNbMF0uYmJveDtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAxOyBpZHggPCBlbGVtZW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRzW2lkeF0uZWxlbWVudDtcbiAgICAgICAgICAgIGxldCBiYm94ID0gZWxlbWVudHNbaWR4XS5iYm94O1xuICAgICAgICAgICAgb3JpZ2luW3N0YWNrQXhpc10gPSBwcmV2aW91c0JCb3gub3JpZ2luW3N0YWNrQXhpc10gKyBwcmV2aW91c0JCb3guc2l6ZVtzaXplRmllbGRdO1xuICAgICAgICAgICAgb3JpZ2luW290aGVyQXhpc10gPSBiYm94Lm9yaWdpbltvdGhlckF4aXNdO1xuICAgICAgICAgICAgdHJhbnNsYXRlVG9Qb2ludChvcmlnaW4sIGJib3gsIGVsZW1lbnQpO1xuICAgICAgICAgICAgYmJveC5vcmlnaW5bc3RhY2tBeGlzXSA9IG9yaWdpbltzdGFja0F4aXNdO1xuICAgICAgICAgICAgcHJldmlvdXNCQm94ID0gYmJveDtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdGFja0VsZW1lbnRzKGVsZW1lbnRzKSB7XG4gICAgY29uc3Qgc3RhY2tFbGVtZW50cyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZWxlbWVudHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRzW2lkeF07XG4gICAgICAgIGxldCBiYm94ID0gZWxlbWVudC5jbGlwcGVkQkJveCgpO1xuICAgICAgICBpZiAoYmJveCkge1xuICAgICAgICAgICAgc3RhY2tFbGVtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGJib3g6IGJib3hcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YWNrRWxlbWVudHM7XG59IiwiaW1wb3J0IHN0YWNrRWxlbWVudHMgZnJvbSAnLi9zdGFjay1lbGVtZW50cyc7XG5pbXBvcnQgY3JlYXRlU3RhY2tFbGVtZW50cyBmcm9tICcuL2NyZWF0ZS1zdGFjay1lbGVtZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YWNrKGVsZW1lbnRzKSB7XG4gICAgc3RhY2tFbGVtZW50cyhjcmVhdGVTdGFja0VsZW1lbnRzKGVsZW1lbnRzKSwgXCJ4XCIsIFwieVwiLCBcIndpZHRoXCIpO1xufSIsImltcG9ydCBzdGFja0VsZW1lbnRzIGZyb20gJy4vc3RhY2stZWxlbWVudHMnO1xuaW1wb3J0IGNyZWF0ZVN0YWNrRWxlbWVudHMgZnJvbSAnLi9jcmVhdGUtc3RhY2stZWxlbWVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2U3RhY2soZWxlbWVudHMpIHtcbiAgICBzdGFja0VsZW1lbnRzKGNyZWF0ZVN0YWNrRWxlbWVudHMoZWxlbWVudHMpLCBcInlcIiwgXCJ4XCIsIFwiaGVpZ2h0XCIpO1xufSIsImltcG9ydCB0cmFuc2xhdGVUb1BvaW50IGZyb20gJy4vdHJhbnNsYXRlLXRvLXBvaW50JztcbmltcG9ydCBzdGFja0VsZW1lbnRzIGZyb20gJy4vc3RhY2stZWxlbWVudHMnO1xuXG5mdW5jdGlvbiBnZXRTdGFja3MoZWxlbWVudHMsIHJlY3QsIHNpemVGaWVsZCkge1xuICAgIGNvbnN0IG1heFNpemUgPSByZWN0LnNpemVbc2l6ZUZpZWxkXTtcbiAgICBjb25zdCBzdGFja3MgPSBbXTtcbiAgICBsZXQgc3RhY2sgPSBbXTtcbiAgICBsZXQgc3RhY2tTaXplID0gMDtcbiAgICBsZXQgZWxlbWVudCwgYmJveDtcblxuICAgIGNvbnN0IGFkZEVsZW1lbnRUb1N0YWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHN0YWNrLnB1c2goe1xuICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICAgIGJib3g6IGJib3hcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVsZW1lbnRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRzW2lkeF07XG5cbiAgICAgICAgYmJveCA9IGVsZW1lbnQuY2xpcHBlZEJCb3goKTtcbiAgICAgICAgaWYgKGJib3gpIHtcbiAgICAgICAgICAgIGxldCBzaXplID0gYmJveC5zaXplW3NpemVGaWVsZF07XG4gICAgICAgICAgICBpZiAoc3RhY2tTaXplICsgc2l6ZSA+IG1heFNpemUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrcy5wdXNoKHN0YWNrKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgYWRkRWxlbWVudFRvU3RhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2tTaXplID0gc2l6ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhZGRFbGVtZW50VG9TdGFjaygpO1xuICAgICAgICAgICAgICAgICAgICBzdGFja3MucHVzaChzdGFjayk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrID0gW107XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrU2l6ZSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRFbGVtZW50VG9TdGFjaygpO1xuICAgICAgICAgICAgICAgIHN0YWNrU2l6ZSArPSBzaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICBzdGFja3MucHVzaChzdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YWNrcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd3JhcEVsZW1lbnRzKGVsZW1lbnRzLCByZWN0LCBheGlzLCBvdGhlckF4aXMsIHNpemVGaWVsZCkge1xuICAgIGNvbnN0IHN0YWNrcyA9IGdldFN0YWNrcyhlbGVtZW50cywgcmVjdCwgc2l6ZUZpZWxkKTtcbiAgICBjb25zdCBvcmlnaW4gPSByZWN0Lm9yaWdpbi5jbG9uZSgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc3RhY2tzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgbGV0IHN0YWNrID0gc3RhY2tzW2lkeF07XG4gICAgICAgIGxldCBzdGFydEVsZW1lbnQgPSBzdGFja1swXTtcbiAgICAgICAgb3JpZ2luW290aGVyQXhpc10gPSBzdGFydEVsZW1lbnQuYmJveC5vcmlnaW5bb3RoZXJBeGlzXTtcbiAgICAgICAgdHJhbnNsYXRlVG9Qb2ludChvcmlnaW4sIHN0YXJ0RWxlbWVudC5iYm94LCBzdGFydEVsZW1lbnQuZWxlbWVudCk7XG4gICAgICAgIHN0YXJ0RWxlbWVudC5iYm94Lm9yaWdpbltheGlzXSA9IG9yaWdpbltheGlzXTtcbiAgICAgICAgc3RhY2tFbGVtZW50cyhzdGFjaywgYXhpcywgb3RoZXJBeGlzLCBzaXplRmllbGQpO1xuICAgICAgICByZXN1bHQucHVzaChbXSk7XG4gICAgICAgIGZvciAobGV0IGVsZW1lbnRJZHggPSAwOyBlbGVtZW50SWR4IDwgc3RhY2subGVuZ3RoOyBlbGVtZW50SWR4KyspIHtcbiAgICAgICAgICAgIHJlc3VsdFtpZHhdLnB1c2goc3RhY2tbZWxlbWVudElkeF0uZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgd3JhcEVsZW1lbnRzIGZyb20gJy4vd3JhcC1lbGVtZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdyYXAoZWxlbWVudHMsIHJlY3QpIHtcbiAgICByZXR1cm4gd3JhcEVsZW1lbnRzKGVsZW1lbnRzLCByZWN0LCBcInhcIiwgXCJ5XCIsIFwid2lkdGhcIik7XG59IiwiaW1wb3J0IHdyYXBFbGVtZW50cyBmcm9tICcuL3dyYXAtZWxlbWVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2V3JhcChlbGVtZW50cywgcmVjdCkge1xuICAgIHJldHVybiB3cmFwRWxlbWVudHMoZWxlbWVudHMsIHJlY3QsIFwieVwiLCBcInhcIiwgXCJoZWlnaHRcIik7XG59IiwiaW1wb3J0IGNyZWF0ZVRyYW5zZm9ybSBmcm9tICcuLi9nZW9tZXRyeS90cmFuc2Zvcm0nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaXQoZWxlbWVudCwgcmVjdCkge1xuICAgIGNvbnN0IGJib3ggPSBlbGVtZW50LmNsaXBwZWRCQm94KCk7XG4gICAgaWYgKGJib3gpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudFNpemUgPSBiYm94LnNpemU7XG4gICAgICAgIGNvbnN0IHJlY3RTaXplID0gcmVjdC5zaXplO1xuICAgICAgICBpZiAocmVjdFNpemUud2lkdGggPCBlbGVtZW50U2l6ZS53aWR0aCB8fCByZWN0U2l6ZS5oZWlnaHQgPCBlbGVtZW50U2l6ZS5oZWlnaHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gTWF0aC5taW4ocmVjdFNpemUud2lkdGggLyBlbGVtZW50U2l6ZS53aWR0aCwgcmVjdFNpemUuaGVpZ2h0IC8gZWxlbWVudFNpemUuaGVpZ2h0KTtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGVsZW1lbnQudHJhbnNmb3JtKCkgfHwgY3JlYXRlVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICB0cmFuc2Zvcm0uc2NhbGUoc2NhbGUsIHNjYWxlKTtcbiAgICAgICAgICAgIGVsZW1lbnQudHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IEVsZW1lbnRzQXJyYXkgZnJvbSAnLi4vc2hhcGVzL2VsZW1lbnRzLWFycmF5JztcblxuY2xhc3MgU3RvcHNBcnJheSBleHRlbmRzIEVsZW1lbnRzQXJyYXkge1xuICAgIF9jaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMub3B0aW9uc0NoYW5nZSh7XG4gICAgICAgICAgICBmaWVsZDogXCJzdG9wc1wiXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RvcHNBcnJheTsiLCJpbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmZ1bmN0aW9uIG9wdGlvbnNBY2Nlc3NvcihuYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZ2V0KG5hbWUpO1xuICAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmluZU9wdGlvbnNBY2Nlc3NvcnMoZm4sIG5hbWVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmbltuYW1lc1tpXV0gPSBvcHRpb25zQWNjZXNzb3IobmFtZXNbaV0pO1xuICAgIH1cbn0iLCJpbXBvcnQgZGVmaW5lT3B0aW9uc0FjY2Vzc29ycyBmcm9tICcuLi9hY2Nlc3NvcnMvZGVmaW5lLW9wdGlvbnMtYWNjZXNzb3JzJztcbmltcG9ydCBPcHRpb25zU3RvcmUgZnJvbSAnLi4vY29yZS9vcHRpb25zLXN0b3JlJztcbmltcG9ydCBPYnNlcnZlcnNNaXhpbiBmcm9tICcuLi9taXhpbnMvb2JzZXJ2ZXJzLW1peGluJztcbmltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IGRlZmluZWQgfSBmcm9tICcuLi91dGlsJztcblxuY2xhc3MgR3JhZGllbnRTdG9wIGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKG9mZnNldCwgY29sb3IsIG9wYWNpdHkpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBuZXcgT3B0aW9uc1N0b3JlKHtcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgb3BhY2l0eTogZGVmaW5lZChvcGFjaXR5KSA/IG9wYWNpdHkgOiAxXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9wdGlvbnMuYWRkT2JzZXJ2ZXIodGhpcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZShhcmcpIHtcbiAgICAgICAgaWYgKGRlZmluZWQoYXJnKSkge1xuICAgICAgICAgICAgbGV0IHN0b3A7XG4gICAgICAgICAgICBpZiAoYXJnIGluc3RhbmNlb2YgR3JhZGllbnRTdG9wKSB7XG4gICAgICAgICAgICAgICAgc3RvcCA9IGFyZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJnLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBzdG9wID0gbmV3IEdyYWRpZW50U3RvcChhcmdbMF0sIGFyZ1sxXSwgYXJnWzJdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RvcCA9IG5ldyBHcmFkaWVudFN0b3AoYXJnLm9mZnNldCwgYXJnLmNvbG9yLCBhcmcub3BhY2l0eSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzdG9wO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5kZWZpbmVPcHRpb25zQWNjZXNzb3JzKEdyYWRpZW50U3RvcC5wcm90b3R5cGUsIFsgXCJvZmZzZXRcIiwgXCJjb2xvclwiLCBcIm9wYWNpdHlcIiBdKTtcbk9ic2VydmVyc01peGluLmV4dGVuZChHcmFkaWVudFN0b3AucHJvdG90eXBlKTtcblxuZXhwb3J0IGRlZmF1bHQgR3JhZGllbnRTdG9wO1xuIiwiaW1wb3J0IE9ic2VydmVyc01peGluIGZyb20gJy4uL21peGlucy9vYnNlcnZlcnMtbWl4aW4nO1xuaW1wb3J0IFN0b3BzQXJyYXkgZnJvbSAnLi9zdG9wcy1hcnJheSc7XG5pbXBvcnQgR3JhZGllbnRTdG9wIGZyb20gJy4vZ3JhZGllbnQtc3RvcCc7XG5pbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgeyBkZWZpbmVkLCBkZWZpbml0aW9uSWQgfSBmcm9tICcuLi91dGlsJztcblxuY2xhc3MgR3JhZGllbnQgZXh0ZW5kcyBDbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnN0b3BzID0gbmV3IFN0b3BzQXJyYXkodGhpcy5fY3JlYXRlU3RvcHMob3B0aW9ucy5zdG9wcykpO1xuICAgICAgICB0aGlzLnN0b3BzLmFkZE9ic2VydmVyKHRoaXMpO1xuICAgICAgICB0aGlzLl91c2VyU3BhY2UgPSBvcHRpb25zLnVzZXJTcGFjZTtcbiAgICAgICAgdGhpcy5pZCA9IGRlZmluaXRpb25JZCgpO1xuICAgIH1cblxuICAgIHVzZXJTcGFjZSh2YWx1ZSkge1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3VzZXJTcGFjZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zQ2hhbmdlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl91c2VyU3BhY2U7XG4gICAgfVxuXG4gICAgX2NyZWF0ZVN0b3BzKHN0b3BzID0gW10pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHN0b3BzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKEdyYWRpZW50U3RvcC5jcmVhdGUoc3RvcHNbaWR4XSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBhZGRTdG9wKG9mZnNldCwgY29sb3IsIG9wYWNpdHkpIHtcbiAgICAgICAgdGhpcy5zdG9wcy5wdXNoKG5ldyBHcmFkaWVudFN0b3Aob2Zmc2V0LCBjb2xvciwgb3BhY2l0eSkpO1xuICAgIH1cblxuICAgIHJlbW92ZVN0b3Aoc3RvcCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuc3RvcHMuaW5kZXhPZihzdG9wKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuR3JhZGllbnQucHJvdG90eXBlLm5vZGVUeXBlID0gXCJHcmFkaWVudFwiO1xuXG5PYnNlcnZlcnNNaXhpbi5leHRlbmQoR3JhZGllbnQucHJvdG90eXBlKTtcblxuT2JqZWN0LmFzc2lnbihHcmFkaWVudC5wcm90b3R5cGUsIHtcbiAgICBvcHRpb25zQ2hhbmdlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcihcIm9wdGlvbnNDaGFuZ2VcIiwge1xuICAgICAgICAgICAgZmllbGQ6IFwiZ3JhZGllbnRcIiArIChlID8gXCIuXCIgKyBlLmZpZWxkIDogXCJcIiksXG4gICAgICAgICAgICB2YWx1ZTogdGhpc1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgZ2VvbWV0cnlDaGFuZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnNDaGFuZ2UoKTtcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgR3JhZGllbnQ7IiwiaW1wb3J0IGRlZmluZVBvaW50QWNjZXNzb3JzIGZyb20gJy4uL2FjY2Vzc29ycy9kZWZpbmUtcG9pbnQtYWNjZXNzb3JzJztcbmltcG9ydCBQb2ludCBmcm9tICcuLi9nZW9tZXRyeS9wb2ludCc7XG5pbXBvcnQgR3JhZGllbnQgZnJvbSAnLi9ncmFkaWVudCc7XG5cbmNsYXNzIExpbmVhckdyYWRpZW50IGV4dGVuZHMgR3JhZGllbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLnN0YXJ0KG9wdGlvbnMuc3RhcnQgfHwgbmV3IFBvaW50KCkpO1xuXG4gICAgICAgIHRoaXMuZW5kKG9wdGlvbnMuZW5kIHx8IG5ldyBQb2ludCgxLCAwKSk7XG4gICAgfVxufVxuXG5kZWZpbmVQb2ludEFjY2Vzc29ycyhMaW5lYXJHcmFkaWVudC5wcm90b3R5cGUsIFsgXCJzdGFydFwiLCBcImVuZFwiIF0pO1xuXG5leHBvcnQgZGVmYXVsdCBMaW5lYXJHcmFkaWVudDsiLCJpbXBvcnQgZGVmaW5lUG9pbnRBY2Nlc3NvcnMgZnJvbSAnLi4vYWNjZXNzb3JzL2RlZmluZS1wb2ludC1hY2Nlc3NvcnMnO1xuaW1wb3J0IFBvaW50IGZyb20gJy4uL2dlb21ldHJ5L3BvaW50JztcbmltcG9ydCBHcmFkaWVudCBmcm9tICcuL2dyYWRpZW50JztcbmltcG9ydCB7IGRlZmluZWQgfSBmcm9tICcuLi91dGlsJztcblxuY2xhc3MgUmFkaWFsR3JhZGllbnQgZXh0ZW5kcyBHcmFkaWVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuY2VudGVyKG9wdGlvbnMuY2VudGVyIHx8IG5ldyBQb2ludCgpKTtcbiAgICAgICAgdGhpcy5fcmFkaXVzID0gZGVmaW5lZChvcHRpb25zLnJhZGl1cykgPyBvcHRpb25zLnJhZGl1cyA6IDE7XG4gICAgICAgIHRoaXMuX2ZhbGxiYWNrRmlsbCA9IG9wdGlvbnMuZmFsbGJhY2tGaWxsO1xuICAgIH1cblxuICAgIHJhZGl1cyh2YWx1ZSkge1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JhZGl1cyA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5nZW9tZXRyeUNoYW5nZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fcmFkaXVzO1xuICAgIH1cblxuICAgIGZhbGxiYWNrRmlsbCh2YWx1ZSkge1xuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZhbGxiYWNrRmlsbCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zQ2hhbmdlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9mYWxsYmFja0ZpbGw7XG4gICAgfVxufVxuXG5kZWZpbmVQb2ludEFjY2Vzc29ycyhSYWRpYWxHcmFkaWVudC5wcm90b3R5cGUsIFsgXCJjZW50ZXJcIiBdKTtcblxuZXhwb3J0IGRlZmF1bHQgUmFkaWFsR3JhZGllbnQ7IiwiZXhwb3J0IGZ1bmN0aW9uIHN3aW5nKHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIDAuNSAtIE1hdGguY29zKHBvc2l0aW9uICogTWF0aC5QSSkgLyAyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyKHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZWFzZU91dEVsYXN0aWMocG9zaXRpb24sIHRpbWUsIHN0YXJ0LCBkaWZmKSB7XG4gICAgbGV0IHMgPSAxLjcwMTU4LFxuICAgICAgICBwID0gMCxcbiAgICAgICAgYSA9IGRpZmY7XG5cbiAgICBpZiAocG9zaXRpb24gPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0O1xuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA9PT0gMSkge1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBkaWZmO1xuICAgIH1cblxuICAgIGlmICghcCkge1xuICAgICAgICBwID0gMC41O1xuICAgIH1cblxuICAgIGlmIChhIDwgTWF0aC5hYnMoZGlmZikpIHtcbiAgICAgICAgYSA9IGRpZmY7XG4gICAgICAgIHMgPSBwIC8gNDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oZGlmZiAvIGEpO1xuICAgIH1cblxuICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgLTEwICogcG9zaXRpb24pICpcbiAgICAgICAgICAgTWF0aC5zaW4oKE51bWJlcihwb3NpdGlvbikgLSBzKSAqICgxLjEgKiBNYXRoLlBJKSAvIHApICsgZGlmZiArIHN0YXJ0O1xufVxuIiwiaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBBbmltYXRpb25GYWN0b3J5IGV4dGVuZHMgQ2xhc3Mge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5faXRlbXMgPSBbXTtcbiAgICB9XG5cbiAgICByZWdpc3RlcihuYW1lLCB0eXBlKSB7XG4gICAgICAgIHRoaXMuX2l0ZW1zLnB1c2goe1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLl9pdGVtcztcbiAgICAgICAgbGV0IG1hdGNoO1xuXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudHlwZSkge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IG9wdGlvbnMudHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpdGVtc1tpXS5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IG1hdGNoLnR5cGUoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkFuaW1hdGlvbkZhY3RvcnkuY3VycmVudCA9IG5ldyBBbmltYXRpb25GYWN0b3J5KCk7XG5cbmV4cG9ydCBkZWZhdWx0IEFuaW1hdGlvbkZhY3Rvcnk7XG4iLCJpbXBvcnQgKiBhcyBlYXNpbmdGdW5jdGlvbnMgZnJvbSAnLi9lYXNpbmctZnVuY3Rpb25zJztcbmltcG9ydCB7IGxpbWl0VmFsdWUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IGFuaW1hdGlvbkZyYW1lLCBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgQW5pbWF0aW9uRmFjdG9yeSBmcm9tICcuL2FuaW1hdGlvbi1mYWN0b3J5JztcblxuY29uc3Qgbm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xufTtcblxuY2xhc3MgQW5pbWF0aW9uIGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIH1cblxuICAgIHNldHVwKCkge31cbiAgICBzdGVwKCkge31cblxuICAgIHBsYXkoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgZHVyYXRpb24sIGRlbGF5ID0gMCB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgZWFzaW5nID0gZWFzaW5nRnVuY3Rpb25zW29wdGlvbnMuZWFzaW5nXTtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBmaW5pc2ggPSBzdGFydCArIGR1cmF0aW9uO1xuXG4gICAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zdGVwKDEpO1xuICAgICAgICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9vcCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdhbGxUaW1lID0gbm93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZSA9IGxpbWl0VmFsdWUod2FsbFRpbWUgLSBzdGFydCwgMCwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRpbWUgLyBkdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWFzaW5nUG9zaXRpb24gPSBlYXNpbmcocG9zaXRpb24sIHRpbWUsIDAsIDEsIGR1cmF0aW9uKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0ZXAoZWFzaW5nUG9zaXRpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh3YWxsVGltZSA8IGZpbmlzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgbG9vcCgpO1xuICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWJvcnQoKSB7XG4gICAgICAgIHRoaXMuX3N0b3BwZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYWJvcnQoKTtcbiAgICB9XG59XG5cbkFuaW1hdGlvbi5wcm90b3R5cGUub3B0aW9ucyA9IHtcbiAgICBkdXJhdGlvbjogNTAwLFxuICAgIGVhc2luZzogXCJzd2luZ1wiXG59O1xuXG5BbmltYXRpb24uY3JlYXRlID0gZnVuY3Rpb24odHlwZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHJldHVybiBBbmltYXRpb25GYWN0b3J5LmN1cnJlbnQuY3JlYXRlKHR5cGUsIGVsZW1lbnQsIG9wdGlvbnMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQW5pbWF0aW9uO1xuIiwiaW1wb3J0IHsgQ2xhc3MsIGxvZ1RvQ29uc29sZSB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNsYXNzIFN1cmZhY2VGYWN0b3J5IGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2l0ZW1zID0gW107XG4gICAgfVxuXG4gICAgcmVnaXN0ZXIobmFtZSwgdHlwZSwgb3JkZXIpIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLl9pdGVtcztcbiAgICAgICAgY29uc3QgZmlyc3QgPSBpdGVtc1swXTtcbiAgICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIG9yZGVyOiBvcmRlclxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghZmlyc3QgfHwgb3JkZXIgPCBmaXJzdC5vcmRlcikge1xuICAgICAgICAgICAgaXRlbXMudW5zaGlmdChlbnRyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZShlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5faXRlbXM7XG4gICAgICAgIGxldCBtYXRjaCA9IGl0ZW1zWzBdO1xuXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudHlwZSkge1xuICAgICAgICAgICAgY29uc3QgcHJlZmVycmVkID0gb3B0aW9ucy50eXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1zW2ldLm5hbWUgPT09IHByZWZlcnJlZCkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgbWF0Y2gudHlwZShlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZ1RvQ29uc29sZShcbiAgICAgICAgICAgIFwiV2FybmluZzogVW5hYmxlIHRvIGNyZWF0ZSBLZW5kbyBVSSBEcmF3aW5nIFN1cmZhY2UuIFBvc3NpYmxlIGNhdXNlczpcXG5cIiArXG4gICAgICAgICAgICBgLSBUaGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IFNWRyBhbmQgQ2FudmFzLiBVc2VyIGFnZW50OiAkeyBuYXZpZ2F0b3IudXNlckFnZW50IH1gKTtcbiAgICB9XG59XG5cblN1cmZhY2VGYWN0b3J5LmN1cnJlbnQgPSBuZXcgU3VyZmFjZUZhY3RvcnkoKTtcblxuZXhwb3J0IGRlZmF1bHQgU3VyZmFjZUZhY3Rvcnk7IiwiaW1wb3J0IEdyb3VwIGZyb20gJy4uL3NoYXBlcy9ncm91cCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vZ2VvbWV0cnkvcG9pbnQnO1xuaW1wb3J0IFN1cmZhY2VGYWN0b3J5IGZyb20gJy4vc3VyZmFjZS1mYWN0b3J5JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgZXZlbnRFbGVtZW50LCBldmVudENvb3JkaW5hdGVzLCBlbGVtZW50UGFkZGluZywgZWxlbWVudFNjYWxlLCBlbGVtZW50U2l6ZSwgZWxlbWVudE9mZnNldCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBldmVudHMgPSBbXG4gICAgXCJjbGlja1wiLFxuICAgIFwibW91c2VlbnRlclwiLFxuICAgIFwibW91c2VsZWF2ZVwiLFxuICAgIFwibW91c2Vtb3ZlXCIsXG4gICAgXCJyZXNpemVcIlxuXTtcblxuY2xhc3MgU3VyZmFjZSBleHRlbmRzIE9ic2VydmFibGUge1xuXG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLmVsZW1lbnQuX2tlbmRvRXhwb3J0VmlzdWFsID0gdGhpcy5leHBvcnRWaXN1YWwuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLl9jbGljayA9IHRoaXMuX2hhbmRsZXIoXCJjbGlja1wiKTtcbiAgICAgICAgdGhpcy5fbW91c2VlbnRlciA9IHRoaXMuX2hhbmRsZXIoXCJtb3VzZWVudGVyXCIpO1xuICAgICAgICB0aGlzLl9tb3VzZWxlYXZlID0gdGhpcy5faGFuZGxlcihcIm1vdXNlbGVhdmVcIik7XG4gICAgICAgIHRoaXMuX21vdXNlbW92ZSA9IHRoaXMuX2hhbmRsZXIoXCJtb3VzZW1vdmVcIik7XG5cbiAgICAgICAgdGhpcy5fdmlzdWFsID0gbmV3IEdyb3VwKCk7XG5cbiAgICAgICAgZWxlbWVudFNpemUoZWxlbWVudCwgdGhpcy5vcHRpb25zKTtcblxuICAgICAgICB0aGlzLmJpbmQoZXZlbnRzLCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuX2VuYWJsZVRyYWNraW5nKCk7XG4gICAgfVxuXG4gICAgZHJhdyhlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX3Zpc3VhbC5jaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl92aXN1YWwuY2hpbGRyZW4gPSBbXTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLl92aXN1YWwgPSBudWxsO1xuICAgICAgICB0aGlzLmVsZW1lbnQuX2tlbmRvRXhwb3J0VmlzdWFsID0gbnVsbDtcbiAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICB9XG5cbiAgICBldmVudFRhcmdldChlKSB7XG4gICAgICAgIGxldCBkb21Ob2RlID0gZXZlbnRFbGVtZW50KGUpO1xuICAgICAgICBsZXQgbm9kZTtcblxuICAgICAgICB3aGlsZSAoIW5vZGUgJiYgZG9tTm9kZSkge1xuICAgICAgICAgICAgbm9kZSA9IGRvbU5vZGUuX2tlbmRvTm9kZTtcbiAgICAgICAgICAgIGlmIChkb21Ob2RlID09PSB0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9tTm9kZSA9IGRvbU5vZGUucGFyZW50RWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5zcmNFbGVtZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0VmlzdWFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlzdWFsO1xuICAgIH1cblxuICAgIGdldFNpemUoKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50U2l6ZSh0aGlzLmVsZW1lbnQpO1xuICAgIH1cblxuICAgIGN1cnJlbnRTaXplKHNpemUpIHtcbiAgICAgICAgaWYgKHNpemUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRTaXplKHNpemUpIHtcbiAgICAgICAgZWxlbWVudFNpemUodGhpcy5lbGVtZW50LCBzaXplKTtcblxuICAgICAgICB0aGlzLmN1cnJlbnRTaXplKHNpemUpO1xuICAgICAgICB0aGlzLl9yZXNpemUoKTtcbiAgICB9XG5cbiAgICByZXNpemUoZm9yY2UpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpO1xuICAgICAgICBjb25zdCBjdXJyZW50U2l6ZSA9IHRoaXMuY3VycmVudFNpemUoKTtcblxuICAgICAgICBpZiAoZm9yY2UgfHwgKHNpemUud2lkdGggPiAwIHx8IHNpemUuaGVpZ2h0ID4gMCkgJiYgKCFjdXJyZW50U2l6ZSB8fCBzaXplLndpZHRoICE9PSBjdXJyZW50U2l6ZS53aWR0aCB8fCBzaXplLmhlaWdodCAhPT0gY3VycmVudFNpemUuaGVpZ2h0KSkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2l6ZShzaXplKTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZShzaXplLCBmb3JjZSk7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoXCJyZXNpemVcIiwgc2l6ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaXplKHZhbHVlKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNpemUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U2l6ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgc3VzcGVuZFRyYWNraW5nKCkge1xuICAgICAgICB0aGlzLl9zdXNwZW5kZWRUcmFja2luZyA9IHRydWU7XG4gICAgfVxuXG4gICAgcmVzdW1lVHJhY2tpbmcoKSB7XG4gICAgICAgIHRoaXMuX3N1c3BlbmRlZFRyYWNraW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX2VuYWJsZVRyYWNraW5nKCkge31cblxuICAgIF9yZXNpemUoKSB7fVxuXG4gICAgX2hhbmRsZXIoZXZlbnROYW1lKSB7XG4gICAgICAgIHJldHVybiAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZXZlbnRUYXJnZXQoZSk7XG4gICAgICAgICAgICBpZiAobm9kZSAmJiAhdGhpcy5fc3VzcGVuZGVkVHJhY2tpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoZXZlbnROYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IG5vZGUsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGV2ZW50TmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9lbGVtZW50T2Zmc2V0KCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gZWxlbWVudFBhZGRpbmcoZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IHsgbGVmdCwgdG9wIH0gPSBlbGVtZW50T2Zmc2V0KGVsZW1lbnQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiBsZWZ0ICsgcGFkZGluZy5sZWZ0LFxuICAgICAgICAgICAgdG9wOiB0b3AgKyBwYWRkaW5nLnRvcFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9zdXJmYWNlUG9pbnQoZSkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLl9lbGVtZW50T2Zmc2V0KCk7XG4gICAgICAgIGNvbnN0IGNvb3JkID0gZXZlbnRDb29yZGluYXRlcyhlKTtcbiAgICAgICAgY29uc3QgeCA9IGNvb3JkLnggLSBvZmZzZXQubGVmdDtcbiAgICAgICAgY29uc3QgeSA9IGNvb3JkLnkgLSBvZmZzZXQudG9wO1xuXG4gICAgICAgIGNvbnN0IGludmVyc2VUcmFuc2Zvcm0gPSBlbGVtZW50U2NhbGUodGhpcy5lbGVtZW50KS5pbnZlcnQoKTtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBuZXcgUG9pbnQoXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICApLnRyYW5zZm9ybShpbnZlcnNlVHJhbnNmb3JtKTtcblxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxufVxuXG5TdXJmYWNlLmNyZWF0ZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gU3VyZmFjZUZhY3RvcnkuY3VycmVudC5jcmVhdGUoZWxlbWVudCwgb3B0aW9ucyk7XG59O1xuXG5TdXJmYWNlLnN1cHBvcnQgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgU3VyZmFjZTtcbiIsImltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vY29tbW9uJztcblxuY2xhc3MgQmFzZU5vZGUgZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3Ioc3JjRWxlbWVudCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuY2hpbGROb2RlcyA9IFtdO1xuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG5cbiAgICAgICAgaWYgKHNyY0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc3JjRWxlbWVudCA9IHNyY0VsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnNyY0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc3JjRWxlbWVudC5yZW1vdmVPYnNlcnZlcih0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZE5vZGVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkTm9kZXNbaV0uZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGxvYWQoKSB7fVxuXG4gICAgb2JzZXJ2ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3JjRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5zcmNFbGVtZW50LmFkZE9ic2VydmVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXBwZW5kKG5vZGUpIHtcbiAgICAgICAgdGhpcy5jaGlsZE5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgIG5vZGUucGFyZW50ID0gdGhpcztcbiAgICB9XG5cbiAgICBpbnNlcnRBdChub2RlLCBwb3MpIHtcbiAgICAgICAgdGhpcy5jaGlsZE5vZGVzLnNwbGljZShwb3MsIDAsIG5vZGUpO1xuICAgICAgICBub2RlLnBhcmVudCA9IHRoaXM7XG4gICAgfVxuXG4gICAgcmVtb3ZlKGluZGV4LCBjb3VudCkge1xuICAgICAgICBjb25zdCBlbmQgPSBpbmRleCArIGNvdW50O1xuICAgICAgICBmb3IgKGxldCBpID0gaW5kZXg7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jaGlsZE5vZGVzW2ldLnJlbW92ZVNlbGYoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoaWxkTm9kZXMuc3BsaWNlKGluZGV4LCBjb3VudCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlU2VsZigpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5yZW1vdmUoMCwgdGhpcy5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5pbnZhbGlkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZW9tZXRyeUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgb3B0aW9uc0NoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgY2hpbGRyZW5DaGFuZ2UoZSkge1xuICAgICAgICBpZiAoZS5hY3Rpb24gPT09IFwiYWRkXCIpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZChlLml0ZW1zLCBlLmluZGV4KTtcbiAgICAgICAgfSBlbHNlIGlmIChlLmFjdGlvbiA9PT0gXCJyZW1vdmVcIikge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoZS5pbmRleCwgZS5pdGVtcy5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXNlTm9kZTsiLCJpbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlckF0dHIobmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gKGRlZmluZWQodmFsdWUpICYmIHZhbHVlICE9PSBudWxsKSA/IGAgJHsgbmFtZSB9PVwiJHsgdmFsdWUgfVwiIGAgOiBcIlwiO1xufSIsImltcG9ydCByZW5kZXJBdHRyIGZyb20gJy4vcmVuZGVyLWF0dHJpYnV0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlckFsbEF0dHIoYXR0cnMpIHtcbiAgICBsZXQgb3V0cHV0ID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG91dHB1dCArPSByZW5kZXJBdHRyKGF0dHJzW2ldWzBdLCBhdHRyc1tpXVsxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlclN0eWxlKGF0dHJzKSB7XG4gICAgbGV0IG91dHB1dCA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdmFsdWUgPSBhdHRyc1tpXVsxXTtcbiAgICAgICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICBvdXRwdXQgKz0gYXR0cnNbaV1bMF0gKyBcIjpcIiArIHZhbHVlICsgXCI7XCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3V0cHV0ICE9PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxufSIsImNvbnN0IE5PREVfTUFQID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IE5PREVfTUFQOyIsImNvbnN0IFNWR19OUyA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcbmNvbnN0IE5PTkUgPSBcIm5vbmVcIjtcblxuZXhwb3J0IHsgU1ZHX05TLCBOT05FIH07IiwiaW1wb3J0IHsgU1ZHX05TIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxubGV0IHJlbmRlclNWRyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgc3ZnKSB7XG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9IHN2Zztcbn07XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjb25zdCB0ZXN0RnJhZ21lbnQgPSBcIjxzdmcgeG1sbnM9J1wiICsgU1ZHX05TICsgXCInPjwvc3ZnPlwiO1xuICAgIGNvbnN0IHRlc3RDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbnN0IGhhc1BhcnNlciA9IHR5cGVvZiBET01QYXJzZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICB0ZXN0Q29udGFpbmVyLmlubmVySFRNTCA9IHRlc3RGcmFnbWVudDtcblxuICAgIGlmIChoYXNQYXJzZXIgJiYgdGVzdENvbnRhaW5lci5maXJzdENoaWxkLm5hbWVzcGFjZVVSSSAhPT0gU1ZHX05TKSB7XG4gICAgICAgIHJlbmRlclNWRyA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgc3ZnKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgICAgICAgICBjb25zdCBjaGFydERvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoc3ZnLCBcInRleHQveG1sXCIpO1xuICAgICAgICAgICAgY29uc3QgaW1wb3J0ZWREb2MgPSBkb2N1bWVudC5hZG9wdE5vZGUoY2hhcnREb2MuZG9jdW1lbnRFbGVtZW50KTtcblxuICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaW1wb3J0ZWREb2MpO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyU1ZHOyIsImltcG9ydCBCYXNlTm9kZSBmcm9tICcuLi9jb3JlL2Jhc2Utbm9kZSc7XG5pbXBvcnQgcmVuZGVyQWxsQXR0ciBmcm9tICcuL3V0aWxzL3JlbmRlci1hbGwtYXR0cmlidXRlcyc7XG5pbXBvcnQgcmVuZGVyQXR0ciBmcm9tICcuL3V0aWxzL3JlbmRlci1hdHRyaWJ1dGUnO1xuaW1wb3J0IHJlbmRlclN0eWxlIGZyb20gJy4vdXRpbHMvcmVuZGVyLXN0eWxlJztcbmltcG9ydCBOT0RFX01BUCBmcm9tICcuL25vZGUtbWFwJztcbmltcG9ydCByZW5kZXJTVkcgZnJvbSAnLi91dGlscy9yZW5kZXItc3ZnJztcbmltcG9ydCB7IFNWR19OUywgTk9ORSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IHN1cHBvcnQgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jb25zdCBUUkFOU0ZPUk0gPSBcInRyYW5zZm9ybVwiO1xuY29uc3QgRGVmaW5pdGlvbk1hcCA9IHtcbiAgICBjbGlwOiBcImNsaXAtcGF0aFwiLFxuICAgIGZpbGw6IFwiZmlsbFwiXG59O1xuXG5mdW5jdGlvbiBpc0RlZmluaXRpb24odHlwZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZSA9PT0gXCJjbGlwXCIgfHwgKHR5cGUgPT09IFwiZmlsbFwiICYmICghdmFsdWUgfHwgdmFsdWUubm9kZVR5cGUgPT09IFwiR3JhZGllbnRcIikpO1xufVxuXG5mdW5jdGlvbiBiYXNlVXJsKCkge1xuICAgIGNvbnN0IGJhc2UgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJhc2VcIilbMF07XG4gICAgbGV0IGhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuICAgIGxldCB1cmwgPSBcIlwiO1xuXG4gICAgaWYgKGJhc2UgJiYgIShzdXBwb3J0LmJyb3dzZXIgfHwge30pLm1zaWUpIHtcbiAgICAgICAgY29uc3QgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKFwiI1wiKTtcbiAgICAgICAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGhyZWYgPSBocmVmLnN1YnN0cmluZygwLCBoYXNoSW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsID0gaHJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsO1xufVxuXG5jbGFzcyBOb2RlIGV4dGVuZHMgQmFzZU5vZGUge1xuXG4gICAgY29uc3RydWN0b3Ioc3JjRWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihzcmNFbGVtZW50KTtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9ucyA9IHt9O1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50Ll9rZW5kb05vZGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2xlYXJEZWZpbml0aW9ucygpO1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgbG9hZChlbGVtZW50cywgcG9zKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNyY0VsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc3JjRWxlbWVudC5jaGlsZHJlbjtcblxuICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gbmV3IE5PREVfTUFQW3NyY0VsZW1lbnQubm9kZVR5cGVdKHNyY0VsZW1lbnQsIHRoaXMub3B0aW9ucyk7XG5cbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHBvcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydEF0KGNoaWxkTm9kZSwgcG9zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQoY2hpbGROb2RlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hpbGROb2RlLmNyZWF0ZURlZmluaXRpb25zKCk7XG5cbiAgICAgICAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY2hpbGROb2RlLmxvYWQoY2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUuYXR0YWNoVG8oZWxlbWVudCwgcG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJvb3QoKSB7XG4gICAgICAgIGxldCByb290ID0gdGhpcztcblxuICAgICAgICB3aGlsZSAocm9vdC5wYXJlbnQpIHtcbiAgICAgICAgICAgIHJvb3QgPSByb290LnBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByb290O1xuICAgIH1cblxuICAgIGF0dGFjaFRvKGRvbUVsZW1lbnQsIHBvcykge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICByZW5kZXJTVkcoY29udGFpbmVyLFxuICAgICAgICAgICAgXCI8c3ZnIHhtbG5zPSdcIiArIFNWR19OUyArIFwiJyB2ZXJzaW9uPScxLjEnPlwiICtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpICtcbiAgICAgICAgICAgIFwiPC9zdmc+XCJcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBlbGVtZW50ID0gY29udGFpbmVyLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHBvcykpIHtcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50Lmluc2VydEJlZm9yZShlbGVtZW50LCBkb21FbGVtZW50LmNoaWxkTm9kZXNbcG9zXSB8fCBudWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0RWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuX2tlbmRvTm9kZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLmVsZW1lbnQuX2tlbmRvTm9kZSA9IHRoaXM7XG5cbiAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLmNoaWxkTm9kZXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZEVsZW1lbnQgPSBlbGVtZW50LmNoaWxkTm9kZXNbaV07XG4gICAgICAgICAgICBub2Rlc1tpXS5zZXRFbGVtZW50KGNoaWxkRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5jbGVhckRlZmluaXRpb25zKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGROb2RlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2hpbGRyZW5baV0uZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGlsZE5vZGVzID0gW107XG4gICAgfVxuXG4gICAgcmVtb3ZlU2VsZigpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50Tm9kZSA9IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIucmVtb3ZlU2VsZigpO1xuICAgIH1cblxuICAgIHRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJDaGlsZHJlbigpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGUoKTtcbiAgICB9XG5cbiAgICByZW5kZXJDaGlsZHJlbigpIHtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLmNoaWxkTm9kZXM7XG4gICAgICAgIGxldCBvdXRwdXQgPSBcIlwiO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG91dHB1dCArPSBub2Rlc1tpXS5yZW5kZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgb3B0aW9uc0NoYW5nZShlKSB7XG4gICAgICAgIGNvbnN0IHsgZmllbGQsIHZhbHVlIH0gPSBlO1xuXG4gICAgICAgIGlmIChmaWVsZCA9PT0gXCJ2aXNpYmxlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuY3NzKFwiZGlzcGxheVwiLCB2YWx1ZSA/IFwiXCIgOiBOT05FKTtcbiAgICAgICAgfSBlbHNlIGlmIChEZWZpbml0aW9uTWFwW2ZpZWxkXSAmJiBpc0RlZmluaXRpb24oZmllbGQsIHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVEZWZpbml0aW9uKGZpZWxkLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQgPT09IFwib3BhY2l0eVwiKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHIoXCJvcGFjaXR5XCIsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZCA9PT0gXCJjdXJzb3JcIikge1xuICAgICAgICAgICAgdGhpcy5jc3MoXCJjdXJzb3JcIiwgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkID09PSBcImlkXCIpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0cihcImlkXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBdHRyKFwiaWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5vcHRpb25zQ2hhbmdlKGUpO1xuICAgIH1cblxuICAgIGF0dHIobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhbGxBdHRyKGF0dHJzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuYXR0cihhdHRyc1tpXVswXSwgYXR0cnNbaV1bMV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3NzKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZVtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWxsQ3NzKHN0eWxlcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jc3Moc3R5bGVzW2ldWzBdLCBzdHlsZXNbaV1bMV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlQXR0cihuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtYXBUcmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IGF0dHJzID0gW107XG4gICAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIGF0dHJzLnB1c2goW1xuICAgICAgICAgICAgICAgIFRSQU5TRk9STSxcbiAgICAgICAgICAgICAgICBcIm1hdHJpeChcIiArIHRyYW5zZm9ybS5tYXRyaXgoKS50b1N0cmluZyg2KSArIFwiKVwiXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhdHRycztcbiAgICB9XG5cbiAgICByZW5kZXJUcmFuc2Zvcm0oKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJBbGxBdHRyKFxuICAgICAgICAgICAgdGhpcy5tYXBUcmFuc2Zvcm0odGhpcy5zcmNFbGVtZW50LnRyYW5zZm9ybSgpKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybUNoYW5nZSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuYWxsQXR0cih0aGlzLm1hcFRyYW5zZm9ybSh2YWx1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVBdHRyKFRSQU5TRk9STSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtYXBTdHlsZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuc3JjRWxlbWVudC5vcHRpb25zO1xuICAgICAgICBjb25zdCBzdHlsZSA9IFsgWyBcImN1cnNvclwiLCBvcHRpb25zLmN1cnNvciBdIF07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0eWxlLnB1c2goWyBcImRpc3BsYXlcIiwgTk9ORSBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG5cbiAgICByZW5kZXJTdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckF0dHIoXCJzdHlsZVwiLCByZW5kZXJTdHlsZSh0aGlzLm1hcFN0eWxlKHRydWUpKSk7XG4gICAgfVxuXG4gICAgcmVuZGVyT3BhY2l0eSgpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckF0dHIoXCJvcGFjaXR5XCIsIHRoaXMuc3JjRWxlbWVudC5vcHRpb25zLm9wYWNpdHkpO1xuICAgIH1cblxuICAgIHJlbmRlcklkKCkge1xuICAgICAgICByZXR1cm4gcmVuZGVyQXR0cihcImlkXCIsIHRoaXMuc3JjRWxlbWVudC5vcHRpb25zLmlkKTtcbiAgICB9XG5cbiAgICBjcmVhdGVEZWZpbml0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgc3JjRWxlbWVudCA9IHRoaXMuc3JjRWxlbWVudDtcbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbnMgPSB0aGlzLmRlZmluaXRpb25zO1xuICAgICAgICBpZiAoc3JjRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHNyY0VsZW1lbnQub3B0aW9ucztcbiAgICAgICAgICAgIGxldCBoYXNEZWZpbml0aW9ucztcblxuICAgICAgICAgICAgZm9yIChsZXQgZmllbGQgaW4gRGVmaW5pdGlvbk1hcCkge1xuICAgICAgICAgICAgICAgIGxldCBkZWZpbml0aW9uID0gb3B0aW9ucy5nZXQoZmllbGQpO1xuICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uICYmIGlzRGVmaW5pdGlvbihmaWVsZCwgZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbnNbZmllbGRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgaGFzRGVmaW5pdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNEZWZpbml0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVmaW5pdGlvbkNoYW5nZSh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJhZGRcIixcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWZpbml0aW9uQ2hhbmdlKGUpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5kZWZpbml0aW9uQ2hhbmdlKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlRGVmaW5pdGlvbih0eXBlLCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBkZWZpbml0aW9ucyA9IHRoaXMuZGVmaW5pdGlvbnM7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBkZWZpbml0aW9uc1t0eXBlXTtcbiAgICAgICAgY29uc3QgYXR0ciA9IERlZmluaXRpb25NYXBbdHlwZV07XG4gICAgICAgIGNvbnN0IGRlZmluaXRpb24gPSB7fTtcbiAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGRlZmluaXRpb25bdHlwZV0gPSBjdXJyZW50O1xuICAgICAgICAgICAgdGhpcy5kZWZpbml0aW9uQ2hhbmdlKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVtb3ZlXCIsXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IGRlZmluaXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGVsZXRlIGRlZmluaXRpb25zW3R5cGVdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHIoYXR0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWZpbml0aW9uW3R5cGVdID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmRlZmluaXRpb25DaGFuZ2Uoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJhZGRcIixcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uczogZGVmaW5pdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZWZpbml0aW9uc1t0eXBlXSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5hdHRyKGF0dHIsIHRoaXMucmVmVXJsKHZhbHVlLmlkKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhckRlZmluaXRpb25zKCkge1xuICAgICAgICBjb25zdCBkZWZpbml0aW9ucyA9IHRoaXMuZGVmaW5pdGlvbnM7XG5cbiAgICAgICAgdGhpcy5kZWZpbml0aW9uQ2hhbmdlKHtcbiAgICAgICAgICAgIGFjdGlvbjogXCJyZW1vdmVcIixcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiBkZWZpbml0aW9uc1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHJlbmRlckRlZmluaXRpb25zKCkge1xuICAgICAgICByZXR1cm4gcmVuZGVyQWxsQXR0cih0aGlzLm1hcERlZmluaXRpb25zKCkpO1xuICAgIH1cblxuICAgIG1hcERlZmluaXRpb25zKCkge1xuICAgICAgICBjb25zdCBkZWZpbml0aW9ucyA9IHRoaXMuZGVmaW5pdGlvbnM7XG4gICAgICAgIGNvbnN0IGF0dHJzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgZmllbGQgaW4gZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgICAgIGF0dHJzLnB1c2goWyBEZWZpbml0aW9uTWFwW2ZpZWxkXSwgdGhpcy5yZWZVcmwoZGVmaW5pdGlvbnNbZmllbGRdLmlkKSBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhdHRycztcbiAgICB9XG5cbiAgICByZWZVcmwoaWQpIHtcbiAgICAgICAgY29uc3Qgc2tpcEJhc2VIcmVmID0gKHRoaXMub3B0aW9ucyB8fCB7fSkuc2tpcEJhc2VIcmVmO1xuICAgICAgICBjb25zdCBiYXNlSHJlZiA9IHRoaXMuYmFzZVVybCgpLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKTtcbiAgICAgICAgY29uc3QgYmFzZSA9IHNraXBCYXNlSHJlZiA/ICcnIDogYmFzZUhyZWY7XG4gICAgICAgIHJldHVybiBgdXJsKCR7IGJhc2UgfSMkeyBpZCB9KWA7XG4gICAgfVxuXG4gICAgYmFzZVVybCgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VVcmwoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vZGU7XG4iLCJpbXBvcnQgTm9kZSBmcm9tICcuL25vZGUnO1xuaW1wb3J0IHJlbmRlckF0dHIgZnJvbSAnLi91dGlscy9yZW5kZXItYXR0cmlidXRlJztcblxuY2xhc3MgR3JhZGllbnRTdG9wTm9kZSBleHRlbmRzIE5vZGUge1xuICAgIHRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gYDxzdG9wICR7dGhpcy5yZW5kZXJPZmZzZXQoKX0gJHt0aGlzLnJlbmRlclN0eWxlKCl9IC8+YDtcbiAgICB9XG5cbiAgICByZW5kZXJPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJBdHRyKFwib2Zmc2V0XCIsIHRoaXMuc3JjRWxlbWVudC5vZmZzZXQoKSk7XG4gICAgfVxuXG4gICAgbWFwU3R5bGUoKSB7XG4gICAgICAgIGNvbnN0IHNyY0VsZW1lbnQgPSB0aGlzLnNyY0VsZW1lbnQ7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBbIFwic3RvcC1jb2xvclwiLCBzcmNFbGVtZW50LmNvbG9yKCkgXSxcbiAgICAgICAgICAgIFsgXCJzdG9wLW9wYWNpdHlcIiwgc3JjRWxlbWVudC5vcGFjaXR5KCkgXVxuICAgICAgICBdO1xuICAgIH1cblxuICAgIG9wdGlvbnNDaGFuZ2UoZSkge1xuICAgICAgICBpZiAoZS5maWVsZCA9PT0gXCJvZmZzZXRcIikge1xuICAgICAgICAgICAgdGhpcy5hdHRyKGUuZmllbGQsIGUudmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGUuZmllbGQgPT09IFwiY29sb3JcIiB8fCBlLmZpZWxkID09PSBcIm9wYWNpdHlcIikge1xuICAgICAgICAgICAgdGhpcy5jc3MoXCJzdG9wLVwiICsgZS5maWVsZCwgZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdyYWRpZW50U3RvcE5vZGU7IiwiaW1wb3J0IEdyYWRpZW50U3RvcE5vZGUgZnJvbSAnLi9ncmFkaWVudC1zdG9wLW5vZGUnO1xuaW1wb3J0IEJhc2VOb2RlIGZyb20gJy4uL2NvcmUvYmFzZS1ub2RlJztcbmltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7XG5pbXBvcnQgcmVuZGVyQWxsQXR0ciBmcm9tICcuL3V0aWxzL3JlbmRlci1hbGwtYXR0cmlidXRlcyc7XG5cbmNsYXNzIEdyYWRpZW50Tm9kZSBleHRlbmRzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKHNyY0VsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIoc3JjRWxlbWVudCk7XG5cbiAgICAgICAgdGhpcy5pZCA9IHNyY0VsZW1lbnQuaWQ7XG5cbiAgICAgICAgdGhpcy5sb2FkU3RvcHMoKTtcbiAgICB9XG5cbiAgICBsb2FkU3RvcHMoKSB7XG4gICAgICAgIGNvbnN0IHN0b3BzID0gdGhpcy5zcmNFbGVtZW50LnN0b3BzO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHN0b3BzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGxldCBzdG9wTm9kZSA9IG5ldyBHcmFkaWVudFN0b3BOb2RlKHN0b3BzW2lkeF0pO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQoc3RvcE5vZGUpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBzdG9wTm9kZS5hdHRhY2hUbyhlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wdGlvbnNDaGFuZ2UoZSkge1xuICAgICAgICBpZiAoZS5maWVsZCA9PT0gXCJncmFkaWVudC5zdG9wc1wiKSB7XG4gICAgICAgICAgICBCYXNlTm9kZS5wcm90b3R5cGUuY2xlYXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMubG9hZFN0b3BzKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5maWVsZCA9PT0gXCJncmFkaWVudFwiKSB7XG4gICAgICAgICAgICB0aGlzLmFsbEF0dHIodGhpcy5tYXBDb29yZGluYXRlcygpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckNvb3JkaW5hdGVzKCkge1xuICAgICAgICByZXR1cm4gcmVuZGVyQWxsQXR0cih0aGlzLm1hcENvb3JkaW5hdGVzKCkpO1xuICAgIH1cblxuICAgIG1hcFNwYWNlKCkge1xuICAgICAgICByZXR1cm4gWyBcImdyYWRpZW50VW5pdHNcIiwgdGhpcy5zcmNFbGVtZW50LnVzZXJTcGFjZSgpID8gXCJ1c2VyU3BhY2VPblVzZVwiIDogXCJvYmplY3RCb3VuZGluZ0JveFwiIF07XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHcmFkaWVudE5vZGU7IiwiaW1wb3J0IEdyYWRpZW50Tm9kZSBmcm9tICcuL2dyYWRpZW50LW5vZGUnO1xuXG5jbGFzcyBMaW5lYXJHcmFkaWVudE5vZGUgZXh0ZW5kcyBHcmFkaWVudE5vZGUge1xuICAgIHRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gYDxsaW5lYXJHcmFkaWVudCBpZD0nJHsgdGhpcy5pZCB9JyAkeyB0aGlzLnJlbmRlckNvb3JkaW5hdGVzKCkgfT4keyB0aGlzLnJlbmRlckNoaWxkcmVuKCkgfTwvbGluZWFyR3JhZGllbnQ+YDtcbiAgICB9XG5cbiAgICBtYXBDb29yZGluYXRlcygpIHtcbiAgICAgICAgY29uc3Qgc3JjRWxlbWVudCA9IHRoaXMuc3JjRWxlbWVudDtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBzcmNFbGVtZW50LnN0YXJ0KCk7XG4gICAgICAgIGNvbnN0IGVuZCA9IHNyY0VsZW1lbnQuZW5kKCk7XG4gICAgICAgIGNvbnN0IGF0dHJzID0gW1xuICAgICAgICAgICAgWyBcIngxXCIsIHN0YXJ0LnggXSxcbiAgICAgICAgICAgIFsgXCJ5MVwiLCBzdGFydC55IF0sXG4gICAgICAgICAgICBbIFwieDJcIiwgZW5kLnggXSxcbiAgICAgICAgICAgIFsgXCJ5MlwiLCBlbmQueSBdLFxuICAgICAgICAgICAgdGhpcy5tYXBTcGFjZSgpXG4gICAgICAgIF07XG5cbiAgICAgICAgcmV0dXJuIGF0dHJzO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGluZWFyR3JhZGllbnROb2RlOyIsImltcG9ydCBHcmFkaWVudE5vZGUgZnJvbSAnLi9ncmFkaWVudC1ub2RlJztcblxuY2xhc3MgUmFkaWFsR3JhZGllbnROb2RlIGV4dGVuZHMgR3JhZGllbnROb2RlIHtcbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGA8cmFkaWFsR3JhZGllbnQgaWQ9JyR7IHRoaXMuaWQgfScgJHsgdGhpcy5yZW5kZXJDb29yZGluYXRlcygpfT4keyB0aGlzLnJlbmRlckNoaWxkcmVuKCkgfTwvcmFkaWFsR3JhZGllbnQ+YDtcbiAgICB9XG5cbiAgICBtYXBDb29yZGluYXRlcygpIHtcbiAgICAgICAgY29uc3Qgc3JjRWxlbWVudCA9IHRoaXMuc3JjRWxlbWVudDtcbiAgICAgICAgY29uc3QgY2VudGVyID0gc3JjRWxlbWVudC5jZW50ZXIoKTtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gc3JjRWxlbWVudC5yYWRpdXMoKTtcbiAgICAgICAgY29uc3QgYXR0cnMgPSBbXG4gICAgICAgICAgICBbIFwiY3hcIiwgY2VudGVyLnggXSxcbiAgICAgICAgICAgIFsgXCJjeVwiLCBjZW50ZXIueSBdLFxuICAgICAgICAgICAgWyBcInJcIiwgcmFkaXVzIF0sXG4gICAgICAgICAgICB0aGlzLm1hcFNwYWNlKClcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIGF0dHJzO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFkaWFsR3JhZGllbnROb2RlOyIsImltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7XG5cbmNsYXNzIENsaXBOb2RlIGV4dGVuZHMgTm9kZSB7XG4gICAgY29uc3RydWN0b3Ioc3JjRWxlbWVudCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuc3JjRWxlbWVudCA9IHNyY0VsZW1lbnQ7XG4gICAgICAgIHRoaXMuaWQgPSBzcmNFbGVtZW50LmlkO1xuXG4gICAgICAgIHRoaXMubG9hZChbIHNyY0VsZW1lbnQgXSk7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPGNsaXBQYXRoIGlkPSckeyB0aGlzLmlkIH0nPiR7IHRoaXMucmVuZGVyQ2hpbGRyZW4oKSB9PC9jbGlwUGF0aD5gO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xpcE5vZGU7IiwiaW1wb3J0IExpbmVhckdyYWRpZW50IGZyb20gJy4uL2dyYWRpZW50cy9saW5lYXItZ3JhZGllbnQnO1xuaW1wb3J0IFJhZGlhbEdyYWRpZW50IGZyb20gJy4uL2dyYWRpZW50cy9yYWRpYWwtZ3JhZGllbnQnO1xuaW1wb3J0IExpbmVhckdyYWRpZW50Tm9kZSBmcm9tICcuL2xpbmVhci1ncmFkaWVudC1ub2RlJztcbmltcG9ydCBSYWRpYWxHcmFkaWVudE5vZGUgZnJvbSAnLi9yYWRpYWwtZ3JhZGllbnQtbm9kZSc7XG5pbXBvcnQgTm9kZSBmcm9tICcuL25vZGUnO1xuaW1wb3J0IENsaXBOb2RlIGZyb20gJy4vY2xpcC1ub2RlJztcblxuY2xhc3MgRGVmaW5pdGlvbk5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uTWFwID0ge307XG4gICAgfVxuXG4gICAgYXR0YWNoVG8oZG9tRWxlbWVudCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb21FbGVtZW50O1xuICAgIH1cblxuICAgIHRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gYDxkZWZzPiR7IHRoaXMucmVuZGVyQ2hpbGRyZW4oKSB9PC9kZWZzPmA7XG4gICAgfVxuXG4gICAgZGVmaW5pdGlvbkNoYW5nZShlKSB7XG4gICAgICAgIGNvbnN0IHsgZGVmaW5pdGlvbnMsIGFjdGlvbiB9ID0gZTtcblxuICAgICAgICBpZiAoYWN0aW9uID09PSBcImFkZFwiKSB7XG4gICAgICAgICAgICB0aGlzLmFkZERlZmluaXRpb25zKGRlZmluaXRpb25zKTtcbiAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IFwicmVtb3ZlXCIpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlRGVmaW5pdGlvbih0eXBlLCBpdGVtKSB7XG4gICAgICAgIGxldCBub2RlVHlwZTtcbiAgICAgICAgaWYgKHR5cGUgPT09IFwiY2xpcFwiKSB7XG4gICAgICAgICAgICBub2RlVHlwZSA9IENsaXBOb2RlO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZmlsbFwiKSB7XG4gICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIExpbmVhckdyYWRpZW50KSB7XG4gICAgICAgICAgICAgICAgbm9kZVR5cGUgPSBMaW5lYXJHcmFkaWVudE5vZGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0gaW5zdGFuY2VvZiBSYWRpYWxHcmFkaWVudCkge1xuICAgICAgICAgICAgICAgIG5vZGVUeXBlID0gUmFkaWFsR3JhZGllbnROb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgbm9kZVR5cGUoaXRlbSk7XG4gICAgfVxuXG4gICAgYWRkRGVmaW5pdGlvbnMoZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgZm9yIChsZXQgZmllbGQgaW4gZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRGVmaW5pdGlvbihmaWVsZCwgZGVmaW5pdGlvbnNbZmllbGRdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZERlZmluaXRpb24odHlwZSwgc3JjRWxlbWVudCkge1xuICAgICAgICBjb25zdCB7IGVsZW1lbnQsIGRlZmluaXRpb25NYXAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGlkID0gc3JjRWxlbWVudC5pZDtcbiAgICAgICAgY29uc3QgbWFwSXRlbSA9IGRlZmluaXRpb25NYXBbaWRdO1xuICAgICAgICBpZiAoIW1hcEl0ZW0pIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmNyZWF0ZURlZmluaXRpb24odHlwZSwgc3JjRWxlbWVudCk7XG4gICAgICAgICAgICBkZWZpbml0aW9uTWFwW2lkXSA9IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBub2RlLFxuICAgICAgICAgICAgICAgIGNvdW50OiAxXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQobm9kZSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIG5vZGUuYXR0YWNoVG8odGhpcy5lbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1hcEl0ZW0uY291bnQrKztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZURlZmluaXRpb25zKGRlZmluaXRpb25zKSB7XG4gICAgICAgIGZvciAobGV0IGZpZWxkIGluIGRlZmluaXRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZURlZmluaXRpb24oZGVmaW5pdGlvbnNbZmllbGRdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZURlZmluaXRpb24oc3JjRWxlbWVudCkge1xuICAgICAgICBjb25zdCBkZWZpbml0aW9uTWFwID0gdGhpcy5kZWZpbml0aW9uTWFwO1xuICAgICAgICBjb25zdCBpZCA9IHNyY0VsZW1lbnQuaWQ7XG4gICAgICAgIGNvbnN0IG1hcEl0ZW0gPSBkZWZpbml0aW9uTWFwW2lkXTtcblxuICAgICAgICBpZiAobWFwSXRlbSkge1xuICAgICAgICAgICAgbWFwSXRlbS5jb3VudC0tO1xuICAgICAgICAgICAgaWYgKG1hcEl0ZW0uY291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSh0aGlzLmNoaWxkTm9kZXMuaW5kZXhPZihtYXBJdGVtLmVsZW1lbnQpLCAxKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZGVmaW5pdGlvbk1hcFtpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERlZmluaXRpb25Ob2RlOyIsImltcG9ydCBCYXNlTm9kZSBmcm9tICcuLi9jb3JlL2Jhc2Utbm9kZSc7XG5pbXBvcnQgTm9kZSBmcm9tICcuL25vZGUnO1xuaW1wb3J0IERlZmluaXRpb25Ob2RlIGZyb20gJy4vZGVmaW5pdGlvbi1ub2RlJztcblxuY2xhc3MgUm9vdE5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGVmcyA9IG5ldyBEZWZpbml0aW9uTm9kZSgpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvKGRvbUVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9tRWxlbWVudDtcbiAgICAgICAgdGhpcy5kZWZzLmF0dGFjaFRvKGRvbUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICBCYXNlTm9kZS5wcm90b3R5cGUuY2xlYXIuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmcy5yZW5kZXIoKSArIHRoaXMucmVuZGVyQ2hpbGRyZW4oKTtcbiAgICB9XG5cbiAgICBkZWZpbml0aW9uQ2hhbmdlKGUpIHtcbiAgICAgICAgdGhpcy5kZWZzLmRlZmluaXRpb25DaGFuZ2UoZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSb290Tm9kZTsiLCJpbXBvcnQgQmFzZVN1cmZhY2UgZnJvbSAnLi4vY29yZS9zdXJmYWNlJztcbmltcG9ydCBTdXJmYWNlRmFjdG9yeSBmcm9tICcuLi9jb3JlL3N1cmZhY2UtZmFjdG9yeSc7XG5pbXBvcnQgUm9vdE5vZGUgZnJvbSAnLi9yb290LW5vZGUnO1xuaW1wb3J0IEdyb3VwIGZyb20gJy4uL3NoYXBlcy9ncm91cCc7XG5pbXBvcnQgdHJhbnNmb3JtIGZyb20gJy4uL2dlb21ldHJ5L3RyYW5zZm9ybSc7XG5pbXBvcnQgcmVuZGVyU1ZHIGZyb20gJy4vdXRpbHMvcmVuZGVyLXN2Zyc7XG5pbXBvcnQgeyBTVkdfTlMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBiaW5kRXZlbnRzLCB1bmJpbmRFdmVudHMsIGVsZW1lbnRTdHlsZXMgfSBmcm9tICcuLi91dGlsJztcblxuY29uc3QgUlRMID0gJ3J0bCc7XG5cbmZ1bmN0aW9uIGFsaWduVG9TY3JlZW4oZWxlbWVudCkge1xuICAgIGxldCBjdG07XG5cbiAgICB0cnkge1xuICAgICAgICBjdG0gPSBlbGVtZW50LmdldFNjcmVlbkNUTSA/IGVsZW1lbnQuZ2V0U2NyZWVuQ1RNKCkgOiBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbiAgICBpZiAoY3RtKSB7XG4gICAgICAgIGNvbnN0IGxlZnQgPSAtIGN0bS5lICUgMTtcbiAgICAgICAgY29uc3QgdG9wID0gLSBjdG0uZiAlIDE7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZWxlbWVudC5zdHlsZTtcblxuICAgICAgICBpZiAobGVmdCAhPT0gMCB8fCB0b3AgIT09IDApIHtcbiAgICAgICAgICAgIHN0eWxlLmxlZnQgPSBsZWZ0ICsgXCJweFwiO1xuICAgICAgICAgICAgc3R5bGUudG9wID0gdG9wICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBTdXJmYWNlIGV4dGVuZHMgQmFzZVN1cmZhY2Uge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZWxlbWVudCwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5fcm9vdCA9IG5ldyBSb290Tm9kZShPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIHJ0bDogZWxlbWVudFN0eWxlcyhlbGVtZW50LCAnZGlyZWN0aW9uJykuZGlyZWN0aW9uID09PSBSVExcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zKSk7XG5cbiAgICAgICAgcmVuZGVyU1ZHKHRoaXMuZWxlbWVudCwgdGhpcy5fdGVtcGxhdGUoKSk7XG5cbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XG5cbiAgICAgICAgYWxpZ25Ub1NjcmVlbih0aGlzLl9yb290RWxlbWVudCk7XG5cbiAgICAgICAgdGhpcy5fcm9vdC5hdHRhY2hUbyh0aGlzLl9yb290RWxlbWVudCk7XG5cbiAgICAgICAgYmluZEV2ZW50cyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIGNsaWNrOiB0aGlzLl9jbGljayxcbiAgICAgICAgICAgIG1vdXNlb3ZlcjogdGhpcy5fbW91c2VlbnRlcixcbiAgICAgICAgICAgIG1vdXNlb3V0OiB0aGlzLl9tb3VzZWxlYXZlLFxuICAgICAgICAgICAgbW91c2Vtb3ZlOiB0aGlzLl9tb3VzZW1vdmVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5fcm9vdCkge1xuICAgICAgICAgICAgdGhpcy5fcm9vdC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLl9yb290ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHVuYmluZEV2ZW50cyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBjbGljazogdGhpcy5fY2xpY2ssXG4gICAgICAgICAgICAgICAgbW91c2VvdmVyOiB0aGlzLl9tb3VzZWVudGVyLFxuICAgICAgICAgICAgICAgIG1vdXNlb3V0OiB0aGlzLl9tb3VzZWxlYXZlLFxuICAgICAgICAgICAgICAgIG1vdXNlbW92ZTogdGhpcy5fbW91c2Vtb3ZlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICB0cmFuc2xhdGUob2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHZpZXdCb3ggPSBgJHsgTWF0aC5yb3VuZChvZmZzZXQueCkgfSAkeyBNYXRoLnJvdW5kKG9mZnNldC55KSB9ICR7IHRoaXMuX3NpemUud2lkdGggfSAkeyB0aGlzLl9zaXplLmhlaWdodCB9YDtcblxuICAgICAgICB0aGlzLl9vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50LnNldEF0dHJpYnV0ZShcInZpZXdCb3hcIiwgdmlld0JveCk7XG4gICAgfVxuXG4gICAgZHJhdyhlbGVtZW50KSB7XG4gICAgICAgIHN1cGVyLmRyYXcoZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3Jvb3QubG9hZChbIGVsZW1lbnQgXSk7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHN1cGVyLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX3Jvb3QuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBzdmcoKSB7XG4gICAgICAgIHJldHVybiBcIjw/eG1sIHZlcnNpb249JzEuMCcgPz5cIiArIHRoaXMuX3RlbXBsYXRlKCk7XG4gICAgfVxuXG4gICAgZXhwb3J0VmlzdWFsKCkge1xuICAgICAgICBsZXQgeyBfdmlzdWFsOiB2aXN1YWwsIF9vZmZzZXQ6IG9mZnNldCB9ID0gdGhpcztcblxuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgICBjb25zdCB3cmFwID0gbmV3IEdyb3VwKCk7XG4gICAgICAgICAgICB3cmFwLmNoaWxkcmVuLnB1c2godmlzdWFsKTtcblxuICAgICAgICAgICAgd3JhcC50cmFuc2Zvcm0oXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtKCkudHJhbnNsYXRlKC1vZmZzZXQueCwgLW9mZnNldC55KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdmlzdWFsID0gd3JhcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2aXN1YWw7XG4gICAgfVxuXG4gICAgX3Jlc2l6ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX29mZnNldCkge1xuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUodGhpcy5fb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF90ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGA8c3ZnIHN0eWxlPSd3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBvdmVyZmxvdzogaGlkZGVuOycgeG1sbnM9JyR7IFNWR19OUyB9JyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycgdmVyc2lvbj0nMS4xJz4keyB0aGlzLl9yb290LnJlbmRlcigpIH08L3N2Zz5gO1xuICAgIH1cbn1cblxuU3VyZmFjZS5wcm90b3R5cGUudHlwZSA9IFwic3ZnXCI7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcImh0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL2ZlYXR1cmUjQmFzaWNTdHJ1Y3R1cmVcIiwgXCIxLjFcIikpIHtcbiAgICBCYXNlU3VyZmFjZS5zdXBwb3J0LnN2ZyA9IHRydWU7XG4gICAgU3VyZmFjZUZhY3RvcnkuY3VycmVudC5yZWdpc3RlcihcInN2Z1wiLCBTdXJmYWNlLCAxMCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN1cmZhY2U7IiwiaW1wb3J0IE5vZGUgZnJvbSAnLi9ub2RlJztcbmltcG9ydCBOT0RFX01BUCBmcm9tICcuL25vZGUtbWFwJztcblxuY2xhc3MgR3JvdXBOb2RlIGV4dGVuZHMgTm9kZSB7XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPGckeyB0aGlzLnJlbmRlcklkKCkgKyB0aGlzLnJlbmRlclRyYW5zZm9ybSgpICsgdGhpcy5yZW5kZXJTdHlsZSgpICsgdGhpcy5yZW5kZXJPcGFjaXR5KCkgKyB0aGlzLnJlbmRlckRlZmluaXRpb25zKCkgfT4keyB0aGlzLnJlbmRlckNoaWxkcmVuKCkgfTwvZz5gO1xuICAgIH1cblxuICAgIG9wdGlvbnNDaGFuZ2UoZSkge1xuICAgICAgICBpZiAoZS5maWVsZCA9PT0gXCJ0cmFuc2Zvcm1cIikge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1DaGFuZ2UoZS52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5vcHRpb25zQ2hhbmdlKGUpO1xuICAgIH1cbn1cblxuTk9ERV9NQVAuR3JvdXAgPSBHcm91cE5vZGU7XG5cbmV4cG9ydCBkZWZhdWx0IEdyb3VwTm9kZTsiLCJjb25zdCBEQVNIX0FSUkFZUyA9IHtcbiAgICBkb3Q6IFsgMS41LCAzLjUgXSxcbiAgICBkYXNoOiBbIDQsIDMuNSBdLFxuICAgIGxvbmdkYXNoOiBbIDgsIDMuNSBdLFxuICAgIGRhc2hkb3Q6IFsgMy41LCAzLjUsIDEuNSwgMy41IF0sXG4gICAgbG9uZ2Rhc2hkb3Q6IFsgOCwgMy41LCAxLjUsIDMuNSBdLFxuICAgIGxvbmdkYXNoZG90ZG90OiBbIDgsIDMuNSwgMS41LCAzLjUsIDEuNSwgMy41IF1cbn07XG5cbmNvbnN0IFNPTElEID0gXCJzb2xpZFwiO1xuY29uc3QgQlVUVCA9IFwiYnV0dFwiO1xuXG5leHBvcnQgeyBEQVNIX0FSUkFZUywgU09MSUQsIEJVVFQgfTsiLCJpbXBvcnQgTm9kZSBmcm9tICcuL25vZGUnO1xuaW1wb3J0IHsgZGVmaW5lZCwgaXNUcmFuc3BhcmVudCB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgREFTSF9BUlJBWVMsIFNPTElELCBCVVRUIH0gZnJvbSAnLi4vY29yZS9jb25zdGFudHMnO1xuaW1wb3J0IHsgTk9ORSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCByZW5kZXJBbGxBdHRyIGZyb20gJy4vdXRpbHMvcmVuZGVyLWFsbC1hdHRyaWJ1dGVzJztcbmltcG9ydCByZW5kZXJBdHRyIGZyb20gJy4vdXRpbHMvcmVuZGVyLWF0dHJpYnV0ZSc7XG5pbXBvcnQgTk9ERV9NQVAgZnJvbSAnLi9ub2RlLW1hcCc7XG5cbmNvbnN0IEFUVFJJQlVURV9NQVAgPSB7XG4gICAgXCJmaWxsLm9wYWNpdHlcIjogXCJmaWxsLW9wYWNpdHlcIixcbiAgICBcInN0cm9rZS5jb2xvclwiOiBcInN0cm9rZVwiLFxuICAgIFwic3Ryb2tlLndpZHRoXCI6IFwic3Ryb2tlLXdpZHRoXCIsXG4gICAgXCJzdHJva2Uub3BhY2l0eVwiOiBcInN0cm9rZS1vcGFjaXR5XCJcbn07XG5jb25zdCBTUEFDRSA9IFwiIFwiO1xuXG5jbGFzcyBQYXRoTm9kZSBleHRlbmRzIE5vZGUge1xuXG4gICAgZ2VvbWV0cnlDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuYXR0cihcImRcIiwgdGhpcy5yZW5kZXJEYXRhKCkpO1xuICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICB9XG5cbiAgICBvcHRpb25zQ2hhbmdlKGUpIHtcbiAgICAgICAgc3dpdGNoIChlLmZpZWxkKSB7XG4gICAgICAgICAgICBjYXNlIFwiZmlsbFwiOlxuICAgICAgICAgICAgICAgIGlmIChlLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsQXR0cih0aGlzLm1hcEZpbGwoZS52YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cihcImZpbGxcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiZmlsbC5jb2xvclwiOlxuICAgICAgICAgICAgICAgIHRoaXMuYWxsQXR0cih0aGlzLm1hcEZpbGwoeyBjb2xvcjogZS52YWx1ZSB9KSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJzdHJva2VcIjpcbiAgICAgICAgICAgICAgICBpZiAoZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFsbEF0dHIodGhpcy5tYXBTdHJva2UoZS52YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cihcInN0cm9rZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJ0cmFuc2Zvcm1cIjpcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybUNoYW5nZShlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gQVRUUklCVVRFX01BUFtlLmZpZWxkXTtcbiAgICAgICAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHIobmFtZSwgZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIub3B0aW9uc0NoYW5nZShlKTtcbiAgICB9XG5cbiAgICBjb250ZW50KCkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLnNyY0VsZW1lbnQuY29udGVudCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpbnRQYXRoKHRoaXMuc3JjRWxlbWVudCk7XG4gICAgfVxuXG4gICAgcHJpbnRQYXRoKHBhdGgpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBwYXRoLnNlZ21lbnRzO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgICAgICAgICAgbGV0IG91dHB1dCwgY3VycmVudFR5cGU7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgc2VnbWVudFR5cGUgPSB0aGlzLnNlZ21lbnRUeXBlKHNlZ21lbnRzW2kgLSAxXSwgc2VnbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgIGlmIChzZWdtZW50VHlwZSAhPT0gY3VycmVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFR5cGUgPSBzZWdtZW50VHlwZTtcbiAgICAgICAgICAgICAgICAgICAgcGFydHMucHVzaChzZWdtZW50VHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHNlZ21lbnRUeXBlID09PSBcIkxcIikge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHRoaXMucHJpbnRQb2ludHMoc2VnbWVudHNbaV0uYW5jaG9yKCkpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHRoaXMucHJpbnRQb2ludHMoc2VnbWVudHNbaSAtIDFdLmNvbnRyb2xPdXQoKSwgc2VnbWVudHNbaV0uY29udHJvbEluKCksIHNlZ21lbnRzW2ldLmFuY2hvcigpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdXRwdXQgPSBcIk1cIiArIHRoaXMucHJpbnRQb2ludHMoc2VnbWVudHNbMF0uYW5jaG9yKCkpICsgU1BBQ0UgKyBwYXJ0cy5qb2luKFNQQUNFKTtcbiAgICAgICAgICAgIGlmIChwYXRoLm9wdGlvbnMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IFwiWlwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpbnRQb2ludHMoKSB7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IGFyZ3VtZW50cztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocG9pbnRzW2ldLnRvU3RyaW5nKDMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQuam9pbihcIiBcIik7XG4gICAgfVxuXG4gICAgc2VnbWVudFR5cGUoc2VnbWVudFN0YXJ0LCBzZWdtZW50RW5kKSB7XG4gICAgICAgIHJldHVybiBzZWdtZW50U3RhcnQuY29udHJvbE91dCgpICYmIHNlZ21lbnRFbmQuY29udHJvbEluKCkgPyBcIkNcIiA6IFwiTFwiO1xuICAgIH1cblxuICAgIG1hcFN0cm9rZShzdHJva2UpIHtcbiAgICAgICAgY29uc3QgYXR0cnMgPSBbXTtcblxuICAgICAgICBpZiAoc3Ryb2tlICYmICFpc1RyYW5zcGFyZW50KHN0cm9rZS5jb2xvcikpIHtcbiAgICAgICAgICAgIGF0dHJzLnB1c2goWyBcInN0cm9rZVwiLCBzdHJva2UuY29sb3IgXSk7XG4gICAgICAgICAgICBhdHRycy5wdXNoKFsgXCJzdHJva2Utd2lkdGhcIiwgc3Ryb2tlLndpZHRoIF0pO1xuICAgICAgICAgICAgYXR0cnMucHVzaChbIFwic3Ryb2tlLWxpbmVjYXBcIiwgdGhpcy5yZW5kZXJMaW5lY2FwKHN0cm9rZSkgXSk7XG4gICAgICAgICAgICBhdHRycy5wdXNoKFsgXCJzdHJva2UtbGluZWpvaW5cIiwgc3Ryb2tlLmxpbmVKb2luIF0pO1xuXG4gICAgICAgICAgICBpZiAoZGVmaW5lZChzdHJva2Uub3BhY2l0eSkpIHtcbiAgICAgICAgICAgICAgICBhdHRycy5wdXNoKFsgXCJzdHJva2Utb3BhY2l0eVwiLCBzdHJva2Uub3BhY2l0eSBdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRlZmluZWQoc3Ryb2tlLmRhc2hUeXBlKSkge1xuICAgICAgICAgICAgICAgIGF0dHJzLnB1c2goWyBcInN0cm9rZS1kYXNoYXJyYXlcIiwgdGhpcy5yZW5kZXJEYXNoVHlwZShzdHJva2UpIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXR0cnMucHVzaChbIFwic3Ryb2tlXCIsIE5PTkUgXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXR0cnM7XG4gICAgfVxuXG4gICAgcmVuZGVyU3Ryb2tlKCkge1xuICAgICAgICByZXR1cm4gcmVuZGVyQWxsQXR0cihcbiAgICAgICAgICAgIHRoaXMubWFwU3Ryb2tlKHRoaXMuc3JjRWxlbWVudC5vcHRpb25zLnN0cm9rZSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZW5kZXJEYXNoVHlwZShzdHJva2UpIHtcbiAgICAgICAgY29uc3QgeyBkYXNoVHlwZSwgd2lkdGggPSAxIH0gPSBzdHJva2U7XG5cbiAgICAgICAgaWYgKGRhc2hUeXBlICYmIGRhc2hUeXBlICE9PSBTT0xJRCkge1xuICAgICAgICAgICAgY29uc3QgZGFzaEFycmF5ID0gREFTSF9BUlJBWVNbZGFzaFR5cGUudG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXNoQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChkYXNoQXJyYXlbaV0gKiB3aWR0aCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuam9pbihcIiBcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJMaW5lY2FwKHN0cm9rZSkge1xuICAgICAgICBjb25zdCB7IGRhc2hUeXBlLCBsaW5lQ2FwIH0gPSBzdHJva2U7XG5cbiAgICAgICAgcmV0dXJuIChkYXNoVHlwZSAmJiBkYXNoVHlwZSAhPT0gXCJzb2xpZFwiKSA/IEJVVFQgOiBsaW5lQ2FwO1xuICAgIH1cblxuICAgIG1hcEZpbGwoZmlsbCkge1xuICAgICAgICBjb25zdCBhdHRycyA9IFtdO1xuICAgICAgICBpZiAoIShmaWxsICYmIGZpbGwubm9kZVR5cGUgPT09IFwiR3JhZGllbnRcIikpIHtcbiAgICAgICAgICAgIGlmIChmaWxsICYmICFpc1RyYW5zcGFyZW50KGZpbGwuY29sb3IpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnMucHVzaChbIFwiZmlsbFwiLCBmaWxsLmNvbG9yIF0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRlZmluZWQoZmlsbC5vcGFjaXR5KSkge1xuICAgICAgICAgICAgICAgICAgICBhdHRycy5wdXNoKFsgXCJmaWxsLW9wYWNpdHlcIiwgZmlsbC5vcGFjaXR5IF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXR0cnMucHVzaChbIFwiZmlsbFwiLCBOT05FIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF0dHJzO1xuICAgIH1cblxuICAgIHJlbmRlckZpbGwoKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJBbGxBdHRyKFxuICAgICAgICAgICAgdGhpcy5tYXBGaWxsKHRoaXMuc3JjRWxlbWVudC5vcHRpb25zLmZpbGwpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPHBhdGggJHsgdGhpcy5yZW5kZXJJZCgpIH0gJHsgdGhpcy5yZW5kZXJTdHlsZSgpIH0gJHsgdGhpcy5yZW5kZXJPcGFjaXR5KCkgfSAkeyByZW5kZXJBdHRyKCdkJywgdGhpcy5yZW5kZXJEYXRhKCkpIH1gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7IHRoaXMucmVuZGVyU3Ryb2tlKCkgfSR7IHRoaXMucmVuZGVyRmlsbCgpIH0keyB0aGlzLnJlbmRlckRlZmluaXRpb25zKCkgfSR7IHRoaXMucmVuZGVyVHJhbnNmb3JtKCkgfT48L3BhdGg+YDtcbiAgICB9XG59XG5cbk5PREVfTUFQLlBhdGggPSBQYXRoTm9kZTtcblxuZXhwb3J0IGRlZmF1bHQgUGF0aE5vZGU7IiwiaW1wb3J0IFBhdGhOb2RlIGZyb20gJy4vcGF0aC1ub2RlJztcbmltcG9ydCBOT0RFX01BUCBmcm9tICcuL25vZGUtbWFwJztcblxuY2xhc3MgQXJjTm9kZSBleHRlbmRzIFBhdGhOb2RlIHtcbiAgICByZW5kZXJEYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmludFBhdGgodGhpcy5zcmNFbGVtZW50LnRvUGF0aCgpKTtcbiAgICB9XG59XG5cbk5PREVfTUFQLkFyYyA9IEFyY05vZGU7XG5cbmV4cG9ydCBkZWZhdWx0IEFyY05vZGU7IiwiaW1wb3J0IFBhdGhOb2RlIGZyb20gJy4vcGF0aC1ub2RlJztcbmltcG9ydCBOT0RFX01BUCBmcm9tICcuL25vZGUtbWFwJztcblxuY2xhc3MgQ2lyY2xlTm9kZSBleHRlbmRzIFBhdGhOb2RlIHtcblxuICAgIGdlb21ldHJ5Q2hhbmdlKCkge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmNlbnRlcigpO1xuICAgICAgICB0aGlzLmF0dHIoXCJjeFwiLCBjZW50ZXIueCk7XG4gICAgICAgIHRoaXMuYXR0cihcImN5XCIsIGNlbnRlci55KTtcbiAgICAgICAgdGhpcy5hdHRyKFwiclwiLCB0aGlzLnJhZGl1cygpKTtcbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgY2VudGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcmNFbGVtZW50Lmdlb21ldHJ5KCkuY2VudGVyO1xuICAgIH1cblxuICAgIHJhZGl1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3JjRWxlbWVudC5nZW9tZXRyeSgpLnJhZGl1cztcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGA8Y2lyY2xlICR7IHRoaXMucmVuZGVySWQoKSB9ICR7IHRoaXMucmVuZGVyU3R5bGUoKSB9ICR7IHRoaXMucmVuZGVyT3BhY2l0eSgpIH1gICtcbiAgICAgICAgICAgICAgICAgICAgYGN4PSckeyB0aGlzLmNlbnRlcigpLnggfScgY3k9JyR7IHRoaXMuY2VudGVyKCkueSB9JyByPSckeyB0aGlzLnJhZGl1cygpIH0nYCArXG4gICAgICAgICAgICAgICAgICAgIGAkeyB0aGlzLnJlbmRlclN0cm9rZSgpIH0gJHsgdGhpcy5yZW5kZXJGaWxsKCkgfSAkeyB0aGlzLnJlbmRlckRlZmluaXRpb25zKCkgfWAgK1xuICAgICAgICAgICAgICAgICAgICBgJHsgdGhpcy5yZW5kZXJUcmFuc2Zvcm0oKSB9ID48L2NpcmNsZT5gO1xuICAgIH1cbn1cblxuTk9ERV9NQVAuQ2lyY2xlID0gQ2lyY2xlTm9kZTtcblxuZXhwb3J0IGRlZmF1bHQgQ2lyY2xlTm9kZTsiLCJpbXBvcnQgUGF0aE5vZGUgZnJvbSAnLi9wYXRoLW5vZGUnO1xuaW1wb3J0IE5PREVfTUFQIGZyb20gJy4vbm9kZS1tYXAnO1xuXG5jbGFzcyBSZWN0Tm9kZSBleHRlbmRzIFBhdGhOb2RlIHtcblxuICAgIGdlb21ldHJ5Q2hhbmdlKCkge1xuICAgICAgICBjb25zdCBnZW9tZXRyeSA9IHRoaXMuc3JjRWxlbWVudC5nZW9tZXRyeSgpO1xuICAgICAgICB0aGlzLmF0dHIoXCJ4XCIsIGdlb21ldHJ5Lm9yaWdpbi54KTtcbiAgICAgICAgdGhpcy5hdHRyKFwieVwiLCBnZW9tZXRyeS5vcmlnaW4ueSk7XG4gICAgICAgIHRoaXMuYXR0cihcIndpZHRoXCIsIGdlb21ldHJ5LnNpemUud2lkdGgpO1xuICAgICAgICB0aGlzLmF0dHIoXCJoZWlnaHRcIiwgZ2VvbWV0cnkuc2l6ZS5oZWlnaHQpO1xuICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICB9XG5cbiAgICBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zcmNFbGVtZW50Lmdlb21ldHJ5KCkuc2l6ZTtcbiAgICB9XG5cbiAgICBvcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNyY0VsZW1lbnQuZ2VvbWV0cnkoKS5vcmlnaW47XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPHJlY3QgJHsgdGhpcy5yZW5kZXJJZCgpIH0gJHsgdGhpcy5yZW5kZXJTdHlsZSgpIH0gJHsgdGhpcy5yZW5kZXJPcGFjaXR5KCkgfSB4PSckeyB0aGlzLm9yaWdpbigpLnggfScgeT0nJHsgdGhpcy5vcmlnaW4oKS55IH0nIGAgK1xuICAgICAgICAgICAgICAgICAgICBgd2lkdGg9JyR7IHRoaXMuc2l6ZSgpLndpZHRoIH0nIGhlaWdodD0nJHsgdGhpcy5zaXplKCkuaGVpZ2h0IH0nICR7IHRoaXMucmVuZGVyU3Ryb2tlKCkgfSBgICtcbiAgICAgICAgICAgICAgICAgICAgYCR7IHRoaXMucmVuZGVyRmlsbCgpIH0gJHsgdGhpcy5yZW5kZXJEZWZpbml0aW9ucygpIH0gJHsgdGhpcy5yZW5kZXJUcmFuc2Zvcm0oKSB9IC8+YDtcbiAgICB9XG59XG5cbk5PREVfTUFQLlJlY3QgPSBSZWN0Tm9kZTtcblxuZXhwb3J0IGRlZmF1bHQgUmVjdE5vZGU7IiwiaW1wb3J0IFBhdGhOb2RlIGZyb20gJy4vcGF0aC1ub2RlJztcbmltcG9ydCBOT0RFX01BUCBmcm9tICcuL25vZGUtbWFwJztcbmltcG9ydCByZW5kZXJBbGxBdHRyIGZyb20gJy4vdXRpbHMvcmVuZGVyLWFsbC1hdHRyaWJ1dGVzJztcbmltcG9ydCB7IGh0bWxFbmNvZGUgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBJbWFnZU5vZGUgZXh0ZW5kcyBQYXRoTm9kZSB7XG5cbiAgICBnZW9tZXRyeUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5hbGxBdHRyKHRoaXMubWFwUG9zaXRpb24oKSk7XG4gICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgIH1cblxuICAgIG9wdGlvbnNDaGFuZ2UoZSkge1xuICAgICAgICBpZiAoZS5maWVsZCA9PT0gXCJzcmNcIikge1xuICAgICAgICAgICAgdGhpcy5hbGxBdHRyKHRoaXMubWFwU291cmNlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIub3B0aW9uc0NoYW5nZShlKTtcbiAgICB9XG5cbiAgICBtYXBQb3NpdGlvbigpIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMuc3JjRWxlbWVudC5yZWN0KCk7XG4gICAgICAgIGNvbnN0IHRsID0gcmVjdC50b3BMZWZ0KCk7XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFsgXCJ4XCIsIHRsLnggXSxcbiAgICAgICAgICAgIFsgXCJ5XCIsIHRsLnkgXSxcbiAgICAgICAgICAgIFsgXCJ3aWR0aFwiLCByZWN0LndpZHRoKCkgKyBcInB4XCIgXSxcbiAgICAgICAgICAgIFsgXCJoZWlnaHRcIiwgcmVjdC5oZWlnaHQoKSArIFwicHhcIiBdXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgcmVuZGVyUG9zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJBbGxBdHRyKHRoaXMubWFwUG9zaXRpb24oKSk7XG4gICAgfVxuXG4gICAgbWFwU291cmNlKGVuY29kZSkge1xuICAgICAgICBsZXQgc3JjID0gdGhpcy5zcmNFbGVtZW50LnNyYygpO1xuXG4gICAgICAgIGlmIChlbmNvZGUpIHtcbiAgICAgICAgICAgIHNyYyA9IGh0bWxFbmNvZGUoc3JjKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbIFsgXCJ4bGluazpocmVmXCIsIHNyYyBdIF07XG4gICAgfVxuXG4gICAgcmVuZGVyU291cmNlKCkge1xuICAgICAgICByZXR1cm4gcmVuZGVyQWxsQXR0cih0aGlzLm1hcFNvdXJjZSh0cnVlKSk7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPGltYWdlIHByZXNlcnZlQXNwZWN0UmF0aW89J25vbmUnICR7IHRoaXMucmVuZGVySWQoKSB9ICR7IHRoaXMucmVuZGVyU3R5bGUoKSB9ICR7IHRoaXMucmVuZGVyVHJhbnNmb3JtKCl9ICR7IHRoaXMucmVuZGVyT3BhY2l0eSgpIH1gICtcbiAgICAgICAgICAgICAgIGAkeyB0aGlzLnJlbmRlclBvc2l0aW9uKCkgfSAkeyB0aGlzLnJlbmRlclNvdXJjZSgpIH0gJHsgdGhpcy5yZW5kZXJEZWZpbml0aW9ucygpfT5gICtcbiAgICAgICAgICAgICAgIGA8L2ltYWdlPmA7XG4gICAgfVxufVxuXG5OT0RFX01BUC5JbWFnZSA9IEltYWdlTm9kZTtcblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2VOb2RlOyIsImltcG9ydCBQYXRoTm9kZSBmcm9tICcuL3BhdGgtbm9kZSc7XG5pbXBvcnQgcmVuZGVyU3R5bGUgZnJvbSAnLi91dGlscy9yZW5kZXItc3R5bGUnO1xuaW1wb3J0IHJlbmRlckF0dHIgZnJvbSAnLi91dGlscy9yZW5kZXItYXR0cmlidXRlJztcbmltcG9ydCBOT0RFX01BUCBmcm9tICcuL25vZGUtbWFwJztcbmltcG9ydCB7IGh0bWxFbmNvZGUsIHN1cHBvcnQgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgbm9ybWFsaXplVGV4dCB9IGZyb20gJy4uL3RleHQtbWV0cmljcyc7XG5cbmNvbnN0IEVOVElUWV9SRUdFWCA9IC8mKD86W2EtekEtWl0rfCNcXGQrKTsvZztcblxuZnVuY3Rpb24gZGVjb2RlRW50aXRpZXModGV4dCkge1xuICAgIGlmICghdGV4dCB8fCB0eXBlb2YgdGV4dCAhPT0gXCJzdHJpbmdcIiB8fCAhRU5USVRZX1JFR0VYLnRlc3QodGV4dCkpIHtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgY29uc3QgZWxlbWVudCA9IGRlY29kZUVudGl0aWVzLl9lbGVtZW50O1xuICAgIEVOVElUWV9SRUdFWC5sYXN0SW5kZXggPSAwO1xuXG4gICAgcmV0dXJuIHRleHQucmVwbGFjZShFTlRJVFlfUkVHRVgsIChtYXRjaCkgPT4ge1xuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IG1hdGNoO1xuXG4gICAgICAgIHJldHVybiBlbGVtZW50LnRleHRDb250ZW50IHx8IGVsZW1lbnQuaW5uZXJUZXh0O1xuICAgIH0pO1xufVxuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZGVjb2RlRW50aXRpZXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbn1cblxuY2xhc3MgVGV4dE5vZGUgZXh0ZW5kcyBQYXRoTm9kZSB7XG5cbiAgICBnZW9tZXRyeUNoYW5nZSgpIHtcbiAgICAgICAgY29uc3QgcG9zID0gdGhpcy5wb3MoKTtcbiAgICAgICAgdGhpcy5hdHRyKFwieFwiLCBwb3MueCk7XG4gICAgICAgIHRoaXMuYXR0cihcInlcIiwgcG9zLnkpO1xuICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICB9XG5cbiAgICBvcHRpb25zQ2hhbmdlKGUpIHtcbiAgICAgICAgaWYgKGUuZmllbGQgPT09IFwiZm9udFwiKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHIoXCJzdHlsZVwiLCByZW5kZXJTdHlsZSh0aGlzLm1hcFN0eWxlKCkpKTtcbiAgICAgICAgICAgIHRoaXMuZ2VvbWV0cnlDaGFuZ2UoKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLmZpZWxkID09PSBcImNvbnRlbnRcIikge1xuICAgICAgICAgICAgc3VwZXIuY29udGVudCh0aGlzLnNyY0VsZW1lbnQuY29udGVudCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLm9wdGlvbnNDaGFuZ2UoZSk7XG4gICAgfVxuXG4gICAgbWFwU3R5bGUoZW5jb2RlKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gc3VwZXIubWFwU3R5bGUoZW5jb2RlKTtcbiAgICAgICAgbGV0IGZvbnQgPSB0aGlzLnNyY0VsZW1lbnQub3B0aW9ucy5mb250O1xuXG4gICAgICAgIGlmIChlbmNvZGUpIHtcbiAgICAgICAgICAgIGZvbnQgPSBodG1sRW5jb2RlKGZvbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGUucHVzaChbIFwiZm9udFwiLCBmb250IF0sIFsgXCJ3aGl0ZS1zcGFjZVwiLCBcInByZVwiIF0pO1xuXG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG5cbiAgICBwb3MoKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMuc3JjRWxlbWVudC5wb3NpdGlvbigpO1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5zcmNFbGVtZW50Lm1lYXN1cmUoKTtcbiAgICAgICAgcmV0dXJuIHBvcy5jbG9uZSgpLnNldFkocG9zLnkgKyBzaXplLmJhc2VsaW5lKTtcbiAgICB9XG5cbiAgICByZW5kZXJDb250ZW50KCkge1xuICAgICAgICBsZXQgY29udGVudCA9IHRoaXMuc3JjRWxlbWVudC5jb250ZW50KCk7XG4gICAgICAgIGNvbnRlbnQgPSBkZWNvZGVFbnRpdGllcyhjb250ZW50KTtcbiAgICAgICAgY29udGVudCA9IGh0bWxFbmNvZGUoY29udGVudCk7XG5cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVRleHQoY29udGVudCk7XG4gICAgfVxuXG4gICAgcmVuZGVyVGV4dEFuY2hvcigpIHtcbiAgICAgICAgbGV0IGFuY2hvcjtcblxuICAgICAgICBpZiAoKHRoaXMub3B0aW9ucyB8fCB7fSkucnRsICYmICEoc3VwcG9ydC5icm93c2VyLm1zaWUgfHwgc3VwcG9ydC5icm93c2VyLmVkZ2UpKSB7XG4gICAgICAgICAgICBhbmNob3IgPSAnZW5kJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJBdHRyKFwidGV4dC1hbmNob3JcIiwgYW5jaG9yKTtcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGA8dGV4dCAkeyB0aGlzLnJlbmRlcklkKCkgfSAkeyB0aGlzLnJlbmRlclRleHRBbmNob3IoKSB9ICR7IHRoaXMucmVuZGVyU3R5bGUoKSB9ICR7IHRoaXMucmVuZGVyT3BhY2l0eSgpIH1gICtcbiAgICAgICAgICAgICAgICAgICAgYHg9JyR7IHRoaXMucG9zKCkueCB9JyB5PSckeyB0aGlzLnBvcygpLnkgfScgJHsgdGhpcy5yZW5kZXJTdHJva2UoKSB9ICR7IHRoaXMucmVuZGVyVHJhbnNmb3JtKCkgfSAkeyB0aGlzLnJlbmRlckRlZmluaXRpb25zKCkgfWAgK1xuICAgICAgICAgICAgICAgICAgICBgJHsgdGhpcy5yZW5kZXJGaWxsKCkgfT4keyB0aGlzLnJlbmRlckNvbnRlbnQoKSB9PC90ZXh0PmA7XG4gICAgfVxufVxuXG5OT0RFX01BUC5UZXh0ID0gVGV4dE5vZGU7XG5cbmV4cG9ydCBkZWZhdWx0IFRleHROb2RlOyIsImltcG9ydCBQYXRoTm9kZSBmcm9tICcuL3BhdGgtbm9kZSc7XG5pbXBvcnQgTk9ERV9NQVAgZnJvbSAnLi9ub2RlLW1hcCc7XG5cbmNsYXNzIE11bHRpUGF0aE5vZGUgZXh0ZW5kcyBQYXRoTm9kZSB7XG4gICAgcmVuZGVyRGF0YSgpIHtcbiAgICAgICAgY29uc3QgcGF0aHMgPSB0aGlzLnNyY0VsZW1lbnQucGF0aHM7XG5cbiAgICAgICAgaWYgKHBhdGhzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5wcmludFBhdGgocGF0aHNbaV0pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKFwiIFwiKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuTk9ERV9NQVAuTXVsdGlQYXRoID0gTXVsdGlQYXRoTm9kZTtcblxuZXhwb3J0IGRlZmF1bHQgTXVsdGlQYXRoTm9kZTsiLCJpbXBvcnQgUm9vdE5vZGUgZnJvbSAnLi9yb290LW5vZGUnO1xuaW1wb3J0IHsgR3JvdXAgfSBmcm9tICcuLi9zaGFwZXMnO1xuaW1wb3J0IHsgdHJhbnNmb3JtIH0gZnJvbSAnLi4vZ2VvbWV0cnknO1xuaW1wb3J0IHsgU1ZHX05TIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHBvcnRHcm91cChncm91cCkge1xuICAgIGNvbnN0IHJvb3QgPSBuZXcgUm9vdE5vZGUoe1xuICAgICAgICBza2lwQmFzZUhyZWY6IHRydWVcbiAgICB9KTtcbiAgICBjb25zdCBiYm94ID0gZ3JvdXAuY2xpcHBlZEJCb3goKTtcbiAgICBsZXQgcm9vdEdyb3VwID0gZ3JvdXA7XG5cbiAgICBpZiAoYmJveCkge1xuICAgICAgICBjb25zdCBvcmlnaW4gPSBiYm94LmdldE9yaWdpbigpO1xuICAgICAgICBjb25zdCBleHBvcnRSb290ID0gbmV3IEdyb3VwKCk7XG4gICAgICAgIGV4cG9ydFJvb3QudHJhbnNmb3JtKHRyYW5zZm9ybSgpLnRyYW5zbGF0ZSgtb3JpZ2luLngsIC1vcmlnaW4ueSkpO1xuICAgICAgICBleHBvcnRSb290LmNoaWxkcmVuLnB1c2goZ3JvdXApO1xuICAgICAgICByb290R3JvdXAgPSBleHBvcnRSb290O1xuICAgIH1cblxuICAgIHJvb3QubG9hZChbIHJvb3RHcm91cCBdKTtcblxuICAgIGNvbnN0IHN2ZyA9IGA8P3htbCB2ZXJzaW9uPScxLjAnID8+PHN2ZyB4bWxucz0nJHsgU1ZHX05TIH0nIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB2ZXJzaW9uPScxLjEnPiR7IHJvb3QucmVuZGVyKCkgfTwvc3ZnPmA7XG5cbiAgICByb290LmRlc3Ryb3koKTtcblxuICAgIHJldHVybiBzdmc7XG59IiwiY29uc3QgTk9ERV9NQVAgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgTk9ERV9NQVA7IiwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXJQYXRoKGN0eCwgcGF0aCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zZWdtZW50cztcblxuICAgIGlmIChzZWdtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBzZWdtZW50ID0gc2VnbWVudHNbMF07XG4gICAgbGV0IGFuY2hvciA9IHNlZ21lbnQuYW5jaG9yKCk7XG4gICAgY3R4Lm1vdmVUbyhhbmNob3IueCwgYW5jaG9yLnkpO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgICAgIGFuY2hvciA9IHNlZ21lbnQuYW5jaG9yKCk7XG5cbiAgICAgICAgbGV0IHByZXZTZWcgPSBzZWdtZW50c1tpIC0gMV07XG4gICAgICAgIGxldCBwcmV2T3V0ID0gcHJldlNlZy5jb250cm9sT3V0KCk7XG4gICAgICAgIGxldCBjb250cm9sSW4gPSBzZWdtZW50LmNvbnRyb2xJbigpO1xuXG4gICAgICAgIGlmIChwcmV2T3V0ICYmIGNvbnRyb2xJbikge1xuICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8ocHJldk91dC54LCBwcmV2T3V0LnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sSW4ueCwgY29udHJvbEluLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3IueCwgYW5jaG9yLnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhhbmNob3IueCwgYW5jaG9yLnkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhdGgub3B0aW9ucy5jbG9zZWQpIHtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH1cbn0iLCJpbXBvcnQgQmFzZU5vZGUgZnJvbSAnLi4vY29yZS9iYXNlLW5vZGUnO1xuaW1wb3J0IE5PREVfTUFQIGZyb20gJy4vbm9kZS1tYXAnO1xuaW1wb3J0IHJlbmRlclBhdGggZnJvbSAnLi91dGlscy9yZW5kZXItcGF0aCc7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNsYXNzIE5vZGUgZXh0ZW5kcyBCYXNlTm9kZSB7XG4gICAgY29uc3RydWN0b3Ioc3JjRWxlbWVudCkge1xuICAgICAgICBzdXBlcihzcmNFbGVtZW50KTtcbiAgICAgICAgaWYgKHNyY0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdENsaXAoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluaXRDbGlwKCkge1xuICAgICAgICBjb25zdCBjbGlwID0gdGhpcy5zcmNFbGVtZW50LmNsaXAoKTtcbiAgICAgICAgaWYgKGNsaXApIHtcbiAgICAgICAgICAgIHRoaXMuY2xpcCA9IGNsaXA7XG4gICAgICAgICAgICBjbGlwLmFkZE9ic2VydmVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnNyY0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc3JjRWxlbWVudC5yZW1vdmVPYnNlcnZlcih0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2xlYXJDbGlwKCk7XG5cbiAgICAgICAgc3VwZXIuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBjbGVhckNsaXAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsaXApIHtcbiAgICAgICAgICAgIHRoaXMuY2xpcC5yZW1vdmVPYnNlcnZlcih0aGlzKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNsaXA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRDbGlwKGN0eCkge1xuICAgICAgICBpZiAodGhpcy5jbGlwKSB7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICByZW5kZXJQYXRoKGN0eCwgdGhpcy5jbGlwKTtcbiAgICAgICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvcHRpb25zQ2hhbmdlKGUpIHtcbiAgICAgICAgaWYgKGUuZmllbGQgPT09IFwiY2xpcFwiKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2xpcCgpO1xuICAgICAgICAgICAgdGhpcy5pbml0Q2xpcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIub3B0aW9uc0NoYW5nZShlKTtcbiAgICB9XG5cbiAgICBzZXRUcmFuc2Zvcm0oY3R4KSB7XG4gICAgICAgIGlmICh0aGlzLnNyY0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHRoaXMuc3JjRWxlbWVudC50cmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgICAgICBjdHgudHJhbnNmb3JtLmFwcGx5KGN0eCwgdHJhbnNmb3JtLm1hdHJpeCgpLnRvQXJyYXkoNikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9hZEVsZW1lbnRzKGVsZW1lbnRzLCBwb3MsIGNvcnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHNyY0VsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICAgIGxldCBjaGlsZHJlbiA9IHNyY0VsZW1lbnQuY2hpbGRyZW47XG5cbiAgICAgICAgICAgIGxldCBjaGlsZE5vZGUgPSBuZXcgTk9ERV9NQVBbc3JjRWxlbWVudC5ub2RlVHlwZV0oc3JjRWxlbWVudCwgY29ycyk7XG5cbiAgICAgICAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY2hpbGROb2RlLmxvYWQoY2hpbGRyZW4sIHBvcywgY29ycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHBvcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydEF0KGNoaWxkTm9kZSwgcG9zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQoY2hpbGROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvYWQoZWxlbWVudHMsIHBvcywgY29ycykge1xuICAgICAgICB0aGlzLmxvYWRFbGVtZW50cyhlbGVtZW50cywgcG9zLCBjb3JzKTtcblxuICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICB9XG5cbiAgICBzZXRPcGFjaXR5KGN0eCkge1xuICAgICAgICBpZiAodGhpcy5zcmNFbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBvcGFjaXR5ID0gdGhpcy5zcmNFbGVtZW50Lm9wYWNpdHkoKTtcbiAgICAgICAgICAgIGlmIChkZWZpbmVkKG9wYWNpdHkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxBbHBoYShjdHgsIG9wYWNpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2xvYmFsQWxwaGEoY3R4LCB2YWx1ZSkge1xuICAgICAgICBsZXQgb3BhY3RpdHkgPSB2YWx1ZTtcbiAgICAgICAgaWYgKG9wYWN0aXR5ICYmIGN0eC5nbG9iYWxBbHBoYSkge1xuICAgICAgICAgICAgb3BhY3RpdHkgKj0gY3R4Lmdsb2JhbEFscGhhO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IG9wYWN0aXR5O1xuICAgIH1cblxuICAgIHZpc2libGUoKSB7XG4gICAgICAgIGNvbnN0IHNyYyA9IHRoaXMuc3JjRWxlbWVudDtcbiAgICAgICAgcmV0dXJuICFzcmMgfHwgKHNyYyAmJiBzcmMub3B0aW9ucy52aXNpYmxlICE9PSBmYWxzZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOb2RlOyIsImltcG9ydCBOb2RlIGZyb20gJy4vbm9kZSc7XG5pbXBvcnQgVHJhdmVyc2FibGUgZnJvbSAnLi4vbWl4aW5zL3RyYXZlcnNhYmxlJztcbmltcG9ydCBOT0RFX01BUCBmcm9tICcuL25vZGUtbWFwJztcblxuY2xhc3MgR3JvdXBOb2RlIGV4dGVuZHMgTm9kZSB7XG5cbiAgICByZW5kZXJUbyhjdHgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpc2libGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnNhdmUoKTtcblxuICAgICAgICB0aGlzLnNldFRyYW5zZm9ybShjdHgpO1xuICAgICAgICB0aGlzLnNldENsaXAoY3R4KTtcbiAgICAgICAgdGhpcy5zZXRPcGFjaXR5KGN0eCk7XG5cbiAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IHRoaXMuY2hpbGROb2RlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBjaGlsZE5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKGNoaWxkLnZpc2libGUoKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkLnJlbmRlclRvKGN0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbn1cblxuVHJhdmVyc2FibGUuZXh0ZW5kKEdyb3VwTm9kZS5wcm90b3R5cGUsIFwiY2hpbGROb2Rlc1wiKTtcblxuTk9ERV9NQVAuR3JvdXAgPSBHcm91cE5vZGU7XG5cbmV4cG9ydCBkZWZhdWx0IEdyb3VwTm9kZTsiLCJpbXBvcnQgR3JvdXBOb2RlIGZyb20gJy4vZ3JvdXAtbm9kZSc7XG5pbXBvcnQgVHJhdmVyc2FibGUgZnJvbSAnLi4vbWl4aW5zL3RyYXZlcnNhYmxlJztcbmltcG9ydCB7IGFuaW1hdGlvbkZyYW1lLCB0aHJvdHRsZSB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNvbnN0IEZSQU1FX0RFTEFZID0gMTAwMCAvIDYwO1xuXG5jbGFzcyBSb290Tm9kZSBleHRlbmRzIEdyb3VwTm9kZSB7XG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBzaXplKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgICAgIHRoaXMuY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblxuICAgICAgICBjb25zdCBpbnZhbGlkYXRlSGFuZGxlciA9IHRoaXMuX2ludmFsaWRhdGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlID0gdGhyb3R0bGUoKCkgPT4ge1xuICAgICAgICAgICAgYW5pbWF0aW9uRnJhbWUoaW52YWxpZGF0ZUhhbmRsZXIpO1xuICAgICAgICB9LCBGUkFNRV9ERUxBWSk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IG51bGw7XG4gICAgICAgIHRoaXMuY3R4ID0gbnVsbDtcbiAgICB9XG5cbiAgICBsb2FkKGVsZW1lbnRzLCBwb3MsIGNvcnMpIHtcbiAgICAgICAgdGhpcy5sb2FkRWxlbWVudHMoZWxlbWVudHMsIHBvcywgY29ycyk7XG4gICAgICAgIHRoaXMuX2ludmFsaWRhdGUoKTtcbiAgICB9XG5cbiAgICBfcmVzY2FsZShzY2FsZSkge1xuICAgICAgICBjb25zdCB7IGNhbnZhcywgc2l6ZSB9ID0gdGhpcztcbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZS53aWR0aCAqIHNjYWxlO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQgKiBzY2FsZTtcbiAgICAgICAgdGhpcy5jdHguc2NhbGUoc2NhbGUsIHNjYWxlKTtcbiAgICB9XG5cbiAgICBfZGV2aWNlUGl4ZWxSYXRpbygpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgX2ludmFsaWRhdGUob3B0aW9ucykge1xuICAgICAgICBpZiAoIXRoaXMuY3R4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaXhlZFNjYWxlID0gb3B0aW9ucyAmJiBvcHRpb25zLmZpeGVkU2NhbGU7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gZml4ZWRTY2FsZSA/IDEgOiB0aGlzLl9kZXZpY2VQaXhlbFJhdGlvKCk7XG4gICAgICAgIHRoaXMuX3Jlc2NhbGUoc2NhbGUpO1xuXG4gICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5yZW5kZXJUbyh0aGlzLmN0eCk7XG4gICAgfVxufVxuXG5UcmF2ZXJzYWJsZS5leHRlbmQoUm9vdE5vZGUucHJvdG90eXBlLCBcImNoaWxkTm9kZXNcIik7XG5cbmV4cG9ydCBkZWZhdWx0IFJvb3ROb2RlO1xuIiwiaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBRdWFkUm9vdCBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLnNoYXBlcyA9IFtdO1xuICAgIH1cblxuICAgIF9hZGQoc2hhcGUsIGJib3gpIHtcbiAgICAgICAgdGhpcy5zaGFwZXMucHVzaCh7XG4gICAgICAgICAgICBiYm94OiBiYm94LFxuICAgICAgICAgICAgc2hhcGU6IHNoYXBlXG4gICAgICAgIH0pO1xuICAgICAgICBzaGFwZS5fcXVhZE5vZGUgPSB0aGlzO1xuICAgIH1cblxuICAgIHBvaW50U2hhcGVzKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHNoYXBlcyA9IHRoaXMuc2hhcGVzO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBzaGFwZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKHNoYXBlc1tpZHhdLmJib3guY29udGFpbnNQb2ludChwb2ludCkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzaGFwZXNbaWR4XS5zaGFwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBpbnNlcnQoc2hhcGUsIGJib3gpIHtcbiAgICAgICAgdGhpcy5fYWRkKHNoYXBlLCBiYm94KTtcbiAgICB9XG5cbiAgICByZW1vdmUoc2hhcGUpIHtcbiAgICAgICAgY29uc3Qgc2hhcGVzID0gdGhpcy5zaGFwZXM7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHNoYXBlcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKHNoYXBlc1tpZHhdLnNoYXBlID09PSBzaGFwZSkge1xuICAgICAgICAgICAgICAgIHNoYXBlcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUXVhZFJvb3Q7IiwiaW1wb3J0IFF1YWRSb290IGZyb20gJy4vcXVhZC1yb290JztcbmltcG9ydCB7IFJlY3QgfSBmcm9tICcuLi9nZW9tZXRyeSc7XG5pbXBvcnQgeyBhcHBlbmQgfSBmcm9tICcuLi91dGlsJztcblxuY2xhc3MgUXVhZE5vZGUgZXh0ZW5kcyBRdWFkUm9vdCB7XG4gICAgY29uc3RydWN0b3IocmVjdCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgICAgIHRoaXMucmVjdCA9IHJlY3Q7XG4gICAgfVxuXG4gICAgaW5Cb3VuZHMocmVjdCkge1xuICAgICAgICBjb25zdCBub2RlUmVjdCA9IHRoaXMucmVjdDtcbiAgICAgICAgY29uc3Qgbm9kZUJvdHRvbVJpZ2h0ID0gbm9kZVJlY3QuYm90dG9tUmlnaHQoKTtcbiAgICAgICAgY29uc3QgYm90dG9tUmlnaHQgPSByZWN0LmJvdHRvbVJpZ2h0KCk7XG4gICAgICAgIGNvbnN0IGluQm91bmRzID0gbm9kZVJlY3Qub3JpZ2luLnggPD0gcmVjdC5vcmlnaW4ueCAmJiBub2RlUmVjdC5vcmlnaW4ueSA8PSByZWN0Lm9yaWdpbi55ICYmIGJvdHRvbVJpZ2h0LnggPD0gbm9kZUJvdHRvbVJpZ2h0LnggJiZcbiAgICAgICAgICAgIGJvdHRvbVJpZ2h0LnkgPD0gbm9kZUJvdHRvbVJpZ2h0Lnk7XG4gICAgICAgIHJldHVybiBpbkJvdW5kcztcbiAgICB9XG5cbiAgICBwb2ludFNoYXBlcyhwb2ludCkge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIucG9pbnRTaGFwZXMocG9pbnQpO1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBhcHBlbmQocmVzdWx0LCBjaGlsZHJlbltpZHhdLnBvaW50U2hhcGVzKHBvaW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBpbnNlcnQoc2hhcGUsIGJib3gpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICBsZXQgaW5zZXJ0ZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5pbkJvdW5kcyhiYm94KSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hhcGVzLmxlbmd0aCA8IDQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGQoc2hhcGUsIGJib3gpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0Q2hpbGRyZW4oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBjaGlsZHJlbi5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbltpZHhdLmluc2VydChzaGFwZSwgYmJveCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFpbnNlcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGQoc2hhcGUsIGJib3gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluc2VydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnNlcnRlZDtcbiAgICB9XG5cbiAgICBfaW5pdENoaWxkcmVuKCkge1xuICAgICAgICBjb25zdCB7IHJlY3QsIGNoaWxkcmVuIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjZW50ZXIgPSByZWN0LmNlbnRlcigpO1xuICAgICAgICBjb25zdCBoYWxmV2lkdGggPSByZWN0LndpZHRoKCkgLyAyO1xuICAgICAgICBjb25zdCBoYWxmSGVpZ2h0ID0gcmVjdC5oZWlnaHQoKSAvIDI7XG5cbiAgICAgICAgY2hpbGRyZW4ucHVzaChcbiAgICAgICAgICAgIG5ldyBRdWFkTm9kZShuZXcgUmVjdChbIHJlY3Qub3JpZ2luLngsIHJlY3Qub3JpZ2luLnkgXSwgWyBoYWxmV2lkdGgsIGhhbGZIZWlnaHQgXSkpLFxuICAgICAgICAgICAgbmV3IFF1YWROb2RlKG5ldyBSZWN0KFsgY2VudGVyLngsIHJlY3Qub3JpZ2luLnkgXSwgWyBoYWxmV2lkdGgsIGhhbGZIZWlnaHQgXSkpLFxuICAgICAgICAgICAgbmV3IFF1YWROb2RlKG5ldyBSZWN0KFsgcmVjdC5vcmlnaW4ueCwgY2VudGVyLnkgXSwgWyBoYWxmV2lkdGgsIGhhbGZIZWlnaHQgXSkpLFxuICAgICAgICAgICAgbmV3IFF1YWROb2RlKG5ldyBSZWN0KFsgY2VudGVyLngsIGNlbnRlci55IF0sIFsgaGFsZldpZHRoLCBoYWxmSGVpZ2h0IF0pKVxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUXVhZE5vZGU7IiwiaW1wb3J0IFF1YWRSb290IGZyb20gJy4vcXVhZC1yb290JztcbmltcG9ydCBRdWFkTm9kZSBmcm9tICcuL3F1YWQtbm9kZSc7XG5pbXBvcnQgeyBSZWN0IH0gZnJvbSAnLi4vZ2VvbWV0cnknO1xuaW1wb3J0IHsgQ2xhc3MgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgYXBwZW5kIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmNvbnN0IFJPT1RfU0laRSA9IDMwMDA7XG5jb25zdCBMRVZFTF9TVEVQID0gMTAwMDA7XG5jb25zdCBNQVhfTEVWRUwgPSA3NTtcblxuY2xhc3MgU2hhcGVzUXVhZFRyZWUgZXh0ZW5kcyBDbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmluaXRSb290cygpO1xuICAgIH1cblxuICAgIGluaXRSb290cygpIHtcbiAgICAgICAgdGhpcy5yb290TWFwID0ge307XG4gICAgICAgIHRoaXMucm9vdCA9IG5ldyBRdWFkUm9vdCgpO1xuICAgICAgICB0aGlzLnJvb3RFbGVtZW50cyA9IFtdO1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICBjb25zdCByb290RWxlbWVudHMgPSB0aGlzLnJvb3RFbGVtZW50cztcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgcm9vdEVsZW1lbnRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHJvb3RFbGVtZW50c1tpZHhdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluaXRSb290cygpO1xuICAgIH1cblxuICAgIHBvaW50U2hhcGUocG9pbnQpIHtcbiAgICAgICAgY29uc3Qgc2VjdG9yUm9vdCA9ICggdGhpcy5yb290TWFwWyBNYXRoLmZsb29yKCBwb2ludC54IC8gUk9PVF9TSVpFICkgXSB8fCB7fSApWyBNYXRoLmZsb29yKCBwb2ludC55IC8gUk9PVF9TSVpFICkgXTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucm9vdC5wb2ludFNoYXBlcyhwb2ludCk7XG5cbiAgICAgICAgaWYgKHNlY3RvclJvb3QpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoc2VjdG9yUm9vdC5wb2ludFNoYXBlcyhwb2ludCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hc3NpZ25aaW5kZXgocmVzdWx0KTtcblxuICAgICAgICByZXN1bHQuc29ydCh6SW5kZXhDb21wYXJlcik7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHJlc3VsdC5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0W2lkeF0uY29udGFpbnNQb2ludChwb2ludCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0W2lkeF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3NpZ25aaW5kZXgoZWxlbWVudHMpIHtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZWxlbWVudHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50c1tpZHhdO1xuICAgICAgICAgICAgbGV0IHpJbmRleCA9IDA7XG4gICAgICAgICAgICBsZXQgbGV2ZWxXZWlnaHQgPSBNYXRoLnBvdyhMRVZFTF9TVEVQLCBNQVhfTEVWRUwpO1xuICAgICAgICAgICAgbGV0IHBhcmVudHMgPSBbXTtcblxuICAgICAgICAgICAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGlsZSAocGFyZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gcGFyZW50cy5wb3AoKTtcbiAgICAgICAgICAgICAgICB6SW5kZXggKz0gKChlbGVtZW50LnBhcmVudCA/IGVsZW1lbnQucGFyZW50LmNoaWxkcmVuIDogdGhpcy5yb290RWxlbWVudHMpLmluZGV4T2YoZWxlbWVudCkgKyAxKSAqIGxldmVsV2VpZ2h0O1xuICAgICAgICAgICAgICAgIGxldmVsV2VpZ2h0IC89IExFVkVMX1NURVA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsZW1lbnRzW2lkeF0uX3pJbmRleCA9IHpJbmRleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wdGlvbnNDaGFuZ2UoZSkge1xuICAgICAgICBpZiAoZS5maWVsZCA9PT0gXCJ0cmFuc2Zvcm1cIiB8fCBlLmZpZWxkID09PSBcInN0cm9rZS53aWR0aFwiKSB7XG4gICAgICAgICAgICB0aGlzLmJib3hDaGFuZ2UoZS5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdlb21ldHJ5Q2hhbmdlKGUpIHtcbiAgICAgICAgdGhpcy5iYm94Q2hhbmdlKGUuZWxlbWVudCk7XG4gICAgfVxuXG4gICAgYmJveENoYW5nZShlbGVtZW50KSB7XG4gICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBcIkdyb3VwXCIpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuYmJveENoYW5nZShlbGVtZW50LmNoaWxkcmVuW2lkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuX3F1YWROb2RlKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5fcXVhZE5vZGUucmVtb3ZlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faW5zZXJ0U2hhcGUoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGQoZWxlbWVudHMpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZWxlbWVudHMpID8gZWxlbWVudHMuc2xpY2UoMCkgOiBbIGVsZW1lbnRzIF07XG5cbiAgICAgICAgYXBwZW5kKHRoaXMucm9vdEVsZW1lbnRzLCBlbGVtZW50c0FycmF5KTtcbiAgICAgICAgdGhpcy5faW5zZXJ0KGVsZW1lbnRzQXJyYXkpO1xuICAgIH1cblxuICAgIGNoaWxkcmVuQ2hhbmdlKGUpIHtcbiAgICAgICAgaWYgKGUuYWN0aW9uID09PSBcInJlbW92ZVwiKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBlLml0ZW1zLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShlLml0ZW1zW2lkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faW5zZXJ0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUuaXRlbXMsIDApKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9pbnNlcnQoZWxlbWVudHMpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQ7XG5cbiAgICAgICAgd2hpbGUgKGVsZW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkT2JzZXJ2ZXIodGhpcyk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gXCJHcm91cFwiKSB7XG4gICAgICAgICAgICAgICAgYXBwZW5kKGVsZW1lbnRzLCBlbGVtZW50LmNoaWxkcmVuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5zZXJ0U2hhcGUoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfaW5zZXJ0U2hhcGUoc2hhcGUpIHtcbiAgICAgICAgY29uc3QgYmJveCA9IHNoYXBlLmJib3goKTtcbiAgICAgICAgaWYgKGJib3gpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlY3RvcnMgPSB0aGlzLmdldFNlY3RvcnMoYmJveCk7XG4gICAgICAgICAgICBjb25zdCB4ID0gc2VjdG9yc1swXVswXTtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBzZWN0b3JzWzFdWzBdO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pblJvb3Qoc2VjdG9ycykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QuaW5zZXJ0KHNoYXBlLCBiYm94KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm9vdE1hcCA9IHRoaXMucm9vdE1hcDtcbiAgICAgICAgICAgICAgICBpZiAoIXJvb3RNYXBbeF0pIHtcbiAgICAgICAgICAgICAgICAgICAgcm9vdE1hcFt4XSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghcm9vdE1hcFt4XVt5XSkge1xuICAgICAgICAgICAgICAgICAgICByb290TWFwW3hdW3ldID0gbmV3IFF1YWROb2RlKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlY3QoWyB4ICogUk9PVF9TSVpFLCB5ICogUk9PVF9TSVpFIF0sIFsgUk9PVF9TSVpFLCBST09UX1NJWkUgXSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByb290TWFwW3hdW3ldLmluc2VydChzaGFwZSwgYmJveCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmUoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuXG4gICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBcIkdyb3VwXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbjtcbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGNoaWxkcmVuLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShjaGlsZHJlbltpZHhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50Ll9xdWFkTm9kZSkge1xuICAgICAgICAgICAgZWxlbWVudC5fcXVhZE5vZGUucmVtb3ZlKGVsZW1lbnQpO1xuICAgICAgICAgICAgZGVsZXRlIGVsZW1lbnQuX3F1YWROb2RlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5Sb290KHNlY3RvcnMpIHtcbiAgICAgICAgcmV0dXJuIHNlY3RvcnNbMF0ubGVuZ3RoID4gMSB8fCBzZWN0b3JzWzFdLmxlbmd0aCA+IDE7XG4gICAgfVxuXG4gICAgZ2V0U2VjdG9ycyhyZWN0KSB7XG4gICAgICAgIGNvbnN0IGJvdHRvbVJpZ2h0ID0gcmVjdC5ib3R0b21SaWdodCgpO1xuICAgICAgICBjb25zdCBib3R0b21YID0gTWF0aC5mbG9vcihib3R0b21SaWdodC54IC8gUk9PVF9TSVpFKTtcbiAgICAgICAgY29uc3QgYm90dG9tWSA9IE1hdGguZmxvb3IoYm90dG9tUmlnaHQueSAvIFJPT1RfU0laRSk7XG4gICAgICAgIGNvbnN0IHNlY3RvcnMgPSBbIFtdLCBbXSBdO1xuICAgICAgICBmb3IgKGxldCB4ID0gTWF0aC5mbG9vcihyZWN0Lm9yaWdpbi54IC8gUk9PVF9TSVpFKTsgeCA8PSBib3R0b21YOyB4KyspIHtcbiAgICAgICAgICAgIHNlY3RvcnNbMF0ucHVzaCh4KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCB5ID0gTWF0aC5mbG9vcihyZWN0Lm9yaWdpbi55IC8gUk9PVF9TSVpFKTsgeSA8PSBib3R0b21ZOyB5KyspIHtcbiAgICAgICAgICAgIHNlY3RvcnNbMV0ucHVzaCh5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VjdG9ycztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHpJbmRleENvbXBhcmVyKHgxLCB4Mikge1xuICAgIGlmICh4MS5fekluZGV4IDwgeDIuX3pJbmRleCkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKHgxLl96SW5kZXggPiB4Mi5fekluZGV4KSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2hhcGVzUXVhZFRyZWU7IiwiaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uL3V0aWwnO1xuXG5jbGFzcyBTdXJmYWNlQ3Vyc29yIHtcblxuICAgIGNvbnN0cnVjdG9yKHN1cmZhY2UpIHtcbiAgICAgICAgc3VyZmFjZS5iaW5kKFwibW91c2VlbnRlclwiLCB0aGlzLl9tb3VzZWVudGVyLmJpbmQodGhpcykpO1xuICAgICAgICBzdXJmYWNlLmJpbmQoXCJtb3VzZWxlYXZlXCIsIHRoaXMuX21vdXNlbGVhdmUuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gc3VyZmFjZS5lbGVtZW50O1xuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9yZXNldEN1cnNvcigpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX3Jlc2V0Q3Vyc29yKCk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7XG4gICAgfVxuXG4gICAgX21vdXNlZW50ZXIoZSkge1xuICAgICAgICBjb25zdCBjdXJzb3IgPSB0aGlzLl9zaGFwZUN1cnNvcihlKTtcblxuICAgICAgICBpZiAoIWN1cnNvcikge1xuICAgICAgICAgICAgdGhpcy5fcmVzZXRDdXJzb3IoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fY3VycmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRDdXJzb3IgPSB0aGlzLl9nZXRDdXJzb3IoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc2V0Q3Vyc29yKGN1cnNvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfbW91c2VsZWF2ZSgpIHtcbiAgICAgICAgdGhpcy5fcmVzZXRDdXJzb3IoKTtcbiAgICB9XG5cbiAgICBfc2hhcGVDdXJzb3IoZSkge1xuICAgICAgICBsZXQgc2hhcGUgPSBlLmVsZW1lbnQ7XG5cbiAgICAgICAgd2hpbGUgKHNoYXBlICYmICFkZWZpbmVkKHNoYXBlLm9wdGlvbnMuY3Vyc29yKSkge1xuICAgICAgICAgICAgc2hhcGUgPSBzaGFwZS5wYXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUpIHtcbiAgICAgICAgICAgIHJldHVybiBzaGFwZS5vcHRpb25zLmN1cnNvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXRDdXJzb3IoKSB7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc3R5bGUuY3Vyc29yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3NldEN1cnNvcihjdXJzb3IpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmN1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQgPSBjdXJzb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfcmVzZXRDdXJzb3IoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRDdXJzb3IodGhpcy5fZGVmYXVsdEN1cnNvciB8fCBcIlwiKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jdXJyZW50O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdXJmYWNlQ3Vyc29yO1xuXG4iLCJpbXBvcnQgQmFzZVN1cmZhY2UgZnJvbSAnLi4vY29yZS9zdXJmYWNlJztcbmltcG9ydCBTdXJmYWNlRmFjdG9yeSBmcm9tICcuLi9jb3JlL3N1cmZhY2UtZmFjdG9yeSc7XG5pbXBvcnQgeyBjcmVhdGVQcm9taXNlLCBwcm9taXNlQWxsLCBiaW5kRXZlbnRzLCBlbGVtZW50U2l6ZSwgdW5iaW5kRXZlbnRzIH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgUm9vdE5vZGUgZnJvbSAnLi9yb290LW5vZGUnO1xuaW1wb3J0IFNoYXBlc1F1YWRUcmVlIGZyb20gJy4uL3NlYXJjaC9zaGFwZXMtcXVhZC10cmVlJztcbmltcG9ydCBTdXJmYWNlQ3Vyc29yIGZyb20gJy4vc3VyZmFjZS1jdXJzb3InO1xuXG5jbGFzcyBTdXJmYWNlIGV4dGVuZHMgQmFzZVN1cmZhY2Uge1xuXG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihlbGVtZW50LCBvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fdGVtcGxhdGUodGhpcyk7XG5cbiAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5lbGVtZW50LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICBjb25zdCBzaXplID0gZWxlbWVudFNpemUoZWxlbWVudCk7XG5cbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZS53aWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuXG4gICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50ID0gY2FudmFzO1xuXG4gICAgICAgIHRoaXMuX3Jvb3QgPSBuZXcgUm9vdE5vZGUoY2FudmFzLCBzaXplKTtcblxuICAgICAgICB0aGlzLl9tb3VzZVRyYWNrSGFuZGxlciA9IHRoaXMuX3RyYWNrTW91c2UuYmluZCh0aGlzKTtcblxuICAgICAgICBiaW5kRXZlbnRzKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgY2xpY2s6IHRoaXMuX21vdXNlVHJhY2tIYW5kbGVyLFxuICAgICAgICAgICAgbW91c2Vtb3ZlOiB0aGlzLl9tb3VzZVRyYWNrSGFuZGxlclxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3Jvb3QpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jvb3QuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fc2VhcmNoVHJlZSkge1xuICAgICAgICAgICAgdGhpcy5fc2VhcmNoVHJlZS5jbGVhcigpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3NlYXJjaFRyZWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fY3Vyc29yKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJzb3IuZGVzdHJveSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2N1cnNvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuYmluZEV2ZW50cyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIGNsaWNrOiB0aGlzLl9tb3VzZVRyYWNrSGFuZGxlcixcbiAgICAgICAgICAgIG1vdXNlbW92ZTogdGhpcy5fbW91c2VUcmFja0hhbmRsZXJcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZHJhdyhlbGVtZW50KSB7XG4gICAgICAgIHN1cGVyLmRyYXcoZWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3Jvb3QubG9hZChbIGVsZW1lbnQgXSwgdW5kZWZpbmVkLCB0aGlzLm9wdGlvbnMuY29ycyk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3NlYXJjaFRyZWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlYXJjaFRyZWUuYWRkKFsgZWxlbWVudCBdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICBzdXBlci5jbGVhcigpO1xuICAgICAgICB0aGlzLl9yb290LmNsZWFyKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3NlYXJjaFRyZWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlYXJjaFRyZWUuY2xlYXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9jdXJzb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvci5jbGVhcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXZlbnRUYXJnZXQoZSkge1xuICAgICAgICBpZiAodGhpcy5fc2VhcmNoVHJlZSkge1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSB0aGlzLl9zdXJmYWNlUG9pbnQoZSk7XG4gICAgICAgICAgICBjb25zdCBzaGFwZSA9IHRoaXMuX3NlYXJjaFRyZWUucG9pbnRTaGFwZShwb2ludCk7XG4gICAgICAgICAgICByZXR1cm4gc2hhcGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbWFnZSgpIHtcbiAgICAgICAgY29uc3QgeyBfcm9vdDogcm9vdCwgX3Jvb3RFbGVtZW50OiByb290RWxlbWVudCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgbG9hZGluZ1N0YXRlcyA9IFtdO1xuXG4gICAgICAgIHJvb3QudHJhdmVyc2UoKGNoaWxkTm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGNoaWxkTm9kZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgbG9hZGluZ1N0YXRlcy5wdXNoKGNoaWxkTm9kZS5sb2FkaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IGNyZWF0ZVByb21pc2UoKTtcbiAgICAgICAgY29uc3QgcmVzb2x2ZURhdGFVUkwgPSAoKSA9PiB7XG4gICAgICAgICAgICByb290Ll9pbnZhbGlkYXRlKHsgZml4ZWRTY2FsZTogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcm9vdEVsZW1lbnQudG9EYXRhVVJMKCk7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHByb21pc2VBbGwobG9hZGluZ1N0YXRlcykudGhlbihyZXNvbHZlRGF0YVVSTCwgcmVzb2x2ZURhdGFVUkwpO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIHN1c3BlbmRUcmFja2luZygpIHtcbiAgICAgICAgc3VwZXIuc3VzcGVuZFRyYWNraW5nKCk7XG4gICAgICAgIGlmICh0aGlzLl9zZWFyY2hUcmVlKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWFyY2hUcmVlLmNsZWFyKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fc2VhcmNoVHJlZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc3VtZVRyYWNraW5nKCkge1xuICAgICAgICBzdXBlci5yZXN1bWVUcmFja2luZygpO1xuICAgICAgICBpZiAoIXRoaXMuX3NlYXJjaFRyZWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlYXJjaFRyZWUgPSBuZXcgU2hhcGVzUXVhZFRyZWUoKTtcblxuICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IHRoaXMuX3Jvb3QuY2hpbGROb2RlcztcbiAgICAgICAgICAgIGNvbnN0IHJvb3RFbGVtZW50cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgY2hpbGROb2Rlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgcm9vdEVsZW1lbnRzLnB1c2goY2hpbGROb2Rlc1tpZHhdLnNyY0VsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc2VhcmNoVHJlZS5hZGQocm9vdEVsZW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9yZXNpemUoKSB7XG4gICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50LndpZHRoID0gdGhpcy5fc2l6ZS53aWR0aDtcbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQuaGVpZ2h0ID0gdGhpcy5fc2l6ZS5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5fcm9vdC5zaXplID0gdGhpcy5fc2l6ZTtcbiAgICAgICAgdGhpcy5fcm9vdC5pbnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgX3RlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gXCI8Y2FudmFzIHN0eWxlPSd3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyc+PC9jYW52YXM+XCI7XG4gICAgfVxuXG4gICAgX2VuYWJsZVRyYWNraW5nKCkge1xuICAgICAgICB0aGlzLl9zZWFyY2hUcmVlID0gbmV3IFNoYXBlc1F1YWRUcmVlKCk7XG4gICAgICAgIHRoaXMuX2N1cnNvciA9IG5ldyBTdXJmYWNlQ3Vyc29yKHRoaXMpO1xuXG4gICAgICAgIHN1cGVyLl9lbmFibGVUcmFja2luZygpO1xuICAgIH1cblxuICAgIF90cmFja01vdXNlKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N1c3BlbmRlZFRyYWNraW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzaGFwZSA9IHRoaXMuZXZlbnRUYXJnZXQoZSk7XG5cbiAgICAgICAgaWYgKGUudHlwZSAhPT0gXCJjbGlja1wiKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U2hhcGUgPSB0aGlzLl9jdXJyZW50U2hhcGU7XG4gICAgICAgICAgICBpZiAoY3VycmVudFNoYXBlICYmIGN1cnJlbnRTaGFwZSAhPT0gc2hhcGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoXCJtb3VzZWxlYXZlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogY3VycmVudFNoYXBlLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm1vdXNlbGVhdmVcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2hhcGUgJiYgY3VycmVudFNoYXBlICE9PSBzaGFwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcihcIm1vdXNlZW50ZXJcIiwge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBzaGFwZSxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJtb3VzZWVudGVyXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFwibW91c2Vtb3ZlXCIsIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBzaGFwZSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwibW91c2Vtb3ZlXCJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50U2hhcGUgPSBzaGFwZTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZSkge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFwiY2xpY2tcIiwge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHNoYXBlLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGUsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJjbGlja1wiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuU3VyZmFjZS5wcm90b3R5cGUudHlwZSA9IFwiY2FudmFzXCI7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KSB7XG4gICAgQmFzZVN1cmZhY2Uuc3VwcG9ydC5jYW52YXMgPSB0cnVlO1xuICAgIFN1cmZhY2VGYWN0b3J5LmN1cnJlbnQucmVnaXN0ZXIoXCJjYW52YXNcIiwgU3VyZmFjZSwgMjApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTdXJmYWNlO1xuIiwiaW1wb3J0IE5vZGUgZnJvbSAnLi9ub2RlJztcbmltcG9ydCB7IHBhcnNlQ29sb3IgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgaXNUcmFuc3BhcmVudCwgdmFsdWVPckRlZmF1bHQgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBMaW5lYXJHcmFkaWVudCBmcm9tICcuLi9ncmFkaWVudHMvbGluZWFyLWdyYWRpZW50JztcbmltcG9ydCBSYWRpYWxHcmFkaWVudCBmcm9tICcuLi9ncmFkaWVudHMvcmFkaWFsLWdyYWRpZW50JztcbmltcG9ydCB7IERBU0hfQVJSQVlTLCBTT0xJRCwgQlVUVCB9IGZyb20gJy4uL2NvcmUvY29uc3RhbnRzJztcbmltcG9ydCByZW5kZXJQYXRoIGZyb20gJy4vdXRpbHMvcmVuZGVyLXBhdGgnO1xuaW1wb3J0IE5PREVfTUFQIGZyb20gJy4vbm9kZS1tYXAnO1xuXG5mdW5jdGlvbiBhZGRHcmFkaWVudFN0b3BzKGdyYWRpZW50LCBzdG9wcykge1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHN0b3BzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgbGV0IHN0b3AgPSBzdG9wc1tpZHhdO1xuICAgICAgICBsZXQgY29sb3IgPSBwYXJzZUNvbG9yKHN0b3AuY29sb3IoKSk7XG5cbiAgICAgICAgY29sb3IuYSAqPSBzdG9wLm9wYWNpdHkoKTtcblxuICAgICAgICBncmFkaWVudC5hZGRDb2xvclN0b3Aoc3RvcC5vZmZzZXQoKSwgY29sb3IudG9Dc3NSZ2JhKCkpO1xuICAgIH1cbn1cblxuY2xhc3MgUGF0aE5vZGUgZXh0ZW5kcyBOb2RlIHtcblxuICAgIHJlbmRlclRvKGN0eCkge1xuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIHRoaXMuc2V0VHJhbnNmb3JtKGN0eCk7XG4gICAgICAgIHRoaXMuc2V0Q2xpcChjdHgpO1xuICAgICAgICB0aGlzLnNldE9wYWNpdHkoY3R4KTtcblxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJQb2ludHMoY3R4LCB0aGlzLnNyY0VsZW1lbnQpO1xuXG4gICAgICAgIHRoaXMuc2V0TGluZURhc2goY3R4KTtcbiAgICAgICAgdGhpcy5zZXRMaW5lQ2FwKGN0eCk7XG4gICAgICAgIHRoaXMuc2V0TGluZUpvaW4oY3R4KTtcblxuICAgICAgICB0aGlzLnNldEZpbGwoY3R4KTtcbiAgICAgICAgdGhpcy5zZXRTdHJva2UoY3R4KTtcblxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIHNldEZpbGwoY3R4KSB7XG4gICAgICAgIGNvbnN0IGZpbGwgPSB0aGlzLnNyY0VsZW1lbnQub3B0aW9ucy5maWxsO1xuICAgICAgICBsZXQgaGFzRmlsbCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChmaWxsKSB7XG4gICAgICAgICAgICBpZiAoZmlsbC5ub2RlVHlwZSA9PT0gXCJHcmFkaWVudFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRHcmFkaWVudEZpbGwoY3R4LCBmaWxsKTtcbiAgICAgICAgICAgICAgICBoYXNGaWxsID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzVHJhbnNwYXJlbnQoZmlsbC5jb2xvcikpIHtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZmlsbC5jb2xvcjtcblxuICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxBbHBoYShjdHgsIGZpbGwub3BhY2l0eSk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuXG4gICAgICAgICAgICAgICAgaGFzRmlsbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGFzRmlsbDtcbiAgICB9XG5cbiAgICBzZXRHcmFkaWVudEZpbGwoY3R4LCBmaWxsKSB7XG4gICAgICAgIGNvbnN0IGJib3ggPSB0aGlzLnNyY0VsZW1lbnQucmF3QkJveCgpO1xuICAgICAgICBsZXQgZ3JhZGllbnQ7XG5cbiAgICAgICAgaWYgKGZpbGwgaW5zdGFuY2VvZiBMaW5lYXJHcmFkaWVudCkge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gZmlsbC5zdGFydCgpO1xuICAgICAgICAgICAgbGV0IGVuZCA9IGZpbGwuZW5kKCk7XG4gICAgICAgICAgICBncmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudChzdGFydC54LCBzdGFydC55LCBlbmQueCwgZW5kLnkpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGwgaW5zdGFuY2VvZiBSYWRpYWxHcmFkaWVudCkge1xuICAgICAgICAgICAgbGV0IGNlbnRlciA9IGZpbGwuY2VudGVyKCk7XG4gICAgICAgICAgICBncmFkaWVudCA9IGN0eC5jcmVhdGVSYWRpYWxHcmFkaWVudChjZW50ZXIueCwgY2VudGVyLnksIDAsIGNlbnRlci54LCBjZW50ZXIueSwgZmlsbC5yYWRpdXMoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBhZGRHcmFkaWVudFN0b3BzKGdyYWRpZW50LCBmaWxsLnN0b3BzKTtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIGlmICghZmlsbC51c2VyU3BhY2UoKSkge1xuICAgICAgICAgICAgY3R4LnRyYW5zZm9ybShiYm94LndpZHRoKCksIDAsIDAsIGJib3guaGVpZ2h0KCksIGJib3gub3JpZ2luLngsIGJib3gub3JpZ2luLnkpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBncmFkaWVudDtcbiAgICAgICAgY3R4LmZpbGwoKTtcblxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIHNldFN0cm9rZShjdHgpIHtcbiAgICAgICAgY29uc3Qgc3Ryb2tlID0gdGhpcy5zcmNFbGVtZW50Lm9wdGlvbnMuc3Ryb2tlO1xuICAgICAgICBpZiAoc3Ryb2tlICYmICFpc1RyYW5zcGFyZW50KHN0cm9rZS5jb2xvcikgJiYgc3Ryb2tlLndpZHRoID4gMCkge1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3Ryb2tlLmNvbG9yO1xuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KHN0cm9rZS53aWR0aCwgMSk7XG5cbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbEFscGhhKGN0eCwgc3Ryb2tlLm9wYWNpdHkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkYXNoVHlwZSgpIHtcbiAgICAgICAgY29uc3Qgc3Ryb2tlID0gdGhpcy5zcmNFbGVtZW50Lm9wdGlvbnMuc3Ryb2tlO1xuICAgICAgICBpZiAoc3Ryb2tlICYmIHN0cm9rZS5kYXNoVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cm9rZS5kYXNoVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0TGluZURhc2goY3R4KSB7XG4gICAgICAgIGNvbnN0IGRhc2hUeXBlID0gdGhpcy5kYXNoVHlwZSgpO1xuICAgICAgICBpZiAoZGFzaFR5cGUgJiYgZGFzaFR5cGUgIT09IFNPTElEKSB7XG4gICAgICAgICAgICBjb25zdCBkYXNoQXJyYXkgPSBEQVNIX0FSUkFZU1tkYXNoVHlwZV07XG4gICAgICAgICAgICBpZiAoY3R4LnNldExpbmVEYXNoKSB7XG4gICAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKGRhc2hBcnJheSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN0eC5tb3pEYXNoID0gZGFzaEFycmF5O1xuICAgICAgICAgICAgICAgIGN0eC53ZWJraXRMaW5lRGFzaCA9IGRhc2hBcnJheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldExpbmVDYXAoY3R4KSB7XG4gICAgICAgIGNvbnN0IGRhc2hUeXBlID0gdGhpcy5kYXNoVHlwZSgpO1xuICAgICAgICBjb25zdCBzdHJva2UgPSB0aGlzLnNyY0VsZW1lbnQub3B0aW9ucy5zdHJva2U7XG4gICAgICAgIGlmIChkYXNoVHlwZSAmJiBkYXNoVHlwZSAhPT0gU09MSUQpIHtcbiAgICAgICAgICAgIGN0eC5saW5lQ2FwID0gQlVUVDtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJva2UgJiYgc3Ryb2tlLmxpbmVDYXApIHtcbiAgICAgICAgICAgIGN0eC5saW5lQ2FwID0gc3Ryb2tlLmxpbmVDYXA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRMaW5lSm9pbihjdHgpIHtcbiAgICAgICAgY29uc3Qgc3Ryb2tlID0gdGhpcy5zcmNFbGVtZW50Lm9wdGlvbnMuc3Ryb2tlO1xuICAgICAgICBpZiAoc3Ryb2tlICYmIHN0cm9rZS5saW5lSm9pbikge1xuICAgICAgICAgICAgY3R4LmxpbmVKb2luID0gc3Ryb2tlLmxpbmVKb2luO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyUG9pbnRzKGN0eCwgcGF0aCkge1xuICAgICAgICByZW5kZXJQYXRoKGN0eCwgcGF0aCk7XG4gICAgfVxufVxuXG5OT0RFX01BUC5QYXRoID0gUGF0aE5vZGU7XG5cbmV4cG9ydCBkZWZhdWx0IFBhdGhOb2RlO1xuIiwiaW1wb3J0IFBhdGhOb2RlIGZyb20gJy4vcGF0aC1ub2RlJztcbmltcG9ydCBOT0RFX01BUCBmcm9tICcuL25vZGUtbWFwJztcbmltcG9ydCByZW5kZXJQYXRoIGZyb20gJy4vdXRpbHMvcmVuZGVyLXBhdGgnO1xuXG5jbGFzcyBBcmNOb2RlIGV4dGVuZHMgUGF0aE5vZGUge1xuICAgIHJlbmRlclBvaW50cyhjdHgpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuc3JjRWxlbWVudC50b1BhdGgoKTtcbiAgICAgICAgcmVuZGVyUGF0aChjdHgsIHBhdGgpO1xuICAgIH1cbn1cblxuTk9ERV9NQVAuQXJjID0gQXJjTm9kZTtcblxuZXhwb3J0IGRlZmF1bHQgQXJjTm9kZTsiLCJpbXBvcnQgUGF0aE5vZGUgZnJvbSAnLi9wYXRoLW5vZGUnO1xuaW1wb3J0IE5PREVfTUFQIGZyb20gJy4vbm9kZS1tYXAnO1xuXG5jbGFzcyBDaXJjbGVOb2RlIGV4dGVuZHMgUGF0aE5vZGUge1xuICAgIHJlbmRlclBvaW50cyhjdHgpIHtcbiAgICAgICAgY29uc3QgeyBjZW50ZXIsIHJhZGl1cyB9ID0gdGhpcy5zcmNFbGVtZW50Lmdlb21ldHJ5KCk7XG5cbiAgICAgICAgY3R4LmFyYyhjZW50ZXIueCwgY2VudGVyLnksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuICAgIH1cbn1cblxuTk9ERV9NQVAuQ2lyY2xlID0gQ2lyY2xlTm9kZTtcblxuZXhwb3J0IGRlZmF1bHQgQ2lyY2xlTm9kZTsiLCJpbXBvcnQgUGF0aE5vZGUgZnJvbSAnLi9wYXRoLW5vZGUnO1xuaW1wb3J0IE5PREVfTUFQIGZyb20gJy4vbm9kZS1tYXAnO1xuXG5jbGFzcyBSZWN0Tm9kZSBleHRlbmRzIFBhdGhOb2RlIHtcbiAgICByZW5kZXJQb2ludHMoY3R4KSB7XG4gICAgICAgIGNvbnN0IHsgb3JpZ2luLCBzaXplIH0gPSB0aGlzLnNyY0VsZW1lbnQuZ2VvbWV0cnkoKTtcblxuICAgICAgICBjdHgucmVjdChvcmlnaW4ueCwgb3JpZ2luLnksIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcbiAgICB9XG59XG5cbk5PREVfTUFQLlJlY3QgPSBSZWN0Tm9kZTtcblxuZXhwb3J0IGRlZmF1bHQgUmVjdE5vZGU7IiwiaW1wb3J0IFBhdGhOb2RlIGZyb20gJy4vcGF0aC1ub2RlJztcbmltcG9ydCBOT0RFX01BUCBmcm9tICcuL25vZGUtbWFwJztcbmltcG9ydCB7IGNyZWF0ZVByb21pc2UgfSBmcm9tICcuLi91dGlsJztcblxuY2xhc3MgSW1hZ2VOb2RlIGV4dGVuZHMgUGF0aE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKHNyY0VsZW1lbnQsIGNvcnMpIHtcbiAgICAgICAgc3VwZXIoc3JjRWxlbWVudCk7XG5cbiAgICAgICAgdGhpcy5vbkxvYWQgPSB0aGlzLm9uTG9hZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uRXJyb3IgPSB0aGlzLm9uRXJyb3IuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLmxvYWRpbmcgPSBjcmVhdGVQcm9taXNlKCk7XG5cbiAgICAgICAgY29uc3QgaW1nID0gdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgICBpZiAoY29ycyAmJiAhKC9eZGF0YTovaS50ZXN0KHNyY0VsZW1lbnQuc3JjKCkpKSkge1xuICAgICAgICAgICAgaW1nLmNyb3NzT3JpZ2luID0gY29ycztcbiAgICAgICAgfVxuXG4gICAgICAgIGltZy5zcmMgPSBzcmNFbGVtZW50LnNyYygpO1xuXG4gICAgICAgIGlmIChpbWcuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRoaXMub25Mb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbWcub25sb2FkID0gdGhpcy5vbkxvYWQ7XG4gICAgICAgICAgICBpbWcub25lcnJvciA9IHRoaXMub25FcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlclRvKGN0eCkge1xuICAgICAgICBpZiAodGhpcy5sb2FkaW5nLnN0YXRlKCkgPT09IFwicmVzb2x2ZWRcIikge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcblxuICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2Zvcm0oY3R4KTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2xpcChjdHgpO1xuXG4gICAgICAgICAgICB0aGlzLmRyYXdJbWFnZShjdHgpO1xuXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3B0aW9uc0NoYW5nZShlKSB7XG4gICAgICAgIGlmIChlLmZpZWxkID09PSBcInNyY1wiKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBjcmVhdGVQcm9taXNlKCk7XG4gICAgICAgICAgICB0aGlzLmltZy5zcmMgPSB0aGlzLnNyY0VsZW1lbnQuc3JjKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5vcHRpb25zQ2hhbmdlKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Mb2FkKCkge1xuICAgICAgICB0aGlzLmxvYWRpbmcucmVzb2x2ZSgpO1xuICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICB9XG5cbiAgICBvbkVycm9yKCkge1xuICAgICAgICB0aGlzLmxvYWRpbmcucmVqZWN0KG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwiVW5hYmxlIHRvIGxvYWQgaW1hZ2UgJ1wiICsgdGhpcy5pbWcuc3JjICtcbiAgICAgICAgICAgIFwiJy4gQ2hlY2sgZm9yIGNvbm5lY3Rpdml0eSBhbmQgdmVyaWZ5IENPUlMgaGVhZGVycy5cIlxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICBkcmF3SW1hZ2UoY3R4KSB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLnNyY0VsZW1lbnQucmVjdCgpO1xuICAgICAgICBjb25zdCB0b3BMZWZ0ID0gcmVjdC50b3BMZWZ0KCk7XG5cbiAgICAgICAgY3R4LmRyYXdJbWFnZShcbiAgICAgICAgICAgIHRoaXMuaW1nLCB0b3BMZWZ0LngsIHRvcExlZnQueSwgcmVjdC53aWR0aCgpLCByZWN0LmhlaWdodCgpXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5OT0RFX01BUC5JbWFnZSA9IEltYWdlTm9kZTtcblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2VOb2RlOyIsImltcG9ydCBQYXRoTm9kZSBmcm9tICcuL3BhdGgtbm9kZSc7XG5pbXBvcnQgTk9ERV9NQVAgZnJvbSAnLi9ub2RlLW1hcCc7XG5cbmNsYXNzIFRleHROb2RlIGV4dGVuZHMgUGF0aE5vZGUge1xuICAgIHJlbmRlclRvKGN0eCkge1xuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5zcmNFbGVtZW50O1xuICAgICAgICBjb25zdCBwb3MgPSB0ZXh0LnBvc2l0aW9uKCk7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0ZXh0Lm1lYXN1cmUoKTtcblxuICAgICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICAgIHRoaXMuc2V0VHJhbnNmb3JtKGN0eCk7XG4gICAgICAgIHRoaXMuc2V0Q2xpcChjdHgpO1xuICAgICAgICB0aGlzLnNldE9wYWNpdHkoY3R4KTtcblxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgY3R4LmZvbnQgPSB0ZXh0Lm9wdGlvbnMuZm9udDtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdsZWZ0JztcblxuICAgICAgICBpZiAodGhpcy5zZXRGaWxsKGN0eCkpIHtcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dCh0ZXh0LmNvbnRlbnQoKSwgcG9zLngsIHBvcy55ICsgc2l6ZS5iYXNlbGluZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXRTdHJva2UoY3R4KSkge1xuICAgICAgICAgICAgdGhpcy5zZXRMaW5lRGFzaChjdHgpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVRleHQodGV4dC5jb250ZW50KCksIHBvcy54LCBwb3MueSArIHNpemUuYmFzZWxpbmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG59XG5cblxuTk9ERV9NQVAuVGV4dCA9IFRleHROb2RlO1xuXG5leHBvcnQgZGVmYXVsdCBUZXh0Tm9kZTsiLCJpbXBvcnQgUGF0aE5vZGUgZnJvbSAnLi9wYXRoLW5vZGUnO1xuaW1wb3J0IE5PREVfTUFQIGZyb20gJy4vbm9kZS1tYXAnO1xuaW1wb3J0IHJlbmRlclBhdGggZnJvbSAnLi91dGlscy9yZW5kZXItcGF0aCc7XG5cbmNsYXNzIE11bHRpUGF0aE5vZGUgZXh0ZW5kcyBQYXRoTm9kZSB7XG4gICAgcmVuZGVyUG9pbnRzKGN0eCkge1xuICAgICAgICBjb25zdCBwYXRocyA9IHRoaXMuc3JjRWxlbWVudC5wYXRocztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVuZGVyUGF0aChjdHgsIHBhdGhzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuTk9ERV9NQVAuTXVsdGlQYXRoID0gTXVsdGlQYXRoTm9kZTtcblxuZXhwb3J0IGRlZmF1bHQgTXVsdGlQYXRoTm9kZTsiLCJpbXBvcnQgU3VyZmFjZSBmcm9tICcuL3N1cmZhY2UnO1xuaW1wb3J0IHsgdHJhbnNmb3JtIH0gZnJvbSAnLi4vZ2VvbWV0cnknO1xuaW1wb3J0IEdyb3VwIGZyb20gJy4uL3NoYXBlcy9ncm91cCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cG9ydEltYWdlKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgICAgIHdpZHRoOiBcIjgwMHB4XCIsIGhlaWdodDogXCI2MDBweFwiLFxuICAgICAgICBjb3JzOiBcIkFub255bW91c1wiXG4gICAgfTtcblxuICAgIGxldCBleHBvcnRSb290ID0gZ3JvdXA7XG4gICAgY29uc3QgYmJveCA9IGdyb3VwLmNsaXBwZWRCQm94KCk7XG5cblxuICAgIGlmIChiYm94KSB7XG4gICAgICAgIGNvbnN0IG9yaWdpbiA9IGJib3guZ2V0T3JpZ2luKCk7XG4gICAgICAgIGV4cG9ydFJvb3QgPSBuZXcgR3JvdXAoKTtcbiAgICAgICAgZXhwb3J0Um9vdC50cmFuc2Zvcm0odHJhbnNmb3JtKCkudHJhbnNsYXRlKC1vcmlnaW4ueCwgLW9yaWdpbi55KSk7XG4gICAgICAgIGV4cG9ydFJvb3QuY2hpbGRyZW4ucHVzaChncm91cCk7XG5cbiAgICAgICAgY29uc3Qgc2l6ZSA9IGJib3guZ2V0U2l6ZSgpO1xuICAgICAgICBkZWZhdWx0cy53aWR0aCA9IHNpemUud2lkdGggKyBcInB4XCI7XG4gICAgICAgIGRlZmF1bHRzLmhlaWdodCA9IHNpemUuaGVpZ2h0ICsgXCJweFwiO1xuICAgIH1cblxuICAgIGNvbnN0IHN1cmZhY2VPcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGNvbnN0IHN0eWxlID0gY29udGFpbmVyLnN0eWxlO1xuXG4gICAgc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIHN0eWxlLndpZHRoID0gc3VyZmFjZU9wdGlvbnMud2lkdGg7XG4gICAgc3R5bGUuaGVpZ2h0ID0gc3VyZmFjZU9wdGlvbnMuaGVpZ2h0O1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgIGNvbnN0IHN1cmZhY2UgPSBuZXcgU3VyZmFjZShjb250YWluZXIsIHN1cmZhY2VPcHRpb25zKTtcbiAgICBzdXJmYWNlLnN1c3BlbmRUcmFja2luZygpO1xuICAgIHN1cmZhY2UuZHJhdyhleHBvcnRSb290KTtcblxuICAgIGNvbnN0IHByb21pc2UgPSBzdXJmYWNlLmltYWdlKCk7XG4gICAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICAgICAgc3VyZmFjZS5kZXN0cm95KCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgICB9O1xuICAgIHByb21pc2UudGhlbihkZXN0cm95LCBkZXN0cm95KTtcblxuICAgIHJldHVybiBwcm9taXNlO1xufSIsImltcG9ydCB7IGNyZWF0ZVByb21pc2UsIGVuY29kZUJhc2U2NCB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IGV4cG9ydEdyb3VwIGZyb20gJy4vZXhwb3J0LWdyb3VwJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwb3J0U1ZHKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgbGV0IHN2ZyA9IGV4cG9ydEdyb3VwKGdyb3VwKTtcblxuICAgIGlmICghb3B0aW9ucyB8fCAhb3B0aW9ucy5yYXcpIHtcbiAgICAgICAgc3ZnID0gXCJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFwiICsgZW5jb2RlQmFzZTY0KHN2Zyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZVByb21pc2UoKS5yZXNvbHZlKHN2Zyk7XG59XG4iLCJpbXBvcnQgeyBzdXBwb3J0IH0gZnJvbSAnLi4vY29tbW9uJztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tbXVsdGktc3BhY2VzLCBrZXktc3BhY2luZywgaW5kZW50LCBjYW1lbGNhc2UsIHNwYWNlLWJlZm9yZS1ibG9ja3MsIGVxZXFlcSwgYnJhY2Utc3R5bGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIHNwYWNlLWluZml4LW9wcywgc3BhY2UtYmVmb3JlLWZ1bmN0aW9uLXBhcmVuLCBhcnJheS1icmFja2V0LXNwYWNpbmcsIG9iamVjdC1jdXJseS1zcGFjaW5nICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1uZXN0ZWQtdGVybmFyeSwgbWF4LXBhcmFtcywgZGVmYXVsdC1jYXNlLCBuby1lbHNlLXJldHVybiwgbm8tZW1wdHkgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduLCBuby12YXIsIGJsb2NrLXNjb3BlZC12YXIgKi9cblxuLy8gWFhYOiByZW1vdmUgdGhpcyBqdW5rIChhc3N1bWUgYHRydWVgKSB3aGVuIHdlIG5vIGxvbmdlciBoYXZlIHRvIHN1cHBvcnQgSUUgPCAxMFxuLy8gSUUgOSAoYXQgbGVhc3QgY29tcGF0aWJpbGl0eSkgcmVwb3J0cyBoYXZpbmcgVWludDhBcnJheSBidXQgdGhlIHJlcXVlc3QgcmVzcG9uc2UgZG9lcyBub3QgY29udGFpbiBBcnJheUJ1ZmZlciB3aGljaCByZXN1bHRzIGluIG1pc3NpbmcgdGFibGUgaGVhZCBlcnJvclxuY29uc3QgSEFTX1RZUEVEX0FSUkFZUyA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBzdXBwb3J0LmJyb3dzZXIgJiYgKCFzdXBwb3J0LmJyb3dzZXIubXNpZSB8fCBzdXBwb3J0LmJyb3dzZXIudmVyc2lvbiA+IDkpO1xuXG5jb25zdCBCQVNFNjQgPSAoZnVuY3Rpb24oKXtcbiAgICB2YXIga2V5U3RyID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlY29kZTogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBzdHIucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9cXD1dL2csIFwiXCIpLCBpID0gMCwgbiA9IGlucHV0Lmxlbmd0aCwgb3V0cHV0ID0gW107XG5cbiAgICAgICAgICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgICAgICAgICAgIHZhciBlbmMxID0ga2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuICAgICAgICAgICAgICAgIHZhciBlbmMyID0ga2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuICAgICAgICAgICAgICAgIHZhciBlbmMzID0ga2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuICAgICAgICAgICAgICAgIHZhciBlbmM0ID0ga2V5U3RyLmluZGV4T2YoaW5wdXQuY2hhckF0KGkrKykpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNocjEgPSAoZW5jMSA8PCAyKSB8IChlbmMyID4+PiA0KTtcbiAgICAgICAgICAgICAgICB2YXIgY2hyMiA9ICgoZW5jMiAmIDE1KSA8PCA0KSB8IChlbmMzID4+PiAyKTtcbiAgICAgICAgICAgICAgICB2YXIgY2hyMyA9ICgoZW5jMyAmIDMpIDw8IDYpIHwgZW5jNDtcblxuICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKGNocjEpO1xuICAgICAgICAgICAgICAgIGlmIChlbmMzICE9IDY0KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKGNocjIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW5jNCAhPSA2NCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChjaHIzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVuY29kZTogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgICAgICAgIHZhciBpID0gMCwgbiA9IGJ5dGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBcIlwiO1xuXG4gICAgICAgICAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hyMSA9IGJ5dGVzW2krK107XG4gICAgICAgICAgICAgICAgdmFyIGNocjIgPSBieXRlc1tpKytdO1xuICAgICAgICAgICAgICAgIHZhciBjaHIzID0gYnl0ZXNbaSsrXTtcblxuICAgICAgICAgICAgICAgIHZhciBlbmMxID0gY2hyMSA+Pj4gMjtcbiAgICAgICAgICAgICAgICB2YXIgZW5jMiA9ICgoY2hyMSAmIDMpIDw8IDQpIHwgKGNocjIgPj4+IDQpO1xuICAgICAgICAgICAgICAgIHZhciBlbmMzID0gKChjaHIyICYgMTUpIDw8IDIpIHwgKGNocjMgPj4+IDYpO1xuICAgICAgICAgICAgICAgIHZhciBlbmM0ID0gY2hyMyAmIDYzO1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgLSBuID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5jMyA9IGVuYzQgPSA2NDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgLSBuID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5jNCA9IDY0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG91dHB1dCArPSBrZXlTdHIuY2hhckF0KGVuYzEpICsga2V5U3RyLmNoYXJBdChlbmMyKSArIGtleVN0ci5jaGFyQXQoZW5jMykgKyBrZXlTdHIuY2hhckF0KGVuYzQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfVxuICAgIH07XG59KCkpO1xuXG5mdW5jdGlvbiBCaW5hcnlTdHJlYW0oZGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSAwLCBsZW5ndGggPSAwO1xuICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgICAgZGF0YSA9IEhBU19UWVBFRF9BUlJBWVMgPyBuZXcgVWludDhBcnJheSgyNTYpIDogW107XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIGVuc3VyZSA9IEhBU19UWVBFRF9BUlJBWVMgPyBmdW5jdGlvbihsZW4pIHtcbiAgICAgICAgaWYgKGxlbiA+PSBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHRtcCA9IG5ldyBVaW50OEFycmF5KE1hdGgubWF4KGxlbiArIDI1NiwgZGF0YS5sZW5ndGggKiAyKSk7XG4gICAgICAgICAgICB0bXAuc2V0KGRhdGEsIDApO1xuICAgICAgICAgICAgZGF0YSA9IHRtcDtcbiAgICAgICAgfVxuICAgIH0gOiBmdW5jdGlvbigpIHt9O1xuXG4gICAgdmFyIGdldCA9IEhBU19UWVBFRF9BUlJBWVMgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCAwLCBsZW5ndGgpO1xuICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfTtcblxuICAgIHZhciB3cml0ZSA9IEhBU19UWVBFRF9BUlJBWVMgPyBmdW5jdGlvbihieXRlcykge1xuICAgICAgICBpZiAodHlwZW9mIGJ5dGVzID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB3cml0ZVN0cmluZyhieXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aDtcbiAgICAgICAgZW5zdXJlKG9mZnNldCArIGxlbik7XG4gICAgICAgIGRhdGEuc2V0KGJ5dGVzLCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gbGVuO1xuICAgICAgICBpZiAob2Zmc2V0ID4gbGVuZ3RoKSB7XG4gICAgICAgICAgICBsZW5ndGggPSBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9IDogZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBieXRlcyA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JpdGVTdHJpbmcoYnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHdyaXRlQnl0ZShieXRlc1tpXSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHNsaWNlID0gSEFTX1RZUEVEX0FSUkFZUyA/IGZ1bmN0aW9uKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGRhdGEuYnVmZmVyLnNsaWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgbGVuZ3RoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJRTEwXG4gICAgICAgICAgICB2YXIgeCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICB4LnNldChuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgc3RhcnQsIGxlbmd0aCkpO1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICB9IDogZnVuY3Rpb24oc3RhcnQsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZGF0YS5zbGljZShzdGFydCwgc3RhcnQgKyBsZW5ndGgpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBlb2YoKSB7XG4gICAgICAgIHJldHVybiBvZmZzZXQgPj0gbGVuZ3RoO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkQnl0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG9mZnNldCA8IGxlbmd0aCA/IGRhdGFbb2Zmc2V0KytdIDogMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JpdGVCeXRlKGIpIHtcbiAgICAgICAgZW5zdXJlKG9mZnNldCk7XG4gICAgICAgIGRhdGFbb2Zmc2V0KytdID0gYiAmIDB4RkY7XG4gICAgICAgIGlmIChvZmZzZXQgPiBsZW5ndGgpIHtcbiAgICAgICAgICAgIGxlbmd0aCA9IG9mZnNldDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkU2hvcnQoKSB7XG4gICAgICAgIHJldHVybiAocmVhZEJ5dGUoKSA8PCA4KSB8IHJlYWRCeXRlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlU2hvcnQodykge1xuICAgICAgICB3cml0ZUJ5dGUodyA+PiA4KTtcbiAgICAgICAgd3JpdGVCeXRlKHcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkU2hvcnRfKCkge1xuICAgICAgICB2YXIgdyA9IHJlYWRTaG9ydCgpO1xuICAgICAgICByZXR1cm4gdyA+PSAweDgwMDAgPyB3IC0gMHgxMDAwMCA6IHc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlU2hvcnRfKHcpIHtcbiAgICAgICAgd3JpdGVTaG9ydCh3IDwgMCA/IHcgKyAweDEwMDAwIDogdyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlYWRMb25nKCkge1xuICAgICAgICByZXR1cm4gKHJlYWRTaG9ydCgpICogMHgxMDAwMCkgKyByZWFkU2hvcnQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JpdGVMb25nKHcpIHtcbiAgICAgICAgd3JpdGVTaG9ydCgodyA+Pj4gMTYpICYgMHhGRkZGKTtcbiAgICAgICAgd3JpdGVTaG9ydCh3ICYgMHhGRkZGKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVhZExvbmdfKCkge1xuICAgICAgICB2YXIgdyA9IHJlYWRMb25nKCk7XG4gICAgICAgIHJldHVybiB3ID49IDB4ODAwMDAwMDAgPyB3IC0gMHgxMDAwMDAwMDAgOiB3O1xuICAgIH1cbiAgICBmdW5jdGlvbiB3cml0ZUxvbmdfKHcpIHtcbiAgICAgICAgd3JpdGVMb25nKHcgPCAwID8gdyArIDB4MTAwMDAwMDAwIDogdyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlYWRGaXhlZCgpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRMb25nKCkgLyAweDEwMDAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3cml0ZUZpeGVkKGYpIHtcbiAgICAgICAgd3JpdGVMb25nKE1hdGgucm91bmQoZiAqIDB4MTAwMDApKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVhZEZpeGVkXygpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRMb25nXygpIC8gMHgxMDAwMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JpdGVGaXhlZF8oZikge1xuICAgICAgICB3cml0ZUxvbmdfKE1hdGgucm91bmQoZiAqIDB4MTAwMDApKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVhZChsZW4pIHtcbiAgICAgICAgcmV0dXJuIHRpbWVzKGxlbiwgcmVhZEJ5dGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkU3RyaW5nKGxlbikge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIHJlYWQobGVuKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdyaXRlU3RyaW5nKHN0cikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgd3JpdGVCeXRlKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCByZWFkZXIpIHtcbiAgICAgICAgZm9yICh2YXIgcmV0ID0gbmV3IEFycmF5KG4pLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgcmV0W2ldID0gcmVhZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICB2YXIgc3RyZWFtID0ge1xuICAgICAgICBlb2YgICAgICAgICA6IGVvZixcbiAgICAgICAgcmVhZEJ5dGUgICAgOiByZWFkQnl0ZSxcbiAgICAgICAgd3JpdGVCeXRlICAgOiB3cml0ZUJ5dGUsXG4gICAgICAgIHJlYWRTaG9ydCAgIDogcmVhZFNob3J0LFxuICAgICAgICB3cml0ZVNob3J0ICA6IHdyaXRlU2hvcnQsXG4gICAgICAgIHJlYWRMb25nICAgIDogcmVhZExvbmcsXG4gICAgICAgIHdyaXRlTG9uZyAgIDogd3JpdGVMb25nLFxuICAgICAgICByZWFkRml4ZWQgICA6IHJlYWRGaXhlZCxcbiAgICAgICAgd3JpdGVGaXhlZCAgOiB3cml0ZUZpeGVkLFxuXG4gICAgICAgIC8vIHNpZ25lZCBudW1iZXJzLlxuICAgICAgICByZWFkU2hvcnRfICA6IHJlYWRTaG9ydF8sXG4gICAgICAgIHdyaXRlU2hvcnRfIDogd3JpdGVTaG9ydF8sXG4gICAgICAgIHJlYWRMb25nXyAgIDogcmVhZExvbmdfLFxuICAgICAgICB3cml0ZUxvbmdfICA6IHdyaXRlTG9uZ18sXG4gICAgICAgIHJlYWRGaXhlZF8gIDogcmVhZEZpeGVkXyxcbiAgICAgICAgd3JpdGVGaXhlZF8gOiB3cml0ZUZpeGVkXyxcblxuICAgICAgICByZWFkICAgICAgICA6IHJlYWQsXG4gICAgICAgIHdyaXRlICAgICAgIDogd3JpdGUsXG4gICAgICAgIHJlYWRTdHJpbmcgIDogcmVhZFN0cmluZyxcbiAgICAgICAgd3JpdGVTdHJpbmcgOiB3cml0ZVN0cmluZyxcblxuICAgICAgICB0aW1lcyAgICAgICA6IHRpbWVzLFxuICAgICAgICBnZXQgICAgICAgICA6IGdldCxcbiAgICAgICAgc2xpY2UgICAgICAgOiBzbGljZSxcblxuICAgICAgICBvZmZzZXQ6IGZ1bmN0aW9uKHBvcykge1xuICAgICAgICAgICAgaWYgKHBvcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gcG9zO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgICAgICB9LFxuXG4gICAgICAgIHNraXA6IGZ1bmN0aW9uKG5ieXRlcykge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IG5ieXRlcztcbiAgICAgICAgfSxcblxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGSVggQ0FMTEVSLiAgQmluYXJ5U3RyZWFtIGlzIG5vIGxvbmdlciBjb252ZXJ0aWJsZSB0byBzdHJpbmchXCIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxlbmd0aDogZnVuY3Rpb24oKSB7IHJldHVybiBsZW5ndGg7IH0sXG5cbiAgICAgICAgc2F2ZUV4Y3Vyc2lvbjogZnVuY3Rpb24oZikge1xuICAgICAgICAgICAgdmFyIHBvcyA9IG9mZnNldDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYoKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gcG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlQmFzZTY0OiBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuYXRvYikge1xuICAgICAgICAgICAgICAgIHdyaXRlU3RyaW5nKHdpbmRvdy5hdG9iKGJhc2U2NCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3cml0ZShCQVNFNjQuZGVjb2RlKGJhc2U2NCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBiYXNlNjQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIEJBU0U2NC5lbmNvZGUoZ2V0KCkpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBzdHJlYW07XG59XG5cbmZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG4gICAgdmFyIG91dHB1dCA9IFtdLFxuICAgICAgICBjb3VudGVyID0gMCxcbiAgICAgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGV4dHJhO1xuICAgIHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcbiAgICAgICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgICAgICAgLy8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG4gICAgICAgICAgICBleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG4gICAgICAgICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG4gICAgICAgICAgICAgICAgLy8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvdW50ZXItLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5Lm1hcChmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIHZhciBvdXRwdXQgPSBcIlwiO1xuICAgICAgICBpZiAodmFsdWUgPiAweEZGRkYpIHtcbiAgICAgICAgICAgIHZhbHVlIC09IDB4MTAwMDA7XG4gICAgICAgICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG4gICAgICAgICAgICB2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodmFsdWUpO1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0pLmpvaW4oXCJcIik7XG59XG5cbmZ1bmN0aW9uIGF0b2JVaW50OEFycmF5KGJhc2U2NCkge1xuICAgIGNvbnN0IGRhdGEgPSB3aW5kb3cuYXRvYihiYXNlNjQpO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGRhdGEubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICByZXN1bHRbaWR4XSA9IGRhdGEuY2hhckNvZGVBdChpZHgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVpbnQ4QXJyYXkoZGF0YSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGRhdGEubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICByZXN1bHRbaWR4XSA9IGRhdGFbaWR4XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBiYXNlNjRUb1VpbnQ4QXJyYXkoYmFzZTY0KSB7XG4gICAgaWYgKHdpbmRvdy5hdG9iKSB7XG4gICAgICAgIHJldHVybiBhdG9iVWludDhBcnJheShiYXNlNjQpO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVVaW50OEFycmF5KEJBU0U2NC5kZWNvZGUoYmFzZTY0KSk7XG59XG5cbmV4cG9ydCB7XG4gICAgSEFTX1RZUEVEX0FSUkFZUyxcbiAgICBCQVNFNjQsXG4gICAgQmluYXJ5U3RyZWFtLFxuICAgIHVjczJkZWNvZGUsXG4gICAgdWNzMmVuY29kZSxcbiAgICBiYXNlNjRUb1VpbnQ4QXJyYXlcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1zcGFjZXMsIGtleS1zcGFjaW5nLCBpbmRlbnQsIGNhbWVsY2FzZSwgc3BhY2UtYmVmb3JlLWJsb2NrcywgZXFlcWVxLCBicmFjZS1zdHlsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtaW5maXgtb3BzLCBzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW4sIGFycmF5LWJyYWNrZXQtc3BhY2luZywgb2JqZWN0LWN1cmx5LXNwYWNpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLW5lc3RlZC10ZXJuYXJ5LCBtYXgtcGFyYW1zLCBkZWZhdWx0LWNhc2UsIG5vLWVsc2UtcmV0dXJuLCBuby1lbXB0eSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24sIG5vLXZhciwgYmxvY2stc2NvcGVkLXZhciAqL1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcXFxuICpcbiAqIFRoZSBjb2RlIGluIHRoaXMgZmlsZSwgYWx0aG91Z2ggd3JpdHRlbiBmcm9tIHNjcmF0Y2gsIGlzIGluZmx1ZW5jZWQgYnkgdGhlXG4gKiBUcnVlVHlwZSBwYXJzZXIvZW5jb2RlciBpbiBQREZLaXQgLS0gaHR0cDovL3BkZmtpdC5vcmcvIChhIENvZmZlZVNjcmlwdFxuICogbGlicmFyeSBmb3IgcHJvZHVjaW5nIFBERiBmaWxlcykuXG4gKlxuICogUERGS2l0IGlzIChjKSBEZXZvbiBHb3ZldHQgMjAxNCBhbmQgcmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICpcblxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7IEJpbmFyeVN0cmVhbSwgdWNzMmRlY29kZSB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbmZ1bmN0aW9uIHNvcnRlZEtleXMob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikuc29ydChmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgLSBiOyB9KS5tYXAocGFyc2VGbG9hdCk7XG59XG5cbi8vL1xuXG5mdW5jdGlvbiBEaXJlY3RvcnkoZGF0YSkge1xuICAgIHRoaXMucmF3ID0gZGF0YTtcbiAgICB0aGlzLnNjYWxlclR5cGUgPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgdGhpcy50YWJsZUNvdW50ID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICB0aGlzLnNlYXJjaFJhbmdlID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICB0aGlzLmVudHJ5U2VsZWN0b3IgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgIHRoaXMucmFuZ2VTaGlmdCA9IGRhdGEucmVhZFNob3J0KCk7XG5cbiAgICB2YXIgdGFibGVzID0gdGhpcy50YWJsZXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudGFibGVDb3VudDsgKytpKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHtcbiAgICAgICAgICAgIHRhZyAgICAgIDogZGF0YS5yZWFkU3RyaW5nKDQpLFxuICAgICAgICAgICAgY2hlY2tzdW0gOiBkYXRhLnJlYWRMb25nKCksXG4gICAgICAgICAgICBvZmZzZXQgICA6IGRhdGEucmVhZExvbmcoKSxcbiAgICAgICAgICAgIGxlbmd0aCAgIDogZGF0YS5yZWFkTG9uZygpXG4gICAgICAgIH07XG4gICAgICAgIHRhYmxlc1tlbnRyeS50YWddID0gZW50cnk7XG4gICAgfVxufVxuXG5EaXJlY3RvcnkucHJvdG90eXBlID0ge1xuXG4gICAgcmVhZFRhYmxlOiBmdW5jdGlvbihuYW1lLCBDdG9yKSB7XG4gICAgICAgIHZhciBkZWYgPSB0aGlzLnRhYmxlc1tuYW1lXTtcbiAgICAgICAgaWYgKCFkZWYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRhYmxlIFwiICsgbmFtZSArIFwiIG5vdCBmb3VuZCBpbiBkaXJlY3RvcnlcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh0aGlzW25hbWVdID0gZGVmLnRhYmxlID0gbmV3IEN0b3IodGhpcywgZGVmKSk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24odGFibGVzKSB7XG4gICAgICAgIHZhciB0YWJsZUNvdW50ID0gT2JqZWN0LmtleXModGFibGVzKS5sZW5ndGg7XG5cbiAgICAgICAgdmFyIG1heHBvdzIgPSBNYXRoLnBvdygyLCBNYXRoLmZsb29yKE1hdGgubG9nKHRhYmxlQ291bnQpIC8gTWF0aC5MTjIpKTtcbiAgICAgICAgdmFyIHNlYXJjaFJhbmdlID0gbWF4cG93MiAqIDE2O1xuICAgICAgICB2YXIgZW50cnlTZWxlY3RvciA9IE1hdGguZmxvb3IoTWF0aC5sb2cobWF4cG93MikgLyBNYXRoLkxOMik7XG4gICAgICAgIHZhciByYW5nZVNoaWZ0ID0gdGFibGVDb3VudCAqIDE2IC0gc2VhcmNoUmFuZ2U7XG5cbiAgICAgICAgdmFyIG91dCA9IEJpbmFyeVN0cmVhbSgpO1xuICAgICAgICBvdXQud3JpdGVMb25nKHRoaXMuc2NhbGVyVHlwZSk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRhYmxlQ291bnQpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydChzZWFyY2hSYW5nZSk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KGVudHJ5U2VsZWN0b3IpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydChyYW5nZVNoaWZ0KTtcblxuICAgICAgICB2YXIgZGlyZWN0b3J5TGVuZ3RoID0gdGFibGVDb3VudCAqIDE2O1xuICAgICAgICB2YXIgb2Zmc2V0ID0gb3V0Lm9mZnNldCgpICsgZGlyZWN0b3J5TGVuZ3RoO1xuICAgICAgICB2YXIgaGVhZE9mZnNldCA9IG51bGw7XG4gICAgICAgIHZhciB0YWJsZURhdGEgPSBCaW5hcnlTdHJlYW0oKTtcblxuICAgICAgICBmb3IgKHZhciB0YWcgaW4gdGFibGVzKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkodGFibGVzLCB0YWcpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gdGFibGVzW3RhZ107XG5cbiAgICAgICAgICAgICAgICBvdXQud3JpdGVTdHJpbmcodGFnKTtcbiAgICAgICAgICAgICAgICBvdXQud3JpdGVMb25nKHRoaXMuY2hlY2tzdW0odGFibGUpKTtcbiAgICAgICAgICAgICAgICBvdXQud3JpdGVMb25nKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgb3V0LndyaXRlTG9uZyh0YWJsZS5sZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgdGFibGVEYXRhLndyaXRlKHRhYmxlKTtcbiAgICAgICAgICAgICAgICBpZiAodGFnID09IFwiaGVhZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZnNldCArPSB0YWJsZS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICB3aGlsZSAob2Zmc2V0ICUgNCkge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZURhdGEud3JpdGVCeXRlKDApO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvdXQud3JpdGUodGFibGVEYXRhLmdldCgpKTtcbiAgICAgICAgdmFyIHN1bSA9IHRoaXMuY2hlY2tzdW0ob3V0LmdldCgpKTtcbiAgICAgICAgdmFyIGFkanVzdG1lbnQgPSAweEIxQjBBRkJBIC0gc3VtO1xuXG4gICAgICAgIG91dC5vZmZzZXQoaGVhZE9mZnNldCArIDgpO1xuICAgICAgICBvdXQud3JpdGVMb25nKGFkanVzdG1lbnQpO1xuICAgICAgICByZXR1cm4gb3V0LmdldCgpO1xuICAgIH0sXG5cbiAgICBjaGVja3N1bTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBkYXRhID0gQmluYXJ5U3RyZWFtKGRhdGEpO1xuICAgICAgICB2YXIgc3VtID0gMDtcbiAgICAgICAgd2hpbGUgKCFkYXRhLmVvZigpKSB7XG4gICAgICAgICAgICBzdW0gKz0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdW0gJiAweEZGRkZGRkZGO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGRlZnRhYmxlKG1ldGhvZHMpIHtcbiAgICBmdW5jdGlvbiBDdG9yKGZpbGUsIGRlZikge1xuICAgICAgICB0aGlzLmRlZmluaXRpb24gPSBkZWY7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gZGVmLmxlbmd0aDtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBkZWYub2Zmc2V0O1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICB0aGlzLnJhd0RhdGEgPSBmaWxlLnJhdztcbiAgICAgICAgdGhpcy5wYXJzZShmaWxlLnJhdyk7XG4gICAgfVxuICAgIEN0b3IucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXdEYXRhLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLmxlbmd0aCk7XG4gICAgfTtcbiAgICBmb3IgKHZhciBpIGluIG1ldGhvZHMpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5KG1ldGhvZHMsIGkpKSB7XG4gICAgICAgICAgICBDdG9yW2ldID0gQ3Rvci5wcm90b3R5cGVbaV0gPSBtZXRob2RzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBDdG9yO1xufVxuXG52YXIgSGVhZFRhYmxlID0gZGVmdGFibGUoe1xuICAgIHBhcnNlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGRhdGEub2Zmc2V0KHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy52ZXJzaW9uICAgICAgICAgICAgID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICB0aGlzLnJldmlzaW9uICAgICAgICAgICAgPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgIHRoaXMuY2hlY2tTdW1BZGp1c3RtZW50ICA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgdGhpcy5tYWdpY051bWJlciAgICAgICAgID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICB0aGlzLmZsYWdzICAgICAgICAgICAgICAgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLnVuaXRzUGVyRW0gICAgICAgICAgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLmNyZWF0ZWQgICAgICAgICAgICAgPSBkYXRhLnJlYWQoOCk7XG4gICAgICAgIHRoaXMubW9kaWZpZWQgICAgICAgICAgICA9IGRhdGEucmVhZCg4KTtcblxuICAgICAgICB0aGlzLnhNaW4gPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy55TWluID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMueE1heCA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLnlNYXggPSBkYXRhLnJlYWRTaG9ydF8oKTtcblxuICAgICAgICB0aGlzLm1hY1N0eWxlICAgICAgICAgICA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubG93ZXN0UmVjUFBFTSAgICAgID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy5mb250RGlyZWN0aW9uSGludCAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy5pbmRleFRvTG9jRm9ybWF0ICAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy5nbHlwaERhdGFGb3JtYXQgICAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oaW5kZXhUb0xvY0Zvcm1hdCkge1xuICAgICAgICB2YXIgb3V0ID0gQmluYXJ5U3RyZWFtKCk7XG4gICAgICAgIG91dC53cml0ZUxvbmcodGhpcy52ZXJzaW9uKTtcbiAgICAgICAgb3V0LndyaXRlTG9uZyh0aGlzLnJldmlzaW9uKTtcbiAgICAgICAgb3V0LndyaXRlTG9uZygwKTsgICAgICAgLy8gY2hlY2tzdW0gYWRqdXN0bWVudDsgc2hhbGwgYmUgY29tcHV0ZWQgbGF0ZXJcbiAgICAgICAgb3V0LndyaXRlTG9uZyh0aGlzLm1hZ2ljTnVtYmVyKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5mbGFncyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMudW5pdHNQZXJFbSk7XG4gICAgICAgIG91dC53cml0ZSh0aGlzLmNyZWF0ZWQpO1xuICAgICAgICBvdXQud3JpdGUodGhpcy5tb2RpZmllZCk7XG4gICAgICAgIG91dC53cml0ZVNob3J0Xyh0aGlzLnhNaW4pO1xuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy55TWluKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnRfKHRoaXMueE1heCk7XG4gICAgICAgIG91dC53cml0ZVNob3J0Xyh0aGlzLnlNYXgpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydCh0aGlzLm1hY1N0eWxlKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5sb3dlc3RSZWNQUEVNKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnRfKHRoaXMuZm9udERpcmVjdGlvbkhpbnQpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydF8oaW5kZXhUb0xvY0Zvcm1hdCk7IC8vIHRoaXMgd2lsbCBkZXBlbmQgb24gdGhlIGBsb2NhYCB0YWJsZVxuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy5nbHlwaERhdGFGb3JtYXQpO1xuICAgICAgICByZXR1cm4gb3V0LmdldCgpO1xuICAgIH1cbn0pO1xuXG52YXIgTG9jYVRhYmxlID0gZGVmdGFibGUoe1xuICAgIHBhcnNlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGRhdGEub2Zmc2V0KHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHRoaXMuZmlsZS5oZWFkLmluZGV4VG9Mb2NGb3JtYXQ7XG4gICAgICAgIGlmIChmb3JtYXQgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0cyA9IGRhdGEudGltZXModGhpcy5sZW5ndGggLyAyLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHJldHVybiAyICogZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXRzID0gZGF0YS50aW1lcyh0aGlzLmxlbmd0aCAvIDQsIGRhdGEucmVhZExvbmcpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBvZmZzZXRPZjogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0c1tpZF07XG4gICAgfSxcbiAgICBsZW5ndGhPZjogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0c1tpZCArIDFdIC0gdGhpcy5vZmZzZXRzW2lkXTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24ob2Zmc2V0cykge1xuICAgICAgICB2YXIgb3V0ID0gQmluYXJ5U3RyZWFtKCk7XG4gICAgICAgIHZhciBuZWVkc0xvbmdGb3JtYXQgPSBvZmZzZXRzW29mZnNldHMubGVuZ3RoIC0gMV0gPiAweEZGRkY7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2Zmc2V0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKG5lZWRzTG9uZ0Zvcm1hdCkge1xuICAgICAgICAgICAgICAgIG91dC53cml0ZUxvbmcob2Zmc2V0c1tpXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG91dC53cml0ZVNob3J0KG9mZnNldHNbaV0gLyAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0OiBuZWVkc0xvbmdGb3JtYXQgPyAxIDogMCxcbiAgICAgICAgICAgIHRhYmxlOiBvdXQuZ2V0KClcbiAgICAgICAgfTtcbiAgICB9XG59KTtcblxudmFyIEhoZWFUYWJsZSA9IGRlZnRhYmxlKHtcbiAgICBwYXJzZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBkYXRhLm9mZnNldCh0aGlzLm9mZnNldCk7XG5cbiAgICAgICAgdGhpcy52ZXJzaW9uICAgICAgICAgICAgICA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgdGhpcy5hc2NlbnQgICAgICAgICAgICAgICA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLmRlc2NlbnQgICAgICAgICAgICAgID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMubGluZUdhcCAgICAgICAgICAgICAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy5hZHZhbmNlV2lkdGhNYXggICAgICA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubWluTGVmdFNpZGVCZWFyaW5nICAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy5taW5SaWdodFNpZGVCZWFyaW5nICA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLnhNYXhFeHRlbnQgICAgICAgICAgID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMuY2FyZXRTbG9wZVJpc2UgICAgICAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy5jYXJldFNsb3BlUnVuICAgICAgICA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLmNhcmV0T2Zmc2V0ICAgICAgICAgID0gZGF0YS5yZWFkU2hvcnRfKCk7XG5cbiAgICAgICAgZGF0YS5za2lwKDQgKiAyKTsgICAgICAgLy8gcmVzZXJ2ZWRcblxuICAgICAgICB0aGlzLm1ldHJpY0RhdGFGb3JtYXQgICAgID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMubnVtT2ZMb25nSG9yTWV0cmljcyAgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbihpZHMpIHtcbiAgICAgICAgdmFyIG91dCA9IEJpbmFyeVN0cmVhbSgpO1xuICAgICAgICBvdXQud3JpdGVMb25nKHRoaXMudmVyc2lvbik7XG4gICAgICAgIG91dC53cml0ZVNob3J0Xyh0aGlzLmFzY2VudCk7XG4gICAgICAgIG91dC53cml0ZVNob3J0Xyh0aGlzLmRlc2NlbnQpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy5saW5lR2FwKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5hZHZhbmNlV2lkdGhNYXgpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy5taW5MZWZ0U2lkZUJlYXJpbmcpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydF8odGhpcy5taW5SaWdodFNpZGVCZWFyaW5nKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnRfKHRoaXMueE1heEV4dGVudCk7XG4gICAgICAgIG91dC53cml0ZVNob3J0Xyh0aGlzLmNhcmV0U2xvcGVSaXNlKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnRfKHRoaXMuY2FyZXRTbG9wZVJ1bik7XG4gICAgICAgIG91dC53cml0ZVNob3J0Xyh0aGlzLmNhcmV0T2Zmc2V0KTtcblxuICAgICAgICBvdXQud3JpdGUoWyAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwIF0pOyAvLyByZXNlcnZlZCBieXRlc1xuXG4gICAgICAgIG91dC53cml0ZVNob3J0Xyh0aGlzLm1ldHJpY0RhdGFGb3JtYXQpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydChpZHMubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIG91dC5nZXQoKTtcbiAgICB9XG59KTtcblxudmFyIE1heHBUYWJsZSA9IGRlZnRhYmxlKHtcbiAgICBwYXJzZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBkYXRhLm9mZnNldCh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgdGhpcy5udW1HbHlwaHMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heFBvaW50cyA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubWF4Q29udG91cnMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heENvbXBvbmVudFBvaW50cyA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubWF4Q29tcG9uZW50Q29udG91cnMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heFpvbmVzID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy5tYXhUd2lsaWdodFBvaW50cyA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubWF4U3RvcmFnZSA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubWF4RnVuY3Rpb25EZWZzID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy5tYXhJbnN0cnVjdGlvbkRlZnMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heFN0YWNrRWxlbWVudHMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heFNpemVPZkluc3RydWN0aW9ucyA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMubWF4Q29tcG9uZW50RWxlbWVudHMgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLm1heENvbXBvbmVudERlcHRoID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oZ2x5cGhJZHMpIHtcbiAgICAgICAgdmFyIG91dCA9IEJpbmFyeVN0cmVhbSgpO1xuICAgICAgICBvdXQud3JpdGVMb25nKHRoaXMudmVyc2lvbik7XG4gICAgICAgIG91dC53cml0ZVNob3J0KGdseXBoSWRzLmxlbmd0aCk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4UG9pbnRzKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5tYXhDb250b3Vycyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4Q29tcG9uZW50UG9pbnRzKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5tYXhDb21wb25lbnRDb250b3Vycyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4Wm9uZXMpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydCh0aGlzLm1heFR3aWxpZ2h0UG9pbnRzKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5tYXhTdG9yYWdlKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5tYXhGdW5jdGlvbkRlZnMpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydCh0aGlzLm1heEluc3RydWN0aW9uRGVmcyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4U3RhY2tFbGVtZW50cyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4U2l6ZU9mSW5zdHJ1Y3Rpb25zKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQodGhpcy5tYXhDb21wb25lbnRFbGVtZW50cyk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KHRoaXMubWF4Q29tcG9uZW50RGVwdGgpO1xuICAgICAgICByZXR1cm4gb3V0LmdldCgpO1xuICAgIH1cbn0pO1xuXG52YXIgSG10eFRhYmxlID0gZGVmdGFibGUoe1xuICAgIHBhcnNlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGRhdGEub2Zmc2V0KHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdmFyIGRpciA9IHRoaXMuZmlsZSwgaGhlYSA9IGRpci5oaGVhO1xuICAgICAgICB0aGlzLm1ldHJpY3MgPSBkYXRhLnRpbWVzKGhoZWEubnVtT2ZMb25nSG9yTWV0cmljcywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWR2YW5jZTogZGF0YS5yZWFkU2hvcnQoKSxcbiAgICAgICAgICAgICAgICBsc2I6IGRhdGEucmVhZFNob3J0XygpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGxzYkNvdW50ID0gZGlyLm1heHAubnVtR2x5cGhzIC0gZGlyLmhoZWEubnVtT2ZMb25nSG9yTWV0cmljcztcbiAgICAgICAgdGhpcy5sZWZ0U2lkZUJlYXJpbmdzID0gZGF0YS50aW1lcyhsc2JDb3VudCwgZGF0YS5yZWFkU2hvcnRfKTtcbiAgICB9LFxuICAgIGZvckdseXBoOiBmdW5jdGlvbihpZCkge1xuICAgICAgICB2YXIgbWV0cmljcyA9IHRoaXMubWV0cmljcztcbiAgICAgICAgdmFyIG4gPSBtZXRyaWNzLmxlbmd0aDtcbiAgICAgICAgaWYgKGlkIDwgbikge1xuICAgICAgICAgICAgcmV0dXJuIG1ldHJpY3NbaWRdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZHZhbmNlOiBtZXRyaWNzW24gLSAxXS5hZHZhbmNlLFxuICAgICAgICAgICAgbHNiOiB0aGlzLmxlZnRTaWRlQmVhcmluZ3NbaWQgLSBuXVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbihnbHlwaElkcykge1xuICAgICAgICB2YXIgb3V0ID0gQmluYXJ5U3RyZWFtKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2x5cGhJZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBtID0gdGhpcy5mb3JHbHlwaChnbHlwaElkc1tpXSk7XG4gICAgICAgICAgICBvdXQud3JpdGVTaG9ydChtLmFkdmFuY2UpO1xuICAgICAgICAgICAgb3V0LndyaXRlU2hvcnRfKG0ubHNiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0LmdldCgpO1xuICAgIH1cbn0pO1xuXG52YXIgR2x5ZlRhYmxlID0gKGZ1bmN0aW9uKCl7XG5cbiAgICBmdW5jdGlvbiBTaW1wbGVHbHlwaChyYXcpIHtcbiAgICAgICAgdGhpcy5yYXcgPSByYXc7XG4gICAgfVxuICAgIFNpbXBsZUdseXBoLnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29tcG91bmQ6IGZhbHNlLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmF3LmdldCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBBUkdfMV9BTkRfMl9BUkVfV09SRFMgICAgID0gMHgwMDAxO1xuICAgIHZhciBXRV9IQVZFX0FfU0NBTEUgICAgICAgICAgID0gMHgwMDA4O1xuICAgIHZhciBNT1JFX0NPTVBPTkVOVFMgICAgICAgICAgID0gMHgwMDIwO1xuICAgIHZhciBXRV9IQVZFX0FOX1hfQU5EX1lfU0NBTEUgID0gMHgwMDQwO1xuICAgIHZhciBXRV9IQVZFX0FfVFdPX0JZX1RXTyAgICAgID0gMHgwMDgwO1xuICAgIC8vdmFyIFdFX0hBVkVfSU5TVFJVQ1RJT05TICAgICAgPSAweDAxMDA7XG5cbiAgICBmdW5jdGlvbiBDb21wb3VuZEdseXBoKGRhdGEpIHtcbiAgICAgICAgdGhpcy5yYXcgPSBkYXRhO1xuICAgICAgICB2YXIgaWRzID0gdGhpcy5nbHlwaElkcyA9IFtdO1xuICAgICAgICB2YXIgb2Zmc2V0cyA9IHRoaXMuaWRPZmZzZXRzID0gW107XG4gICAgICAgIHdoaWxlICh0cnVlKSB7ICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgICAgICAgICB2YXIgZmxhZ3MgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgb2Zmc2V0cy5wdXNoKGRhdGEub2Zmc2V0KCkpO1xuICAgICAgICAgICAgaWRzLnB1c2goZGF0YS5yZWFkU2hvcnQoKSk7XG5cbiAgICAgICAgICAgIGlmICghKGZsYWdzICYgTU9SRV9DT01QT05FTlRTKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhLnNraXAoZmxhZ3MgJiBBUkdfMV9BTkRfMl9BUkVfV09SRFMgPyA0IDogMik7XG5cbiAgICAgICAgICAgIGlmIChmbGFncyAmIFdFX0hBVkVfQV9UV09fQllfVFdPKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5za2lwKDgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmbGFncyAmIFdFX0hBVkVfQU5fWF9BTkRfWV9TQ0FMRSkge1xuICAgICAgICAgICAgICAgIGRhdGEuc2tpcCg0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmxhZ3MgJiBXRV9IQVZFX0FfU0NBTEUpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnNraXAoMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBDb21wb3VuZEdseXBoLnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29tcG91bmQ6IHRydWUsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24ob2xkMm5ldykge1xuICAgICAgICAgICAgdmFyIG91dCA9IEJpbmFyeVN0cmVhbSh0aGlzLnJhdy5nZXQoKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZ2x5cGhJZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSB0aGlzLmdseXBoSWRzW2ldO1xuICAgICAgICAgICAgICAgIG91dC5vZmZzZXQodGhpcy5pZE9mZnNldHNbaV0pO1xuICAgICAgICAgICAgICAgIG91dC53cml0ZVNob3J0KG9sZDJuZXdbaWRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXQuZ2V0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGRlZnRhYmxlKHtcbiAgICAgICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZSA9IHt9O1xuICAgICAgICB9LFxuICAgICAgICBnbHlwaEZvcjogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkoY2FjaGUsIGlkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZVtpZF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBsb2NhID0gdGhpcy5maWxlLmxvY2E7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gbG9jYS5sZW5ndGhPZihpZCk7XG5cbiAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNhY2hlW2lkXSA9IG51bGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMucmF3RGF0YTtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldCArIGxvY2Eub2Zmc2V0T2YoaWQpO1xuICAgICAgICAgICAgdmFyIHJhdyA9IEJpbmFyeVN0cmVhbShkYXRhLnNsaWNlKG9mZnNldCwgbGVuZ3RoKSk7XG5cbiAgICAgICAgICAgIHZhciBudW1iZXJPZkNvbnRvdXJzID0gcmF3LnJlYWRTaG9ydF8oKTtcbiAgICAgICAgICAgIHZhciB4TWluID0gcmF3LnJlYWRTaG9ydF8oKTtcbiAgICAgICAgICAgIHZhciB5TWluID0gcmF3LnJlYWRTaG9ydF8oKTtcbiAgICAgICAgICAgIHZhciB4TWF4ID0gcmF3LnJlYWRTaG9ydF8oKTtcbiAgICAgICAgICAgIHZhciB5TWF4ID0gcmF3LnJlYWRTaG9ydF8oKTtcblxuICAgICAgICAgICAgdmFyIGdseXBoID0gY2FjaGVbaWRdID0gbnVtYmVyT2ZDb250b3VycyA9PSAtMSA/IG5ldyBDb21wb3VuZEdseXBoKHJhdykgOiBuZXcgU2ltcGxlR2x5cGgocmF3KTtcblxuICAgICAgICAgICAgZ2x5cGgubnVtYmVyT2ZDb250b3VycyA9IG51bWJlck9mQ29udG91cnM7XG4gICAgICAgICAgICBnbHlwaC54TWluID0geE1pbjtcbiAgICAgICAgICAgIGdseXBoLnlNaW4gPSB5TWluO1xuICAgICAgICAgICAgZ2x5cGgueE1heCA9IHhNYXg7XG4gICAgICAgICAgICBnbHlwaC55TWF4ID0geU1heDtcblxuICAgICAgICAgICAgcmV0dXJuIGdseXBoO1xuICAgICAgICB9LFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKGdseXBocywgb2xkSWRzLCBvbGQybmV3KSB7XG4gICAgICAgICAgICB2YXIgb3V0ID0gQmluYXJ5U3RyZWFtKCksIG9mZnNldHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2xkSWRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gb2xkSWRzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBnbHlwaCA9IGdseXBoc1tpZF07XG4gICAgICAgICAgICAgICAgb2Zmc2V0cy5wdXNoKG91dC5vZmZzZXQoKSk7XG4gICAgICAgICAgICAgICAgaWYgKGdseXBoKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dC53cml0ZShnbHlwaC5yZW5kZXIob2xkMm5ldykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldHMucHVzaChvdXQub2Zmc2V0KCkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0YWJsZTogb3V0LmdldCgpLFxuICAgICAgICAgICAgICAgIG9mZnNldHM6IG9mZnNldHNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9KTtcblxufSgpKTtcblxudmFyIE5hbWVUYWJsZSA9IChmdW5jdGlvbigpe1xuXG4gICAgZnVuY3Rpb24gTmFtZUVudHJ5KHRleHQsIGVudHJ5KSB7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gdGV4dC5sZW5ndGg7XG4gICAgICAgIHRoaXMucGxhdGZvcm1JRCA9IGVudHJ5LnBsYXRmb3JtSUQ7XG4gICAgICAgIHRoaXMucGxhdGZvcm1TcGVjaWZpY0lEID0gZW50cnkucGxhdGZvcm1TcGVjaWZpY0lEO1xuICAgICAgICB0aGlzLmxhbmd1YWdlSUQgPSBlbnRyeS5sYW5ndWFnZUlEO1xuICAgICAgICB0aGlzLm5hbWVJRCA9IGVudHJ5Lm5hbWVJRDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmdGFibGUoe1xuICAgICAgICBwYXJzZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgZGF0YS5vZmZzZXQodGhpcy5vZmZzZXQpO1xuICAgICAgICAgICAgZGF0YS5yZWFkU2hvcnQoKTsgICAvLyBmb3JtYXRcbiAgICAgICAgICAgIHZhciBjb3VudCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICB2YXIgc3RyaW5nT2Zmc2V0ID0gdGhpcy5vZmZzZXQgKyBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgdmFyIG5hbWVSZWNvcmRzID0gZGF0YS50aW1lcyhjb3VudCwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybUlEICAgICAgICAgOiBkYXRhLnJlYWRTaG9ydCgpLFxuICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybVNwZWNpZmljSUQgOiBkYXRhLnJlYWRTaG9ydCgpLFxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZUlEICAgICAgICAgOiBkYXRhLnJlYWRTaG9ydCgpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lSUQgICAgICAgICAgICAgOiBkYXRhLnJlYWRTaG9ydCgpLFxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggICAgICAgICAgICAgOiBkYXRhLnJlYWRTaG9ydCgpLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgICAgICAgICAgICAgOiBkYXRhLnJlYWRTaG9ydCgpICsgc3RyaW5nT2Zmc2V0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHN0cmluZ3MgPSB0aGlzLnN0cmluZ3MgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZVJlY29yZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVjID0gbmFtZVJlY29yZHNbaV07XG4gICAgICAgICAgICAgICAgZGF0YS5vZmZzZXQocmVjLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSBkYXRhLnJlYWRTdHJpbmcocmVjLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdHJpbmdzW3JlYy5uYW1lSURdKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ3NbcmVjLm5hbWVJRF0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RyaW5nc1tyZWMubmFtZUlEXS5wdXNoKG5ldyBOYW1lRW50cnkodGV4dCwgcmVjKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBvc3RzY3JpcHRFbnRyeSA9IHN0cmluZ3NbNl1bMF07XG4gICAgICAgICAgICB0aGlzLnBvc3RzY3JpcHROYW1lID0gdGhpcy5wb3N0c2NyaXB0RW50cnkudGV4dC5yZXBsYWNlKC9bXlxceDIwLVxceDdGXS9nLCBcIlwiKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKHBzTmFtZSkge1xuICAgICAgICAgICAgdmFyIHN0cmluZ3MgPSB0aGlzLnN0cmluZ3M7XG4gICAgICAgICAgICB2YXIgc3RyQ291bnQgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBzdHJpbmdzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5KHN0cmluZ3MsIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ckNvdW50ICs9IHN0cmluZ3NbaV0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBvdXQgPSBCaW5hcnlTdHJlYW0oKTtcbiAgICAgICAgICAgIHZhciBzdHJUYWJsZSA9IEJpbmFyeVN0cmVhbSgpO1xuXG4gICAgICAgICAgICBvdXQud3JpdGVTaG9ydCgwKTsgIC8vIGZvcm1hdFxuICAgICAgICAgICAgb3V0LndyaXRlU2hvcnQoc3RyQ291bnQpO1xuICAgICAgICAgICAgb3V0LndyaXRlU2hvcnQoNiArIDEyICogc3RyQ291bnQpOyAvLyBzdHJpbmdPZmZzZXRcblxuICAgICAgICAgICAgZm9yIChpIGluIHN0cmluZ3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkoc3RyaW5ncywgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBpID09IDYgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTmFtZUVudHJ5KHBzTmFtZSwgdGhpcy5wb3N0c2NyaXB0RW50cnkpXG4gICAgICAgICAgICAgICAgICAgIF0gOiBzdHJpbmdzW2ldO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxpc3QubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSBsaXN0W2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0LndyaXRlU2hvcnQoc3RyLnBsYXRmb3JtSUQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0LndyaXRlU2hvcnQoc3RyLnBsYXRmb3JtU3BlY2lmaWNJRCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQud3JpdGVTaG9ydChzdHIubGFuZ3VhZ2VJRCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQud3JpdGVTaG9ydChzdHIubmFtZUlEKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dC53cml0ZVNob3J0KHN0ci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0LndyaXRlU2hvcnQoc3RyVGFibGUub2Zmc2V0KCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJUYWJsZS53cml0ZVN0cmluZyhzdHIudGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG91dC53cml0ZShzdHJUYWJsZS5nZXQoKSk7XG5cbiAgICAgICAgICAgIHJldHVybiBvdXQuZ2V0KCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxufSkoKTtcblxudmFyIFBvc3RUYWJsZSA9IChmdW5jdGlvbigpe1xuXG4gICAgdmFyIFBPU1RTQ1JJUFRfR0xZUEhTID0gXCIubm90ZGVmIC5udWxsIG5vbm1hcmtpbmdyZXR1cm4gc3BhY2UgZXhjbGFtIHF1b3RlZGJsIG51bWJlcnNpZ24gZG9sbGFyIHBlcmNlbnQgYW1wZXJzYW5kIHF1b3Rlc2luZ2xlIHBhcmVubGVmdCBwYXJlbnJpZ2h0IGFzdGVyaXNrIHBsdXMgY29tbWEgaHlwaGVuIHBlcmlvZCBzbGFzaCB6ZXJvIG9uZSB0d28gdGhyZWUgZm91ciBmaXZlIHNpeCBzZXZlbiBlaWdodCBuaW5lIGNvbG9uIHNlbWljb2xvbiBsZXNzIGVxdWFsIGdyZWF0ZXIgcXVlc3Rpb24gYXQgQSBCIEMgRCBFIEYgRyBIIEkgSiBLIEwgTSBOIE8gUCBRIFIgUyBUIFUgViBXIFggWSBaIGJyYWNrZXRsZWZ0IGJhY2tzbGFzaCBicmFja2V0cmlnaHQgYXNjaWljaXJjdW0gdW5kZXJzY29yZSBncmF2ZSBhIGIgYyBkIGUgZiBnIGggaSBqIGsgbCBtIG4gbyBwIHEgciBzIHQgdSB2IHcgeCB5IHogYnJhY2VsZWZ0IGJhciBicmFjZXJpZ2h0IGFzY2lpdGlsZGUgQWRpZXJlc2lzIEFyaW5nIENjZWRpbGxhIEVhY3V0ZSBOdGlsZGUgT2RpZXJlc2lzIFVkaWVyZXNpcyBhYWN1dGUgYWdyYXZlIGFjaXJjdW1mbGV4IGFkaWVyZXNpcyBhdGlsZGUgYXJpbmcgY2NlZGlsbGEgZWFjdXRlIGVncmF2ZSBlY2lyY3VtZmxleCBlZGllcmVzaXMgaWFjdXRlIGlncmF2ZSBpY2lyY3VtZmxleCBpZGllcmVzaXMgbnRpbGRlIG9hY3V0ZSBvZ3JhdmUgb2NpcmN1bWZsZXggb2RpZXJlc2lzIG90aWxkZSB1YWN1dGUgdWdyYXZlIHVjaXJjdW1mbGV4IHVkaWVyZXNpcyBkYWdnZXIgZGVncmVlIGNlbnQgc3Rlcmxpbmcgc2VjdGlvbiBidWxsZXQgcGFyYWdyYXBoIGdlcm1hbmRibHMgcmVnaXN0ZXJlZCBjb3B5cmlnaHQgdHJhZGVtYXJrIGFjdXRlIGRpZXJlc2lzIG5vdGVxdWFsIEFFIE9zbGFzaCBpbmZpbml0eSBwbHVzbWludXMgbGVzc2VxdWFsIGdyZWF0ZXJlcXVhbCB5ZW4gbXUgcGFydGlhbGRpZmYgc3VtbWF0aW9uIHByb2R1Y3QgcGkgaW50ZWdyYWwgb3JkZmVtaW5pbmUgb3JkbWFzY3VsaW5lIE9tZWdhIGFlIG9zbGFzaCBxdWVzdGlvbmRvd24gZXhjbGFtZG93biBsb2dpY2Fsbm90IHJhZGljYWwgZmxvcmluIGFwcHJveGVxdWFsIERlbHRhIGd1aWxsZW1vdGxlZnQgZ3VpbGxlbW90cmlnaHQgZWxsaXBzaXMgbm9uYnJlYWtpbmdzcGFjZSBBZ3JhdmUgQXRpbGRlIE90aWxkZSBPRSBvZSBlbmRhc2ggZW1kYXNoIHF1b3RlZGJsbGVmdCBxdW90ZWRibHJpZ2h0IHF1b3RlbGVmdCBxdW90ZXJpZ2h0IGRpdmlkZSBsb3plbmdlIHlkaWVyZXNpcyBZZGllcmVzaXMgZnJhY3Rpb24gY3VycmVuY3kgZ3VpbHNpbmdsbGVmdCBndWlsc2luZ2xyaWdodCBmaSBmbCBkYWdnZXJkYmwgcGVyaW9kY2VudGVyZWQgcXVvdGVzaW5nbGJhc2UgcXVvdGVkYmxiYXNlIHBlcnRob3VzYW5kIEFjaXJjdW1mbGV4IEVjaXJjdW1mbGV4IEFhY3V0ZSBFZGllcmVzaXMgRWdyYXZlIElhY3V0ZSBJY2lyY3VtZmxleCBJZGllcmVzaXMgSWdyYXZlIE9hY3V0ZSBPY2lyY3VtZmxleCBhcHBsZSBPZ3JhdmUgVWFjdXRlIFVjaXJjdW1mbGV4IFVncmF2ZSBkb3RsZXNzaSBjaXJjdW1mbGV4IHRpbGRlIG1hY3JvbiBicmV2ZSBkb3RhY2NlbnQgcmluZyBjZWRpbGxhIGh1bmdhcnVtbGF1dCBvZ29uZWsgY2Fyb24gTHNsYXNoIGxzbGFzaCBTY2Fyb24gc2Nhcm9uIFpjYXJvbiB6Y2Fyb24gYnJva2VuYmFyIEV0aCBldGggWWFjdXRlIHlhY3V0ZSBUaG9ybiB0aG9ybiBtaW51cyBtdWx0aXBseSBvbmVzdXBlcmlvciB0d29zdXBlcmlvciB0aHJlZXN1cGVyaW9yIG9uZWhhbGYgb25lcXVhcnRlciB0aHJlZXF1YXJ0ZXJzIGZyYW5jIEdicmV2ZSBnYnJldmUgSWRvdGFjY2VudCBTY2VkaWxsYSBzY2VkaWxsYSBDYWN1dGUgY2FjdXRlIENjYXJvbiBjY2Fyb24gZGNyb2F0XCIuc3BsaXQoL1xccysvZyk7XG5cbiAgICByZXR1cm4gZGVmdGFibGUoe1xuICAgICAgICBwYXJzZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgZGF0YS5vZmZzZXQodGhpcy5vZmZzZXQpO1xuXG4gICAgICAgICAgICB0aGlzLmZvcm1hdCA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgICAgIHRoaXMuaXRhbGljQW5nbGUgPSBkYXRhLnJlYWRGaXhlZF8oKTtcbiAgICAgICAgICAgIHRoaXMudW5kZXJsaW5lUG9zaXRpb24gPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgICAgIHRoaXMudW5kZXJsaW5lVGhpY2tuZXNzID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgICAgICB0aGlzLmlzRml4ZWRQaXRjaCA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgICAgIHRoaXMubWluTWVtVHlwZTQyID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICAgICAgdGhpcy5tYXhNZW1UeXBlNDIgPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgICAgICB0aGlzLm1pbk1lbVR5cGUxID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICAgICAgdGhpcy5tYXhNZW1UeXBlMSA9IGRhdGEucmVhZExvbmcoKTtcblxuICAgICAgICAgICAgdmFyIG51bWJlck9mR2x5cGhzO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZm9ybWF0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMHgwMDAxMDAwMDpcbiAgICAgICAgICAgICAgY2FzZSAweDAwMDMwMDAwOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMHgwMDAyMDAwMDpcbiAgICAgICAgICAgICAgICBudW1iZXJPZkdseXBocyA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5nbHlwaE5hbWVJbmRleCA9IGRhdGEudGltZXMobnVtYmVyT2ZHbHlwaHMsIGRhdGEucmVhZFNob3J0KTtcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWVzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGxpbWl0ID0gdGhpcy5vZmZzZXQgKyB0aGlzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZGF0YS5vZmZzZXQoKSA8IGxpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZXMucHVzaChkYXRhLnJlYWRTdHJpbmcoZGF0YS5yZWFkQnl0ZSgpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMHgwMDAyNTAwMDpcbiAgICAgICAgICAgICAgICBudW1iZXJPZkdseXBocyA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRzID0gZGF0YS5yZWFkKG51bWJlck9mR2x5cGhzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDB4MDAwNDAwMDA6XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAgPSBkYXRhLnRpbWVzKHRoaXMuZmlsZS5tYXhwLm51bUdseXBocywgZGF0YS5yZWFkU2hvcnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnbHlwaEZvcjogZnVuY3Rpb24oY29kZSkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmZvcm1hdCkge1xuICAgICAgICAgICAgICBjYXNlIDB4MDAwMTAwMDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFBPU1RTQ1JJUFRfR0xZUEhTW2NvZGVdIHx8IFwiLm5vdGRlZlwiO1xuXG4gICAgICAgICAgICAgIGNhc2UgMHgwMDAyMDAwMDpcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdseXBoTmFtZUluZGV4W2NvZGVdO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IFBPU1RTQ1JJUFRfR0xZUEhTLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUE9TVFNDUklQVF9HTFlQSFNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lc1tpbmRleCAtIFBPU1RTQ1JJUFRfR0xZUEhTLmxlbmd0aF0gfHwgXCIubm90ZGVmXCI7XG5cbiAgICAgICAgICAgICAgY2FzZSAweDAwMDI1MDAwOlxuXG4gICAgICAgICAgICAgIGNhc2UgMHgwMDAzMDAwMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIubm90ZGVmXCI7XG5cbiAgICAgICAgICAgICAgY2FzZSAweDAwMDQwMDAwOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcFtjb2RlXSB8fCAweEZGRkY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24obWFwcGluZykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZm9ybWF0ID09IDB4MDAwMzAwMDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yYXcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8ga2VlcCBvcmlnaW5hbCBoZWFkZXIsIGJ1dCBzZXQgZm9ybWF0IHRvIDIuMFxuICAgICAgICAgICAgdmFyIG91dCA9IEJpbmFyeVN0cmVhbSh0aGlzLnJhd0RhdGEuc2xpY2UodGhpcy5vZmZzZXQsIDMyKSk7XG4gICAgICAgICAgICBvdXQud3JpdGVMb25nKDB4MDAwMjAwMDApO1xuICAgICAgICAgICAgb3V0Lm9mZnNldCgzMik7XG5cbiAgICAgICAgICAgIHZhciBpbmRleGVzID0gW107XG4gICAgICAgICAgICB2YXIgc3RyaW5ncyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcHBpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBtYXBwaW5nW2ldO1xuICAgICAgICAgICAgICAgIHZhciBwb3N0ID0gdGhpcy5nbHlwaEZvcihpZCk7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gUE9TVFNDUklQVF9HTFlQSFMuaW5kZXhPZihwb3N0KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ZXMucHVzaChQT1NUU0NSSVBUX0dMWVBIUy5sZW5ndGggKyBzdHJpbmdzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ3MucHVzaChwb3N0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG91dC53cml0ZVNob3J0KG1hcHBpbmcubGVuZ3RoKTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGluZGV4ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBvdXQud3JpdGVTaG9ydChpbmRleGVzW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHN0cmluZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBvdXQud3JpdGVCeXRlKHN0cmluZ3NbaV0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBvdXQud3JpdGVTdHJpbmcoc3RyaW5nc1tpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvdXQuZ2V0KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKCk7XG5cbnZhciBDbWFwVGFibGUgPSAoZnVuY3Rpb24oKXtcblxuICAgIGZ1bmN0aW9uIENtYXBFbnRyeShkYXRhLCBvZmZzZXQsIGNvZGVNYXApIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBzZWxmLnBsYXRmb3JtSUQgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICBzZWxmLnBsYXRmb3JtU3BlY2lmaWNJRCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHNlbGYub2Zmc2V0ID0gb2Zmc2V0ICsgZGF0YS5yZWFkTG9uZygpO1xuXG4gICAgICAgIGRhdGEuc2F2ZUV4Y3Vyc2lvbihmdW5jdGlvbigpe1xuICAgICAgICAgICAgdmFyIGNvZGU7XG4gICAgICAgICAgICBkYXRhLm9mZnNldChzZWxmLm9mZnNldCk7XG4gICAgICAgICAgICBzZWxmLmZvcm1hdCA9IGRhdGEucmVhZFNob3J0KCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoc2VsZi5mb3JtYXQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHNlbGYubGVuZ3RoID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgICAgICBzZWxmLmxhbmd1YWdlID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGVNYXBbaV0gPSBkYXRhLnJlYWRCeXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBzZWxmLmxlbmd0aCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5sYW5ndWFnZSA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgdmFyIHNlZ0NvdW50ID0gZGF0YS5yZWFkU2hvcnQoKSAvIDI7XG5cbiAgICAgICAgICAgICAgICBkYXRhLnNraXAoNik7ICAgICAgIC8vIHNlYXJjaFJhbmdlLCBlbnRyeVNlbGVjdG9yLCByYW5nZVNoaWZ0XG4gICAgICAgICAgICAgICAgdmFyIGVuZENvZGUgPSBkYXRhLnRpbWVzKHNlZ0NvdW50LCBkYXRhLnJlYWRTaG9ydCk7XG4gICAgICAgICAgICAgICAgZGF0YS5za2lwKDIpOyAgICAgICAvLyByZXNlcnZlZCBwYWRcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDb2RlID0gZGF0YS50aW1lcyhzZWdDb3VudCwgZGF0YS5yZWFkU2hvcnQpO1xuICAgICAgICAgICAgICAgIHZhciBpZERlbHRhID0gZGF0YS50aW1lcyhzZWdDb3VudCwgZGF0YS5yZWFkU2hvcnRfKTtcbiAgICAgICAgICAgICAgICB2YXIgaWRSYW5nZU9mZnNldCA9IGRhdGEudGltZXMoc2VnQ291bnQsIGRhdGEucmVhZFNob3J0KTtcblxuICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IChzZWxmLmxlbmd0aCArIHNlbGYub2Zmc2V0IC0gZGF0YS5vZmZzZXQoKSkgLyAyO1xuICAgICAgICAgICAgICAgIHZhciBnbHlwaElkcyA9IGRhdGEudGltZXMoY291bnQsIGRhdGEucmVhZFNob3J0KTtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWdDb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHN0YXJ0Q29kZVtpXSwgZW5kID0gZW5kQ29kZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb2RlID0gc3RhcnQ7IGNvZGUgPD0gZW5kOyArK2NvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnbHlwaElkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkUmFuZ2VPZmZzZXRbaV0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaElkID0gY29kZSArIGlkRGVsdGFbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gbm9uLXplcm8sIGlkUmFuZ2VPZmZzZXQgY29udGFpbnMgZm9yIGVhY2ggc2VnbWVudCB0aGUgYnl0ZSBvZmZzZXQgb2YgdGhlIEdseXBoIElEXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW50byB0aGUgZ2x5cGhJZHMgdGFibGUsIGZyb20gdGhlICpjdXJyZW50KiBgaWAgY2VsbCBvZiBpZFJhbmdlT2Zmc2V0LiAgSW4gb3RoZXIgd29yZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBvZmZzZXQgc3BhbnMgZnJvbSB0aGUgZmlyc3QgaW50byB0aGUgc2Vjb25kIGFycmF5LiAgVGhpcyB3b3JrcywgYmVjYXVzZSB0aGUgYXJyYXlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJlIGNvbnNlY3V0aXZlIGluIHRoZSBUVEYgZmlsZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBbIC4uLmlkUmFuZ2VPZmZzZXQuLi4gXVsgLi4uZ2x5cGhJZHMuLi4gXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgIC4uLi4uLiA0OCAuLi4uLi4gICAgICAgLi4uLiBJRCAuLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgIF4tLS0tLSA0OCBieXRlcyAtLS0tLV5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIChidXQgSSBjYW4ndCBzdG9wIHdvbmRlcmluZyB3aHkgaXMgaXQgbm90IGp1c3QgYSBwbGFpbiBpbmRleCwgcG9zc2libHkgaW5jcmVtZW50ZWQgYnkgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgY2FuIGhhdmUgdGhhdCBzcGVjaWFsIGB6ZXJvYCB2YWx1ZS4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudHMgb2YgaWRSYW5nZU9mZnNldCBhcmUgZXZlbiBudW1iZXJzLCBiZWNhdXNlIGJvdGggYXJyYXlzIGNvbnRhaW4gMTYtYml0IHdvcmRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHlldCB0aGUgb2Zmc2V0IGlzIGluIGJ5dGVzLiAgVGhhdCBpcyB3aHkgd2UgZGl2aWRlIGl0IGJ5IDIuICBUaGVuIHdlIHN1YnRyYWN0IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbWFpbmluZyBzZWdtZW50cyAoc2VnQ291bnQtaSksIGFuZCBhZGQgdGhlIGNvZGUtc3RhcnQgb2Zmc2V0LCB0byB3aGljaCB3ZSBuZWVkIHRvIGFkZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjb3JyZXNwb25kaW5nIGRlbHRhIHRvIGdldCB0aGUgYWN0dWFsIGdseXBoIElELlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGlkUmFuZ2VPZmZzZXRbaV0gLyAyIC0gKHNlZ0NvdW50IC0gaSkgKyAoY29kZSAtIHN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaElkID0gZ2x5cGhJZHNbaW5kZXhdIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdseXBoSWQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2x5cGhJZCArPSBpZERlbHRhW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVNYXBbY29kZV0gPSBnbHlwaElkICYgMHhGRkZGO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBzZWxmLmxlbmd0aCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5sYW5ndWFnZSA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgY29kZSA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGxlbmd0aC0tID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb2RlTWFwW2NvZGUrK10gPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgIGRhdGEucmVhZFNob3J0KCk7IC8vIHJlc2VydmVkXG4gICAgICAgICAgICAgICAgc2VsZi5sZW5ndGggPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5sYW5ndWFnZSA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgICAgICAgICB2YXIgbmdyb3VwcyA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmdyb3Vwcy0tID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb2RlID0gZGF0YS5yZWFkTG9uZygpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kQ2hhckNvZGUgPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnbHlwaENvZGUgPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb2RlIDw9IGVuZENoYXJDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlTWFwW2NvZGUrK10gPSBnbHlwaENvZGUrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuY29uc29sZSkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY29uc29sZS5lcnJvcihcIlVuaGFuZGxlZCBDTUFQIGZvcm1hdDogXCIgKyBzZWxmLmZvcm1hdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJDaGFybWFwKG5jaWQyb2dpZCwgb2dpZDJuZ2lkKSB7XG4gICAgICAgIHZhciBjb2RlcyA9IHNvcnRlZEtleXMobmNpZDJvZ2lkKTtcbiAgICAgICAgdmFyIHN0YXJ0Q29kZXMgPSBbXTtcbiAgICAgICAgdmFyIGVuZENvZGVzID0gW107XG4gICAgICAgIHZhciBsYXN0ID0gbnVsbDtcbiAgICAgICAgdmFyIGRpZmYgPSBudWxsO1xuXG4gICAgICAgIGZ1bmN0aW9uIG5ld19naWQoY2hhcmNvZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvZ2lkMm5naWRbbmNpZDJvZ2lkW2NoYXJjb2RlXV07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgY29kZSA9IGNvZGVzW2ldO1xuICAgICAgICAgICAgdmFyIGdpZCA9IG5ld19naWQoY29kZSk7XG4gICAgICAgICAgICB2YXIgZGVsdGEgPSBnaWQgLSBjb2RlO1xuICAgICAgICAgICAgaWYgKGxhc3QgPT0gbnVsbCB8fCBkZWx0YSAhPT0gZGlmZikge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZENvZGVzLnB1c2gobGFzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXJ0Q29kZXMucHVzaChjb2RlKTtcbiAgICAgICAgICAgICAgICBkaWZmID0gZGVsdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0ID0gY29kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgICBlbmRDb2Rlcy5wdXNoKGxhc3QpO1xuICAgICAgICB9XG4gICAgICAgIGVuZENvZGVzLnB1c2goMHhGRkZGKTtcbiAgICAgICAgc3RhcnRDb2Rlcy5wdXNoKDB4RkZGRik7XG5cbiAgICAgICAgdmFyIHNlZ0NvdW50ID0gc3RhcnRDb2Rlcy5sZW5ndGg7XG4gICAgICAgIHZhciBzZWdDb3VudFgyID0gc2VnQ291bnQgKiAyO1xuICAgICAgICB2YXIgc2VhcmNoUmFuZ2UgPSAyICogTWF0aC5wb3coMiwgTWF0aC5mbG9vcihNYXRoLmxvZyhzZWdDb3VudCkgLyBNYXRoLkxOMikpO1xuICAgICAgICB2YXIgZW50cnlTZWxlY3RvciA9IE1hdGgubG9nKHNlYXJjaFJhbmdlIC8gMikgLyBNYXRoLkxOMjtcbiAgICAgICAgdmFyIHJhbmdlU2hpZnQgPSBzZWdDb3VudFgyIC0gc2VhcmNoUmFuZ2U7XG5cbiAgICAgICAgdmFyIGRlbHRhcyA9IFtdO1xuICAgICAgICB2YXIgcmFuZ2VPZmZzZXRzID0gW107XG4gICAgICAgIHZhciBnbHlwaElkcyA9IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWdDb3VudDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRDb2RlID0gc3RhcnRDb2Rlc1tpXTtcbiAgICAgICAgICAgIHZhciBlbmRDb2RlID0gZW5kQ29kZXNbaV07XG4gICAgICAgICAgICBpZiAoc3RhcnRDb2RlID09IDB4RkZGRikge1xuICAgICAgICAgICAgICAgIGRlbHRhcy5wdXNoKDApO1xuICAgICAgICAgICAgICAgIHJhbmdlT2Zmc2V0cy5wdXNoKDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0YXJ0R2x5cGggPSBuZXdfZ2lkKHN0YXJ0Q29kZSk7XG4gICAgICAgICAgICBpZiAoc3RhcnRDb2RlIC0gc3RhcnRHbHlwaCA+PSAweDgwMDApIHtcbiAgICAgICAgICAgICAgICBkZWx0YXMucHVzaCgwKTtcbiAgICAgICAgICAgICAgICByYW5nZU9mZnNldHMucHVzaCgyICogKGdseXBoSWRzLmxlbmd0aCArIHNlZ0NvdW50IC0gaSkpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSBzdGFydENvZGU7IGogPD0gZW5kQ29kZTsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGdseXBoSWRzLnB1c2gobmV3X2dpZChqKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWx0YXMucHVzaChzdGFydEdseXBoIC0gc3RhcnRDb2RlKTtcbiAgICAgICAgICAgICAgICByYW5nZU9mZnNldHMucHVzaCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvdXQgPSBCaW5hcnlTdHJlYW0oKTtcblxuICAgICAgICBvdXQud3JpdGVTaG9ydCgzKTsgICAgICAvLyBwbGF0Zm9ybUlEXG4gICAgICAgIG91dC53cml0ZVNob3J0KDEpOyAgICAgIC8vIHBsYXRmb3JtU3BlY2lmaWNJRFxuICAgICAgICBvdXQud3JpdGVMb25nKDEyKTsgICAgICAvLyBvZmZzZXRcbiAgICAgICAgb3V0LndyaXRlU2hvcnQoNCk7ICAgICAgLy8gZm9ybWF0XG4gICAgICAgIG91dC53cml0ZVNob3J0KDE2ICsgc2VnQ291bnQgKiA4ICsgZ2x5cGhJZHMubGVuZ3RoICogMik7IC8vIGxlbmd0aFxuICAgICAgICBvdXQud3JpdGVTaG9ydCgwKTsgICAgICAvLyBsYW5ndWFnZVxuICAgICAgICBvdXQud3JpdGVTaG9ydChzZWdDb3VudFgyKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQoc2VhcmNoUmFuZ2UpO1xuICAgICAgICBvdXQud3JpdGVTaG9ydChlbnRyeVNlbGVjdG9yKTtcbiAgICAgICAgb3V0LndyaXRlU2hvcnQocmFuZ2VTaGlmdCk7XG5cbiAgICAgICAgZW5kQ29kZXMuZm9yRWFjaChvdXQud3JpdGVTaG9ydCk7XG4gICAgICAgIG91dC53cml0ZVNob3J0KDApOyAgICAgIC8vIHJlc2VydmVkIHBhZFxuICAgICAgICBzdGFydENvZGVzLmZvckVhY2gob3V0LndyaXRlU2hvcnQpO1xuICAgICAgICBkZWx0YXMuZm9yRWFjaChvdXQud3JpdGVTaG9ydF8pO1xuICAgICAgICByYW5nZU9mZnNldHMuZm9yRWFjaChvdXQud3JpdGVTaG9ydCk7XG4gICAgICAgIGdseXBoSWRzLmZvckVhY2gob3V0LndyaXRlU2hvcnQpO1xuXG4gICAgICAgIHJldHVybiBvdXQuZ2V0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZnRhYmxlKHtcbiAgICAgICAgcGFyc2U6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSBzZWxmLm9mZnNldDtcbiAgICAgICAgICAgIGRhdGEub2Zmc2V0KG9mZnNldCk7XG4gICAgICAgICAgICBzZWxmLmNvZGVNYXAgPSB7fTtcbiAgICAgICAgICAgIHNlbGYudmVyc2lvbiA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICB2YXIgdGFibGVDb3VudCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICBzZWxmLnRhYmxlcyA9IGRhdGEudGltZXModGFibGVDb3VudCwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENtYXBFbnRyeShkYXRhLCBvZmZzZXQsIHNlbGYuY29kZU1hcCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihuY2lkMm9naWQsIG9naWQybmdpZCkge1xuICAgICAgICAgICAgdmFyIG91dCA9IEJpbmFyeVN0cmVhbSgpO1xuICAgICAgICAgICAgb3V0LndyaXRlU2hvcnQoMCk7ICAvLyB2ZXJzaW9uXG4gICAgICAgICAgICBvdXQud3JpdGVTaG9ydCgxKTsgIC8vIHRhYmxlQ291bnRcbiAgICAgICAgICAgIG91dC53cml0ZShyZW5kZXJDaGFybWFwKG5jaWQyb2dpZCwgb2dpZDJuZ2lkKSk7XG4gICAgICAgICAgICByZXR1cm4gb3V0LmdldCgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbn0pKCk7XG5cbnZhciBPUzJUYWJsZSA9IGRlZnRhYmxlKHtcbiAgICBwYXJzZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBkYXRhLm9mZnNldCh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMuYXZlcmFnZUNoYXJXaWR0aCA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLndlaWdodENsYXNzID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy53aWR0aENsYXNzID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy50eXBlID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgdGhpcy55U3Vic2NyaXB0WFNpemUgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy55U3Vic2NyaXB0WVNpemUgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy55U3Vic2NyaXB0WE9mZnNldCA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLnlTdWJzY3JpcHRZT2Zmc2V0ID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMueVN1cGVyc2NyaXB0WFNpemUgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy55U3VwZXJzY3JpcHRZU2l6ZSA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICB0aGlzLnlTdXBlcnNjcmlwdFhPZmZzZXQgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy55U3VwZXJzY3JpcHRZT2Zmc2V0ID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgIHRoaXMueVN0cmlrZW91dFNpemUgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy55U3RyaWtlb3V0UG9zaXRpb24gPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgdGhpcy5mYW1pbHlDbGFzcyA9IGRhdGEucmVhZFNob3J0XygpO1xuXG4gICAgICAgIHRoaXMucGFub3NlID0gZGF0YS50aW1lcygxMCwgZGF0YS5yZWFkQnl0ZSk7XG4gICAgICAgIHRoaXMuY2hhclJhbmdlID0gZGF0YS50aW1lcyg0LCBkYXRhLnJlYWRMb25nKTtcblxuICAgICAgICB0aGlzLnZlbmRvcklEID0gZGF0YS5yZWFkU3RyaW5nKDQpO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbiA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgIHRoaXMuZmlyc3RDaGFySW5kZXggPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICB0aGlzLmxhc3RDaGFySW5kZXggPSBkYXRhLnJlYWRTaG9ydCgpO1xuXG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmFzY2VudCA9IGRhdGEucmVhZFNob3J0XygpO1xuICAgICAgICAgICAgdGhpcy5kZXNjZW50ID0gZGF0YS5yZWFkU2hvcnRfKCk7XG4gICAgICAgICAgICB0aGlzLmxpbmVHYXAgPSBkYXRhLnJlYWRTaG9ydF8oKTtcbiAgICAgICAgICAgIHRoaXMud2luQXNjZW50ID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgIHRoaXMud2luRGVzY2VudCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICB0aGlzLmNvZGVQYWdlUmFuZ2UgPSBkYXRhLnRpbWVzKDIsIGRhdGEucmVhZExvbmcpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy52ZXJzaW9uID4gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMueEhlaWdodCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYXBIZWlnaHQgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdENoYXIgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnJlYWtDaGFyID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1heENvbnRleHQgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXcoKTtcbiAgICB9XG59KTtcblxudmFyIHN1YnNldFRhZyA9IDEwMDAwMDtcblxuZnVuY3Rpb24gbmV4dFN1YnNldFRhZygpIHtcbiAgICB2YXIgcmV0ID0gXCJcIiwgbiA9IFN0cmluZyhzdWJzZXRUYWcpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbi5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShuLmNoYXJDb2RlQXQoaSkgLSA0OCArIDY1KTtcbiAgICB9XG4gICAgKytzdWJzZXRUYWc7XG4gICAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gU3ViZm9udChmb250KSB7XG4gICAgdGhpcy5mb250ID0gZm9udDtcbiAgICB0aGlzLnN1YnNldCA9IHt9O1xuICAgIHRoaXMudW5pY29kZXMgPSB7fTtcbiAgICB0aGlzLm9naWQybmdpZCA9IHsgMDogMCB9O1xuICAgIHRoaXMubmdpZDJvZ2lkID0geyAwOiAwIH07XG4gICAgdGhpcy5uY2lkMm9naWQgPSB7fTtcbiAgICB0aGlzLm5leHQgPSB0aGlzLmZpcnN0Q2hhciA9IDE7XG4gICAgdGhpcy5uZXh0R2lkID0gMTtcbiAgICB0aGlzLnBzTmFtZSA9IG5leHRTdWJzZXRUYWcoKSArIFwiK1wiICsgdGhpcy5mb250LnBzTmFtZTtcbn1cblxuU3ViZm9udC5wcm90b3R5cGUgPSB7XG4gICAgdXNlOiBmdW5jdGlvbihjaCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2YgY2ggPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHVjczJkZWNvZGUoY2gpLnJlZHVjZShmdW5jdGlvbihyZXQsIGNvZGUpe1xuICAgICAgICAgICAgICAgIHJldHVybiByZXQgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKHNlbGYudXNlKGNvZGUpKTtcbiAgICAgICAgICAgIH0sIFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2RlID0gc2VsZi51bmljb2Rlc1tjaF07XG4gICAgICAgIGlmICghY29kZSkge1xuICAgICAgICAgICAgY29kZSA9IHNlbGYubmV4dCsrO1xuICAgICAgICAgICAgc2VsZi5zdWJzZXRbY29kZV0gPSBjaDtcbiAgICAgICAgICAgIHNlbGYudW5pY29kZXNbY2hdID0gY29kZTtcblxuICAgICAgICAgICAgLy8gZ2VuZXJhdGUgbmV3IEdJRCAoZ2x5cGggSUQpIGFuZCBtYWludGFpbiBuZXdHSUQgLT5cbiAgICAgICAgICAgIC8vIG9sZEdJRCBhbmQgYmFjayBtYXBwaW5nc1xuICAgICAgICAgICAgdmFyIG9sZF9naWQgPSBzZWxmLmZvbnQuY21hcC5jb2RlTWFwW2NoXTtcbiAgICAgICAgICAgIGlmIChvbGRfZ2lkKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5uY2lkMm9naWRbY29kZV0gPSBvbGRfZ2lkO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLm9naWQybmdpZFtvbGRfZ2lkXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdfZ2lkID0gc2VsZi5uZXh0R2lkKys7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYub2dpZDJuZ2lkW29sZF9naWRdID0gbmV3X2dpZDtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5uZ2lkMm9naWRbbmV3X2dpZF0gPSBvbGRfZ2lkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29kZTtcbiAgICB9LFxuICAgIGVuY29kZVRleHQ6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlKHRleHQpO1xuICAgIH0sXG4gICAgZ2x5cGhJZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc29ydGVkS2V5cyh0aGlzLm9naWQybmdpZCk7XG4gICAgfSxcbiAgICBnbHlwaHNGb3I6IGZ1bmN0aW9uKGdseXBoSWRzLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2x5cGhJZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBpZCA9IGdseXBoSWRzW2ldO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHRbaWRdKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdseXBoID0gcmVzdWx0W2lkXSA9IHRoaXMuZm9udC5nbHlmLmdseXBoRm9yKGlkKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2x5cGggJiYgZ2x5cGguY29tcG91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nbHlwaHNGb3IoZ2x5cGguZ2x5cGhJZHMsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZ2x5cGhzID0gdGhpcy5nbHlwaHNGb3IodGhpcy5nbHlwaElkcygpKTtcblxuICAgICAgICAvLyBhZGQgbWlzc2luZyBzdWItZ2x5cGhzXG4gICAgICAgIGZvciAodmFyIG9sZF9naWQgaW4gZ2x5cGhzKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkoZ2x5cGhzLCBvbGRfZ2lkKSkge1xuICAgICAgICAgICAgICAgIG9sZF9naWQgPSBwYXJzZUludChvbGRfZ2lkLCAxMCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub2dpZDJuZ2lkW29sZF9naWRdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld19naWQgPSB0aGlzLm5leHRHaWQrKztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZ2lkMm5naWRbb2xkX2dpZF0gPSBuZXdfZ2lkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5naWQyb2dpZFtuZXdfZ2lkXSA9IG9sZF9naWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbXVzdCBvYnRhaW4gb2xkX2dpZF9pZHMgaW4gYW4gb3JkZXIgbWF0Y2hpbmcgc29ydGVkXG4gICAgICAgIC8vIG5ld19naWRfaWRzXG4gICAgICAgIHZhciBuZXdfZ2lkX2lkcyA9IHNvcnRlZEtleXModGhpcy5uZ2lkMm9naWQpO1xuICAgICAgICB2YXIgb2xkX2dpZF9pZHMgPSBuZXdfZ2lkX2lkcy5tYXAoZnVuY3Rpb24oaWQpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmdpZDJvZ2lkW2lkXTtcbiAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgdmFyIGZvbnQgPSB0aGlzLmZvbnQ7XG4gICAgICAgIHZhciBnbHlmID0gZm9udC5nbHlmLnJlbmRlcihnbHlwaHMsIG9sZF9naWRfaWRzLCB0aGlzLm9naWQybmdpZCk7XG4gICAgICAgIHZhciBsb2NhID0gZm9udC5sb2NhLnJlbmRlcihnbHlmLm9mZnNldHMpO1xuXG4gICAgICAgIHRoaXMubGFzdENoYXIgPSB0aGlzLm5leHQgLSAxO1xuXG4gICAgICAgIHZhciB0YWJsZXMgPSB7XG4gICAgICAgICAgICBcImNtYXBcIiA6IENtYXBUYWJsZS5yZW5kZXIodGhpcy5uY2lkMm9naWQsIHRoaXMub2dpZDJuZ2lkKSxcbiAgICAgICAgICAgIFwiZ2x5ZlwiIDogZ2x5Zi50YWJsZSxcbiAgICAgICAgICAgIFwibG9jYVwiIDogbG9jYS50YWJsZSxcbiAgICAgICAgICAgIFwiaG10eFwiIDogZm9udC5obXR4LnJlbmRlcihvbGRfZ2lkX2lkcyksXG4gICAgICAgICAgICBcImhoZWFcIiA6IGZvbnQuaGhlYS5yZW5kZXIob2xkX2dpZF9pZHMpLFxuICAgICAgICAgICAgXCJtYXhwXCIgOiBmb250Lm1heHAucmVuZGVyKG9sZF9naWRfaWRzKSxcbiAgICAgICAgICAgIFwicG9zdFwiIDogZm9udC5wb3N0LnJlbmRlcihvbGRfZ2lkX2lkcyksXG4gICAgICAgICAgICBcIm5hbWVcIiA6IGZvbnQubmFtZS5yZW5kZXIodGhpcy5wc05hbWUpLFxuICAgICAgICAgICAgXCJoZWFkXCIgOiBmb250LmhlYWQucmVuZGVyKGxvY2EuZm9ybWF0KSxcbiAgICAgICAgICAgIFwiT1MvMlwiIDogZm9udC5vczIucmVuZGVyKClcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5mb250LmRpcmVjdG9yeS5yZW5kZXIodGFibGVzKTtcbiAgICB9LFxuICAgIGNpZFRvR2lkTWFwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG91dCA9IEJpbmFyeVN0cmVhbSgpLCBsZW4gPSAwO1xuICAgICAgICBmb3IgKHZhciBjaWQgPSB0aGlzLmZpcnN0Q2hhcjsgY2lkIDwgdGhpcy5uZXh0OyArK2NpZCkge1xuICAgICAgICAgICAgd2hpbGUgKGxlbiA8IGNpZCkge1xuICAgICAgICAgICAgICAgIG91dC53cml0ZVNob3J0KDApO1xuICAgICAgICAgICAgICAgIGxlbisrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9sZF9naWQgPSB0aGlzLm5jaWQyb2dpZFtjaWRdO1xuICAgICAgICAgICAgaWYgKG9sZF9naWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3X2dpZCA9IHRoaXMub2dpZDJuZ2lkW29sZF9naWRdO1xuICAgICAgICAgICAgICAgIG91dC53cml0ZVNob3J0KG5ld19naWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXQud3JpdGVTaG9ydCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlbisrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQuZ2V0KCk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gVFRGRm9udChyYXdEYXRhLCBuYW1lKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkYXRhID0gc2VsZi5jb250ZW50cyA9IEJpbmFyeVN0cmVhbShyYXdEYXRhKTtcbiAgICBpZiAoZGF0YS5yZWFkU3RyaW5nKDQpID09IFwidHRjZlwiKSB7XG4gICAgICAgIHZhciBvZmZzZXQ7XG4gICAgICAgIGNvbnN0IHBhcnNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkYXRhLm9mZnNldChvZmZzZXQpO1xuICAgICAgICAgICAgc2VsZi5wYXJzZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk11c3Qgc3BlY2lmeSBhIG5hbWUgZm9yIFRUQyBmaWxlc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhLnJlYWRMb25nKCk7ICAgICAgICAvLyB2ZXJzaW9uXG4gICAgICAgIHZhciBudW1Gb250cyA9IGRhdGEucmVhZExvbmcoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1Gb250czsgKytpKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBkYXRhLnJlYWRMb25nKCk7XG4gICAgICAgICAgICBkYXRhLnNhdmVFeGN1cnNpb24ocGFyc2UpO1xuICAgICAgICAgICAgaWYgKHNlbGYucHNOYW1lID09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRm9udCBcIiArIG5hbWUgKyBcIiBub3QgZm91bmQgaW4gY29sbGVjdGlvblwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhLm9mZnNldCgwKTtcbiAgICAgICAgc2VsZi5wYXJzZSgpO1xuICAgIH1cbn1cblxuVFRGRm9udC5wcm90b3R5cGUgPSB7XG4gICAgcGFyc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGlyID0gdGhpcy5kaXJlY3RvcnkgPSBuZXcgRGlyZWN0b3J5KHRoaXMuY29udGVudHMpO1xuXG4gICAgICAgIHRoaXMuaGVhZCA9IGRpci5yZWFkVGFibGUoXCJoZWFkXCIsIEhlYWRUYWJsZSk7XG4gICAgICAgIHRoaXMubG9jYSA9IGRpci5yZWFkVGFibGUoXCJsb2NhXCIsIExvY2FUYWJsZSk7XG4gICAgICAgIHRoaXMuaGhlYSA9IGRpci5yZWFkVGFibGUoXCJoaGVhXCIsIEhoZWFUYWJsZSk7XG4gICAgICAgIHRoaXMubWF4cCA9IGRpci5yZWFkVGFibGUoXCJtYXhwXCIsIE1heHBUYWJsZSk7XG4gICAgICAgIHRoaXMuaG10eCA9IGRpci5yZWFkVGFibGUoXCJobXR4XCIsIEhtdHhUYWJsZSk7XG4gICAgICAgIHRoaXMuZ2x5ZiA9IGRpci5yZWFkVGFibGUoXCJnbHlmXCIsIEdseWZUYWJsZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IGRpci5yZWFkVGFibGUoXCJuYW1lXCIsIE5hbWVUYWJsZSk7XG4gICAgICAgIHRoaXMucG9zdCA9IGRpci5yZWFkVGFibGUoXCJwb3N0XCIsIFBvc3RUYWJsZSk7XG4gICAgICAgIHRoaXMuY21hcCA9IGRpci5yZWFkVGFibGUoXCJjbWFwXCIsIENtYXBUYWJsZSk7XG4gICAgICAgIHRoaXMub3MyICA9IGRpci5yZWFkVGFibGUoXCJPUy8yXCIsIE9TMlRhYmxlKTtcblxuICAgICAgICB0aGlzLnBzTmFtZSA9IHRoaXMubmFtZS5wb3N0c2NyaXB0TmFtZTtcbiAgICAgICAgdGhpcy5hc2NlbnQgPSB0aGlzLm9zMi5hc2NlbnQgfHwgdGhpcy5oaGVhLmFzY2VudDtcbiAgICAgICAgdGhpcy5kZXNjZW50ID0gdGhpcy5vczIuZGVzY2VudCB8fCB0aGlzLmhoZWEuZGVzY2VudDtcbiAgICAgICAgdGhpcy5saW5lR2FwID0gdGhpcy5vczIubGluZUdhcCB8fCB0aGlzLmhoZWEubGluZUdhcDtcbiAgICAgICAgdGhpcy5zY2FsZSA9IDEwMDAgLyB0aGlzLmhlYWQudW5pdHNQZXJFbTtcbiAgICB9LFxuICAgIHdpZHRoT2ZHbHlwaDogZnVuY3Rpb24oZ2x5cGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG10eC5mb3JHbHlwaChnbHlwaCkuYWR2YW5jZSAqIHRoaXMuc2NhbGU7XG4gICAgfSxcbiAgICBtYWtlU3Vic2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJmb250KHRoaXMpO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IFRURkZvbnQgfTtcbiIsImltcG9ydCB7IGRlZmxhdGUgYXMgcGFrb0RlZmxhdGUgfSBmcm9tICdAcHJvZ3Jlc3MvcGFrby1lc20nO1xuXG5leHBvcnQgY29uc3QgZGVmbGF0ZSA9IHBha29EZWZsYXRlO1xuXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydHNEZWZsYXRlKCkge1xuICAgIHJldHVybiB0cnVlO1xufVxuXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1zcGFjZXMsIGtleS1zcGFjaW5nLCBpbmRlbnQsIGNhbWVsY2FzZSwgc3BhY2UtYmVmb3JlLWJsb2NrcywgZXFlcWVxLCBicmFjZS1zdHlsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgc3BhY2UtaW5maXgtb3BzLCBzcGFjZS1iZWZvcmUtZnVuY3Rpb24tcGFyZW4sIGFycmF5LWJyYWNrZXQtc3BhY2luZywgb2JqZWN0LWN1cmx5LXNwYWNpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLW5lc3RlZC10ZXJuYXJ5LCBtYXgtcGFyYW1zLCBkZWZhdWx0LWNhc2UsIG5vLWVsc2UtcmV0dXJuLCBuby1lbXB0eSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24sIG5vLXZhciwgYmxvY2stc2NvcGVkLXZhciAqL1xuXG5pbXBvcnQgeyBCaW5hcnlTdHJlYW0sIHVjczJlbmNvZGUsIGJhc2U2NFRvVWludDhBcnJheSwgSEFTX1RZUEVEX0FSUkFZUyB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBzdXBwb3J0IH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IFRURkZvbnQgfSBmcm9tIFwiLi90dGZcIjtcbmltcG9ydCB7IGRlZmxhdGUsIHN1cHBvcnRzRGVmbGF0ZSB9IGZyb20gJy4vZGVmbGF0ZSc7XG5pbXBvcnQgeyBlbmNvZGVVVEYxNkJFLCBCT00gfSBmcm9tIFwiLi4vdXRpbC9lbmNvZGUtdXRmXCI7XG5cbmNvbnN0IGJyb3dzZXIgPSBzdXBwb3J0LmJyb3dzZXI7XG5jb25zdCBOTCA9IFwiXFxuXCI7XG5cbnZhciBSRVNPVVJDRV9DT1VOVEVSID0gMDtcblxuY29uc3QgUEFQRVJfU0laRSA9IHtcbiAgICBhMCAgICAgICAgOiBbIDIzODMuOTQgLCAzMzcwLjM5IF0sXG4gICAgYTEgICAgICAgIDogWyAxNjgzLjc4ICwgMjM4My45NCBdLFxuICAgIGEyICAgICAgICA6IFsgMTE5MC41NSAsIDE2ODMuNzggXSxcbiAgICBhMyAgICAgICAgOiBbIDg0MS44OSAgLCAxMTkwLjU1IF0sXG4gICAgYTQgICAgICAgIDogWyA1OTUuMjggICwgODQxLjg5ICBdLFxuICAgIGE1ICAgICAgICA6IFsgNDE5LjUzICAsIDU5NS4yOCAgXSxcbiAgICBhNiAgICAgICAgOiBbIDI5Ny42NCAgLCA0MTkuNTMgIF0sXG4gICAgYTcgICAgICAgIDogWyAyMDkuNzYgICwgMjk3LjY0ICBdLFxuICAgIGE4ICAgICAgICA6IFsgMTQ3LjQwICAsIDIwOS43NiAgXSxcbiAgICBhOSAgICAgICAgOiBbIDEwNC44OCAgLCAxNDcuNDAgIF0sXG4gICAgYTEwICAgICAgIDogWyA3My43MCAgICwgMTA0Ljg4ICBdLFxuICAgIGIwICAgICAgICA6IFsgMjgzNC42NSAsIDQwMDguMTkgXSxcbiAgICBiMSAgICAgICAgOiBbIDIwMDQuMDkgLCAyODM0LjY1IF0sXG4gICAgYjIgICAgICAgIDogWyAxNDE3LjMyICwgMjAwNC4wOSBdLFxuICAgIGIzICAgICAgICA6IFsgMTAwMC42MyAsIDE0MTcuMzIgXSxcbiAgICBiNCAgICAgICAgOiBbIDcwOC42NiAgLCAxMDAwLjYzIF0sXG4gICAgYjUgICAgICAgIDogWyA0OTguOTAgICwgNzA4LjY2ICBdLFxuICAgIGI2ICAgICAgICA6IFsgMzU0LjMzICAsIDQ5OC45MCAgXSxcbiAgICBiNyAgICAgICAgOiBbIDI0OS40NSAgLCAzNTQuMzMgIF0sXG4gICAgYjggICAgICAgIDogWyAxNzUuNzUgICwgMjQ5LjQ1ICBdLFxuICAgIGI5ICAgICAgICA6IFsgMTI0LjcyICAsIDE3NS43NSAgXSxcbiAgICBiMTAgICAgICAgOiBbIDg3Ljg3ICAgLCAxMjQuNzIgIF0sXG4gICAgYzAgICAgICAgIDogWyAyNTk5LjM3ICwgMzY3Ni41NCBdLFxuICAgIGMxICAgICAgICA6IFsgMTgzNi44NSAsIDI1OTkuMzcgXSxcbiAgICBjMiAgICAgICAgOiBbIDEyOTguMjcgLCAxODM2Ljg1IF0sXG4gICAgYzMgICAgICAgIDogWyA5MTguNDMgICwgMTI5OC4yNyBdLFxuICAgIGM0ICAgICAgICA6IFsgNjQ5LjEzICAsIDkxOC40MyAgXSxcbiAgICBjNSAgICAgICAgOiBbIDQ1OS4yMSAgLCA2NDkuMTMgIF0sXG4gICAgYzYgICAgICAgIDogWyAzMjMuMTUgICwgNDU5LjIxICBdLFxuICAgIGM3ICAgICAgICA6IFsgMjI5LjYxICAsIDMyMy4xNSAgXSxcbiAgICBjOCAgICAgICAgOiBbIDE2MS41NyAgLCAyMjkuNjEgIF0sXG4gICAgYzkgICAgICAgIDogWyAxMTMuMzkgICwgMTYxLjU3ICBdLFxuICAgIGMxMCAgICAgICA6IFsgNzkuMzcgICAsIDExMy4zOSAgXSxcbiAgICBleGVjdXRpdmUgOiBbIDUyMS44NiAgLCA3NTYuMDAgIF0sXG4gICAgZm9saW8gICAgIDogWyA2MTIuMDAgICwgOTM2LjAwICBdLFxuICAgIGxlZ2FsICAgICA6IFsgNjEyLjAwICAsIDEwMDguMDAgXSxcbiAgICBsZXR0ZXIgICAgOiBbIDYxMi4wMCAgLCA3OTIuMDAgIF0sXG4gICAgdGFibG9pZCAgIDogWyA3OTIuMDAgICwgMTIyNC4wMCBdXG59O1xuXG5mdW5jdGlvbiBtYWtlT3V0cHV0KCkge1xuICAgIHZhciBpbmRlbnRMZXZlbCA9IDAsIG91dHB1dCA9IEJpbmFyeVN0cmVhbSgpO1xuICAgIGZ1bmN0aW9uIG91dCgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciB4ID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBvdXRwdXQgdW5kZWZpbmVkIHRvIFBERlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHggaW5zdGFuY2VvZiBQREZWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHguYmVmb3JlUmVuZGVyKG91dCk7XG4gICAgICAgICAgICAgICAgeC5yZW5kZXIob3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXkoeCkpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJBcnJheSh4LCBvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNEYXRlKHgpKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyRGF0ZSh4LCBvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHggPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIGlmIChpc05hTih4KSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgb3V0cHV0IE5hTiB0byBQREZcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBpdCBkb2Vzbid0IGVuZCB1cCBpbiBleHBvbmVudCBub3RhdGlvblxuICAgICAgICAgICAgICAgIHZhciBudW0gPSB4LnRvRml4ZWQoNyk7XG4gICAgICAgICAgICAgICAgaWYgKG51bS5pbmRleE9mKFwiLlwiKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG51bSA9IG51bS5yZXBsYWNlKC9cXC4/MCskLywgXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChudW0gPT0gXCItMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG51bSA9IFwiMFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdXRwdXQud3JpdGVTdHJpbmcobnVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKC9zdHJpbmd8Ym9vbGVhbi8udGVzdCh0eXBlb2YgeCkpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQud3JpdGVTdHJpbmcoU3RyaW5nKHgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB4LmdldCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQud3JpdGUoeC5nZXQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgeCA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF4KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC53cml0ZVN0cmluZyhcIm51bGxcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0KG5ldyBQREZEaWN0aW9uYXJ5KHgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgb3V0LndyaXRlRGF0YSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgb3V0cHV0LndyaXRlKGRhdGEpO1xuICAgIH07XG4gICAgb3V0LndpdGhJbmRlbnQgPSBmdW5jdGlvbihmKSB7XG4gICAgICAgICsraW5kZW50TGV2ZWw7XG4gICAgICAgIGYob3V0KTtcbiAgICAgICAgLS1pbmRlbnRMZXZlbDtcbiAgICB9O1xuICAgIG91dC5pbmRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgb3V0KE5MLCBwYWQoXCJcIiwgaW5kZW50TGV2ZWwgKiAyLCBcIiAgXCIpKTtcbiAgICAgICAgb3V0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgICBvdXQub2Zmc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBvdXRwdXQub2Zmc2V0KCk7XG4gICAgfTtcbiAgICBvdXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRklYIENBTExFUlwiKTtcbiAgICB9O1xuICAgIG91dC5nZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG91dHB1dC5nZXQoKTtcbiAgICB9O1xuICAgIG91dC5zdHJlYW0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuICAgIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHdyYXBPYmplY3QodmFsdWUsIGlkKSB7XG4gICAgdmFyIGJlZm9yZVJlbmRlciA9IHZhbHVlLmJlZm9yZVJlbmRlcjtcbiAgICB2YXIgcmVuZGVyVmFsdWUgPSB2YWx1ZS5yZW5kZXI7XG5cbiAgICB2YWx1ZS5iZWZvcmVSZW5kZXIgPSBmdW5jdGlvbigpe307XG5cbiAgICB2YWx1ZS5yZW5kZXIgPSBmdW5jdGlvbihvdXQpIHtcbiAgICAgICAgb3V0KGlkLCBcIiAwIFJcIik7XG4gICAgfTtcblxuICAgIHZhbHVlLnJlbmRlckZ1bGwgPSBmdW5jdGlvbihvdXQpIHtcbiAgICAgICAgdmFsdWUuX29mZnNldCA9IG91dC5vZmZzZXQoKTtcbiAgICAgICAgb3V0KGlkLCBcIiAwIG9iaiBcIik7XG4gICAgICAgIGJlZm9yZVJlbmRlci5jYWxsKHZhbHVlLCBvdXQpO1xuICAgICAgICByZW5kZXJWYWx1ZS5jYWxsKHZhbHVlLCBvdXQpO1xuICAgICAgICBvdXQoXCIgZW5kb2JqXCIpO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcGVyT3B0aW9ucyhnZXRPcHRpb24pIHtcbiAgICBpZiAodHlwZW9mIGdldE9wdGlvbiAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBnZXRPcHRpb247XG4gICAgICAgIGdldE9wdGlvbiA9IGZ1bmN0aW9uKGtleSwgZGVmKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5IGluIG9wdGlvbnMgPyBvcHRpb25zW2tleV0gOiBkZWY7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhciBwYXBlclNpemUgPSBnZXRPcHRpb24oXCJwYXBlclNpemVcIiwgUEFQRVJfU0laRS5hNCk7XG4gICAgaWYgKCFwYXBlclNpemUpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhcGVyU2l6ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHBhcGVyU2l6ZSA9IFBBUEVSX1NJWkVbcGFwZXJTaXplLnRvTG93ZXJDYXNlKCldO1xuICAgICAgICBpZiAocGFwZXJTaXplID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gcGFwZXIgc2l6ZVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhcGVyU2l6ZVswXSA9IHVuaXRzVG9Qb2ludHMocGFwZXJTaXplWzBdKTtcbiAgICBwYXBlclNpemVbMV0gPSB1bml0c1RvUG9pbnRzKHBhcGVyU2l6ZVsxXSk7XG5cbiAgICBpZiAoZ2V0T3B0aW9uKFwibGFuZHNjYXBlXCIsIGZhbHNlKSkge1xuICAgICAgICBwYXBlclNpemUgPSBbXG4gICAgICAgICAgICBNYXRoLm1heChwYXBlclNpemVbMF0sIHBhcGVyU2l6ZVsxXSksXG4gICAgICAgICAgICBNYXRoLm1pbihwYXBlclNpemVbMF0sIHBhcGVyU2l6ZVsxXSlcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICB2YXIgbWFyZ2luID0gZ2V0T3B0aW9uKFwibWFyZ2luXCIpO1xuICAgIGlmIChtYXJnaW4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtYXJnaW4gPT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgbWFyZ2luID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIG1hcmdpbiA9IHVuaXRzVG9Qb2ludHMobWFyZ2luLCAwKTtcbiAgICAgICAgICAgIG1hcmdpbiA9IHsgbGVmdDogbWFyZ2luLCB0b3A6IG1hcmdpbiwgcmlnaHQ6IG1hcmdpbiwgYm90dG9tOiBtYXJnaW4gfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1hcmdpbiA9IHtcbiAgICAgICAgICAgICAgICBsZWZ0ICAgOiB1bml0c1RvUG9pbnRzKG1hcmdpbi5sZWZ0LCAwKSxcbiAgICAgICAgICAgICAgICB0b3AgICAgOiB1bml0c1RvUG9pbnRzKG1hcmdpbi50b3AsIDApLFxuICAgICAgICAgICAgICAgIHJpZ2h0ICA6IHVuaXRzVG9Qb2ludHMobWFyZ2luLnJpZ2h0LCAwKSxcbiAgICAgICAgICAgICAgICBib3R0b20gOiB1bml0c1RvUG9pbnRzKG1hcmdpbi5ib3R0b20sIDApXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXRPcHRpb24oXCJhZGRNYXJnaW5cIikpIHtcbiAgICAgICAgICAgIHBhcGVyU2l6ZVswXSArPSBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodDtcbiAgICAgICAgICAgIHBhcGVyU2l6ZVsxXSArPSBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBwYXBlclNpemU6IHBhcGVyU2l6ZSwgbWFyZ2luOiBtYXJnaW4gfTtcbn1cblxuZnVuY3Rpb24gUERGRG9jdW1lbnQob3B0aW9ucykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgb3V0ID0gbWFrZU91dHB1dCgpO1xuICAgIHZhciBvYmpjb3VudCA9IDA7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGdldE9wdGlvbihuYW1lLCBkZWZ2YWwpIHtcbiAgICAgICAgcmV0dXJuIChvcHRpb25zICYmIG9wdGlvbnNbbmFtZV0gIT0gbnVsbCkgPyBvcHRpb25zW25hbWVdIDogZGVmdmFsO1xuICAgIH1cblxuICAgIHNlbGYuZ2V0T3B0aW9uID0gZ2V0T3B0aW9uO1xuXG4gICAgc2VsZi5hdHRhY2ggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAob2JqZWN0cy5pbmRleE9mKHZhbHVlKSA8IDApIHtcbiAgICAgICAgICAgIHdyYXBPYmplY3QodmFsdWUsICsrb2JqY291bnQpO1xuICAgICAgICAgICAgb2JqZWN0cy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcblxuICAgIHNlbGYucGFnZXMgPSBbXTtcblxuICAgIHNlbGYuRk9OVFMgPSB7fTtcbiAgICBzZWxmLklNQUdFUyA9IHt9O1xuICAgIHNlbGYuR1JBRF9DT0xfRlVOQ1RJT05TID0ge307IC8vIGNhY2hlIGZvciBjb2xvciBncmFkaWVudCBmdW5jdGlvbnNcbiAgICBzZWxmLkdSQURfT1BDX0ZVTkNUSU9OUyA9IHt9OyAvLyBjYWNoZSBmb3Igb3BhY2l0eSBncmFkaWVudCBmdW5jdGlvbnNcbiAgICBzZWxmLkdSQURfQ09MID0ge307ICAgICAvLyBjYWNoZSBmb3Igd2hvbGUgY29sb3IgZ3JhZGllbnQgb2JqZWN0c1xuICAgIHNlbGYuR1JBRF9PUEMgPSB7fTsgICAgIC8vIGNhY2hlIGZvciB3aG9sZSBvcGFjaXR5IGdyYWRpZW50IG9iamVjdHNcblxuICAgIHZhciBjYXRhbG9nID0gc2VsZi5hdHRhY2gobmV3IFBERkNhdGFsb2coKSk7XG4gICAgdmFyIHBhZ2VUcmVlID0gc2VsZi5hdHRhY2gobmV3IFBERlBhZ2VUcmVlKCkpO1xuXG4gICAgaWYgKGdldE9wdGlvbihcImF1dG9QcmludFwiKSkge1xuICAgICAgICBsZXQgbmFtZVRyZWUgPSB7fTtcbiAgICAgICAgbmFtZVRyZWUuSmF2YVNjcmlwdCA9IG5ldyBQREZEaWN0aW9uYXJ5KHsgTmFtZXM6IFtcbiAgICAgICAgICAgIG5ldyBQREZTdHJpbmcoXCJKU1wiKSwgc2VsZi5hdHRhY2gobmV3IFBERkRpY3Rpb25hcnkoe1xuICAgICAgICAgICAgICAgIFM6IF8oXCJKYXZhU2NyaXB0XCIpLFxuICAgICAgICAgICAgICAgIEpTOiBuZXcgUERGU3RyaW5nKFwicHJpbnQodHJ1ZSk7XCIpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgXSB9KTtcbiAgICAgICAgY2F0YWxvZy5wcm9wcy5OYW1lcyA9IG5ldyBQREZEaWN0aW9uYXJ5KG5hbWVUcmVlKTtcbiAgICB9XG5cbiAgICBjYXRhbG9nLnNldFBhZ2VzKHBhZ2VUcmVlKTtcblxuICAgIHZhciBpbmZvID0gc2VsZi5hdHRhY2gobmV3IFBERkRpY3Rpb25hcnkoe1xuICAgICAgICBQcm9kdWNlciAgICAgOiBuZXcgUERGU3RyaW5nKGdldE9wdGlvbihcInByb2R1Y2VyXCIsIFwiS2VuZG8gVUkgUERGIEdlbmVyYXRvclwiKSwgdHJ1ZSksIC8vIFhYWDoga2VuZG8udmVyc2lvbj9cbiAgICAgICAgVGl0bGUgICAgICAgIDogbmV3IFBERlN0cmluZyhnZXRPcHRpb24oXCJ0aXRsZVwiLCBcIlwiKSwgdHJ1ZSksXG4gICAgICAgIEF1dGhvciAgICAgICA6IG5ldyBQREZTdHJpbmcoZ2V0T3B0aW9uKFwiYXV0aG9yXCIsIFwiXCIpLCB0cnVlKSxcbiAgICAgICAgU3ViamVjdCAgICAgIDogbmV3IFBERlN0cmluZyhnZXRPcHRpb24oXCJzdWJqZWN0XCIsIFwiXCIpLCB0cnVlKSxcbiAgICAgICAgS2V5d29yZHMgICAgIDogbmV3IFBERlN0cmluZyhnZXRPcHRpb24oXCJrZXl3b3Jkc1wiLCBcIlwiKSwgdHJ1ZSksXG4gICAgICAgIENyZWF0b3IgICAgICA6IG5ldyBQREZTdHJpbmcoZ2V0T3B0aW9uKFwiY3JlYXRvclwiLCBcIktlbmRvIFVJIFBERiBHZW5lcmF0b3JcIiksIHRydWUpLFxuICAgICAgICBDcmVhdGlvbkRhdGUgOiBnZXRPcHRpb24oXCJkYXRlXCIsIG5ldyBEYXRlKCkpXG4gICAgfSkpO1xuXG4gICAgc2VsZi5hZGRQYWdlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgcGFwZXJPcHRpb25zICA9IGdldFBhcGVyT3B0aW9ucyhmdW5jdGlvbihuYW1lLCBkZWZ2YWwpe1xuICAgICAgICAgICAgcmV0dXJuIChvcHRpb25zICYmIG9wdGlvbnNbbmFtZV0gIT0gbnVsbCkgPyBvcHRpb25zW25hbWVdIDogZGVmdmFsO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHBhcGVyU2l6ZSAgICAgPSBwYXBlck9wdGlvbnMucGFwZXJTaXplO1xuICAgICAgICB2YXIgbWFyZ2luICAgICAgICA9IHBhcGVyT3B0aW9ucy5tYXJnaW47XG4gICAgICAgIHZhciBjb250ZW50V2lkdGggID0gcGFwZXJTaXplWzBdO1xuICAgICAgICB2YXIgY29udGVudEhlaWdodCA9IHBhcGVyU2l6ZVsxXTtcbiAgICAgICAgaWYgKG1hcmdpbikge1xuICAgICAgICAgICAgY29udGVudFdpZHRoIC09IG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0O1xuICAgICAgICAgICAgY29udGVudEhlaWdodCAtPSBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29udGVudCA9IG5ldyBQREZTdHJlYW0obWFrZU91dHB1dCgpLCBudWxsLCB0cnVlKTtcbiAgICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICAgICAgQ29udGVudHMgOiBzZWxmLmF0dGFjaChjb250ZW50KSxcbiAgICAgICAgICAgIFBhcmVudCAgIDogcGFnZVRyZWUsXG4gICAgICAgICAgICBNZWRpYUJveCA6IFsgMCwgMCwgcGFwZXJTaXplWzBdLCBwYXBlclNpemVbMV0gXVxuICAgICAgICB9O1xuICAgICAgICB2YXIgcGFnZSA9IG5ldyBQREZQYWdlKHNlbGYsIHByb3BzKTtcbiAgICAgICAgcGFnZS5fY29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgIHBhZ2VUcmVlLmFkZFBhZ2Uoc2VsZi5hdHRhY2gocGFnZSkpO1xuXG4gICAgICAgIC8vIGNhbnZhcy1saWtlIGNvb3JkLiBzeXN0ZW0uICAoMCwwKSBpcyB1cHBlci1sZWZ0LlxuICAgICAgICAvLyB0ZXh0IG11c3QgYmUgdmVydGljYWxseSBtaXJvcnJlZCBiZWZvcmUgZHJhd2luZy5cbiAgICAgICAgcGFnZS50cmFuc2Zvcm0oMSwgMCwgMCwgLTEsIDAsIHBhcGVyU2l6ZVsxXSk7XG5cbiAgICAgICAgaWYgKG1hcmdpbikge1xuICAgICAgICAgICAgcGFnZS50cmFuc2xhdGUobWFyZ2luLmxlZnQsIG1hcmdpbi50b3ApO1xuICAgICAgICAgICAgLy8gWFhYOiBjbGlwIHRvIHJpZ2h0L2JvdHRvbSBtYXJnaW4uICBNYWtlIHRoaXMgb3B0aW9uYWw/XG4gICAgICAgICAgICBwYWdlLnJlY3QoMCwgMCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0KTtcbiAgICAgICAgICAgIHBhZ2UuY2xpcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5wYWdlcy5wdXNoKHBhZ2UpO1xuICAgICAgICByZXR1cm4gcGFnZTtcbiAgICB9O1xuXG4gICAgc2VsZi5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIC8vLyBmaWxlIGhlYWRlclxuICAgICAgICBvdXQoXCIlUERGLTEuNFwiLCBOTCwgXCIlXFx4YzJcXHhjMVxceGRhXFx4Y2ZcXHhjZVwiLCBOTCwgTkwpO1xuXG4gICAgICAgIC8vLyBmaWxlIGJvZHlcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIG9iamVjdHNbaV0ucmVuZGVyRnVsbChvdXQpO1xuICAgICAgICAgICAgb3V0KE5MLCBOTCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLy8gY3Jvc3MtcmVmZXJlbmNlIHRhYmxlXG4gICAgICAgIHZhciB4cmVmT2Zmc2V0ID0gb3V0Lm9mZnNldCgpO1xuICAgICAgICBvdXQoXCJ4cmVmXCIsIE5MLCAwLCBcIiBcIiwgb2JqZWN0cy5sZW5ndGggKyAxLCBOTCk7XG4gICAgICAgIG91dChcIjAwMDAwMDAwMDAgNjU1MzUgZiBcIiwgTkwpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgb3V0KHplcm9wYWQob2JqZWN0c1tpXS5fb2Zmc2V0LCAxMCksIFwiIDAwMDAwIG4gXCIsIE5MKTtcbiAgICAgICAgfVxuICAgICAgICBvdXQoTkwpO1xuXG4gICAgICAgIC8vLyB0cmFpbGVyXG4gICAgICAgIG91dChcInRyYWlsZXJcIiwgTkwpO1xuICAgICAgICBvdXQobmV3IFBERkRpY3Rpb25hcnkoe1xuICAgICAgICAgICAgU2l6ZTogb2JqZWN0cy5sZW5ndGggKyAxLFxuICAgICAgICAgICAgUm9vdDogY2F0YWxvZyxcbiAgICAgICAgICAgIEluZm86IGluZm9cbiAgICAgICAgfSksIE5MLCBOTCk7XG5cbiAgICAgICAgLy8vIGVuZFxuICAgICAgICBvdXQoXCJzdGFydHhyZWZcIiwgTkwsIHhyZWZPZmZzZXQsIE5MKTtcbiAgICAgICAgb3V0KFwiJSVFT0ZcIiwgTkwpO1xuXG4gICAgICAgIHJldHVybiBvdXQuc3RyZWFtKCkub2Zmc2V0KDApO1xuICAgIH07XG59XG5cbnZhciBGT05UX0NBQ0hFID0ge1xuICAgIFwiVGltZXMtUm9tYW5cIiAgICAgICAgICAgOiB0cnVlLFxuICAgIFwiVGltZXMtQm9sZFwiICAgICAgICAgICAgOiB0cnVlLFxuICAgIFwiVGltZXMtSXRhbGljXCIgICAgICAgICAgOiB0cnVlLFxuICAgIFwiVGltZXMtQm9sZEl0YWxpY1wiICAgICAgOiB0cnVlLFxuICAgIFwiSGVsdmV0aWNhXCIgICAgICAgICAgICAgOiB0cnVlLFxuICAgIFwiSGVsdmV0aWNhLUJvbGRcIiAgICAgICAgOiB0cnVlLFxuICAgIFwiSGVsdmV0aWNhLU9ibGlxdWVcIiAgICAgOiB0cnVlLFxuICAgIFwiSGVsdmV0aWNhLUJvbGRPYmxpcXVlXCIgOiB0cnVlLFxuICAgIFwiQ291cmllclwiICAgICAgICAgICAgICAgOiB0cnVlLFxuICAgIFwiQ291cmllci1Cb2xkXCIgICAgICAgICAgOiB0cnVlLFxuICAgIFwiQ291cmllci1PYmxpcXVlXCIgICAgICAgOiB0cnVlLFxuICAgIFwiQ291cmllci1Cb2xkT2JsaXF1ZVwiICAgOiB0cnVlLFxuICAgIFwiU3ltYm9sXCIgICAgICAgICAgICAgICAgOiB0cnVlLFxuICAgIFwiWmFwZkRpbmdiYXRzXCIgICAgICAgICAgOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBsb2FkQmluYXJ5KHVybCwgY29udCkge1xuICAgIC8vIElFIHRocm93cyBBY2Nlc3NzIGRlbmllZCBlcnJvciBmb3IgRGF0YSBVUklzXG4gICAgbGV0IG07XG4gICAgaWYgKGJyb3dzZXIubXNpZSAmJiAobSA9IC9eZGF0YTouKj87YmFzZTY0LC9pLmV4ZWModXJsKSkpIHtcbiAgICAgICAgY29udChiYXNlNjRUb1VpbnQ4QXJyYXkodXJsLnN1YnN0cihtWzBdLmxlbmd0aCkpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgICBpZiAod2luZG93LmNvbnNvbGUpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuY29uc29sZS5lcnJvcikge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKFwiQ2Fubm90IGxvYWQgVVJMOiAlc1wiLCB1cmwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY29uc29sZS5sb2coXCJDYW5ub3QgbG9hZCBVUkw6ICVzXCIsIHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udChudWxsKTtcbiAgICB9XG4gICAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgIGlmIChIQVNfVFlQRURfQVJSQVlTKSB7XG4gICAgICAgIHJlcS5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgfVxuICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT0gMjAwIHx8IHJlcS5zdGF0dXMgPT0gMzA0KSB7XG4gICAgICAgICAgICBpZiAoSEFTX1RZUEVEX0FSUkFZUykge1xuICAgICAgICAgICAgICAgIGNvbnQobmV3IFVpbnQ4QXJyYXkocmVxLnJlc3BvbnNlKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnQobmV3IHdpbmRvdy5WQkFycmF5KHJlcS5yZXNwb25zZUJvZHkpLnRvQXJyYXkoKSk7IC8vIElFOSBvbmx5XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlcnJvcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXEub25lcnJvciA9IGVycm9yO1xuICAgIHJlcS5zZW5kKG51bGwpO1xufVxuXG5mdW5jdGlvbiBsb2FkRm9udCh1cmwsIGNvbnQpIHtcbiAgICB2YXIgZm9udCA9IEZPTlRfQ0FDSEVbdXJsXTtcbiAgICBpZiAoZm9udCkge1xuICAgICAgICBjb250KGZvbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWRCaW5hcnkodXJsLCBmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgbG9hZCBmb250IGZyb20gXCIgKyB1cmwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZm9udCA9IG5ldyBUVEZGb250KGRhdGEpO1xuICAgICAgICAgICAgICAgIEZPTlRfQ0FDSEVbdXJsXSA9IGZvbnQ7XG4gICAgICAgICAgICAgICAgY29udChmb250KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG52YXIgSU1BR0VfQ0FDSEUgPSB7fTtcblxuZnVuY3Rpb24gY2xlYXJJbWFnZUNhY2hlKCkge1xuICAgIElNQUdFX0NBQ0hFID0ge307XG59XG5cbmZ1bmN0aW9uIGxvYWRJbWFnZSh1cmwsIHNpemUsIGNvbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgaW1nID0gSU1BR0VfQ0FDSEVbdXJsXSwgYmxvYnVybCwgYmxvYjtcbiAgICBpZiAoaW1nKSB7XG4gICAgICAgIGNvbnQoaW1nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaWYgKCEoL15kYXRhOi9pLnRlc3QodXJsKSkpIHtcbiAgICAgICAgICAgIGltZy5jcm9zc09yaWdpbiA9IFwiQW5vbnltb3VzXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEhBU19UWVBFRF9BUlJBWVMgJiYgISgvXmRhdGE6L2kudGVzdCh1cmwpKSkge1xuICAgICAgICAgICAgLy8gSUUxMCBmYWlscyB0byBsb2FkIGltYWdlcyBmcm9tIGFub3RoZXIgZG9tYWluIGV2ZW4gd2hlbiB0aGUgc2VydmVyIHNlbmRzIHRoZVxuICAgICAgICAgICAgLy8gcHJvcGVyIENPUlMgaGVhZGVycy4gIGEgWEhSLCBob3dldmVyLCB3aWxsIGJlIGFibGUgdG8gbG9hZCB0aGUgZGF0YS5cbiAgICAgICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE5NzM0NTE2LzE1NDk4NVxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIE9uIHRoZSBvdGhlciBoYW5kLCBpdCdzIHdvcnRoIGRvaW5nIGl0IHRoaXMgd2F5IGZvciBhbGwgYnJvd3NlcnMgd2hpY2ggc3VwcG9ydFxuICAgICAgICAgICAgLy8gcmVzcG9uc2VUeXBlID0gXCJibG9iXCIgKEhBU19UWVBFRF9BUlJBWVMgd2lsbCBiZSB0cnVlKSwgYmVjYXVzZSB3ZSBjYW4gaW5zcGVjdCB0aGVcbiAgICAgICAgICAgIC8vIG1pbWUgdHlwZSBhbmQgaWYgaXQncyBhIEpQRUcgKHZlcnkgY29tbW9uIGNhc2UpIHdlIGNhbiBzYXZlIGEgbG90IG9mIHRpbWUgaW5cbiAgICAgICAgICAgIC8vIF9sb2FkIGJlbG93LlxuICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGJsb2IgPSB4aHIucmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgYmxvYnVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgICAgICAgICAgX2xvYWQoYmxvYnVybCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLm9uZXJyb3IgPSBfb25lcnJvcjtcbiAgICAgICAgICAgIHhoci5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XG4gICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gXCJibG9iXCI7XG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2xvYWQodXJsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF9sb2FkKHVybCkge1xuICAgICAgICBpbWcuc3JjID0gdXJsO1xuICAgICAgICBpZiAoaW1nLmNvbXBsZXRlICYmICFicm93c2VyLm1zaWUpIHtcbiAgICAgICAgICAgIC8vIElFLCBibGVzcyBpdCdzIGxpdHRsZSBoZWFydCwgc2F5cyBpbWcuY29tcGxldGUgPT0gdHJ1ZSBldmVuIHRob3VnaCB0aGUgaW1hZ2UgaXNcbiAgICAgICAgICAgIC8vIG5vdCBsb2FkZWQgKHdpZHRoPTApLCB0aGVyZWZvcmUgd2UgbXVzdCBnbyB0aGUgb25sb2FkIHJvdXRlICh0aWNrZXQgOTI5NjM1KS5cbiAgICAgICAgICAgIF9vbmxvYWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSBfb25sb2FkO1xuICAgICAgICAgICAgaW1nLm9uZXJyb3IgPSBfb25lcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIF90cnljYW52YXMoKSB7XG4gICAgICAgIGlmICghc2l6ZSkge1xuICAgICAgICAgICAgc2l6ZSA9IHsgd2lkdGg6IGltZy53aWR0aCwgaGVpZ2h0OiBpbWcuaGVpZ2h0IH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gc2l6ZS53aWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHNpemUuaGVpZ2h0O1xuXG4gICAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCwgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xuXG4gICAgICAgIHZhciBpbWdkYXRhO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaW1nZGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgLy8gaXQgdGFpbnRlZCB0aGUgY2FudmFzIC0tIGNhbid0IGRyYXcgaXQuXG4gICAgICAgICAgICBfb25lcnJvcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGJsb2J1cmwpIHtcbiAgICAgICAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKGJsb2J1cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW4gY2FzZSBpdCBjb250YWlucyB0cmFuc3BhcmVuY3ksIHdlIG11c3Qgc2VwYXJhdGUgcmdiIGRhdGEgZnJvbSB0aGUgYWxwaGFcbiAgICAgICAgLy8gY2hhbm5lbCBhbmQgY3JlYXRlIGEgUERGUmF3SW1hZ2UgaW1hZ2Ugd2l0aCBvcGFjaXR5LiAgb3RoZXJ3aXNlIHdlIGNhbiB1c2UgYVxuICAgICAgICAvLyBQREZKcGVnSW1hZ2UuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIHRvIGRvIHRoaXMgaW4gb25lIHN0ZXAsIHdlIGNyZWF0ZSB0aGUgcmdiIGFuZCBhbHBoYSBzdHJlYW1zIGFueXdheSwgZXZlbiBpZlxuICAgICAgICAvLyB3ZSBtaWdodCBlbmQgdXAgbm90IHVzaW5nIHRoZW0gaWYgaGFzQWxwaGEgcmVtYWlucyBmYWxzZS5cblxuICAgICAgICB2YXIgaGFzQWxwaGEgPSBmYWxzZSwgcmdiID0gQmluYXJ5U3RyZWFtKCksIGFscGhhID0gQmluYXJ5U3RyZWFtKCk7XG4gICAgICAgIHZhciByYXdieXRlcyA9IGltZ2RhdGEuZGF0YTtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHJhd2J5dGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmdiLndyaXRlQnl0ZShyYXdieXRlc1tpKytdKTtcbiAgICAgICAgICAgIHJnYi53cml0ZUJ5dGUocmF3Ynl0ZXNbaSsrXSk7XG4gICAgICAgICAgICByZ2Iud3JpdGVCeXRlKHJhd2J5dGVzW2krK10pO1xuICAgICAgICAgICAgdmFyIGEgPSByYXdieXRlc1tpKytdO1xuICAgICAgICAgICAgaWYgKGEgPCAyNTUpIHtcbiAgICAgICAgICAgICAgICBoYXNBbHBoYSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbHBoYS53cml0ZUJ5dGUoYSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzQWxwaGEgfHwgb3B0aW9ucy5rZWVwUE5HKSB7XG4gICAgICAgICAgICBpbWcgPSBuZXcgUERGUmF3SW1hZ2Uoc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQsIHJnYiwgYWxwaGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbm8gdHJhbnNwYXJlbmN5LCBlbmNvZGUgYXMgSlBFRy5cbiAgICAgICAgICAgIHZhciBkYXRhID0gY2FudmFzLnRvRGF0YVVSTChcImltYWdlL2pwZWdcIiwgb3B0aW9ucy5qcGVnUXVhbGl0eSk7XG4gICAgICAgICAgICBkYXRhID0gZGF0YS5zdWJzdHIoZGF0YS5pbmRleE9mKFwiO2Jhc2U2NCxcIikgKyA4KTtcblxuICAgICAgICAgICAgdmFyIHN0cmVhbSA9IEJpbmFyeVN0cmVhbSgpO1xuICAgICAgICAgICAgc3RyZWFtLndyaXRlQmFzZTY0KGRhdGEpO1xuICAgICAgICAgICAgaW1nID0gbmV3IFBERkpwZWdJbWFnZShzdHJlYW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udChJTUFHRV9DQUNIRVt1cmxdID0gaW1nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25lcnJvcigpIHtcbiAgICAgICAgY29udChJTUFHRV9DQUNIRVt1cmxdID0gXCJFUlJPUlwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBfb25sb2FkKCkge1xuICAgICAgICBpZiAoc2l6ZSkge1xuICAgICAgICAgICAgLy8gYnV0IGlmIHJlcXVlc3RlZCBzaXplIGlzIGJpZ2dlciB0aGFuIHRoZSBpbWFnZSwganVzdCB1c2UgdGhlIG9yaWdpbmFsIGltYWdlLlxuICAgICAgICAgICAgaWYgKHNpemUud2lkdGggPj0gaW1nLndpZHRoIHx8IHNpemUuaGVpZ2h0ID49IGltZy5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBzaXplID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNpemUgJiYgYmxvYiAmJiAvXmltYWdlXFwvanBlP2ckL2kudGVzdChibG9iLnR5cGUpKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBrbm93IHdlIGdvdCBhIEpQRUcsIHdlIGNhbiBza2lwIHRoZSBwcm9jZXNzIG9mIHJlbmRlcmluZyBpdCB0byBhXG4gICAgICAgICAgICAvLyBjYW52YXMsIGdldHRpbmcgdGhlIHBpeGVsIGRhdGEsIHNlYXJjaGluZyBmb3IgdHJhbnNwYXJlbmN5IHdlIGtub3cgd2Ugd29uJ3RcbiAgICAgICAgICAgIC8vIGZpbmQsIGdldHRpbmcgYmFjayBhIGRhdGEgVVJJIGFuZCB0aGVuIGRlY29kaW5nIHRoZSBCQVNFNjQgdG8gZmluYWxseSBnZXQgdGhlXG4gICAgICAgICAgICAvLyBiaW5hcnkgd2UgYWxyZWFkeSBoYXZlLiAgQWxzbywgd2UgYXZvaWQgZG93bmdyYWRpbmcgdGhlIGltYWdlIHF1YWxpdHksIHdpdGhcbiAgICAgICAgICAgIC8vIHRoZSBwb3NzaWJsZSBkcmF3YmFjayBvZiBtYWtpbmcgYSBiaWdnZXIgUERGOyBzdGlsbCwgc2VlbXMgbGVnaXQuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gQmVzaWRlcyBzYXZpbmcgYSBsb3Qgb2Ygd29yaywgdGhpcyBhbHNvIHJldXNlcyB0aGUgYnVmZmVyIG1lbW9yeVxuICAgICAgICAgICAgLy8gKEJpbmFyeVN0cmVhbSBkb2VzIG5vdCBjcmVhdGUgYSBjb3B5KSwgcG90ZW50aWFsbHkgc2F2aW5nIHNvbWUgR0MgY3ljbGVzLlxuICAgICAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGltZyA9IG5ldyBQREZKcGVnSW1hZ2UoQmluYXJ5U3RyZWFtKG5ldyBVaW50OEFycmF5KHRoaXMucmVzdWx0KSkpO1xuICAgICAgICAgICAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKGJsb2J1cmwpO1xuICAgICAgICAgICAgICAgICAgICBjb250KElNQUdFX0NBQ0hFW3VybF0gPSBpbWcpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3MgYW4gZXJyb3IgcGFyc2luZyB0aGUgSlBFRyBzdHJlYW0sIGl0IGNvdWxkIGJlIGR1ZSB0byBhXG4gICAgICAgICAgICAgICAgICAgIC8vIG1pc2NvbmZpZ3VyZWQgc2VydmVyIChpbXByb3BlciBjb250ZW50LXR5cGU6XG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLXVpLWNvcmUvaXNzdWVzLzQxODQpLiAgSWYgdGhhdCdzIHRoZSBjYXNlLFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgY2FudmFzIHdpbGwgc3RpbGwgYmUgYWJsZSB0byBkcmF3IGl0LlxuICAgICAgICAgICAgICAgICAgICBfdHJ5Y2FudmFzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90cnljYW52YXMoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFueUxvYWRlcihsb2FkT25lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHVybHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBuID0gdXJscy5sZW5ndGgsIGkgPSBuO1xuICAgICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICAgIGlmICgtLW4gPT09IDApIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgICBsb2FkT25lKHVybHNbaV0sIG5leHQpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxudmFyIGxvYWRGb250cyA9IG1hbnlMb2FkZXIobG9hZEZvbnQpO1xudmFyIGxvYWRJbWFnZXMgPSBmdW5jdGlvbihpbWFnZXMsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBqcGVnUXVhbGl0eSA6IDAuOTIsXG4gICAgICAgIGtlZXBQTkcgICAgIDogZmFsc2VcbiAgICB9LCBvcHRpb25zKTtcbiAgICB2YXIgdXJscyA9IE9iamVjdC5rZXlzKGltYWdlcyksIG4gPSB1cmxzLmxlbmd0aDtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgaWYgKC0tbiA9PT0gMCkge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cmxzLmZvckVhY2goZnVuY3Rpb24odXJsKXtcbiAgICAgICAgbG9hZEltYWdlKHVybCwgaW1hZ2VzW3VybF0sIG5leHQsIG9wdGlvbnMpO1xuICAgIH0pO1xufTtcblxuUERGRG9jdW1lbnQucHJvdG90eXBlID0ge1xuICAgIGxvYWRGb250czogbG9hZEZvbnRzLFxuICAgIGxvYWRJbWFnZXM6IGxvYWRJbWFnZXMsXG5cbiAgICBnZXRGb250OiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgdmFyIGZvbnQgPSB0aGlzLkZPTlRTW3VybF07XG4gICAgICAgIGlmICghZm9udCkge1xuICAgICAgICAgICAgZm9udCA9IEZPTlRfQ0FDSEVbdXJsXTtcbiAgICAgICAgICAgIGlmICghZm9udCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZvbnQgXCIgKyB1cmwgKyBcIiBoYXMgbm90IGJlZW4gbG9hZGVkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZvbnQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBmb250ID0gdGhpcy5hdHRhY2gobmV3IFBERlN0YW5kYXJkRm9udCh1cmwpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9udCA9IHRoaXMuYXR0YWNoKG5ldyBQREZGb250KHRoaXMsIGZvbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuRk9OVFNbdXJsXSA9IGZvbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvbnQ7XG4gICAgfSxcblxuICAgIGdldEltYWdlOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgdmFyIGltZyA9IHRoaXMuSU1BR0VTW3VybF07XG4gICAgICAgIGlmICghaW1nKSB7XG4gICAgICAgICAgICBpbWcgPSBJTUFHRV9DQUNIRVt1cmxdO1xuICAgICAgICAgICAgaWYgKCFpbWcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbWFnZSBcIiArIHVybCArIFwiIGhhcyBub3QgYmVlbiBsb2FkZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW1nID09PSBcIkVSUk9SXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGltZyA9IHRoaXMuSU1BR0VTW3VybF0gPSB0aGlzLmF0dGFjaChpbWcuYXNTdHJlYW0odGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbWc7XG4gICAgfSxcblxuICAgIGdldE9wYWNpdHlHUzogZnVuY3Rpb24ob3BhY2l0eSwgZm9yU3Ryb2tlKSB7XG4gICAgICAgIHZhciBpZCA9IHBhcnNlRmxvYXQob3BhY2l0eSkudG9GaXhlZCgzKTtcbiAgICAgICAgb3BhY2l0eSA9IHBhcnNlRmxvYXQoaWQpO1xuICAgICAgICBpZCArPSBmb3JTdHJva2UgPyBcIlNcIiA6IFwiRlwiO1xuICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLl9vcGFjaXR5R1NDYWNoZSB8fCAodGhpcy5fb3BhY2l0eUdTQ2FjaGUgPSB7fSk7XG4gICAgICAgIHZhciBncyA9IGNhY2hlW2lkXTtcbiAgICAgICAgaWYgKCFncykge1xuICAgICAgICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICAgICAgICAgIFR5cGU6IF8oXCJFeHRHU3RhdGVcIilcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoZm9yU3Ryb2tlKSB7XG4gICAgICAgICAgICAgICAgcHJvcHMuQ0EgPSBvcGFjaXR5O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcm9wcy5jYSA9IG9wYWNpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncyA9IHRoaXMuYXR0YWNoKG5ldyBQREZEaWN0aW9uYXJ5KHByb3BzKSk7XG4gICAgICAgICAgICBncy5fcmVzb3VyY2VOYW1lID0gXyhcIkdTXCIgKyAoKytSRVNPVVJDRV9DT1VOVEVSKSk7XG4gICAgICAgICAgICBjYWNoZVtpZF0gPSBncztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ3M7XG4gICAgfSxcblxuICAgIGRpY3Q6IGZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGRGljdGlvbmFyeShwcm9wcyk7XG4gICAgfSxcblxuICAgIG5hbWU6IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gXyhzdHIpO1xuICAgIH0sXG5cbiAgICBzdHJlYW06IGZ1bmN0aW9uKHByb3BzLCBjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGU3RyZWFtKGNvbnRlbnQsIHByb3BzKTtcbiAgICB9XG59O1xuXG4vKiAtLS0tLVsgdXRpbHMgXS0tLS0tICovXG5cbmZ1bmN0aW9uIHBhZChzdHIsIGxlbiwgY2gpIHtcbiAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IGxlbikge1xuICAgICAgICBzdHIgPSBjaCArIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gemVyb3BhZChuLCBsZW4pIHtcbiAgICByZXR1cm4gcGFkKFN0cmluZyhuKSwgbGVuLCBcIjBcIik7XG59XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgQXJyYXk7XG59O1xuXG5mdW5jdGlvbiBpc0RhdGUob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIERhdGU7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckFycmF5KGEsIG91dCkge1xuICAgIG91dChcIltcIik7XG4gICAgaWYgKGEubGVuZ3RoID4gMCkge1xuICAgICAgICBvdXQud2l0aEluZGVudChmdW5jdGlvbigpe1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwICYmIGkgJSA4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dC5pbmRlbnQoYVtpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0KFwiIFwiLCBhW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvL291dC5pbmRlbnQoKTtcbiAgICB9XG4gICAgb3V0KFwiIF1cIik7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckRhdGUoZGF0ZSwgb3V0KSB7XG4gICAgb3V0KFwiKEQ6XCIsXG4gICAgICAgIHplcm9wYWQoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCA0KSxcbiAgICAgICAgemVyb3BhZChkYXRlLmdldFVUQ01vbnRoKCkgKyAxLCAyKSxcbiAgICAgICAgemVyb3BhZChkYXRlLmdldFVUQ0RhdGUoKSwgMiksXG4gICAgICAgIHplcm9wYWQoZGF0ZS5nZXRVVENIb3VycygpLCAyKSxcbiAgICAgICAgemVyb3BhZChkYXRlLmdldFVUQ01pbnV0ZXMoKSwgMiksXG4gICAgICAgIHplcm9wYWQoZGF0ZS5nZXRVVENTZWNvbmRzKCksIDIpLFxuICAgICAgICBcIlopXCIpO1xufVxuXG5mdW5jdGlvbiBtbTJwdChtbSkge1xuICAgIHJldHVybiBtbSAqICg3Mi8yNS40KTtcbn1cblxuZnVuY3Rpb24gY20ycHQoY20pIHtcbiAgICByZXR1cm4gbW0ycHQoY20gKiAxMCk7XG59XG5cbmZ1bmN0aW9uIGluMnB0KGluY2gpICB7XG4gICAgcmV0dXJuIGluY2ggKiA3Mjtcbn1cblxuXG5mdW5jdGlvbiB1bml0c1RvUG9pbnRzKHgsIGRlZikge1xuICAgIGlmICh0eXBlb2YgeCA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHggPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YXIgbTtcbiAgICAgICAgbSA9IC9eXFxzKihbMC05Ll0rKVxccyoobW18Y218aW58cHQpXFxzKiQvLmV4ZWMoeCk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICB2YXIgbnVtID0gcGFyc2VGbG9hdChtWzFdKTtcbiAgICAgICAgICAgIGlmICghaXNOYU4obnVtKSkge1xuICAgICAgICAgICAgICAgIGlmIChtWzJdID09IFwicHRcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBcIm1tXCI6IG1tMnB0LFxuICAgICAgICAgICAgICAgICAgICBcImNtXCI6IGNtMnB0LFxuICAgICAgICAgICAgICAgICAgICBcImluXCI6IGluMnB0XG4gICAgICAgICAgICAgICAgfVttWzJdXShudW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkZWYgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZGVmO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBwYXJzZSB1bml0OiBcIiArIHgpO1xufVxuXG4vKiAtLS0tLVsgUERGIGJhc2ljIG9iamVjdHMgXS0tLS0tICovXG5cbmZ1bmN0aW9uIFBERlZhbHVlKCl7fVxuXG5QREZWYWx1ZS5wcm90b3R5cGUuYmVmb3JlUmVuZGVyID0gZnVuY3Rpb24oKXt9O1xuXG5mdW5jdGlvbiBkZWZjbGFzcyhDdG9yLCBwcm90bywgQmFzZSkge1xuICAgIGlmICghQmFzZSkge1xuICAgICAgICBCYXNlID0gUERGVmFsdWU7XG4gICAgfVxuICAgIEN0b3IucHJvdG90eXBlID0gbmV3IEJhc2UoKTtcbiAgICBmb3IgKHZhciBpIGluIHByb3RvKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShwcm90bywgaSkpIHtcbiAgICAgICAgICAgIEN0b3IucHJvdG90eXBlW2ldID0gcHJvdG9baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEN0b3I7XG59XG5cbnZhciBQREZTdHJpbmcgPSBkZWZjbGFzcyhmdW5jdGlvbiBQREZTdHJpbmcodmFsdWUsIHV0ZjE2YmUpe1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnV0ZjE2YmUgPSBCb29sZWFuKHV0ZjE2YmUpO1xufSwge1xuICAgIHJlbmRlcjogZnVuY3Rpb24ob3V0KSB7XG4gICAgICAgIGxldCB0eHQgPSB0aGlzLnZhbHVlO1xuICAgICAgICBpZiAodGhpcy51dGYxNmJlKSB7XG4gICAgICAgICAgICB0eHQgPSBCT00gKyBlbmNvZGVVVEYxNkJFKHR4dCk7XG4gICAgICAgICAgICB0eHQgPSB0eHQucmVwbGFjZSgvKFtcXChcXClcXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgICAgICAgICBvdXQoXCIoXCIsIHR4dCwgXCIpXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gb3V0LndyaXRlU3RyaW5nIHRydW5jYXRlcyBjaGFyY29kZXMgdG8gOCBiaXRzIGFuZFxuICAgICAgICAgICAgLy8gMHgxMjggJiAweEZGIGlzIDQwLCB0aGUgY29kZSBmb3Igb3BlbiBwYXJlbi5cbiAgICAgICAgICAgIC8vIHRoZXJlZm9yZSB3ZSBuZWVkIHRvIGRvIHRoZSBjaG9wcGluZyBoZXJlIHRvIG1ha2VcbiAgICAgICAgICAgIC8vIHN1cmUgd2UgYmFja3NsYXNoIGFsbCBjYXNlcy5cbiAgICAgICAgICAgIGxldCBkYXRhID0gWyA0MCBdOyAvLyBvcGVuIFBERiBzdHJpbmcgJygnXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR4dC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGxldCBjb2RlID0gdHh0LmNoYXJDb2RlQXQoaSkgJiAweEZGO1xuICAgICAgICAgICAgICAgIGlmIChjb2RlID09IDQwIHx8IGNvZGUgPT0gNDEgfHwgY29kZSA9PSA5Mikge1xuICAgICAgICAgICAgICAgICAgICAvLyBiYWNrc2xhc2ggYmVmb3JlICgsICkgYW5kIFxcXG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaCg5Mik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRhdGEucHVzaChjb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEucHVzaCg0MSk7ICAvLyAnKScgY2xvc2UgUERGIHN0cmluZ1xuICAgICAgICAgICAgb3V0LndyaXRlRGF0YShkYXRhKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG59KTtcblxudmFyIFBERkhleFN0cmluZyA9IGRlZmNsYXNzKGZ1bmN0aW9uIFBERkhleFN0cmluZyh2YWx1ZSl7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xufSwge1xuICAgIHJlbmRlcjogZnVuY3Rpb24ob3V0KSB7XG4gICAgICAgIG91dChcIjxcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy52YWx1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgb3V0KHplcm9wYWQodGhpcy52YWx1ZS5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KSwgNCkpO1xuICAgICAgICB9XG4gICAgICAgIG91dChcIj5cIik7XG4gICAgfVxufSwgUERGU3RyaW5nKTtcblxuLy8vIG5hbWVzXG5cbnZhciBQREZOYW1lID0gZGVmY2xhc3MoZnVuY3Rpb24gUERGTmFtZShuYW1lKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbn0sIHtcbiAgICByZW5kZXI6IGZ1bmN0aW9uKG91dCkge1xuICAgICAgICBvdXQoXCIvXCIgKyB0aGlzLmVzY2FwZSgpKTtcbiAgICB9LFxuICAgIGVzY2FwZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWUucmVwbGFjZSgvW15cXHgyMS1cXHg3RV0vZywgZnVuY3Rpb24oYyl7XG4gICAgICAgICAgICByZXR1cm4gXCIjXCIgKyB6ZXJvcGFkKGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNiksIDIpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG59KTtcblxudmFyIFBERk5hbWVfY2FjaGUgPSB7fTtcblBERk5hbWUuZ2V0ID0gXztcblxuZnVuY3Rpb24gXyhuYW1lKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KFBERk5hbWVfY2FjaGUsIG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBQREZOYW1lX2NhY2hlW25hbWVdO1xuICAgIH1cbiAgICByZXR1cm4gKFBERk5hbWVfY2FjaGVbbmFtZV0gPSBuZXcgUERGTmFtZShuYW1lKSk7XG59XG5cbi8vLyBkaWN0aW9uYXJ5XG5cbnZhciBQREZEaWN0aW9uYXJ5ID0gZGVmY2xhc3MoZnVuY3Rpb24gUERGRGljdGlvbmFyeShwcm9wcykge1xuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbn0sIHtcbiAgICByZW5kZXI6IGZ1bmN0aW9uKG91dCkge1xuICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzLCBlbXB0eSA9IHRydWU7XG4gICAgICAgIG91dChcIjw8XCIpO1xuICAgICAgICBvdXQud2l0aEluZGVudChmdW5jdGlvbigpe1xuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBwcm9wcykge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShwcm9wcywgaSkgJiYgIS9eXy8udGVzdChpKSkge1xuICAgICAgICAgICAgICAgICAgICBlbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvdXQuaW5kZW50KF8oaSksIFwiIFwiLCBwcm9wc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFlbXB0eSkge1xuICAgICAgICAgICAgb3V0LmluZGVudCgpO1xuICAgICAgICB9XG4gICAgICAgIG91dChcIj4+XCIpO1xuICAgIH1cbn0pO1xuXG4vLy8gc3RyZWFtc1xuXG52YXIgUERGU3RyZWFtID0gZGVmY2xhc3MoZnVuY3Rpb24gUERGU3RyZWFtKGRhdGEsIHByb3BzLCBjb21wcmVzcykge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHZhciB0bXAgPSBCaW5hcnlTdHJlYW0oKTtcbiAgICAgICAgdG1wLndyaXRlKGRhdGEpO1xuICAgICAgICBkYXRhID0gdG1wO1xuICAgIH1cbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMucHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICB0aGlzLmNvbXByZXNzID0gY29tcHJlc3M7XG59LCB7XG4gICAgcmVuZGVyOiBmdW5jdGlvbihvdXQpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGEuZ2V0KCksIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKHRoaXMuY29tcHJlc3MgJiYgc3VwcG9ydHNEZWZsYXRlKCkpIHtcbiAgICAgICAgICAgIGlmICghcHJvcHMuRmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgcHJvcHMuRmlsdGVyID0gW107XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCEocHJvcHMuRmlsdGVyIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgcHJvcHMuRmlsdGVyID0gWyBwcm9wcy5GaWx0ZXIgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb3BzLkZpbHRlci51bnNoaWZ0KF8oXCJGbGF0ZURlY29kZVwiKSk7XG4gICAgICAgICAgICBkYXRhID0gZGVmbGF0ZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9wcy5MZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgb3V0KG5ldyBQREZEaWN0aW9uYXJ5KHByb3BzKSwgXCIgc3RyZWFtXCIsIE5MKTtcbiAgICAgICAgb3V0LndyaXRlRGF0YShkYXRhKTtcbiAgICAgICAgb3V0KE5MLCBcImVuZHN0cmVhbVwiKTtcbiAgICB9XG59KTtcblxuLy8vIGNhdGFsb2dcblxudmFyIFBERkNhdGFsb2cgPSBkZWZjbGFzcyhmdW5jdGlvbiBQREZDYXRhbG9nKCl7XG4gICAgdGhpcy5wcm9wcyA9IHtcbiAgICAgICAgVHlwZTogXyhcIkNhdGFsb2dcIilcbiAgICB9O1xufSwge1xuICAgIHNldFBhZ2VzOiBmdW5jdGlvbihwYWdlc09iaikge1xuICAgICAgICB0aGlzLnByb3BzLlBhZ2VzID0gcGFnZXNPYmo7XG4gICAgfVxufSwgUERGRGljdGlvbmFyeSk7XG5cbi8vLyBwYWdlIHRyZWVcblxudmFyIFBERlBhZ2VUcmVlID0gZGVmY2xhc3MoZnVuY3Rpb24gUERGUGFnZVRyZWUoKXtcbiAgICB0aGlzLnByb3BzID0ge1xuICAgICAgICBUeXBlICA6IF8oXCJQYWdlc1wiKSxcbiAgICAgICAgS2lkcyAgOiBbXSxcbiAgICAgICAgQ291bnQgOiAwXG4gICAgfTtcbn0sIHtcbiAgICBhZGRQYWdlOiBmdW5jdGlvbihwYWdlT2JqKSB7XG4gICAgICAgIHRoaXMucHJvcHMuS2lkcy5wdXNoKHBhZ2VPYmopO1xuICAgICAgICB0aGlzLnByb3BzLkNvdW50Kys7XG4gICAgfVxufSwgUERGRGljdGlvbmFyeSk7XG5cbi8vLyBpbWFnZXNcblxuLy8gSlBFR1xuXG52YXIgU09GX0NPREVTID0gWzB4YzAsIDB4YzEsIDB4YzIsIDB4YzMsIDB4YzUsIDB4YzYsIDB4YzcsIDB4YzksIDB4Y2EsIDB4Y2IsIDB4Y2QsIDB4Y2UsIDB4Y2ZdO1xuXG5mdW5jdGlvbiBQREZKcGVnSW1hZ2UoZGF0YSkge1xuICAgIC8vIHdlIG11c3QgZGV0ZXJtaW5lIHRoZSBjb3JyZWN0IGNvbG9yIHNwYWNlLiAgd2UnbGwgcGFyc2UgYSBiaXRcbiAgICAvLyBvZiB0aGUgSlBFRyBzdHJlYW0gZm9yIHRoaXMsIGl0J3Mgc3RpbGwgYmV0dGVyIHRoYW4gZ29pbmdcbiAgICAvLyB0aHJvdWdoIHRoZSBjYW52YXMuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tdWktY29yZS9pc3N1ZXMvMjg0NVxuICAgIGRhdGEub2Zmc2V0KDApO1xuICAgIHZhciB3aWR0aCwgaGVpZ2h0LCBjb2xvclNwYWNlLCBiaXRzUGVyQ29tcG9uZW50O1xuICAgIHZhciBzb2kgPSBkYXRhLnJlYWRTaG9ydCgpO1xuICAgIGlmIChzb2kgIT0gMHhGRkQ4KSB7XG4gICAgICAgIC8vIFhYWDogZG8gd2UgaGF2ZSBzb21lIGJldHRlciBvcHRpb25zIGhlcmU/XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSlBFRyBpbWFnZVwiKTtcbiAgICB9XG4gICAgd2hpbGUgKCFkYXRhLmVvZigpKSB7XG4gICAgICAgIHZhciBmZiA9IGRhdGEucmVhZEJ5dGUoKTtcbiAgICAgICAgaWYgKGZmICE9IDB4RkYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSlBFRyBpbWFnZVwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFya2VyID0gZGF0YS5yZWFkQnl0ZSgpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gZGF0YS5yZWFkU2hvcnQoKTtcbiAgICAgICAgaWYgKFNPRl9DT0RFUy5pbmRleE9mKG1hcmtlcikgPj0gMCkge1xuICAgICAgICAgICAgLy8gXCJzdGFydCBvZiBmcmFtZVwiIG1hcmtlclxuICAgICAgICAgICAgYml0c1BlckNvbXBvbmVudCA9IGRhdGEucmVhZEJ5dGUoKTtcbiAgICAgICAgICAgIGhlaWdodCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICB3aWR0aCA9IGRhdGEucmVhZFNob3J0KCk7XG4gICAgICAgICAgICBjb2xvclNwYWNlID0gZGF0YS5yZWFkQnl0ZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS5za2lwKGxlbmd0aCAtIDIpO1xuICAgIH1cblxuICAgIGlmIChjb2xvclNwYWNlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBKUEVHIGltYWdlXCIpO1xuICAgIH1cblxuICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgVHlwZSAgICAgICAgICAgICA6IF8oXCJYT2JqZWN0XCIpLFxuICAgICAgICBTdWJ0eXBlICAgICAgICAgIDogXyhcIkltYWdlXCIpLFxuICAgICAgICBXaWR0aCAgICAgICAgICAgIDogd2lkdGgsXG4gICAgICAgIEhlaWdodCAgICAgICAgICAgOiBoZWlnaHQsXG4gICAgICAgIEJpdHNQZXJDb21wb25lbnQgOiBiaXRzUGVyQ29tcG9uZW50LFxuICAgICAgICBGaWx0ZXIgICAgICAgICAgIDogXyhcIkRDVERlY29kZVwiKVxuICAgIH07XG5cbiAgICBzd2l0Y2ggKGNvbG9yU3BhY2UpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcHJvcHMuQ29sb3JTcGFjZSA9IF8oXCJEZXZpY2VHcmF5XCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcHJvcHMuQ29sb3JTcGFjZSA9IF8oXCJEZXZpY2VSR0JcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBwcm9wcy5Db2xvclNwYWNlID0gXyhcIkRldmljZUNNWUtcIik7XG4gICAgICAgIHByb3BzLkRlY29kZSA9IFsgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCBdOyAvLyBpbnZlcnQgY29sb3JzXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuYXNTdHJlYW0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZGF0YS5vZmZzZXQoMCk7XG4gICAgICAgIHZhciBzdHJlYW0gPSBuZXcgUERGU3RyZWFtKGRhdGEsIHByb3BzKTtcbiAgICAgICAgc3RyZWFtLl9yZXNvdXJjZU5hbWUgPSBfKFwiSVwiICsgKCsrUkVTT1VSQ0VfQ09VTlRFUikpO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH07XG59XG5cbi8vIFBERlJhd0ltYWdlIHdpbGwgYmUgdXNlZCBmb3IgaW1hZ2VzIHdpdGggdHJhbnNwYXJlbmN5IChQTkcpXG5cbmZ1bmN0aW9uIFBERlJhd0ltYWdlKHdpZHRoLCBoZWlnaHQsIHJnYiwgYWxwaGEpIHtcbiAgICB0aGlzLmFzU3RyZWFtID0gZnVuY3Rpb24ocGRmKSB7XG4gICAgICAgIHZhciBtYXNrID0gbmV3IFBERlN0cmVhbShhbHBoYSwge1xuICAgICAgICAgICAgVHlwZSAgICAgICAgICAgICA6IF8oXCJYT2JqZWN0XCIpLFxuICAgICAgICAgICAgU3VidHlwZSAgICAgICAgICA6IF8oXCJJbWFnZVwiKSxcbiAgICAgICAgICAgIFdpZHRoICAgICAgICAgICAgOiB3aWR0aCxcbiAgICAgICAgICAgIEhlaWdodCAgICAgICAgICAgOiBoZWlnaHQsXG4gICAgICAgICAgICBCaXRzUGVyQ29tcG9uZW50IDogOCxcbiAgICAgICAgICAgIENvbG9yU3BhY2UgICAgICAgOiBfKFwiRGV2aWNlR3JheVwiKVxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgdmFyIHN0cmVhbSA9IG5ldyBQREZTdHJlYW0ocmdiLCB7XG4gICAgICAgICAgICBUeXBlICAgICAgICAgICAgIDogXyhcIlhPYmplY3RcIiksXG4gICAgICAgICAgICBTdWJ0eXBlICAgICAgICAgIDogXyhcIkltYWdlXCIpLFxuICAgICAgICAgICAgV2lkdGggICAgICAgICAgICA6IHdpZHRoLFxuICAgICAgICAgICAgSGVpZ2h0ICAgICAgICAgICA6IGhlaWdodCxcbiAgICAgICAgICAgIEJpdHNQZXJDb21wb25lbnQgOiA4LFxuICAgICAgICAgICAgQ29sb3JTcGFjZSAgICAgICA6IF8oXCJEZXZpY2VSR0JcIiksXG4gICAgICAgICAgICBTTWFzayAgICAgICAgICAgIDogcGRmLmF0dGFjaChtYXNrKVxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgc3RyZWFtLl9yZXNvdXJjZU5hbWUgPSBfKFwiSVwiICsgKCsrUkVTT1VSQ0VfQ09VTlRFUikpO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH07XG59XG5cbi8vLyBzdGFuZGFyZCBmb250c1xuXG52YXIgUERGU3RhbmRhcmRGb250ID0gZGVmY2xhc3MoZnVuY3Rpb24gUERGU3RhbmRhcmRGb250KG5hbWUpe1xuICAgIHRoaXMucHJvcHMgPSB7XG4gICAgICAgIFR5cGUgICAgIDogXyhcIkZvbnRcIiksXG4gICAgICAgIFN1YnR5cGUgIDogXyhcIlR5cGUxXCIpLFxuICAgICAgICBCYXNlRm9udCA6IF8obmFtZSlcbiAgICB9O1xuICAgIHRoaXMuX3Jlc291cmNlTmFtZSA9IF8oXCJGXCIgKyAoKytSRVNPVVJDRV9DT1VOVEVSKSk7XG59LCB7XG4gICAgZW5jb2RlVGV4dDogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGU3RyaW5nKFN0cmluZyhzdHIpKTtcbiAgICB9XG59LCBQREZEaWN0aW9uYXJ5KTtcblxuLy8vIFRURiBmb250c1xuXG52YXIgUERGRm9udCA9IGRlZmNsYXNzKGZ1bmN0aW9uIFBERkZvbnQocGRmLCBmb250LCBwcm9wcyl7XG4gICAgcHJvcHMgPSB0aGlzLnByb3BzID0gcHJvcHMgfHwge307XG4gICAgcHJvcHMuVHlwZSA9IF8oXCJGb250XCIpO1xuICAgIHByb3BzLlN1YnR5cGUgPSBfKFwiVHlwZTBcIik7XG4gICAgcHJvcHMuRW5jb2RpbmcgPSBfKFwiSWRlbnRpdHktSFwiKTtcblxuICAgIHRoaXMuX3BkZiA9IHBkZjtcbiAgICB0aGlzLl9mb250ID0gZm9udDtcbiAgICB0aGlzLl9zdWIgPSBmb250Lm1ha2VTdWJzZXQoKTtcbiAgICB0aGlzLl9yZXNvdXJjZU5hbWUgPSBfKFwiRlwiICsgKCsrUkVTT1VSQ0VfQ09VTlRFUikpO1xuXG4gICAgdmFyIGhlYWQgPSBmb250LmhlYWQ7XG5cbiAgICB0aGlzLm5hbWUgPSBmb250LnBzTmFtZTtcbiAgICB2YXIgc2NhbGUgPSB0aGlzLnNjYWxlID0gZm9udC5zY2FsZTtcbiAgICB0aGlzLmJib3ggPSBbXG4gICAgICAgIGhlYWQueE1pbiAqIHNjYWxlLFxuICAgICAgICBoZWFkLnlNaW4gKiBzY2FsZSxcbiAgICAgICAgaGVhZC54TWF4ICogc2NhbGUsXG4gICAgICAgIGhlYWQueU1heCAqIHNjYWxlXG4gICAgXTtcblxuICAgIHRoaXMuaXRhbGljQW5nbGUgPSBmb250LnBvc3QuaXRhbGljQW5nbGU7XG4gICAgdGhpcy5hc2NlbnQgPSBmb250LmFzY2VudCAqIHNjYWxlO1xuICAgIHRoaXMuZGVzY2VudCA9IGZvbnQuZGVzY2VudCAqIHNjYWxlO1xuICAgIHRoaXMubGluZUdhcCA9IGZvbnQubGluZUdhcCAqIHNjYWxlO1xuICAgIHRoaXMuY2FwSGVpZ2h0ID0gZm9udC5vczIuY2FwSGVpZ2h0IHx8IHRoaXMuYXNjZW50O1xuICAgIHRoaXMueEhlaWdodCA9IGZvbnQub3MyLnhIZWlnaHQgfHwgMDtcbiAgICB0aGlzLnN0ZW1WID0gMDtcblxuICAgIHRoaXMuZmFtaWx5Q2xhc3MgPSAoZm9udC5vczIuZmFtaWx5Q2xhc3MgfHwgMCkgPj4gODtcbiAgICB0aGlzLmlzU2VyaWYgPSB0aGlzLmZhbWlseUNsYXNzID49IDEgJiYgdGhpcy5mYW1pbHlDbGFzcyA8PSA3O1xuICAgIHRoaXMuaXNTY3JpcHQgPSB0aGlzLmZhbWlseUNsYXNzID09IDEwO1xuXG4gICAgdGhpcy5mbGFncyA9ICgoZm9udC5wb3N0LmlzRml4ZWRQaXRjaCA/IDEgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAodGhpcy5pc1NlcmlmID8gMSA8PCAxIDogMCkgfFxuICAgICAgICAgICAgICAgICAgKHRoaXMuaXNTY3JpcHQgPyAxIDw8IDMgOiAwKSB8XG4gICAgICAgICAgICAgICAgICAodGhpcy5pdGFsaWNBbmdsZSAhPT0gMCA/IDEgPDwgNiA6IDApIHxcbiAgICAgICAgICAgICAgICAgICgxIDw8IDUpKTtcbn0sIHtcbiAgICBlbmNvZGVUZXh0OiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUERGSGV4U3RyaW5nKHRoaXMuX3N1Yi5lbmNvZGVUZXh0KFN0cmluZyh0ZXh0KSkpO1xuICAgIH0sXG4gICAgZ2V0VGV4dFdpZHRoOiBmdW5jdGlvbihmb250U2l6ZSwgdGV4dCkge1xuICAgICAgICB2YXIgd2lkdGggPSAwLCBjb2RlTWFwID0gdGhpcy5fZm9udC5jbWFwLmNvZGVNYXA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGdseXBoSWQgPSBjb2RlTWFwW3RleHQuY2hhckNvZGVBdChpKV07XG4gICAgICAgICAgICB3aWR0aCArPSB0aGlzLl9mb250LndpZHRoT2ZHbHlwaChnbHlwaElkIHx8IDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3aWR0aCAqIGZvbnRTaXplIC8gMTAwMDtcbiAgICB9LFxuICAgIGJlZm9yZVJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHN1YiA9IHNlbGYuX3N1YjtcblxuICAgICAgICAvLyB3cml0ZSB0aGUgVFRGIGRhdGFcbiAgICAgICAgdmFyIGRhdGEgPSBzdWIucmVuZGVyKCk7XG4gICAgICAgIHZhciBmb250U3RyZWFtID0gbmV3IFBERlN0cmVhbShCaW5hcnlTdHJlYW0oZGF0YSksIHtcbiAgICAgICAgICAgIExlbmd0aDE6IGRhdGEubGVuZ3RoXG4gICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gc2VsZi5fcGRmLmF0dGFjaChuZXcgUERGRGljdGlvbmFyeSh7XG4gICAgICAgICAgICBUeXBlICAgICAgICAgOiBfKFwiRm9udERlc2NyaXB0b3JcIiksXG4gICAgICAgICAgICBGb250TmFtZSAgICAgOiBfKHNlbGYuX3N1Yi5wc05hbWUpLFxuICAgICAgICAgICAgRm9udEJCb3ggICAgIDogc2VsZi5iYm94LFxuICAgICAgICAgICAgRmxhZ3MgICAgICAgIDogc2VsZi5mbGFncyxcbiAgICAgICAgICAgIFN0ZW1WICAgICAgICA6IHNlbGYuc3RlbVYsXG4gICAgICAgICAgICBJdGFsaWNBbmdsZSAgOiBzZWxmLml0YWxpY0FuZ2xlLFxuICAgICAgICAgICAgQXNjZW50ICAgICAgIDogc2VsZi5hc2NlbnQsXG4gICAgICAgICAgICBEZXNjZW50ICAgICAgOiBzZWxmLmRlc2NlbnQsXG4gICAgICAgICAgICBDYXBIZWlnaHQgICAgOiBzZWxmLmNhcEhlaWdodCxcbiAgICAgICAgICAgIFhIZWlnaHQgICAgICA6IHNlbGYueEhlaWdodCxcbiAgICAgICAgICAgIEZvbnRGaWxlMiAgICA6IHNlbGYuX3BkZi5hdHRhY2goZm9udFN0cmVhbSlcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHZhciBjbWFwID0gc3ViLm5jaWQyb2dpZDtcbiAgICAgICAgdmFyIGZpcnN0Q2hhciA9IHN1Yi5maXJzdENoYXI7XG4gICAgICAgIHZhciBsYXN0Q2hhciA9IHN1Yi5sYXN0Q2hhcjtcbiAgICAgICAgdmFyIGNoYXJXaWR0aHMgPSBbXTtcbiAgICAgICAgKGZ1bmN0aW9uIGxvb3AoaSwgY2h1bmspe1xuICAgICAgICAgICAgaWYgKGkgPD0gbGFzdENoYXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2lkID0gY21hcFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoZ2lkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9vcChpICsgMSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaHVuaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcldpZHRocy5wdXNoKGksIGNodW5rID0gW10pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNodW5rLnB1c2goc2VsZi5fZm9udC53aWR0aE9mR2x5cGgoZ2lkKSk7XG4gICAgICAgICAgICAgICAgICAgIGxvb3AoaSArIDEsIGNodW5rKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKGZpcnN0Q2hhcik7XG5cbiAgICAgICAgLy8gQXMgaWYgdHdvIGRpY3Rpb25hcmllcyB3ZXJlbid0IGVub3VnaCwgd2UgbmVlZCBhbm90aGVyXG4gICAgICAgIC8vIG9uZSwgdGhlIFwiZGVzY2VuZGFudCBmb250XCIuICBPbmx5IHRoYXQgb25lIGNhbiBiZSBvZlxuICAgICAgICAvLyBTdWJ0eXBlIENJREZvbnRUeXBlMi4gIFBERiBpcyB0aGUgWDExIG9mIGRvY3VtZW50XG4gICAgICAgIC8vIGZvcm1hdHM6IHBvcnRhYmxlIGJ1dCBmdWxsIG9mIGxlZ2FjeSB0aGF0IG5vYm9keSBjYXJlc1xuICAgICAgICAvLyBhYm91dCBhbnltb3JlLlxuXG4gICAgICAgIHZhciBkZXNjZW5kYW50ID0gbmV3IFBERkRpY3Rpb25hcnkoe1xuICAgICAgICAgICAgVHlwZTogXyhcIkZvbnRcIiksXG4gICAgICAgICAgICBTdWJ0eXBlOiBfKFwiQ0lERm9udFR5cGUyXCIpLFxuICAgICAgICAgICAgQmFzZUZvbnQ6IF8oc2VsZi5fc3ViLnBzTmFtZSksXG4gICAgICAgICAgICBDSURTeXN0ZW1JbmZvOiBuZXcgUERGRGljdGlvbmFyeSh7XG4gICAgICAgICAgICAgICAgUmVnaXN0cnkgICA6IG5ldyBQREZTdHJpbmcoXCJBZG9iZVwiKSxcbiAgICAgICAgICAgICAgICBPcmRlcmluZyAgIDogbmV3IFBERlN0cmluZyhcIklkZW50aXR5XCIpLFxuICAgICAgICAgICAgICAgIFN1cHBsZW1lbnQgOiAwXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIEZvbnREZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgICAgICAgICAgRmlyc3RDaGFyOiBmaXJzdENoYXIsXG4gICAgICAgICAgICBMYXN0Q2hhcjogbGFzdENoYXIsXG4gICAgICAgICAgICBEVzogTWF0aC5yb3VuZChzZWxmLl9mb250LndpZHRoT2ZHbHlwaCgwKSksXG4gICAgICAgICAgICBXOiBjaGFyV2lkdGhzLFxuICAgICAgICAgICAgQ0lEVG9HSURNYXA6IHNlbGYuX3BkZi5hdHRhY2goc2VsZi5fbWFrZUNpZFRvR2lkTWFwKCkpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBkaWN0ID0gc2VsZi5wcm9wcztcbiAgICAgICAgZGljdC5CYXNlRm9udCA9IF8oc2VsZi5fc3ViLnBzTmFtZSk7XG4gICAgICAgIGRpY3QuRGVzY2VuZGFudEZvbnRzID0gWyBzZWxmLl9wZGYuYXR0YWNoKGRlc2NlbmRhbnQpIF07XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgVG9Vbmljb2RlIG1hcCBzbyB0aGF0IGFwcHMgY2FuIGV4dHJhY3RcbiAgICAgICAgLy8gbWVhbmluZ2Z1bCB0ZXh0IGZyb20gdGhlIFBERi5cbiAgICAgICAgdmFyIHVuaW1hcCA9IG5ldyBQREZUb1VuaWNvZGVDbWFwKGZpcnN0Q2hhciwgbGFzdENoYXIsIHN1Yi5zdWJzZXQpO1xuICAgICAgICB2YXIgdW5pbWFwU3RyZWFtID0gbmV3IFBERlN0cmVhbShtYWtlT3V0cHV0KCksIG51bGwsIHRydWUpO1xuICAgICAgICB1bmltYXBTdHJlYW0uZGF0YSh1bmltYXApO1xuICAgICAgICBkaWN0LlRvVW5pY29kZSA9IHNlbGYuX3BkZi5hdHRhY2godW5pbWFwU3RyZWFtKTtcbiAgICB9LFxuICAgIF9tYWtlQ2lkVG9HaWRNYXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBERlN0cmVhbShCaW5hcnlTdHJlYW0odGhpcy5fc3ViLmNpZFRvR2lkTWFwKCkpLCBudWxsLCB0cnVlKTtcbiAgICB9XG59LCBQREZEaWN0aW9uYXJ5KTtcblxudmFyIFBERlRvVW5pY29kZUNtYXAgPSBkZWZjbGFzcyhmdW5jdGlvbiBQREZVbmljb2RlQ01hcChmaXJzdENoYXIsIGxhc3RDaGFyLCBtYXApe1xuICAgIHRoaXMuZmlyc3RDaGFyID0gZmlyc3RDaGFyO1xuICAgIHRoaXMubGFzdENoYXIgPSBsYXN0Q2hhcjtcbiAgICB0aGlzLm1hcCA9IG1hcDtcbn0sIHtcbiAgICByZW5kZXI6IGZ1bmN0aW9uKG91dCkge1xuICAgICAgICBvdXQuaW5kZW50KFwiL0NJREluaXQgL1Byb2NTZXQgZmluZHJlc291cmNlIGJlZ2luXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiMTIgZGljdCBiZWdpblwiKTtcbiAgICAgICAgb3V0LmluZGVudChcImJlZ2luY21hcFwiKTtcbiAgICAgICAgb3V0LmluZGVudChcIi9DSURTeXN0ZW1JbmZvIDw8XCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiICAvUmVnaXN0cnkgKEFkb2JlKVwiKTtcbiAgICAgICAgb3V0LmluZGVudChcIiAgL09yZGVyaW5nIChVQ1MpXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiICAvU3VwcGxlbWVudCAwXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiPj4gZGVmXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiL0NNYXBOYW1lIC9BZG9iZS1JZGVudGl0eS1VQ1MgZGVmXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiL0NNYXBUeXBlIDIgZGVmXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiMSBiZWdpbmNvZGVzcGFjZXJhbmdlXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiICA8MDAwMD48ZmZmZj5cIik7XG4gICAgICAgIG91dC5pbmRlbnQoXCJlbmRjb2Rlc3BhY2VyYW5nZVwiKTtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIG91dC5pbmRlbnQoc2VsZi5sYXN0Q2hhciAtIHNlbGYuZmlyc3RDaGFyICsgMSwgXCIgYmVnaW5iZmNoYXJcIik7XG4gICAgICAgIG91dC53aXRoSW5kZW50KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBmb3IgKHZhciBjb2RlID0gc2VsZi5maXJzdENoYXI7IGNvZGUgPD0gc2VsZi5sYXN0Q2hhcjsgKytjb2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVuaWNvZGUgPSBzZWxmLm1hcFtjb2RlXTtcbiAgICAgICAgICAgICAgICB2YXIgc3RyID0gdWNzMmVuY29kZShbIHVuaWNvZGUgXSk7XG4gICAgICAgICAgICAgICAgb3V0LmluZGVudChcIjxcIiwgemVyb3BhZChjb2RlLnRvU3RyaW5nKDE2KSwgNCksIFwiPlwiLCBcIjxcIik7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0KHplcm9wYWQoc3RyLmNoYXJDb2RlQXQoaSkudG9TdHJpbmcoMTYpLCA0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dChcIj5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBvdXQuaW5kZW50KFwiZW5kYmZjaGFyXCIpO1xuXG4gICAgICAgIG91dC5pbmRlbnQoXCJlbmRjbWFwXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiQ01hcE5hbWUgY3VycmVudGRpY3QgL0NNYXAgZGVmaW5lcmVzb3VyY2UgcG9wXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiZW5kXCIpO1xuICAgICAgICBvdXQuaW5kZW50KFwiZW5kXCIpO1xuICAgIH1cbn0pO1xuXG4vLy8gZ3JhZGllbnRzXG5cbmZ1bmN0aW9uIG1ha2VIYXNoKGEpIHtcbiAgICByZXR1cm4gYS5tYXAoZnVuY3Rpb24oeCl7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHgpID8gbWFrZUhhc2goeClcbiAgICAgICAgICAgIDogdHlwZW9mIHggPT0gXCJudW1iZXJcIiA/IChNYXRoLnJvdW5kKHggKiAxMDAwKSAvIDEwMDApLnRvRml4ZWQoMylcbiAgICAgICAgICAgIDogeDtcbiAgICB9KS5qb2luKFwiIFwiKTtcbn1cblxuZnVuY3Rpb24gY2FjaGVDb2xvckdyYWRpZW50RnVuY3Rpb24ocGRmLCByMSwgZzEsIGIxLCByMiwgZzIsIGIyKSB7XG4gICAgdmFyIGhhc2ggPSBtYWtlSGFzaChbIHIxLCBnMSwgYjEsIHIyLCBnMiwgYjIgXSk7XG4gICAgdmFyIGZ1bmMgPSBwZGYuR1JBRF9DT0xfRlVOQ1RJT05TW2hhc2hdO1xuICAgIGlmICghZnVuYykge1xuICAgICAgICBmdW5jID0gcGRmLkdSQURfQ09MX0ZVTkNUSU9OU1toYXNoXSA9IHBkZi5hdHRhY2gobmV3IFBERkRpY3Rpb25hcnkoe1xuICAgICAgICAgICAgRnVuY3Rpb25UeXBlOiAyLFxuICAgICAgICAgICAgRG9tYWluOiBbIDAsIDEgXSxcbiAgICAgICAgICAgIFJhbmdlOiBbIDAsIDEsIDAsIDEsIDAsIDEgXSxcbiAgICAgICAgICAgIE46IDEsXG4gICAgICAgICAgICBDMDogWyByMSAsIGcxICwgYjEgXSxcbiAgICAgICAgICAgIEMxOiBbIHIyICwgZzIgLCBiMiBdXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmM7XG59XG5cbmZ1bmN0aW9uIGNhY2hlT3BhY2l0eUdyYWRpZW50RnVuY3Rpb24ocGRmLCBhMSwgYTIpIHtcbiAgICB2YXIgaGFzaCA9IG1ha2VIYXNoKFsgYTEsIGEyIF0pO1xuICAgIHZhciBmdW5jID0gcGRmLkdSQURfT1BDX0ZVTkNUSU9OU1toYXNoXTtcbiAgICBpZiAoIWZ1bmMpIHtcbiAgICAgICAgZnVuYyA9IHBkZi5HUkFEX09QQ19GVU5DVElPTlNbaGFzaF0gPSBwZGYuYXR0YWNoKG5ldyBQREZEaWN0aW9uYXJ5KHtcbiAgICAgICAgICAgIEZ1bmN0aW9uVHlwZTogMixcbiAgICAgICAgICAgIERvbWFpbjogWyAwLCAxIF0sXG4gICAgICAgICAgICBSYW5nZTogWyAwLCAxIF0sXG4gICAgICAgICAgICBOOiAxLFxuICAgICAgICAgICAgQzA6IFsgYTEgXSxcbiAgICAgICAgICAgIEMxOiBbIGEyIF1cbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYztcbn1cblxuZnVuY3Rpb24gbWFrZUdyYWRpZW50RnVuY3Rpb25zKHBkZiwgc3RvcHMpIHtcbiAgICB2YXIgaGFzQWxwaGEgPSBmYWxzZTtcbiAgICB2YXIgb3BhY2l0aWVzID0gW107XG4gICAgdmFyIGNvbG9ycyA9IFtdO1xuICAgIHZhciBvZmZzZXRzID0gW107XG4gICAgdmFyIGVuY29kZSA9IFtdO1xuICAgIHZhciBpLCBwcmV2LCBjdXIsIHByZXZDb2xvciwgY3VyQ29sb3I7XG4gICAgZm9yIChpID0gMTsgaSA8IHN0b3BzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHByZXYgPSBzdG9wc1tpIC0gMV07XG4gICAgICAgIGN1ciA9IHN0b3BzW2ldO1xuICAgICAgICBwcmV2Q29sb3IgPSBwcmV2LmNvbG9yO1xuICAgICAgICBjdXJDb2xvciA9IGN1ci5jb2xvcjtcbiAgICAgICAgY29sb3JzLnB1c2goY2FjaGVDb2xvckdyYWRpZW50RnVuY3Rpb24oXG4gICAgICAgICAgICBwZGYsXG4gICAgICAgICAgICBwcmV2Q29sb3IuciwgcHJldkNvbG9yLmcsIHByZXZDb2xvci5iLFxuICAgICAgICAgICAgY3VyQ29sb3IuciwgIGN1ckNvbG9yLmcsICBjdXJDb2xvci5iXG4gICAgICAgICkpO1xuICAgICAgICBpZiAocHJldkNvbG9yLmEgPCAxIHx8IGN1ckNvbG9yLmEgPCAxKSB7XG4gICAgICAgICAgICBoYXNBbHBoYSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0cy5wdXNoKGN1ci5vZmZzZXQpO1xuICAgICAgICBlbmNvZGUucHVzaCgwLCAxKTtcbiAgICB9XG4gICAgaWYgKGhhc0FscGhhKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBzdG9wcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcHJldiA9IHN0b3BzW2kgLSAxXTtcbiAgICAgICAgICAgIGN1ciA9IHN0b3BzW2ldO1xuICAgICAgICAgICAgcHJldkNvbG9yID0gcHJldi5jb2xvcjtcbiAgICAgICAgICAgIGN1ckNvbG9yID0gY3VyLmNvbG9yO1xuICAgICAgICAgICAgb3BhY2l0aWVzLnB1c2goY2FjaGVPcGFjaXR5R3JhZGllbnRGdW5jdGlvbihcbiAgICAgICAgICAgICAgICBwZGYsIHByZXZDb2xvci5hLCBjdXJDb2xvci5hXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvZmZzZXRzLnBvcCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGhhc0FscGhhICA6IGhhc0FscGhhLFxuICAgICAgICBjb2xvcnMgICAgOiBhc3NlbWJsZShjb2xvcnMpLFxuICAgICAgICBvcGFjaXRpZXMgOiBoYXNBbHBoYSA/IGFzc2VtYmxlKG9wYWNpdGllcykgOiBudWxsXG4gICAgfTtcbiAgICBmdW5jdGlvbiBhc3NlbWJsZShmdW5jcykge1xuICAgICAgICBpZiAoZnVuY3MubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jc1swXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgRnVuY3Rpb25UeXBlOiAzLFxuICAgICAgICAgICAgRnVuY3Rpb25zOiBmdW5jcyxcbiAgICAgICAgICAgIERvbWFpbjogWyAwLCAxIF0sXG4gICAgICAgICAgICBCb3VuZHM6IG9mZnNldHMsXG4gICAgICAgICAgICBFbmNvZGU6IGVuY29kZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2FjaGVDb2xvckdyYWRpZW50KHBkZiwgaXNSYWRpYWwsIHN0b3BzLCBjb29yZHMsIGZ1bmNzLCBib3gpIHtcbiAgICB2YXIgc2hhZGluZywgaGFzaDtcbiAgICAvLyBpZiBib3ggaXMgZ2l2ZW4gdGhlbiB3ZSBoYXZlIHVzZXItc3BhY2UgY29vcmRpbmF0ZXMsIHdoaWNoXG4gICAgLy8gbWVhbnMgdGhlIGdyYWRpZW50IGlzIGRlc2lnbmVkIGZvciBhIGNlcnRhaW4gcG9zaXRpb24vc2l6ZVxuICAgIC8vIG9uIHBhZ2UuICBjYWNoaW5nIHdvbid0IGRvIGFueSBnb29kLlxuICAgIGlmICghYm94KSB7XG4gICAgICAgIHZhciBhID0gWyBpc1JhZGlhbCBdLmNvbmNhdChjb29yZHMpO1xuICAgICAgICBzdG9wcy5mb3JFYWNoKGZ1bmN0aW9uKHgpe1xuICAgICAgICAgICAgYS5wdXNoKHgub2Zmc2V0LCB4LmNvbG9yLnIsIHguY29sb3IuZywgeC5jb2xvci5iKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGhhc2ggPSBtYWtlSGFzaChhKTtcbiAgICAgICAgc2hhZGluZyA9IHBkZi5HUkFEX0NPTFtoYXNoXTtcbiAgICB9XG4gICAgaWYgKCFzaGFkaW5nKSB7XG4gICAgICAgIHNoYWRpbmcgPSBuZXcgUERGRGljdGlvbmFyeSh7XG4gICAgICAgICAgICBUeXBlOiBfKFwiU2hhZGluZ1wiKSxcbiAgICAgICAgICAgIFNoYWRpbmdUeXBlOiBpc1JhZGlhbCA/IDMgOiAyLFxuICAgICAgICAgICAgQ29sb3JTcGFjZTogXyhcIkRldmljZVJHQlwiKSxcbiAgICAgICAgICAgIENvb3JkczogY29vcmRzLFxuICAgICAgICAgICAgRG9tYWluOiBbIDAsIDEgXSxcbiAgICAgICAgICAgIEZ1bmN0aW9uOiBmdW5jcyxcbiAgICAgICAgICAgIEV4dGVuZDogWyB0cnVlLCB0cnVlIF1cbiAgICAgICAgfSk7XG4gICAgICAgIHBkZi5hdHRhY2goc2hhZGluZyk7XG4gICAgICAgIHNoYWRpbmcuX3Jlc291cmNlTmFtZSA9IFwiU1wiICsgKCsrUkVTT1VSQ0VfQ09VTlRFUik7XG4gICAgICAgIGlmIChoYXNoKSB7XG4gICAgICAgICAgICBwZGYuR1JBRF9DT0xbaGFzaF0gPSBzaGFkaW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzaGFkaW5nO1xufVxuXG5mdW5jdGlvbiBjYWNoZU9wYWNpdHlHcmFkaWVudChwZGYsIGlzUmFkaWFsLCBzdG9wcywgY29vcmRzLCBmdW5jcywgYm94KSB7XG4gICAgdmFyIG9wYWNpdHksIGhhc2g7XG4gICAgLy8gaWYgYm94IGlzIGdpdmVuIHRoZW4gd2UgaGF2ZSB1c2VyLXNwYWNlIGNvb3JkaW5hdGVzLCB3aGljaFxuICAgIC8vIG1lYW5zIHRoZSBncmFkaWVudCBpcyBkZXNpZ25lZCBmb3IgYSBjZXJ0YWluIHBvc2l0aW9uL3NpemVcbiAgICAvLyBvbiBwYWdlLiAgY2FjaGluZyB3b24ndCBkbyBhbnkgZ29vZC5cbiAgICBpZiAoIWJveCkge1xuICAgICAgICB2YXIgYSA9IFsgaXNSYWRpYWwgXS5jb25jYXQoY29vcmRzKTtcbiAgICAgICAgc3RvcHMuZm9yRWFjaChmdW5jdGlvbih4KXtcbiAgICAgICAgICAgIGEucHVzaCh4Lm9mZnNldCwgeC5jb2xvci5hKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGhhc2ggPSBtYWtlSGFzaChhKTtcbiAgICAgICAgb3BhY2l0eSA9IHBkZi5HUkFEX09QQ1toYXNoXTtcbiAgICB9XG4gICAgaWYgKCFvcGFjaXR5KSB7XG4gICAgICAgIG9wYWNpdHkgPSBuZXcgUERGRGljdGlvbmFyeSh7XG4gICAgICAgICAgICBUeXBlOiBfKFwiRXh0R1N0YXRlXCIpLFxuICAgICAgICAgICAgQUlTOiBmYWxzZSxcbiAgICAgICAgICAgIENBOiAxLFxuICAgICAgICAgICAgY2E6IDEsXG4gICAgICAgICAgICBTTWFzazoge1xuICAgICAgICAgICAgICAgIFR5cGU6IF8oXCJNYXNrXCIpLFxuICAgICAgICAgICAgICAgIFM6IF8oXCJMdW1pbm9zaXR5XCIpLFxuICAgICAgICAgICAgICAgIEc6IHBkZi5hdHRhY2gobmV3IFBERlN0cmVhbShcIi9hMCBncyAvczAgc2hcIiwge1xuICAgICAgICAgICAgICAgICAgICBUeXBlOiBfKFwiWE9iamVjdFwiKSxcbiAgICAgICAgICAgICAgICAgICAgU3VidHlwZTogXyhcIkZvcm1cIiksXG4gICAgICAgICAgICAgICAgICAgIEZvcm1UeXBlOiAxLFxuICAgICAgICAgICAgICAgICAgICBCQm94OiAoYm94ID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmxlZnQsIGJveC50b3AgKyBib3guaGVpZ2h0LCBib3gubGVmdCArIGJveC53aWR0aCwgYm94LnRvcFxuICAgICAgICAgICAgICAgICAgICBdIDogWyAwLCAxLCAxLCAwIF0pLFxuICAgICAgICAgICAgICAgICAgICBHcm91cDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgVHlwZTogXyhcIkdyb3VwXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgUzogXyhcIlRyYW5zcGFyZW5jeVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIENTOiBfKFwiRGV2aWNlR3JheVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEk6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBFeHRHU3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhMDogeyBDQTogMSwgY2E6IDEgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFNoYWRpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb2xvclNwYWNlOiBfKFwiRGV2aWNlR3JheVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29vcmRzOiBjb29yZHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvbWFpbjogWyAwLCAxIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNoYWRpbmdUeXBlOiBpc1JhZGlhbCA/IDMgOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGdW5jdGlvbjogZnVuY3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4dGVuZDogWyB0cnVlLCB0cnVlIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHBkZi5hdHRhY2gob3BhY2l0eSk7XG4gICAgICAgIG9wYWNpdHkuX3Jlc291cmNlTmFtZSA9IFwiT1wiICsgKCsrUkVTT1VSQ0VfQ09VTlRFUik7XG4gICAgICAgIGlmIChoYXNoKSB7XG4gICAgICAgICAgICBwZGYuR1JBRF9PUENbaGFzaF0gPSBvcGFjaXR5O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcGFjaXR5O1xufVxuXG5mdW5jdGlvbiBjYWNoZUdyYWRpZW50KHBkZiwgZ3JhZGllbnQsIGJveCkge1xuICAgIHZhciBpc1JhZGlhbCA9IGdyYWRpZW50LnR5cGUgPT0gXCJyYWRpYWxcIjtcbiAgICB2YXIgZnVuY3MgPSBtYWtlR3JhZGllbnRGdW5jdGlvbnMocGRmLCBncmFkaWVudC5zdG9wcyk7XG4gICAgdmFyIGNvb3JkcyA9IGlzUmFkaWFsID8gW1xuICAgICAgICBncmFkaWVudC5zdGFydC54ICwgZ3JhZGllbnQuc3RhcnQueSAsIGdyYWRpZW50LnN0YXJ0LnIsXG4gICAgICAgIGdyYWRpZW50LmVuZC54ICAgLCBncmFkaWVudC5lbmQueSAgICwgZ3JhZGllbnQuZW5kLnJcbiAgICBdIDogW1xuICAgICAgICBncmFkaWVudC5zdGFydC54ICwgZ3JhZGllbnQuc3RhcnQueSxcbiAgICAgICAgZ3JhZGllbnQuZW5kLnggICAsIGdyYWRpZW50LmVuZC55XG4gICAgXTtcbiAgICB2YXIgc2hhZGluZyA9IGNhY2hlQ29sb3JHcmFkaWVudChcbiAgICAgICAgcGRmLCBpc1JhZGlhbCwgZ3JhZGllbnQuc3RvcHMsIGNvb3JkcywgZnVuY3MuY29sb3JzLCBncmFkaWVudC51c2VyU3BhY2UgJiYgYm94XG4gICAgKTtcbiAgICB2YXIgb3BhY2l0eSA9IGZ1bmNzLmhhc0FscGhhID8gY2FjaGVPcGFjaXR5R3JhZGllbnQoXG4gICAgICAgIHBkZiwgaXNSYWRpYWwsIGdyYWRpZW50LnN0b3BzLCBjb29yZHMsIGZ1bmNzLm9wYWNpdGllcywgZ3JhZGllbnQudXNlclNwYWNlICYmIGJveFxuICAgICkgOiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIGhhc0FscGhhOiBmdW5jcy5oYXNBbHBoYSxcbiAgICAgICAgc2hhZGluZzogc2hhZGluZyxcbiAgICAgICAgb3BhY2l0eTogb3BhY2l0eVxuICAgIH07XG59XG5cbi8vLyBwYWdlIG9iamVjdFxuXG52YXIgUERGUGFnZSA9IGRlZmNsYXNzKGZ1bmN0aW9uIFBERlBhZ2UocGRmLCBwcm9wcyl7XG4gICAgdGhpcy5fcGRmID0gcGRmO1xuICAgIHRoaXMuX3Jjb3VudCA9IDA7XG4gICAgdGhpcy5fdGV4dE1vZGUgPSBmYWxzZTtcbiAgICB0aGlzLl9mb250UmVzb3VyY2VzID0ge307XG4gICAgdGhpcy5fZ3NSZXNvdXJjZXMgPSB7fTtcbiAgICB0aGlzLl94UmVzb3VyY2VzID0ge307XG4gICAgdGhpcy5fcGF0UmVzb3VyY2VzID0ge307XG4gICAgdGhpcy5fc2hSZXNvdXJjZXMgPSB7fTtcbiAgICB0aGlzLl9vcGFjaXR5ID0gMTtcbiAgICB0aGlzLl9tYXRyaXggPSBbIDEsIDAsIDAsIDEsIDAsIDAgXTtcbiAgICB0aGlzLl9hbm5vdGF0aW9ucyA9IFtdO1xuXG4gICAgdGhpcy5fZm9udCA9IG51bGw7XG4gICAgdGhpcy5fZm9udFNpemUgPSBudWxsO1xuXG4gICAgdGhpcy5fY29udGV4dFN0YWNrID0gW107XG5cbiAgICBwcm9wcyA9IHRoaXMucHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICBwcm9wcy5UeXBlID0gXyhcIlBhZ2VcIik7XG4gICAgcHJvcHMuUHJvY1NldCA9IFtcbiAgICAgICAgXyhcIlBERlwiKSxcbiAgICAgICAgXyhcIlRleHRcIiksXG4gICAgICAgIF8oXCJJbWFnZUJcIiksXG4gICAgICAgIF8oXCJJbWFnZUNcIiksXG4gICAgICAgIF8oXCJJbWFnZUlcIilcbiAgICBdO1xuICAgIHByb3BzLlJlc291cmNlcyA9IG5ldyBQREZEaWN0aW9uYXJ5KHtcbiAgICAgICAgRm9udCAgICAgIDogbmV3IFBERkRpY3Rpb25hcnkodGhpcy5fZm9udFJlc291cmNlcyksXG4gICAgICAgIEV4dEdTdGF0ZSA6IG5ldyBQREZEaWN0aW9uYXJ5KHRoaXMuX2dzUmVzb3VyY2VzKSxcbiAgICAgICAgWE9iamVjdCAgIDogbmV3IFBERkRpY3Rpb25hcnkodGhpcy5feFJlc291cmNlcyksXG4gICAgICAgIFBhdHRlcm4gICA6IG5ldyBQREZEaWN0aW9uYXJ5KHRoaXMuX3BhdFJlc291cmNlcyksXG4gICAgICAgIFNoYWRpbmcgICA6IG5ldyBQREZEaWN0aW9uYXJ5KHRoaXMuX3NoUmVzb3VyY2VzKVxuICAgIH0pO1xuICAgIHByb3BzLkFubm90cyA9IHRoaXMuX2Fubm90YXRpb25zO1xufSwge1xuICAgIF9vdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9jb250ZW50LmRhdGEuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHRyYW5zZm9ybTogZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgICBpZiAoIWlzSWRlbnRpdHlNYXRyaXgoYXJndW1lbnRzKSkge1xuICAgICAgICAgICAgdGhpcy5fbWF0cml4ID0gbW11bChhcmd1bWVudHMsIHRoaXMuX21hdHJpeCk7XG4gICAgICAgICAgICB0aGlzLl9vdXQoYSwgXCIgXCIsIGIsIFwiIFwiLCBjLCBcIiBcIiwgZCwgXCIgXCIsIGUsIFwiIFwiLCBmLCBcIiBjbVwiKTtcbiAgICAgICAgICAgIC8vIFhYWDogZGVidWdcbiAgICAgICAgICAgIC8vIHRoaXMuX291dChcIiAlIGN1cnJlbnQgbWF0cml4OiBcIiwgdGhpcy5fbWF0cml4KTtcbiAgICAgICAgICAgIHRoaXMuX291dChOTCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24oZHgsIGR5KSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtKDEsIDAsIDAsIDEsIGR4LCBkeSk7XG4gICAgfSxcbiAgICBzY2FsZTogZnVuY3Rpb24oc3gsIHN5KSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtKHN4LCAwLCAwLCBzeSwgMCwgMCk7XG4gICAgfSxcbiAgICByb3RhdGU6IGZ1bmN0aW9uKGFuZ2xlKSB7XG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhhbmdsZSksIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0oY29zLCBzaW4sIC1zaW4sIGNvcywgMCwgMCk7XG4gICAgfSxcbiAgICBiZWdpblRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl90ZXh0TW9kZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX291dChcIkJUXCIsIE5MKTtcbiAgICB9LFxuICAgIGVuZFRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl90ZXh0TW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9vdXQoXCJFVFwiLCBOTCk7XG4gICAgfSxcbiAgICBfcmVxdWlyZVRleHRNb2RlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90ZXh0TW9kZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGV4dCBtb2RlIHJlcXVpcmVkOyBjYWxsIHBhZ2UuYmVnaW5UZXh0KCkgZmlyc3RcIik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIF9yZXF1aXJlRm9udDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5fZm9udCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZm9udCBzZWxlY3RlZDsgY2FsbCBwYWdlLnNldEZvbnQoKSBmaXJzdFwiKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2V0Rm9udDogZnVuY3Rpb24oZm9udCwgc2l6ZSkge1xuICAgICAgICB0aGlzLl9yZXF1aXJlVGV4dE1vZGUoKTtcbiAgICAgICAgaWYgKGZvbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgZm9udCA9IHRoaXMuX2ZvbnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIShmb250IGluc3RhbmNlb2YgUERGRm9udCkpIHtcbiAgICAgICAgICAgIGZvbnQgPSB0aGlzLl9wZGYuZ2V0Rm9udChmb250KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2l6ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBzaXplID0gdGhpcy5fZm9udFNpemU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZm9udFJlc291cmNlc1tmb250Ll9yZXNvdXJjZU5hbWVdID0gZm9udDtcbiAgICAgICAgdGhpcy5fZm9udCA9IGZvbnQ7XG4gICAgICAgIHRoaXMuX2ZvbnRTaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy5fb3V0KGZvbnQuX3Jlc291cmNlTmFtZSwgXCIgXCIsIHNpemUsIFwiIFRmXCIsIE5MKTtcbiAgICB9LFxuICAgIHNldFRleHRMZWFkaW5nOiBmdW5jdGlvbihzaXplKSB7XG4gICAgICAgIHRoaXMuX3JlcXVpcmVUZXh0TW9kZSgpO1xuICAgICAgICB0aGlzLl9vdXQoc2l6ZSwgXCIgVExcIiwgTkwpO1xuICAgIH0sXG4gICAgc2V0VGV4dFJlbmRlcmluZ01vZGU6IGZ1bmN0aW9uKG1vZGUpIHtcbiAgICAgICAgdGhpcy5fcmVxdWlyZVRleHRNb2RlKCk7XG4gICAgICAgIHRoaXMuX291dChtb2RlLCBcIiBUclwiLCBOTCk7XG4gICAgfSxcbiAgICBzaG93VGV4dDogZnVuY3Rpb24odGV4dCwgcmVxdWVzdGVkV2lkdGgpIHtcbiAgICAgICAgdGhpcy5fcmVxdWlyZUZvbnQoKTtcbiAgICAgICAgaWYgKHRleHQubGVuZ3RoID4gMSAmJiByZXF1ZXN0ZWRXaWR0aCAmJiB0aGlzLl9mb250IGluc3RhbmNlb2YgUERGRm9udCkge1xuICAgICAgICAgICAgdmFyIG91dHB1dFdpZHRoID0gdGhpcy5fZm9udC5nZXRUZXh0V2lkdGgodGhpcy5fZm9udFNpemUsIHRleHQpO1xuICAgICAgICAgICAgdmFyIHNjYWxlID0gcmVxdWVzdGVkV2lkdGggLyBvdXRwdXRXaWR0aCAqIDEwMDtcbiAgICAgICAgICAgIHRoaXMuX291dChzY2FsZSwgXCIgVHogXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX291dCh0aGlzLl9mb250LmVuY29kZVRleHQodGV4dCksIFwiIFRqXCIsIE5MKTtcbiAgICB9LFxuICAgIHNob3dUZXh0Tkw6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgICAgdGhpcy5fcmVxdWlyZUZvbnQoKTtcbiAgICAgICAgdGhpcy5fb3V0KHRoaXMuX2ZvbnQuZW5jb2RlVGV4dCh0ZXh0KSwgXCIgJ1wiLCBOTCk7XG4gICAgfSxcbiAgICBhZGRMaW5rOiBmdW5jdGlvbih1cmksIGJveCkge1xuICAgICAgICB2YXIgbGwgPSB0aGlzLl90b1BhZ2UoeyB4OiBib3gubGVmdCwgeTogYm94LmJvdHRvbSB9KTtcbiAgICAgICAgdmFyIHVyID0gdGhpcy5fdG9QYWdlKHsgeDogYm94LnJpZ2h0LCB5OiBib3gudG9wIH0pO1xuICAgICAgICB0aGlzLl9hbm5vdGF0aW9ucy5wdXNoKG5ldyBQREZEaWN0aW9uYXJ5KHtcbiAgICAgICAgICAgIFR5cGUgICAgOiBfKFwiQW5ub3RcIiksXG4gICAgICAgICAgICBTdWJ0eXBlIDogXyhcIkxpbmtcIiksXG4gICAgICAgICAgICBSZWN0ICAgIDogWyBsbC54LCBsbC55LCB1ci54LCB1ci55IF0sXG4gICAgICAgICAgICBCb3JkZXIgIDogWyAwLCAwLCAwIF0sXG4gICAgICAgICAgICBBICAgICAgIDogbmV3IFBERkRpY3Rpb25hcnkoe1xuICAgICAgICAgICAgICAgIFR5cGUgOiBfKFwiQWN0aW9uXCIpLFxuICAgICAgICAgICAgICAgIFMgICAgOiBfKFwiVVJJXCIpLFxuICAgICAgICAgICAgICAgIFVSSSAgOiBuZXcgUERGU3RyaW5nKHVyaSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pKTtcbiAgICB9LFxuICAgIHNldFN0cm9rZUNvbG9yOiBmdW5jdGlvbihyLCBnLCBiKSB7XG4gICAgICAgIHRoaXMuX291dChyLCBcIiBcIiwgZywgXCIgXCIsIGIsIFwiIFJHXCIsIE5MKTtcbiAgICB9LFxuICAgIHNldE9wYWNpdHk6IGZ1bmN0aW9uKG9wYWNpdHkpIHtcbiAgICAgICAgdGhpcy5zZXRGaWxsT3BhY2l0eShvcGFjaXR5KTtcbiAgICAgICAgdGhpcy5zZXRTdHJva2VPcGFjaXR5KG9wYWNpdHkpO1xuICAgICAgICB0aGlzLl9vcGFjaXR5ICo9IG9wYWNpdHk7XG4gICAgfSxcbiAgICBzZXRTdHJva2VPcGFjaXR5OiBmdW5jdGlvbihvcGFjaXR5KSB7XG4gICAgICAgIGlmIChvcGFjaXR5IDwgMSkge1xuICAgICAgICAgICAgdmFyIGdzID0gdGhpcy5fcGRmLmdldE9wYWNpdHlHUyh0aGlzLl9vcGFjaXR5ICogb3BhY2l0eSwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLl9nc1Jlc291cmNlc1tncy5fcmVzb3VyY2VOYW1lXSA9IGdzO1xuICAgICAgICAgICAgdGhpcy5fb3V0KGdzLl9yZXNvdXJjZU5hbWUsIFwiIGdzXCIsIE5MKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2V0RmlsbENvbG9yOiBmdW5jdGlvbihyLCBnLCBiKSB7XG4gICAgICAgIHRoaXMuX291dChyLCBcIiBcIiwgZywgXCIgXCIsIGIsIFwiIHJnXCIsIE5MKTtcbiAgICB9LFxuICAgIHNldEZpbGxPcGFjaXR5OiBmdW5jdGlvbihvcGFjaXR5KSB7XG4gICAgICAgIGlmIChvcGFjaXR5IDwgMSkge1xuICAgICAgICAgICAgdmFyIGdzID0gdGhpcy5fcGRmLmdldE9wYWNpdHlHUyh0aGlzLl9vcGFjaXR5ICogb3BhY2l0eSwgZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5fZ3NSZXNvdXJjZXNbZ3MuX3Jlc291cmNlTmFtZV0gPSBncztcbiAgICAgICAgICAgIHRoaXMuX291dChncy5fcmVzb3VyY2VOYW1lLCBcIiBnc1wiLCBOTCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGdyYWRpZW50OiBmdW5jdGlvbihncmFkaWVudCwgYm94KSB7XG4gICAgICAgIHRoaXMuc2F2ZSgpO1xuICAgICAgICB0aGlzLnJlY3QoYm94LmxlZnQsIGJveC50b3AsIGJveC53aWR0aCwgYm94LmhlaWdodCk7XG4gICAgICAgIHRoaXMuY2xpcCgpO1xuICAgICAgICBpZiAoIWdyYWRpZW50LnVzZXJTcGFjZSkge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0oYm94LndpZHRoLCAwLCAwLCBib3guaGVpZ2h0LCBib3gubGVmdCwgYm94LnRvcCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGcgPSBjYWNoZUdyYWRpZW50KHRoaXMuX3BkZiwgZ3JhZGllbnQsIGJveCk7XG4gICAgICAgIHZhciBzbmFtZSA9IGcuc2hhZGluZy5fcmVzb3VyY2VOYW1lLCBvbmFtZTtcbiAgICAgICAgdGhpcy5fc2hSZXNvdXJjZXNbc25hbWVdID0gZy5zaGFkaW5nO1xuICAgICAgICBpZiAoZy5oYXNBbHBoYSkge1xuICAgICAgICAgICAgb25hbWUgPSBnLm9wYWNpdHkuX3Jlc291cmNlTmFtZTtcbiAgICAgICAgICAgIHRoaXMuX2dzUmVzb3VyY2VzW29uYW1lXSA9IGcub3BhY2l0eTtcbiAgICAgICAgICAgIHRoaXMuX291dChcIi9cIiArIG9uYW1lICsgXCIgZ3MgXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX291dChcIi9cIiArIHNuYW1lICsgXCIgc2hcIiwgTkwpO1xuICAgICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICB9LFxuICAgIHNldERhc2hQYXR0ZXJuOiBmdW5jdGlvbihkYXNoQXJyYXksIGRhc2hQaGFzZSkge1xuICAgICAgICB0aGlzLl9vdXQoZGFzaEFycmF5LCBcIiBcIiwgZGFzaFBoYXNlLCBcIiBkXCIsIE5MKTtcbiAgICB9LFxuICAgIHNldExpbmVXaWR0aDogZnVuY3Rpb24od2lkdGgpIHtcbiAgICAgICAgdGhpcy5fb3V0KHdpZHRoLCBcIiB3XCIsIE5MKTtcbiAgICB9LFxuICAgIHNldExpbmVDYXA6IGZ1bmN0aW9uKGxpbmVDYXApIHtcbiAgICAgICAgdGhpcy5fb3V0KGxpbmVDYXAsIFwiIEpcIiwgTkwpO1xuICAgIH0sXG4gICAgc2V0TGluZUpvaW46IGZ1bmN0aW9uKGxpbmVKb2luKSB7XG4gICAgICAgIHRoaXMuX291dChsaW5lSm9pbiwgXCIgalwiLCBOTCk7XG4gICAgfSxcbiAgICBzZXRNaXR0ZXJMaW1pdDogZnVuY3Rpb24obWl0dGVyTGltaXQpIHtcbiAgICAgICAgdGhpcy5fb3V0KG1pdHRlckxpbWl0LCBcIiBNXCIsIE5MKTtcbiAgICB9LFxuICAgIHNhdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9jb250ZXh0U3RhY2sucHVzaCh0aGlzLl9jb250ZXh0KCkpO1xuICAgICAgICB0aGlzLl9vdXQoXCJxXCIsIE5MKTtcbiAgICB9LFxuICAgIHJlc3RvcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9vdXQoXCJRXCIsIE5MKTtcbiAgICAgICAgdGhpcy5fY29udGV4dCh0aGlzLl9jb250ZXh0U3RhY2sucG9wKCkpO1xuICAgIH0sXG5cbiAgICAvLyBwYXRoc1xuICAgIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgICB0aGlzLl9vdXQoeCwgXCIgXCIsIHksIFwiIG1cIiwgTkwpO1xuICAgIH0sXG4gICAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHRoaXMuX291dCh4LCBcIiBcIiwgeSwgXCIgbFwiLCBOTCk7XG4gICAgfSxcbiAgICBiZXppZXI6IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgICAgICAgdGhpcy5fb3V0KHgxLCBcIiBcIiwgeTEsIFwiIFwiLCB4MiwgXCIgXCIsIHkyLCBcIiBcIiwgeDMsIFwiIFwiLCB5MywgXCIgY1wiLCBOTCk7XG4gICAgfSxcbiAgICBiZXppZXIxOiBmdW5jdGlvbih4MSwgeTEsIHgzLCB5Mykge1xuICAgICAgICB0aGlzLl9vdXQoeDEsIFwiIFwiLCB5MSwgXCIgXCIsIHgzLCBcIiBcIiwgeTMsIFwiIHlcIiwgTkwpO1xuICAgIH0sXG4gICAgYmV6aWVyMjogZnVuY3Rpb24oeDIsIHkyLCB4MywgeTMpIHtcbiAgICAgICAgdGhpcy5fb3V0KHgyLCBcIiBcIiwgeTIsIFwiIFwiLCB4MywgXCIgXCIsIHkzLCBcIiB2XCIsIE5MKTtcbiAgICB9LFxuICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fb3V0KFwiaFwiLCBOTCk7XG4gICAgfSxcbiAgICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XG4gICAgICAgIHRoaXMuX291dCh4LCBcIiBcIiwgeSwgXCIgXCIsIHcsIFwiIFwiLCBoLCBcIiByZVwiLCBOTCk7XG4gICAgfSxcbiAgICBlbGxpcHNlOiBmdW5jdGlvbih4LCB5LCByeCwgcnkpIHtcbiAgICAgICAgZnVuY3Rpb24gX1godikgeyByZXR1cm4geCArIHY7IH1cbiAgICAgICAgZnVuY3Rpb24gX1kodikgeyByZXR1cm4geSArIHY7IH1cblxuICAgICAgICAvLyBob3cgdG8gZ2V0IHRvIHRoZSBcIm1hZ2ljIG51bWJlclwiIGlzIGV4cGxhaW5lZCBoZXJlOlxuICAgICAgICAvLyBodHRwOi8vd3d3LndoaXpraWR0ZWNoLnJlZHByaW5jZS5uZXQvYmV6aWVyL2NpcmNsZS9rYXBwYS9cbiAgICAgICAgdmFyIGsgPSAwLjU1MjI4NDc0OTgzMDc5MzY7XG5cbiAgICAgICAgdGhpcy5tb3ZlVG8oX1goMCksIF9ZKHJ5KSk7XG4gICAgICAgIHRoaXMuYmV6aWVyKFxuICAgICAgICAgICAgX1gocnggKiBrKSAsIF9ZKHJ5KSxcbiAgICAgICAgICAgIF9YKHJ4KSAgICAgLCBfWShyeSAqIGspLFxuICAgICAgICAgICAgX1gocngpICAgICAsIF9ZKDApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYmV6aWVyKFxuICAgICAgICAgICAgX1gocngpICAgICAsIF9ZKC1yeSAqIGspLFxuICAgICAgICAgICAgX1gocnggKiBrKSAsIF9ZKC1yeSksXG4gICAgICAgICAgICBfWCgwKSAgICAgICwgX1koLXJ5KVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmJlemllcihcbiAgICAgICAgICAgIF9YKC1yeCAqIGspICwgX1koLXJ5KSxcbiAgICAgICAgICAgIF9YKC1yeCkgICAgICwgX1koLXJ5ICogayksXG4gICAgICAgICAgICBfWCgtcngpICAgICAsIF9ZKDApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYmV6aWVyKFxuICAgICAgICAgICAgX1goLXJ4KSAgICAgLCBfWShyeSAqIGspLFxuICAgICAgICAgICAgX1goLXJ4ICogaykgLCBfWShyeSksXG4gICAgICAgICAgICBfWCgwKSAgICAgICAsIF9ZKHJ5KVxuICAgICAgICApO1xuICAgIH0sXG4gICAgY2lyY2xlOiBmdW5jdGlvbih4LCB5LCByKSB7XG4gICAgICAgIHRoaXMuZWxsaXBzZSh4LCB5LCByLCByKTtcbiAgICB9LFxuICAgIHN0cm9rZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX291dChcIlNcIiwgTkwpO1xuICAgIH0sXG4gICAgbm9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fb3V0KFwiblwiLCBOTCk7XG4gICAgfSxcbiAgICBjbGlwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fb3V0KFwiVyBuXCIsIE5MKTtcbiAgICB9LFxuICAgIGNsaXBTdHJva2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9vdXQoXCJXIFNcIiwgTkwpO1xuICAgIH0sXG4gICAgY2xvc2VTdHJva2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9vdXQoXCJzXCIsIE5MKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9vdXQoXCJmXCIsIE5MKTtcbiAgICB9LFxuICAgIGZpbGxTdHJva2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9vdXQoXCJCXCIsIE5MKTtcbiAgICB9LFxuICAgIGRyYXdJbWFnZTogZnVuY3Rpb24odXJsKSB7XG4gICAgICAgIHZhciBpbWcgPSB0aGlzLl9wZGYuZ2V0SW1hZ2UodXJsKTtcbiAgICAgICAgaWYgKGltZykgeyAvLyB0aGUgcmVzdWx0IGNhbiBiZSBudWxsIGZvciBhIGNyb3NzLWRvbWFpbiBpbWFnZVxuICAgICAgICAgICAgdGhpcy5feFJlc291cmNlc1tpbWcuX3Jlc291cmNlTmFtZV0gPSBpbWc7XG4gICAgICAgICAgICB0aGlzLl9vdXQoaW1nLl9yZXNvdXJjZU5hbWUsIFwiIERvXCIsIE5MKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tbWVudDogZnVuY3Rpb24odHh0KSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdHh0LnNwbGl0KC9cXHI/XFxuL2cpLmZvckVhY2goZnVuY3Rpb24obGluZSl7XG4gICAgICAgICAgICBzZWxmLl9vdXQoXCIlIFwiLCBsaW5lLCBOTCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLyBpbnRlcm5hbFxuICAgIF9jb250ZXh0OiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9vcGFjaXR5ID0gdmFsLm9wYWNpdHk7XG4gICAgICAgICAgICB0aGlzLl9tYXRyaXggPSB2YWwubWF0cml4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiB0aGlzLl9vcGFjaXR5LFxuICAgICAgICAgICAgICAgIG1hdHJpeDogdGhpcy5fbWF0cml4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF90b1BhZ2U6IGZ1bmN0aW9uKHApIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzLl9tYXRyaXg7XG4gICAgICAgIHZhciBhID0gbVswXSwgYiA9IG1bMV0sIGMgPSBtWzJdLCBkID0gbVszXSwgZSA9IG1bNF0sIGYgPSBtWzVdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogYSpwLnggKyBjKnAueSArIGUsXG4gICAgICAgICAgICB5OiBiKnAueCArIGQqcC55ICsgZlxuICAgICAgICB9O1xuICAgIH1cbn0sIFBERkRpY3Rpb25hcnkpO1xuXG5mdW5jdGlvbiB1bnF1b3RlKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyooWydcIl0pKC4qKVxcMVxccyokLywgXCIkMlwiKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VGb250RGVmKGZvbnRkZWYpIHtcbiAgICAvLyBYWFg6IHRoaXMgaXMgdmVyeSBjcnVkZSBmb3Igbm93IGFuZCBidWdneS4gIFByb3BlciBwYXJzaW5nIGlzIHF1aXRlIGludm9sdmVkLlxuICAgIHZhciByeCA9IC9eXFxzKigobm9ybWFsfGl0YWxpYylcXHMrKT8oKG5vcm1hbHxzbWFsbC1jYXBzKVxccyspPygobm9ybWFsfGJvbGR8XFxkKylcXHMrKT8oKFswLTkuXSspKHB4fHB0KSkoXFwvKChbMC05Ll0rKShweHxwdCl8bm9ybWFsKSk/XFxzKyguKj8pXFxzKiQvaTtcbiAgICB2YXIgbSA9IHJ4LmV4ZWMoZm9udGRlZik7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiB7IGZvbnRTaXplOiAxMiwgZm9udEZhbWlseTogXCJzYW5zLXNlcmlmXCIgfTtcbiAgICB9XG4gICAgdmFyIGZvbnRTaXplID0gbVs4XSA/IHBhcnNlSW50KG1bOF0sIDEwKSA6IDEyO1xuICAgIHJldHVybiB7XG4gICAgICAgIGl0YWxpYyAgICAgOiBtWzJdICYmIG1bMl0udG9Mb3dlckNhc2UoKSA9PSBcIml0YWxpY1wiLFxuICAgICAgICB2YXJpYW50ICAgIDogbVs0XSxcbiAgICAgICAgYm9sZCAgICAgICA6IG1bNl0gJiYgL2JvbGR8NzAwL2kudGVzdChtWzZdKSxcbiAgICAgICAgZm9udFNpemUgICA6IGZvbnRTaXplLFxuICAgICAgICBsaW5lSGVpZ2h0IDogbVsxMl0gPyBtWzEyXSA9PSBcIm5vcm1hbFwiID8gZm9udFNpemUgOiBwYXJzZUludChtWzEyXSwgMTApIDogbnVsbCxcbiAgICAgICAgZm9udEZhbWlseSA6IG1bMTRdLnNwbGl0KC9cXHMqLFxccyovZykubWFwKHVucXVvdGUpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Rm9udFVSTChzdHlsZSkge1xuICAgIGZ1bmN0aW9uIG1rRmFtaWx5KG5hbWUpIHtcbiAgICAgICAgaWYgKHN0eWxlLmJvbGQpIHtcbiAgICAgICAgICAgIG5hbWUgKz0gXCJ8Ym9sZFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHlsZS5pdGFsaWMpIHtcbiAgICAgICAgICAgIG5hbWUgKz0gXCJ8aXRhbGljXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgdmFyIGZvbnRGYW1pbHkgPSBzdHlsZS5mb250RmFtaWx5O1xuICAgIHZhciBuYW1lLCB1cmw7XG4gICAgaWYgKGZvbnRGYW1pbHkgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvbnRGYW1pbHkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIG5hbWUgPSBta0ZhbWlseShmb250RmFtaWx5W2ldKTtcbiAgICAgICAgICAgIHVybCA9IEZPTlRfTUFQUElOR1NbbmFtZV07XG4gICAgICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB1cmwgPSBGT05UX01BUFBJTkdTW2ZvbnRGYW1pbHkudG9Mb3dlckNhc2UoKV07XG4gICAgfVxuICAgIHdoaWxlICh0eXBlb2YgdXJsID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB1cmwgPSB1cmwoKTtcbiAgICB9XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgICAgdXJsID0gXCJUaW1lcy1Sb21hblwiO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xufVxuXG52YXIgRk9OVF9NQVBQSU5HUyA9IHtcbiAgICBcInNlcmlmXCIgICAgICAgICAgICAgICAgICAgIDogXCJUaW1lcy1Sb21hblwiLFxuICAgIFwic2VyaWZ8Ym9sZFwiICAgICAgICAgICAgICAgOiBcIlRpbWVzLUJvbGRcIixcbiAgICBcInNlcmlmfGl0YWxpY1wiICAgICAgICAgICAgIDogXCJUaW1lcy1JdGFsaWNcIixcbiAgICBcInNlcmlmfGJvbGR8aXRhbGljXCIgICAgICAgIDogXCJUaW1lcy1Cb2xkSXRhbGljXCIsXG4gICAgXCJzYW5zLXNlcmlmXCIgICAgICAgICAgICAgICA6IFwiSGVsdmV0aWNhXCIsXG4gICAgXCJzYW5zLXNlcmlmfGJvbGRcIiAgICAgICAgICA6IFwiSGVsdmV0aWNhLUJvbGRcIixcbiAgICBcInNhbnMtc2VyaWZ8aXRhbGljXCIgICAgICAgIDogXCJIZWx2ZXRpY2EtT2JsaXF1ZVwiLFxuICAgIFwic2Fucy1zZXJpZnxib2xkfGl0YWxpY1wiICAgOiBcIkhlbHZldGljYS1Cb2xkT2JsaXF1ZVwiLFxuICAgIFwibW9ub3NwYWNlXCIgICAgICAgICAgICAgICAgOiBcIkNvdXJpZXJcIixcbiAgICBcIm1vbm9zcGFjZXxib2xkXCIgICAgICAgICAgIDogXCJDb3VyaWVyLUJvbGRcIixcbiAgICBcIm1vbm9zcGFjZXxpdGFsaWNcIiAgICAgICAgIDogXCJDb3VyaWVyLU9ibGlxdWVcIixcbiAgICBcIm1vbm9zcGFjZXxib2xkfGl0YWxpY1wiICAgIDogXCJDb3VyaWVyLUJvbGRPYmxpcXVlXCIsXG4gICAgXCJ6YXBmZGluZ2JhdHNcIiAgICAgICAgICAgICA6IFwiWmFwZkRpbmdiYXRzXCIsXG4gICAgXCJ6YXBmZGluZ2JhdHN8Ym9sZFwiICAgICAgICA6IFwiWmFwZkRpbmdiYXRzXCIsXG4gICAgXCJ6YXBmZGluZ2JhdHN8aXRhbGljXCIgICAgICA6IFwiWmFwZkRpbmdiYXRzXCIsXG4gICAgXCJ6YXBmZGluZ2JhdHN8Ym9sZHxpdGFsaWNcIiA6IFwiWmFwZkRpbmdiYXRzXCJcbn07XG5cbmZ1bmN0aW9uIGZvbnRBbGlhcyhhbGlhcywgbmFtZSkge1xuICAgIGFsaWFzID0gYWxpYXMudG9Mb3dlckNhc2UoKTtcbiAgICBGT05UX01BUFBJTkdTW2FsaWFzXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRk9OVF9NQVBQSU5HU1tuYW1lXTtcbiAgICB9O1xuICAgIEZPTlRfTUFQUElOR1NbYWxpYXMgKyBcInxib2xkXCJdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGT05UX01BUFBJTkdTW25hbWUgKyBcInxib2xkXCJdO1xuICAgIH07XG4gICAgRk9OVF9NQVBQSU5HU1thbGlhcyArIFwifGl0YWxpY1wiXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRk9OVF9NQVBQSU5HU1tuYW1lICsgXCJ8aXRhbGljXCJdO1xuICAgIH07XG4gICAgRk9OVF9NQVBQSU5HU1thbGlhcyArIFwifGJvbGR8aXRhbGljXCJdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGT05UX01BUFBJTkdTW25hbWUgKyBcInxib2xkfGl0YWxpY1wiXTtcbiAgICB9O1xufVxuXG4vLyBMZXQncyBkZWZpbmUgc29tZSBjb21tb24gbmFtZXMgdG8gYW4gYXBwcm9wcmlhdGUgcmVwbGFjZW1lbnQuXG4vLyBUaGVzZSBhcmUgb3ZlcnJpZGFibGUgdmlhIHBkZi5kZWZpbmVGb250LCBzaG91bGQgdGhlIHVzZXIgd2FudCB0b1xuLy8gaW5jbHVkZSB0aGUgcHJvcGVyIHZlcnNpb25zLlxuXG5mb250QWxpYXMoXCJUaW1lcyBOZXcgUm9tYW5cIiAsIFwic2VyaWZcIik7XG5mb250QWxpYXMoXCJDb3VyaWVyIE5ld1wiICAgICAsIFwibW9ub3NwYWNlXCIpO1xuZm9udEFsaWFzKFwiQXJpYWxcIiAgICAgICAgICAgLCBcInNhbnMtc2VyaWZcIik7XG5mb250QWxpYXMoXCJIZWx2ZXRpY2FcIiAgICAgICAsIFwic2Fucy1zZXJpZlwiKTtcbmZvbnRBbGlhcyhcIlZlcmRhbmFcIiAgICAgICAgICwgXCJzYW5zLXNlcmlmXCIpO1xuZm9udEFsaWFzKFwiVGFob21hXCIgICAgICAgICAgLCBcInNhbnMtc2VyaWZcIik7XG5mb250QWxpYXMoXCJHZW9yZ2lhXCIgICAgICAgICAsIFwic2Fucy1zZXJpZlwiKTtcbmZvbnRBbGlhcyhcIk1vbmFjb1wiICAgICAgICAgICwgXCJtb25vc3BhY2VcIik7XG5mb250QWxpYXMoXCJBbmRhbGUgTW9ub1wiICAgICAsIFwibW9ub3NwYWNlXCIpO1xuXG5mdW5jdGlvbiBkZWZpbmVGb250KG5hbWUsIHVybCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBuYW1lKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkobmFtZSwgaSkpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVGb250KGksIG5hbWVbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgRk9OVF9NQVBQSU5HU1tuYW1lXSA9IHVybDtcblxuICAgICAgICAvLyBzcGVjaWFsIGhhbmRsaW5nIGZvciBEZWphVnUgZm9udHM6IGlmIHRoZXkgZ2V0IGRlZmluZWQsXG4gICAgICAgIC8vIGxldCB0aGVtIGFsc28gcmVwbGFjZSB0aGUgZGVmYXVsdCBmYW1pbGllcywgZm9yIGdvb2RcbiAgICAgICAgLy8gVW5pY29kZSBzdXBwb3J0IG91dCBvZiB0aGUgYm94LlxuICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IHNhbnNcIiAgICAgICAgICAgICAgIDogRk9OVF9NQVBQSU5HU1tcInNhbnMtc2VyaWZcIl0gICAgICAgICAgICAgID0gdXJsOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IHNhbnN8Ym9sZFwiICAgICAgICAgIDogRk9OVF9NQVBQSU5HU1tcInNhbnMtc2VyaWZ8Ym9sZFwiXSAgICAgICAgID0gdXJsOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IHNhbnN8aXRhbGljXCIgICAgICAgIDogRk9OVF9NQVBQSU5HU1tcInNhbnMtc2VyaWZ8aXRhbGljXCJdICAgICAgID0gdXJsOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IHNhbnN8Ym9sZHxpdGFsaWNcIiAgIDogRk9OVF9NQVBQSU5HU1tcInNhbnMtc2VyaWZ8Ym9sZHxpdGFsaWNcIl0gID0gdXJsOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IHNlcmlmXCIgICAgICAgICAgICAgIDogRk9OVF9NQVBQSU5HU1tcInNlcmlmXCJdICAgICAgICAgICAgICAgICAgID0gdXJsOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IHNlcmlmfGJvbGRcIiAgICAgICAgIDogRk9OVF9NQVBQSU5HU1tcInNlcmlmfGJvbGRcIl0gICAgICAgICAgICAgID0gdXJsOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IHNlcmlmfGl0YWxpY1wiICAgICAgIDogRk9OVF9NQVBQSU5HU1tcInNlcmlmfGl0YWxpY1wiXSAgICAgICAgICAgID0gdXJsOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IHNlcmlmfGJvbGR8aXRhbGljXCIgIDogRk9OVF9NQVBQSU5HU1tcInNlcmlmfGJvbGR8aXRhbGljXCJdICAgICAgID0gdXJsOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IG1vbm9cIiAgICAgICAgICAgICAgIDogRk9OVF9NQVBQSU5HU1tcIm1vbm9zcGFjZVwiXSAgICAgICAgICAgICAgID0gdXJsOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IG1vbm98Ym9sZFwiICAgICAgICAgIDogRk9OVF9NQVBQSU5HU1tcIm1vbm9zcGFjZXxib2xkXCJdICAgICAgICAgID0gdXJsOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IG1vbm98aXRhbGljXCIgICAgICAgIDogRk9OVF9NQVBQSU5HU1tcIm1vbm9zcGFjZXxpdGFsaWNcIl0gICAgICAgID0gdXJsOyBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZGVqYXZ1IG1vbm98Ym9sZHxpdGFsaWNcIiAgIDogRk9OVF9NQVBQSU5HU1tcIm1vbm9zcGFjZXxib2xkfGl0YWxpY1wiXSAgID0gdXJsOyBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbW11bChhLCBiKSB7XG4gICAgdmFyIGExID0gYVswXSwgYjEgPSBhWzFdLCBjMSA9IGFbMl0sIGQxID0gYVszXSwgZTEgPSBhWzRdLCBmMSA9IGFbNV07XG4gICAgdmFyIGEyID0gYlswXSwgYjIgPSBiWzFdLCBjMiA9IGJbMl0sIGQyID0gYlszXSwgZTIgPSBiWzRdLCBmMiA9IGJbNV07XG4gICAgcmV0dXJuIFtcbiAgICAgICAgYTEqYTIgKyBiMSpjMiwgICAgICAgICAgYTEqYjIgKyBiMSpkMixcbiAgICAgICAgYzEqYTIgKyBkMSpjMiwgICAgICAgICAgYzEqYjIgKyBkMSpkMixcbiAgICAgICAgZTEqYTIgKyBmMSpjMiArIGUyLCAgICAgZTEqYjIgKyBmMSpkMiArIGYyXG4gICAgXTtcbn1cblxuZnVuY3Rpb24gaXNJZGVudGl0eU1hdHJpeChtKSB7XG4gICAgcmV0dXJuIG1bMF0gPT09IDEgJiYgbVsxXSA9PT0gMCAmJiBtWzJdID09PSAwICYmIG1bM10gPT09IDEgJiYgbVs0XSA9PT0gMCAmJiBtWzVdID09PSAwO1xufVxuXG5jb25zdCBURVhUX1JFTkRFUklOR19NT0RFID0ge1xuICAgIGZpbGwgICAgICAgICAgIDogMCxcbiAgICBzdHJva2UgICAgICAgICA6IDEsXG4gICAgZmlsbEFuZFN0cm9rZSAgOiAyLFxuICAgIGludmlzaWJsZSAgICAgIDogMyxcbiAgICBmaWxsQW5kQ2xpcCAgICA6IDQsXG4gICAgc3Ryb2tlQW5kQ2xpcCAgOiA1LFxuICAgIGZpbGxTdHJva2VDbGlwIDogNixcbiAgICBjbGlwICAgICAgICAgICA6IDdcbn07XG5cbmV4cG9ydCB7XG4gICAgUERGRG9jdW1lbnQgYXMgRG9jdW1lbnQsXG4gICAgQmluYXJ5U3RyZWFtLFxuICAgIGRlZmluZUZvbnQsXG4gICAgcGFyc2VGb250RGVmLFxuICAgIGdldEZvbnRVUkwsXG4gICAgbG9hZEZvbnRzLFxuICAgIGxvYWRJbWFnZXMsXG4gICAgZ2V0UGFwZXJPcHRpb25zLFxuICAgIGNsZWFySW1hZ2VDYWNoZSxcbiAgICBURVhUX1JFTkRFUklOR19NT0RFXG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tbXVsdGktc3BhY2VzLCBrZXktc3BhY2luZywgaW5kZW50LCBjYW1lbGNhc2UsIHNwYWNlLWJlZm9yZS1ibG9ja3MsIGVxZXFlcSwgYnJhY2Utc3R5bGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIHNwYWNlLWluZml4LW9wcywgc3BhY2UtYmVmb3JlLWZ1bmN0aW9uLXBhcmVuLCBhcnJheS1icmFja2V0LXNwYWNpbmcsIG9iamVjdC1jdXJseS1zcGFjaW5nICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1uZXN0ZWQtdGVybmFyeSwgbWF4LXBhcmFtcywgZGVmYXVsdC1jYXNlLCBuby1lbHNlLXJldHVybiwgbm8tZW1wdHkgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduLCBuby12YXIsIGJsb2NrLXNjb3BlZC12YXIgKi9cblxuaW1wb3J0IHsgY3JlYXRlUHJvbWlzZSB9IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQgeyBwYXJzZUNvbG9yIGFzIHV0aWxzX3BhcnNlQ29sb3IsIHNhdmVBcyBhcyB1dGlsX3NhdmVBcywgc3VwcG9ydCB9IGZyb20gXCIuLi9jb21tb25cIjtcbmltcG9ydCAqIGFzIFBERiBmcm9tIFwiLi9jb3JlXCI7XG5pbXBvcnQgeyBHcm91cCwgTXVsdGlQYXRoLCBHcmFkaWVudCwgUmFkaWFsR3JhZGllbnQgfSBmcm9tICcuLi9kcmF3aW5nJztcbmltcG9ydCAqIGFzIGdlbyBmcm9tIFwiLi4vZ2VvbWV0cnlcIjtcblxudmFyIFRFWFRfUkVOREVSSU5HX01PREUgPSBQREYuVEVYVF9SRU5ERVJJTkdfTU9ERTtcblxudmFyIERBU0hfUEFUVEVSTlMgPSB7XG4gICAgZGFzaCAgICAgICAgICAgOiBbIDQgXSxcbiAgICBkYXNoRG90ICAgICAgICA6IFsgNCwgMiwgMSwgMiBdLFxuICAgIGRvdCAgICAgICAgICAgIDogWyAxLCAyIF0sXG4gICAgbG9uZ0Rhc2ggICAgICAgOiBbIDgsIDIgXSxcbiAgICBsb25nRGFzaERvdCAgICA6IFsgOCwgMiwgMSwgMiBdLFxuICAgIGxvbmdEYXNoRG90RG90IDogWyA4LCAyLCAxLCAyLCAxLCAyIF0sXG4gICAgc29saWQgICAgICAgICAgOiBbXVxufTtcblxudmFyIExJTkVfQ0FQID0ge1xuICAgIGJ1dHQgICA6IDAsXG4gICAgcm91bmQgIDogMSxcbiAgICBzcXVhcmUgOiAyXG59O1xuXG52YXIgTElORV9KT0lOID0ge1xuICAgIG1pdGVyIDogMCxcbiAgICByb3VuZCA6IDEsXG4gICAgYmV2ZWwgOiAyXG59O1xuXG5mdW5jdGlvbiByZW5kZXIoZ3JvdXAsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGZvbnRzID0gW10sIGltYWdlcyA9IHt9LCBvcHRpb25zID0gZ3JvdXAub3B0aW9ucztcblxuICAgIGZ1bmN0aW9uIGdldE9wdGlvbihuYW1lLCBkZWZ2YWwsIGhhc2gpIHtcbiAgICAgICAgaWYgKCFoYXNoKSB7XG4gICAgICAgICAgICBoYXNoID0gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzaC5wZGYgJiYgaGFzaC5wZGZbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhc2gucGRmW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZ2YWw7XG4gICAgfVxuXG4gICAgdmFyIG11bHRpUGFnZSA9IGdldE9wdGlvbihcIm11bHRpUGFnZVwiKTtcbiAgICB2YXIgaW1nRFBJID0gZ2V0T3B0aW9uKFwiaW1nRFBJXCIpO1xuXG4gICAgaWYgKGltZ0RQSSkge1xuICAgICAgICBQREYuY2xlYXJJbWFnZUNhY2hlKCk7XG4gICAgfVxuXG4gICAgZ3JvdXAudHJhdmVyc2UoZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIEltYWdlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IGVsZW1lbnQuc3JjKCk7XG4gICAgICAgICAgICAgICAgaWYgKGltZ0RQSSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm94ID0gZWxlbWVudC5iYm94KCkuc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXYgPSBpbWFnZXNbdXJsXTtcbiAgICAgICAgICAgICAgICAgICAgYm94ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IE1hdGguY2VpbChib3gud2lkdGggKiBpbWdEUEkgLyA3MiksXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IE1hdGguY2VpbChib3guaGVpZ2h0ICogaW1nRFBJIC8gNzIpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3gud2lkdGggPSBNYXRoLm1heChwcmV2LndpZHRoLCBib3gud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94LmhlaWdodCA9IE1hdGgubWF4KHByZXYuaGVpZ2h0LCBib3guaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbWFnZXNbdXJsXSA9IGJveDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbWFnZXNbdXJsXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFRleHQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGUgPSBQREYucGFyc2VGb250RGVmKGVsZW1lbnQub3B0aW9ucy5mb250KTtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gUERGLmdldEZvbnRVUkwoc3R5bGUpO1xuICAgICAgICAgICAgICAgIGlmIChmb250cy5pbmRleE9mKHVybCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRzLnB1c2godXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGVsZW1lbnQpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZG9JdCgpIHtcbiAgICAgICAgaWYgKC0tY291bnQgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGRmID0gbmV3IChQREYuRG9jdW1lbnQpKHtcbiAgICAgICAgICAgIHByb2R1Y2VyICA6IGdldE9wdGlvbihcInByb2R1Y2VyXCIpLFxuICAgICAgICAgICAgdGl0bGUgICAgIDogZ2V0T3B0aW9uKFwidGl0bGVcIiksXG4gICAgICAgICAgICBhdXRob3IgICAgOiBnZXRPcHRpb24oXCJhdXRob3JcIiksXG4gICAgICAgICAgICBzdWJqZWN0ICAgOiBnZXRPcHRpb24oXCJzdWJqZWN0XCIpLFxuICAgICAgICAgICAga2V5d29yZHMgIDogZ2V0T3B0aW9uKFwia2V5d29yZHNcIiksXG4gICAgICAgICAgICBjcmVhdG9yICAgOiBnZXRPcHRpb24oXCJjcmVhdG9yXCIpLFxuICAgICAgICAgICAgZGF0ZSAgICAgIDogZ2V0T3B0aW9uKFwiZGF0ZVwiKSxcblxuICAgICAgICAgICAgYXV0b1ByaW50IDogZ2V0T3B0aW9uKFwiYXV0b1ByaW50XCIpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGRyYXdQYWdlKGdyb3VwKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGdyb3VwLm9wdGlvbnM7XG5cbiAgICAgICAgICAgIHZhciB0bXAgPSBvcHRpbWl6ZShncm91cCk7XG4gICAgICAgICAgICB2YXIgYmJveCA9IHRtcC5iYm94O1xuICAgICAgICAgICAgZ3JvdXAgPSB0bXAucm9vdDtcbiAgICAgICAgICAgIC8vIHZhciB0bXAsIGJib3g7XG5cbiAgICAgICAgICAgIHZhciBwYXBlclNpemUgPSBnZXRPcHRpb24oXCJwYXBlclNpemVcIiwgZ2V0T3B0aW9uKFwicGFwZXJTaXplXCIsIFwiYXV0b1wiKSwgb3B0aW9ucyksIGFkZE1hcmdpbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHBhcGVyU2l6ZSA9PSBcImF1dG9cIikge1xuICAgICAgICAgICAgICAgIGlmIChiYm94KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaXplID0gYmJveC5nZXRTaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIHBhcGVyU2l6ZSA9IFsgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQgXTtcbiAgICAgICAgICAgICAgICAgICAgYWRkTWFyZ2luID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbiA9IGJib3guZ2V0T3JpZ2luKCk7XG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IG5ldyBHcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICB0bXAudHJhbnNmb3JtKG5ldyBnZW8uTWF0cml4KDEsIDAsIDAsIDEsIC1vcmlnaW4ueCwgLW9yaWdpbi55KSk7XG4gICAgICAgICAgICAgICAgICAgIHRtcC5hcHBlbmQoZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICBncm91cCA9IHRtcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcGVyU2l6ZSA9IFwiQTRcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYWdlO1xuICAgICAgICAgICAgcGFnZSA9IHBkZi5hZGRQYWdlKHtcbiAgICAgICAgICAgICAgICBwYXBlclNpemUgOiBwYXBlclNpemUsXG4gICAgICAgICAgICAgICAgbWFyZ2luICAgIDogZ2V0T3B0aW9uKFwibWFyZ2luXCIsIGdldE9wdGlvbihcIm1hcmdpblwiKSwgb3B0aW9ucyksXG4gICAgICAgICAgICAgICAgYWRkTWFyZ2luIDogYWRkTWFyZ2luLFxuICAgICAgICAgICAgICAgIGxhbmRzY2FwZSA6IGdldE9wdGlvbihcImxhbmRzY2FwZVwiLCBnZXRPcHRpb24oXCJsYW5kc2NhcGVcIiwgZmFsc2UpLCBvcHRpb25zKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkcmF3RWxlbWVudChncm91cCwgcGFnZSwgcGRmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtdWx0aVBhZ2UpIHtcbiAgICAgICAgICAgIGdyb3VwLmNoaWxkcmVuLmZvckVhY2goZHJhd1BhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHJhd1BhZ2UoZ3JvdXApO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2socGRmLnJlbmRlcigpLCBwZGYpO1xuICAgIH1cblxuICAgIHZhciBjb3VudCA9IDI7XG4gICAgUERGLmxvYWRGb250cyhmb250cywgZG9JdCk7XG4gICAgUERGLmxvYWRJbWFnZXMoaW1hZ2VzLCBkb0l0LCB7XG4gICAgICAgIGpwZWdRdWFsaXR5IDogZ2V0T3B0aW9uKFwianBlZ1F1YWxpdHlcIiwgMC45MiksXG4gICAgICAgIGtlZXBQTkcgICAgIDogZ2V0T3B0aW9uKFwia2VlcFBOR1wiLCBmYWxzZSlcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdG9EYXRhVVJMKGdyb3VwLCBjYWxsYmFjaykge1xuICAgIHJlbmRlcihncm91cCwgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgIGNhbGxiYWNrKFwiZGF0YTphcHBsaWNhdGlvbi9wZGY7YmFzZTY0LFwiICsgZGF0YS5iYXNlNjQoKSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHRvQmxvYihncm91cCwgY2FsbGJhY2spIHtcbiAgICByZW5kZXIoZ3JvdXAsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICBjYWxsYmFjayhuZXcgd2luZG93LkJsb2IoWyBkYXRhLmdldCgpIF0sIHsgdHlwZTogXCJhcHBsaWNhdGlvbi9wZGZcIiB9KSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNhdmVBcyhncm91cCwgZmlsZW5hbWUsIHByb3h5LCBjYWxsYmFjaykge1xuICAgIC8vIFhYWDogU2FmYXJpIGhhcyBCbG9iLCBidXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgZG93bmxvYWQgYXR0cmlidXRlXG4gICAgLy8gICAgICBzbyB3ZSdkIGVuZCB1cCBjb252ZXJ0aW5nIHRvIGRhdGFVUkwgYW5kIHVzaW5nIHRoZSBwcm94eSBhbnl3YXkuXG4gICAgaWYgKHdpbmRvdy5CbG9iICYmICFzdXBwb3J0LmJyb3dzZXIuc2FmYXJpKSB7XG4gICAgICAgIHRvQmxvYihncm91cCwgZnVuY3Rpb24oYmxvYil7XG4gICAgICAgICAgICB1dGlsX3NhdmVBcyh7IGRhdGFVUkk6IGJsb2IsIGZpbGVOYW1lOiBmaWxlbmFtZSB9KTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGJsb2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0b0RhdGFVUkwoZ3JvdXAsIGZ1bmN0aW9uKGRhdGFVUkwpe1xuICAgICAgICAgICAgdXRpbF9zYXZlQXMoeyBkYXRhVVJJOiBkYXRhVVJMLCBmaWxlTmFtZTogZmlsZW5hbWUsIHByb3h5VVJMOiBwcm94eSB9KTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGFVUkwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKGhhbmRsZXJzLCBlbGVtZW50KSB7XG4gICAgdmFyIGhhbmRsZXIgPSBoYW5kbGVyc1tlbGVtZW50Lm5vZGVUeXBlXTtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlci5jYWxsLmFwcGx5KGhhbmRsZXIsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50O1xufVxuXG5mdW5jdGlvbiBkcmF3RWxlbWVudChlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICBpZiAoZWxlbWVudC5vcHRpb25zLl9wZGZEZWJ1Zykge1xuICAgICAgICBwYWdlLmNvbW1lbnQoXCJCRUdJTjogXCIgKyBlbGVtZW50Lm9wdGlvbnMuX3BkZkRlYnVnKTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNmb3JtID0gZWxlbWVudC50cmFuc2Zvcm0oKTtcbiAgICB2YXIgb3BhY2l0eSA9IGVsZW1lbnQub3BhY2l0eSgpO1xuXG4gICAgcGFnZS5zYXZlKCk7XG5cbiAgICBpZiAob3BhY2l0eSAhPSBudWxsICYmIG9wYWNpdHkgPCAxKSB7XG4gICAgICAgIHBhZ2Uuc2V0T3BhY2l0eShvcGFjaXR5KTtcbiAgICB9XG5cbiAgICBzZXRTdHJva2VPcHRpb25zKGVsZW1lbnQsIHBhZ2UsIHBkZik7XG4gICAgc2V0RmlsbE9wdGlvbnMoZWxlbWVudCwgcGFnZSwgcGRmKTtcblxuICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgdmFyIG0gPSB0cmFuc2Zvcm0ubWF0cml4KCk7XG4gICAgICAgIHBhZ2UudHJhbnNmb3JtKG0uYSwgbS5iLCBtLmMsIG0uZCwgbS5lLCBtLmYpO1xuICAgIH1cblxuICAgIHNldENsaXBwaW5nKGVsZW1lbnQsIHBhZ2UsIHBkZik7XG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICAgIFBhdGggICAgICA6IGRyYXdQYXRoLFxuICAgICAgICBNdWx0aVBhdGggOiBkcmF3TXVsdGlQYXRoLFxuICAgICAgICBDaXJjbGUgICAgOiBkcmF3Q2lyY2xlLFxuICAgICAgICBBcmMgICAgICAgOiBkcmF3QXJjLFxuICAgICAgICBUZXh0ICAgICAgOiBkcmF3VGV4dCxcbiAgICAgICAgSW1hZ2UgICAgIDogZHJhd0ltYWdlLFxuICAgICAgICBHcm91cCAgICAgOiBkcmF3R3JvdXAsXG4gICAgICAgIFJlY3QgICAgICA6IGRyYXdSZWN0XG4gICAgfSwgZWxlbWVudCwgcGFnZSwgcGRmKTtcblxuICAgIHBhZ2UucmVzdG9yZSgpO1xuXG4gICAgaWYgKGVsZW1lbnQub3B0aW9ucy5fcGRmRGVidWcpIHtcbiAgICAgICAgcGFnZS5jb21tZW50KFwiRU5EOiBcIiArIGVsZW1lbnQub3B0aW9ucy5fcGRmRGVidWcpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0U3Ryb2tlT3B0aW9ucyhlbGVtZW50LCBwYWdlKSB7XG4gICAgdmFyIHN0cm9rZSA9IGVsZW1lbnQuc3Ryb2tlICYmIGVsZW1lbnQuc3Ryb2tlKCk7XG4gICAgaWYgKCFzdHJva2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjb2xvciA9IHN0cm9rZS5jb2xvcjtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgY29sb3IgPSBwYXJzZUNvbG9yKGNvbG9yKTtcbiAgICAgICAgaWYgKGNvbG9yID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gbm8gc3Ryb2tlXG4gICAgICAgIH1cbiAgICAgICAgcGFnZS5zZXRTdHJva2VDb2xvcihjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcbiAgICAgICAgaWYgKGNvbG9yLmEgIT0gMSkge1xuICAgICAgICAgICAgcGFnZS5zZXRTdHJva2VPcGFjaXR5KGNvbG9yLmEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHdpZHRoID0gc3Ryb2tlLndpZHRoO1xuICAgIGlmICh3aWR0aCAhPSBudWxsKSB7XG4gICAgICAgIGlmICh3aWR0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBubyBzdHJva2VcbiAgICAgICAgfVxuICAgICAgICBwYWdlLnNldExpbmVXaWR0aCh3aWR0aCk7XG4gICAgfVxuXG4gICAgdmFyIGRhc2hUeXBlID0gc3Ryb2tlLmRhc2hUeXBlO1xuICAgIGlmIChkYXNoVHlwZSkge1xuICAgICAgICBwYWdlLnNldERhc2hQYXR0ZXJuKERBU0hfUEFUVEVSTlNbZGFzaFR5cGVdLCAwKTtcbiAgICB9XG5cbiAgICB2YXIgbGluZUNhcCA9IHN0cm9rZS5saW5lQ2FwO1xuICAgIGlmIChsaW5lQ2FwKSB7XG4gICAgICAgIHBhZ2Uuc2V0TGluZUNhcChMSU5FX0NBUFtsaW5lQ2FwXSk7XG4gICAgfVxuXG4gICAgdmFyIGxpbmVKb2luID0gc3Ryb2tlLmxpbmVKb2luO1xuICAgIGlmIChsaW5lSm9pbikge1xuICAgICAgICBwYWdlLnNldExpbmVKb2luKExJTkVfSk9JTltsaW5lSm9pbl0pO1xuICAgIH1cblxuICAgIHZhciBvcGFjaXR5ID0gc3Ryb2tlLm9wYWNpdHk7XG4gICAgaWYgKG9wYWNpdHkgIT0gbnVsbCkge1xuICAgICAgICBwYWdlLnNldFN0cm9rZU9wYWNpdHkob3BhY2l0eSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRGaWxsT3B0aW9ucyhlbGVtZW50LCBwYWdlKSB7XG4gICAgdmFyIGZpbGwgPSBlbGVtZW50LmZpbGwgJiYgZWxlbWVudC5maWxsKCk7XG4gICAgaWYgKCFmaWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZmlsbCBpbnN0YW5jZW9mIEdyYWRpZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29sb3IgPSBmaWxsLmNvbG9yO1xuICAgIGlmIChjb2xvcikge1xuICAgICAgICBjb2xvciA9IHBhcnNlQ29sb3IoY29sb3IpO1xuICAgICAgICBpZiAoY29sb3IgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBubyBmaWxsXG4gICAgICAgIH1cbiAgICAgICAgcGFnZS5zZXRGaWxsQ29sb3IoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG4gICAgICAgIGlmIChjb2xvci5hICE9IDEpIHtcbiAgICAgICAgICAgIHBhZ2Uuc2V0RmlsbE9wYWNpdHkoY29sb3IuYSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgb3BhY2l0eSA9IGZpbGwub3BhY2l0eTtcbiAgICBpZiAob3BhY2l0eSAhPSBudWxsKSB7XG4gICAgICAgIHBhZ2Uuc2V0RmlsbE9wYWNpdHkob3BhY2l0eSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRDbGlwcGluZyhlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICAvLyBYWFg6IG9ubHkgUGF0aCBzdXBwb3J0ZWQgYXQgdGhlIG1vbWVudC5cbiAgICB2YXIgY2xpcCA9IGVsZW1lbnQuY2xpcCgpO1xuICAgIGlmIChjbGlwKSB7XG4gICAgICAgIF9kcmF3UGF0aChjbGlwLCBwYWdlLCBwZGYpO1xuICAgICAgICBwYWdlLmNsaXAoKTtcbiAgICAgICAgLy8gcGFnZS5zZXRTdHJva2VDb2xvcihNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpKTtcbiAgICAgICAgLy8gcGFnZS5zZXRMaW5lV2lkdGgoMSk7XG4gICAgICAgIC8vIHBhZ2Uuc3Ryb2tlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGREcmF3KHRoaW5nKSB7XG4gICAgcmV0dXJuICh0aGluZyAmJlxuICAgICAgICAgICAgKHRoaW5nIGluc3RhbmNlb2YgR3JhZGllbnQgfHxcbiAgICAgICAgICAgICAodGhpbmcuY29sb3IgJiYgIS9eKG5vbmV8dHJhbnNwYXJlbnQpJC9pLnRlc3QodGhpbmcuY29sb3IpICYmXG4gICAgICAgICAgICAgICh0aGluZy53aWR0aCA9PSBudWxsIHx8IHRoaW5nLndpZHRoID4gMCkgJiZcbiAgICAgICAgICAgICAgKHRoaW5nLm9wYWNpdHkgPT0gbnVsbCB8fCB0aGluZy5vcGFjaXR5ID4gMCkpKSk7XG59XG5cbmZ1bmN0aW9uIG1heWJlR3JhZGllbnQoZWxlbWVudCwgcGFnZSwgcGRmLCBzdHJva2UpIHtcbiAgICB2YXIgZmlsbCA9IGVsZW1lbnQuZmlsbCgpO1xuICAgIGlmIChmaWxsIGluc3RhbmNlb2YgR3JhZGllbnQpIHtcbiAgICAgICAgaWYgKHN0cm9rZSkge1xuICAgICAgICAgICAgcGFnZS5jbGlwU3Ryb2tlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWdlLmNsaXAoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNSYWRpYWwgPSBmaWxsIGluc3RhbmNlb2YgUmFkaWFsR3JhZGllbnQ7XG4gICAgICAgIHZhciBzdGFydCwgZW5kO1xuICAgICAgICBpZiAoaXNSYWRpYWwpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0geyB4OiBmaWxsLmNlbnRlcigpLnggLCB5OiBmaWxsLmNlbnRlcigpLnkgLCByOiAwIH07XG4gICAgICAgICAgICBlbmQgICA9IHsgeDogZmlsbC5jZW50ZXIoKS54ICwgeTogZmlsbC5jZW50ZXIoKS55ICwgcjogZmlsbC5yYWRpdXMoKSB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnQgPSB7IHg6IGZpbGwuc3RhcnQoKS54ICwgeTogZmlsbC5zdGFydCgpLnkgfTtcbiAgICAgICAgICAgIGVuZCAgID0geyB4OiBmaWxsLmVuZCgpLnggICAsIHk6IGZpbGwuZW5kKCkueSAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RvcHMgPSBmaWxsLnN0b3BzLmVsZW1lbnRzKCkubWFwKGZ1bmN0aW9uKHN0b3Ape1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHN0b3Aub2Zmc2V0KCk7XG4gICAgICAgICAgICBpZiAoLyUkLy50ZXN0KG9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBwYXJzZUZsb2F0KG9mZnNldCkgLyAxMDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IHBhcnNlRmxvYXQob2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb2xvciA9IHBhcnNlQ29sb3Ioc3RvcC5jb2xvcigpKTtcbiAgICAgICAgICAgIGNvbG9yLmEgKj0gc3RvcC5vcGFjaXR5KCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRHVwbGljYXRzIGZpcnN0IGFuZCBsYXN0IHN0b3AgdG8gZml4XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLXVpLWNvcmUvaXNzdWVzLzE3ODJcbiAgICAgICAgc3RvcHMudW5zaGlmdChzdG9wc1swXSk7XG4gICAgICAgIHN0b3BzLnB1c2goc3RvcHNbc3RvcHMubGVuZ3RoIC0gMV0pO1xuXG4gICAgICAgIHZhciBncmFkaWVudCA9IHtcbiAgICAgICAgICAgIHVzZXJTcGFjZSA6IGZpbGwudXNlclNwYWNlKCksXG4gICAgICAgICAgICB0eXBlICAgICAgOiBpc1JhZGlhbCA/IFwicmFkaWFsXCIgOiBcImxpbmVhclwiLFxuICAgICAgICAgICAgc3RhcnQgICAgIDogc3RhcnQsXG4gICAgICAgICAgICBlbmQgICAgICAgOiBlbmQsXG4gICAgICAgICAgICBzdG9wcyAgICAgOiBzdG9wc1xuICAgICAgICB9O1xuICAgICAgICB2YXIgYm94ID0gZWxlbWVudC5yYXdCQm94KCk7XG4gICAgICAgIHZhciB0bCA9IGJveC50b3BMZWZ0KCksIHNpemUgPSBib3guZ2V0U2l6ZSgpO1xuICAgICAgICBib3ggPSB7XG4gICAgICAgICAgICBsZWZ0ICAgOiB0bC54LFxuICAgICAgICAgICAgdG9wICAgIDogdGwueSxcbiAgICAgICAgICAgIHdpZHRoICA6IHNpemUud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQgOiBzaXplLmhlaWdodFxuICAgICAgICB9O1xuICAgICAgICBwYWdlLmdyYWRpZW50KGdyYWRpZW50LCBib3gpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlRmlsbFN0cm9rZShlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICBpZiAoc2hvdWxkRHJhdyhlbGVtZW50LmZpbGwoKSkgJiYgc2hvdWxkRHJhdyhlbGVtZW50LnN0cm9rZSgpKSkge1xuICAgICAgICBpZiAoIW1heWJlR3JhZGllbnQoZWxlbWVudCwgcGFnZSwgcGRmLCB0cnVlKSkge1xuICAgICAgICAgICAgcGFnZS5maWxsU3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNob3VsZERyYXcoZWxlbWVudC5maWxsKCkpKSB7XG4gICAgICAgIGlmICghbWF5YmVHcmFkaWVudChlbGVtZW50LCBwYWdlLCBwZGYsIGZhbHNlKSkge1xuICAgICAgICAgICAgcGFnZS5maWxsKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNob3VsZERyYXcoZWxlbWVudC5zdHJva2UoKSkpIHtcbiAgICAgICAgcGFnZS5zdHJva2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB3ZSBzaG91bGQgbm90IGdldCBoZXJlOyB0aGUgcGF0aCBzaG91bGQgaGF2ZSBiZWVuXG4gICAgICAgIC8vIG9wdGltaXplZCBhd2F5LiAgYnV0IGxldCdzIGJlIHByZXBhcmVkLlxuICAgICAgICBwYWdlLm5vcCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVEcmF3UmVjdChwYXRoLCBwYWdlKSB7XG4gICAgdmFyIHNlZ21lbnRzID0gcGF0aC5zZWdtZW50cztcbiAgICBpZiAoc2VnbWVudHMubGVuZ3RoID09IDQgJiYgcGF0aC5vcHRpb25zLmNsb3NlZCkge1xuICAgICAgICAvLyBkZXRlY3QgaWYgdGhpcyBwYXRoIGxvb2tzIGxpa2UgYSByZWN0YW5nbGUgcGFyYWxsZWwgdG8gdGhlIGF4aXNcbiAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHNlZ21lbnRzW2ldLmNvbnRyb2xJbigpKSB7IC8vIGhhcyBjdXJ2ZT9cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhW2ldID0gc2VnbWVudHNbaV0uYW5jaG9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaXQncyBhIHJlY3RhbmdsZSBpZiB0aGUgeS94L3kveCBvciB4L3kveC95IGNvb3JkcyBvZlxuICAgICAgICAvLyBjb25zZWN1dGl2ZSBwb2ludHMgYXJlIHRoZSBzYW1lLlxuICAgICAgICB2YXIgaXNSZWN0ID0gKFxuICAgICAgICAgICAgYVswXS55ID09IGFbMV0ueSAmJiBhWzFdLnggPT0gYVsyXS54ICYmIGFbMl0ueSA9PSBhWzNdLnkgJiYgYVszXS54ID09IGFbMF0ueFxuICAgICAgICApIHx8IChcbiAgICAgICAgICAgIGFbMF0ueCA9PSBhWzFdLnggJiYgYVsxXS55ID09IGFbMl0ueSAmJiBhWzJdLnggPT0gYVszXS54ICYmIGFbM10ueSA9PSBhWzBdLnlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGlzUmVjdCkge1xuICAgICAgICAgICAgLy8gdGhpcyBzYXZlcyBhIGJ1bmNoIG9mIGluc3RydWN0aW9ucyBpbiBQREY6XG4gICAgICAgICAgICAvLyBtb3ZlVG8sIGxpbmVUbywgbGluZVRvLCBsaW5lVG8sIGNsb3NlIC0+IHJlY3QuXG4gICAgICAgICAgICBwYWdlLnJlY3QoYVswXS54LCBhWzBdLnksXG4gICAgICAgICAgICAgICAgICAgICAgYVsyXS54IC0gYVswXS54IC8qd2lkdGgqLyxcbiAgICAgICAgICAgICAgICAgICAgICBhWzJdLnkgLSBhWzBdLnkgLypoZWlnaHQqLyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gX2RyYXdQYXRoKGVsZW1lbnQsIHBhZ2UsIHBkZikge1xuICAgIHZhciBzZWdtZW50cyA9IGVsZW1lbnQuc2VnbWVudHM7XG4gICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghbWF5YmVEcmF3UmVjdChlbGVtZW50LCBwYWdlLCBwZGYpKSB7XG4gICAgICAgIGZvciAodmFyIHByZXYsIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdtZW50c1tpXTtcbiAgICAgICAgICAgIHZhciBhbmNob3IgPSBzZWcuYW5jaG9yKCk7XG4gICAgICAgICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgICAgICAgICBwYWdlLm1vdmVUbyhhbmNob3IueCwgYW5jaG9yLnkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldk91dCA9IHByZXYuY29udHJvbE91dCgpO1xuICAgICAgICAgICAgICAgIHZhciBjb250cm9sSW4gPSBzZWcuY29udHJvbEluKCk7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZPdXQgJiYgY29udHJvbEluKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UuYmV6aWVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldk91dC54ICAgLCBwcmV2T3V0LnksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sSW4ueCAsIGNvbnRyb2xJbi55LFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLnggICAgLCBhbmNob3IueVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UubGluZVRvKGFuY2hvci54LCBhbmNob3IueSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldiA9IHNlZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC5vcHRpb25zLmNsb3NlZCkge1xuICAgICAgICAgICAgcGFnZS5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmF3UGF0aChlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICBfZHJhd1BhdGgoZWxlbWVudCwgcGFnZSwgcGRmKTtcbiAgICBtYXliZUZpbGxTdHJva2UoZWxlbWVudCwgcGFnZSwgcGRmKTtcbn1cblxuZnVuY3Rpb24gZHJhd011bHRpUGF0aChlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICB2YXIgcGF0aHMgPSBlbGVtZW50LnBhdGhzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgX2RyYXdQYXRoKHBhdGhzW2ldLCBwYWdlLCBwZGYpO1xuICAgIH1cbiAgICBtYXliZUZpbGxTdHJva2UoZWxlbWVudCwgcGFnZSwgcGRmKTtcbn1cblxuZnVuY3Rpb24gZHJhd0NpcmNsZShlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICB2YXIgZyA9IGVsZW1lbnQuZ2VvbWV0cnkoKTtcbiAgICBwYWdlLmNpcmNsZShnLmNlbnRlci54LCBnLmNlbnRlci55LCBnLnJhZGl1cyk7XG4gICAgbWF5YmVGaWxsU3Ryb2tlKGVsZW1lbnQsIHBhZ2UsIHBkZik7XG59XG5cbmZ1bmN0aW9uIGRyYXdBcmMoZWxlbWVudCwgcGFnZSwgcGRmKSB7XG4gICAgdmFyIHBvaW50cyA9IGVsZW1lbnQuZ2VvbWV0cnkoKS5jdXJ2ZVBvaW50cygpO1xuICAgIHBhZ2UubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOykge1xuICAgICAgICBwYWdlLmJlemllcihcbiAgICAgICAgICAgIHBvaW50c1tpXS54LCBwb2ludHNbaSsrXS55LFxuICAgICAgICAgICAgcG9pbnRzW2ldLngsIHBvaW50c1tpKytdLnksXG4gICAgICAgICAgICBwb2ludHNbaV0ueCwgcG9pbnRzW2krK10ueVxuICAgICAgICApO1xuICAgIH1cbiAgICBtYXliZUZpbGxTdHJva2UoZWxlbWVudCwgcGFnZSwgcGRmKTtcbn1cblxuZnVuY3Rpb24gZHJhd1RleHQoZWxlbWVudCwgcGFnZSkge1xuICAgIHZhciBzdHlsZSA9IFBERi5wYXJzZUZvbnREZWYoZWxlbWVudC5vcHRpb25zLmZvbnQpO1xuICAgIHZhciBwb3MgPSBlbGVtZW50Ll9wb3NpdGlvbjtcbiAgICB2YXIgbW9kZTtcbiAgICBpZiAoZWxlbWVudC5maWxsKCkgJiYgZWxlbWVudC5zdHJva2UoKSkge1xuICAgICAgICBtb2RlID0gVEVYVF9SRU5ERVJJTkdfTU9ERS5maWxsQW5kU3Ryb2tlO1xuICAgIH0gZWxzZSBpZiAoZWxlbWVudC5maWxsKCkpIHtcbiAgICAgICAgbW9kZSA9IFRFWFRfUkVOREVSSU5HX01PREUuZmlsbDtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuc3Ryb2tlKCkpIHtcbiAgICAgICAgbW9kZSA9IFRFWFRfUkVOREVSSU5HX01PREUuc3Ryb2tlO1xuICAgIH1cblxuICAgIHBhZ2UudHJhbnNmb3JtKDEsIDAsIDAsIC0xLCBwb3MueCwgcG9zLnkgKyBzdHlsZS5mb250U2l6ZSk7XG4gICAgcGFnZS5iZWdpblRleHQoKTtcbiAgICBwYWdlLnNldEZvbnQoUERGLmdldEZvbnRVUkwoc3R5bGUpLCBzdHlsZS5mb250U2l6ZSk7XG4gICAgcGFnZS5zZXRUZXh0UmVuZGVyaW5nTW9kZShtb2RlKTtcbiAgICBwYWdlLnNob3dUZXh0KGVsZW1lbnQuY29udGVudCgpLCBlbGVtZW50Ll9wZGZSZWN0ID8gZWxlbWVudC5fcGRmUmVjdC53aWR0aCgpIDogbnVsbCk7XG4gICAgcGFnZS5lbmRUZXh0KCk7XG59XG5cbmZ1bmN0aW9uIGRyYXdHcm91cChlbGVtZW50LCBwYWdlLCBwZGYpIHtcbiAgICBpZiAoZWxlbWVudC5fcGRmTGluaykge1xuICAgICAgICBwYWdlLmFkZExpbmsoZWxlbWVudC5fcGRmTGluay51cmwsIGVsZW1lbnQuX3BkZkxpbmspO1xuICAgIH1cbiAgICB2YXIgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgZHJhd0VsZW1lbnQoY2hpbGRyZW5baV0sIHBhZ2UsIHBkZik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmF3SW1hZ2UoZWxlbWVudCwgcGFnZSkge1xuICAgIHZhciB1cmwgPSBlbGVtZW50LnNyYygpO1xuICAgIGlmICghdXJsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGVsZW1lbnQucmVjdCgpO1xuICAgIHZhciB0bCA9IHJlY3QuZ2V0T3JpZ2luKCk7XG4gICAgdmFyIHN6ID0gcmVjdC5nZXRTaXplKCk7XG4gICAgcGFnZS50cmFuc2Zvcm0oc3oud2lkdGgsIDAsIDAsIC1zei5oZWlnaHQsIHRsLngsIHRsLnkgKyBzei5oZWlnaHQpO1xuICAgIHBhZ2UuZHJhd0ltYWdlKHVybCk7XG59XG5cbmZ1bmN0aW9uIGRyYXdSZWN0KGVsZW1lbnQsIHBhZ2UsIHBkZikge1xuICAgIHZhciBnZW9tZXRyeSA9IGVsZW1lbnQuZ2VvbWV0cnkoKTtcbiAgICBwYWdlLnJlY3QoZ2VvbWV0cnkub3JpZ2luLngsIGdlb21ldHJ5Lm9yaWdpbi55LCBnZW9tZXRyeS5zaXplLndpZHRoLCBnZW9tZXRyeS5zaXplLmhlaWdodCk7XG4gICAgbWF5YmVGaWxsU3Ryb2tlKGVsZW1lbnQsIHBhZ2UsIHBkZik7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29sb3IodmFsdWUpIHtcbiAgICB2YXIgY29sb3IgPSB1dGlsc19wYXJzZUNvbG9yKHZhbHVlLCB0cnVlKTtcbiAgICByZXR1cm4gY29sb3IgPyBjb2xvci50b1JHQigpIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gb3B0aW1pemUocm9vdCkge1xuICAgIHZhciBjbGlwYm94ID0gZmFsc2U7XG4gICAgdmFyIG1hdHJpeCA9IGdlby5NYXRyaXgudW5pdCgpO1xuICAgIHZhciBjdXJyZW50Qm94ID0gbnVsbDtcbiAgICB2YXIgY2hhbmdlZDtcbiAgICBkbyB7XG4gICAgICAgIGNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgcm9vdCA9IG9wdChyb290KTtcbiAgICB9IHdoaWxlIChyb290ICYmIGNoYW5nZWQpO1xuICAgIHJldHVybiB7IHJvb3Q6IHJvb3QsIGJib3g6IGN1cnJlbnRCb3ggfTtcblxuICAgIGZ1bmN0aW9uIGNoYW5nZShuZXdTaGFwZSkge1xuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIG5ld1NoYXBlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZpc2libGUoc2hhcGUpIHtcbiAgICAgICAgcmV0dXJuIChzaGFwZS52aXNpYmxlKCkgJiYgc2hhcGUub3BhY2l0eSgpID4gMCAmJlxuICAgICAgICAgICAgICAgICggc2hvdWxkRHJhdyhzaGFwZS5maWxsKCkpIHx8XG4gICAgICAgICAgICAgICAgICBzaG91bGREcmF3KHNoYXBlLnN0cm9rZSgpKSApKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvcHRBcnJheShhKSB7XG4gICAgICAgIHZhciBiID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGVsID0gb3B0KGFbaV0pO1xuICAgICAgICAgICAgaWYgKGVsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBiLnB1c2goZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdpdGhDbGlwcGluZyhzaGFwZSwgZikge1xuICAgICAgICB2YXIgc2F2ZWNsaXBib3ggPSBjbGlwYm94O1xuICAgICAgICB2YXIgc2F2ZW1hdHJpeCA9IG1hdHJpeDtcblxuICAgICAgICBpZiAoc2hhcGUudHJhbnNmb3JtKCkpIHtcbiAgICAgICAgICAgIG1hdHJpeCA9IG1hdHJpeC5tdWx0aXBseUNvcHkoc2hhcGUudHJhbnNmb3JtKCkubWF0cml4KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsaXAgPSBzaGFwZS5jbGlwKCk7XG4gICAgICAgIGlmIChjbGlwKSB7XG4gICAgICAgICAgICBjbGlwID0gY2xpcC5iYm94KCk7XG4gICAgICAgICAgICBpZiAoY2xpcCkge1xuICAgICAgICAgICAgICAgIGNsaXAgPSBjbGlwLmJib3gobWF0cml4KTtcbiAgICAgICAgICAgICAgICBjbGlwYm94ID0gY2xpcGJveCA/IGdlby5SZWN0LmludGVyc2VjdChjbGlwYm94LCBjbGlwKSA6IGNsaXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGYoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGNsaXBib3ggPSBzYXZlY2xpcGJveDtcbiAgICAgICAgICAgIG1hdHJpeCA9IHNhdmVtYXRyaXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbkNsaXBib3goc2hhcGUpIHtcbiAgICAgICAgaWYgKGNsaXBib3ggPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBib3ggPSBzaGFwZS5yYXdCQm94KCkuYmJveChtYXRyaXgpO1xuICAgICAgICBpZiAoY2xpcGJveCAmJiBib3gpIHtcbiAgICAgICAgICAgIGJveCA9IGdlby5SZWN0LmludGVyc2VjdChib3gsIGNsaXBib3gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBib3g7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb3B0KHNoYXBlKSB7XG4gICAgICAgIHJldHVybiB3aXRoQ2xpcHBpbmcoc2hhcGUsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZiAoIShzaGFwZSBpbnN0YW5jZW9mIEdyb3VwIHx8IHNoYXBlIGluc3RhbmNlb2YgTXVsdGlQYXRoKSkge1xuICAgICAgICAgICAgICAgIHZhciBib3ggPSBpbkNsaXBib3goc2hhcGUpO1xuICAgICAgICAgICAgICAgIGlmICghYm94KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2UobnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRCb3ggPSBjdXJyZW50Qm94ID8gZ2VvLlJlY3QudW5pb24oY3VycmVudEJveCwgYm94KSA6IGJveDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgUGF0aDogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXBlLnNlZ21lbnRzLmxlbmd0aCA9PT0gMCB8fCAhdmlzaWJsZShzaGFwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2UobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNoYXBlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgTXVsdGlQYXRoOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZpc2libGUoc2hhcGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbmdlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IG5ldyBNdWx0aVBhdGgoc2hhcGUub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGVsLnBhdGhzID0gb3B0QXJyYXkoc2hhcGUucGF0aHMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWwucGF0aHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbmdlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIENpcmNsZTogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2aXNpYmxlKHNoYXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hhcGU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBBcmM6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmlzaWJsZShzaGFwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2UobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNoYXBlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgVGV4dDogZnVuY3Rpb24oc2hhcGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEvXFxTLy50ZXN0KHNoYXBlLmNvbnRlbnQoKSkgfHwgIXZpc2libGUoc2hhcGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbmdlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaGFwZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIEltYWdlOiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShzaGFwZS52aXNpYmxlKCkgJiYgc2hhcGUub3BhY2l0eSgpID4gMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFuZ2UobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNoYXBlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgR3JvdXA6IGZ1bmN0aW9uKHNoYXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHNoYXBlLnZpc2libGUoKSAmJiBzaGFwZS5vcGFjaXR5KCkgPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSBuZXcgR3JvdXAoc2hhcGUub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGVsLmNoaWxkcmVuID0gb3B0QXJyYXkoc2hhcGUuY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgICAgICBlbC5fcGRmTGluayA9IHNoYXBlLl9wZGZMaW5rO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGUgIT09IHJvb3QgJiYgZWwuY2hpbGRyZW4ubGVuZ3RoID09PSAwICYmICFzaGFwZS5fcGRmTGluaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYW5nZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBSZWN0OiBmdW5jdGlvbihzaGFwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZpc2libGUoc2hhcGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hhbmdlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaGFwZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBzaGFwZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZXhwb3J0UERGKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIHByb21pc2UgPSBjcmVhdGVQcm9taXNlKCk7XG5cbiAgICBmb3IgKHZhciBpIGluIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGkgPT0gXCJtYXJnaW5cIiAmJiBncm91cC5vcHRpb25zLnBkZiAmJiBncm91cC5vcHRpb25zLnBkZi5faWdub3JlTWFyZ2luKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGhhY2tpc2ggb3B0aW9uIGlzIHNldCBieSB0aGUgcGFnZSBicmVha2luZyBjb2RlIGluIGRyYXdET00uICBUaGUgaWRlYSBpc1xuICAgICAgICAgICAgLy8gdGhhdCBtYXJnaW4gaXMgYWxyZWFkeSB0YWtlbiBpbnRvIGFjY291bnQgdGhlcmUgKHRoYXQncyByZXF1aXJlZCB0byBkbyBwcm9wZXJcbiAgICAgICAgICAgIC8vIHBhZ2UgYnJlYWtpbmcpIGFuZCB3ZSBkb24ndCB3YW50IHRvIHNldCBpdCBhZ2FpbiBoZXJlLCBhcyBpdCB3b3VsZCBkb3VibGUgdGhlXG4gICAgICAgICAgICAvLyB0b3AtbGVmdCBtYXJnaW4sIGFuZCB0cnVuY2F0ZSB0aGUgY29udGVudCBvbiBib3R0b20vcmlnaHQuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBncm91cC5vcHRpb25zLnNldChcInBkZi5cIiArIGksIG9wdGlvbnNbaV0pO1xuICAgIH1cblxuICAgIHRvRGF0YVVSTChncm91cCwgcHJvbWlzZS5yZXNvbHZlKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5leHBvcnQgeyBleHBvcnRQREYsIHNhdmVBcywgdG9EYXRhVVJMLCB0b0Jsb2IsIHJlbmRlciB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tbXVsdGktc3BhY2VzLCBrZXktc3BhY2luZywgaW5kZW50LCBjYW1lbGNhc2UsIHNwYWNlLWJlZm9yZS1ibG9ja3MsIGVxZXFlcSwgYnJhY2Utc3R5bGUgKi9cbi8qIGVzbGludC1kaXNhYmxlIHNwYWNlLWluZml4LW9wcywgc3BhY2UtYmVmb3JlLWZ1bmN0aW9uLXBhcmVuLCBhcnJheS1icmFja2V0LXNwYWNpbmcsIG9iamVjdC1jdXJseS1zcGFjaW5nICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1uZXN0ZWQtdGVybmFyeSwgbWF4LXBhcmFtcywgZGVmYXVsdC1jYXNlLCBuby1lbHNlLXJldHVybiwgbm8tZW1wdHksIHlvZGEgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduLCBuby12YXIsIGJsb2NrLXNjb3BlZC12YXIgKi9cblxuaW1wb3J0ICogYXMgZ2VvIGZyb20gXCIuLi9nZW9tZXRyeVwiO1xuaW1wb3J0ICogYXMgUERGIGZyb20gXCIuLi9wZGZcIjtcbmltcG9ydCB7IGFyYWJpY1RvUm9tYW4sIGNyZWF0ZVByb21pc2UsIG1lYXN1cmVUZXh0LCBtZXJnZVNvcnQgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCB7IHBhcnNlQ29sb3IgYXMgdXRpbHNfcGFyc2VDb2xvciwgc3VwcG9ydCwgdGVtcGxhdGUgYXMgY29tcGlsZVRlbXBsYXRlIH0gZnJvbSBcIi4uL2NvbW1vblwiO1xuaW1wb3J0IHsgUGF0aCwgVGV4dCwgR3JvdXAsIEltYWdlLCBDaXJjbGUsIExpbmVhckdyYWRpZW50IH0gZnJvbSBcIi4uL2RyYXdpbmdcIjtcblxuY29uc3QgYnJvd3NlciA9IHN1cHBvcnQuYnJvd3NlciB8fCB7fTtcbi8qXG5cbiAgWFhYOiB0byB0ZXN0OlxuXG4gIC0gY2xvbmVOb2RlcyBmdW5jdGlvbjpcbiAgICAtIGRyYXdpbmcgZG9jdW1lbnQgY29udGFpbmluZyBjYW52YXMgd2l0aCBwYWdlIGJyZWFraW5nXG4gICAgLSBkcmF3aW5nIGRvY3VtZW50IHdpdGggbmFtZWQgcmFkaW8gPGlucHV0Pi1zIChzaG91bGQgbm90IGNsZWFyIHNlbGVjdGlvbilcbiAgICAtIElFOS9JRTEwIGRvbid0IHN1cHBvcnQgZWwuZGF0YXNldDsgZG8gdGhleSBjb3B5IHVzZXIgZGF0YT9cblxuICAtIHJlcGVhdGluZyB0YWJsZSBoZWFkZXJzL2Zvb3RlcnMgb24gcGFnZSBicmVha2luZ1xuXG4gIC0gZm9yY2VCcmVhaywga2VlcFRvZ2V0aGVyXG5cbiAgLSBhdm9pZExpbmtzXG5cbiAqL1xuXG4vKiAtLS0tLVsgbG9jYWwgdmFycyBdLS0tLS0gKi9cblxuZnVuY3Rpb24gc2xpY2UodGhpbmcpIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpbmcpO1xufVxuXG52YXIgS0VORE9fUFNFVURPX0VMRU1FTlQgPSBcIktFTkRPLVBTRVVETy1FTEVNRU5UXCI7XG5cbnZhciBJTUFHRV9DQUNIRSA9IHt9O1xuXG52YXIgbm9kZUluZm8gPSB7fTtcbm5vZGVJbmZvLl9yb290ID0gbm9kZUluZm87XG5cbi8qIC0tLS0tWyBDdXN0b20gVGV4dCBub2RlIHRvIHNwZWVkIHVwIHJlbmRlcmluZyBpbiBQREYgXS0tLS0tICovXG5cbmNvbnN0IGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgbWljcm9zb2Z0ID0gaW5Ccm93c2VyID8gYnJvd3Nlci5tc2llIHx8IGJyb3dzZXIuZWRnZSA6IGZhbHNlO1xuXG5jbGFzcyBUZXh0UmVjdCBleHRlbmRzIFRleHQge1xuICAgIGNvbnN0cnVjdG9yKHN0ciwgcmVjdCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihzdHIsIHJlY3QuZ2V0T3JpZ2luKCksIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9wZGZSZWN0ID0gcmVjdDtcbiAgICB9XG4gICAgcmVjdCgpIHtcbiAgICAgICAgLy8gdGhpcyBpcyB0aGUgY3J1eCBvZiBpdDogd2UgY2FuIGF2b2lkIGEgY2FsbCB0b1xuICAgICAgICAvLyBtZWFzdXJlKCksIHdoaWNoIGlzIHdoYXQgdGhlIGJhc2UgY2xhc3MgZG9lcywgc2luY2Ugd2VcbiAgICAgICAgLy8gYWxyZWFkeSBrbm93IHRoZSByZWN0LiAgbWVhc3VyZSgpIGlzIHMtbC1vLXcuXG4gICAgICAgIHJldHVybiB0aGlzLl9wZGZSZWN0O1xuICAgIH1cbiAgICByYXdCQm94KCkge1xuICAgICAgICAvLyBhbHNvIGxldCdzIGF2b2lkIGNyZWF0aW5nIGEgbmV3IHJlY3RhbmdsZS5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3BkZlJlY3Q7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xzKSB7XG4gICAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWwuY2xhc3NOYW1lICs9IFwiIFwiICsgY2xzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNscykge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLnJlZHVjZShmdW5jdGlvbihhLCB3b3JkKXtcbiAgICAgICAgICAgIGlmICh3b3JkICE9IGNscykge1xuICAgICAgICAgICAgICAgIGEucHVzaCh3b3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9LCBbXSkuam9pbihcIiBcIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRDU1MoZWwsIHN0eWxlcykge1xuICAgIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbihrZXkpe1xuICAgICAgICBlbC5zdHlsZVtrZXldID0gc3R5bGVzW2tleV07XG4gICAgfSk7XG59XG5cbnZhciBtYXRjaGVzID0gdHlwZW9mIEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgRWxlbWVudC5wcm90b3R5cGUgJiYgKGZ1bmN0aW9uKHApe1xuICAgIGlmIChwLm1hdGNoZXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsLCBzZWxlY3RvcikgeyByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3Rvcik7IH07XG4gICAgfVxuICAgIGlmIChwLndlYmtpdE1hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWwsIHNlbGVjdG9yKSB7IHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpOyB9O1xuICAgIH1cbiAgICBpZiAocC5tb3pNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsLCBzZWxlY3RvcikgeyByZXR1cm4gZWwubW96TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTsgfTtcbiAgICB9XG4gICAgaWYgKHAubXNNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsLCBzZWxlY3RvcikgeyByZXR1cm4gZWwubXNNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpOyB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24ocykge1xuXHRyZXR1cm4gW10uaW5kZXhPZi5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocyksIHRoaXMpICE9PSAtMTtcbiAgICB9O1xufSkoRWxlbWVudC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjbG9zZXN0KGVsLCBzZWxlY3Rvcikge1xuICAgIGlmIChlbC5jbG9zZXN0KSB7XG4gICAgICAgIHJldHVybiBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICB9XG4gICAgLy8gSUU6IHN0cmluZ2lmeWluZyByYXRoZXIgdGhhbiBzaW1wbHkgY29tcGFyaW5nIHdpdGggYGRvY3VtZW50YCxcbiAgICAvLyB3aGljaCBpcyBub3QgaWZyYW1lLXByb29mIGFuZCBmYWlscyBpbiBlZGl0b3IgZXhwb3J0IOKAlFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvL2lzc3Vlcy82NzIxXG4gICAgd2hpbGUgKGVsICYmICEvXlxcW29iamVjdCAoPzpIVE1MKT9Eb2N1bWVudFxcXSQvLnRlc3QoU3RyaW5nKGVsKSkpIHtcbiAgICAgICAgaWYgKGVsLm5vZGVUeXBlID09IDEgLyogRWxlbWVudCAqLyAmJiBtYXRjaGVzKGVsLCBzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBlbDtcbiAgICAgICAgfVxuICAgICAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gICAgfVxufVxuXG4vLyBjbG9uZSBub2RlcyBvdXJzZWx2ZXMsIHNvIHRoYXQgd2UgcmVkcmF3IDxjYW52YXM+IChET00gb3Jcbi8vIGpRdWVyeSBjbG9uZSB3aWxsIG5vdClcbnZhciBjbG9uZU5vZGVzID0gKGZ1bmN0aW9uKCQpe1xuICAgIGlmICgkKSB7XG4gICAgICAgIC8vIGlmIHdlIGhhdmUgS2VuZG8gYW5kIGpRdWVyeSwgdXNlIHRoaXMgdmVyc2lvbiBhcyBpdCB3aWxsXG4gICAgICAgIC8vIG1haW50YWluIHByb3BlciBsaW5rcyBiZXR3ZWVuIGNsb25lZCBlbGVtZW50IGFuZCBLZW5kb1xuICAgICAgICAvLyB3aWRnZXRzIChpLmUuIGl0IGNsb25lcyBqUXVlcnkgZGF0YSgpLCB3aGljaCBpc24ndCB0aGUgc2FtZVxuICAgICAgICAvLyBhcyBlbGVtZW50J3MgZGF0YSBhdHRyaWJ1dGVzKS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tdWktY29yZS9pc3N1ZXMvMjc1MFxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gY2xvbmVOb2RlcyhlbCkge1xuICAgICAgICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChlbC5ub2RlVHlwZSA9PSAxIC8qIEVsZW1lbnQgKi8pIHtcbiAgICAgICAgICAgICAgICB2YXIgJGVsID0gJChlbCksICRjbG9uZSA9ICQoY2xvbmUpLCBpO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gJGVsLmRhdGEoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGkgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAkY2xvbmUuZGF0YShpLCBkYXRhW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKC9eY2FudmFzJC9pLnRlc3QoZWwudGFnTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShlbCwgMCwgMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxvcHRpb24pJC9pLnRlc3QoZWwudGFnTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJvcCB0aGUgbmFtZSBhdHRyaWJ1dGVzIHNvIHRoYXQgd2UgZG9uJ3QgYWZmZWN0IHRoZSBzZWxlY3Rpb24gb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIG9yaWdpbmFsIG5vZGVzIChpLmUuIGNoZWNrZWQgc3RhdHVzIG9mIHJhZGlvIGJ1dHRvbnMpIHdoZW4gd2UgaW5zZXJ0IG91ciBjb3B5XG4gICAgICAgICAgICAgICAgICAgIC8vIGludG8gdGhlIERPTS4gIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvL2lzc3Vlcy81NDA5XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuICAgICAgICAgICAgICAgICAgICBjbG9uZS5yZW1vdmVBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIS9edGV4dGFyZWEkL2kudGVzdChlbC50YWdOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmUudmFsdWUgPSBlbC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjbG9uZS5jaGVja2VkID0gZWwuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuc2VsZWN0ZWQgPSBlbC5zZWxlY3RlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpID0gZWwuZmlyc3RDaGlsZDsgaTsgaSA9IGkubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuYXBwZW5kQ2hpbGQoY2xvbmVOb2RlcyhpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoZSBuby1qUXVlcnkgdmVyc2lvblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gY2xvbmVOb2RlcyhlbCkge1xuICAgICAgICAgICAgY29uc3QgY2xvbmUgPSAoZnVuY3Rpb24gZGl2ZShub2RlKXtcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZSA9IG5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5fa2VuZG9FeHBvcnRWaXN1YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuX2tlbmRvRXhwb3J0VmlzdWFsID0gbm9kZS5fa2VuZG9FeHBvcnRWaXN1YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBub2RlLmZpcnN0Q2hpbGQ7IGk7IGkgPSBpLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLmFwcGVuZENoaWxkKGRpdmUoaSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICB9KShlbCk7XG5cbiAgICAgICAgICAgIC8vIHJlLWRyYXcgY2FudmFzZXMgLSBodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby9pc3N1ZXMvNDg3MlxuICAgICAgICAgICAgY29uc3QgY2FudmFzZXMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiY2FudmFzXCIpO1xuICAgICAgICAgICAgaWYgKGNhbnZhc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNsaWNlKGNsb25lLnF1ZXJ5U2VsZWN0b3JBbGwoXCJjYW52YXNcIikpLmZvckVhY2goKGNhbnZhcywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShjYW52YXNlc1tpXSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSBcIm5hbWVcIiBhdHRyaWJ1dGVzIGZyb20gPGlucHV0PiBlbGVtZW50cyAtXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby9pc3N1ZXMvNTQwOVxuICAgICAgICAgICAgY29uc3Qgb3JpZyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgb3B0aW9uXCIpO1xuICAgICAgICAgICAgc2xpY2UoY2xvbmUucXVlcnlTZWxlY3RvckFsbChcImlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBvcHRpb25cIikpLmZvckVhY2goKGVsLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwibmFtZVwiKTtcbiAgICAgICAgICAgICAgICBpZiAoIS9edGV4dGFyZWEkL2kudGVzdChlbC50YWdOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBlbC52YWx1ZSA9IG9yaWdbaV0udmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsLmNoZWNrZWQgPSBvcmlnW2ldLmNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgZWwuc2VsZWN0ZWQgPSBvcmlnW2ldLnNlbGVjdGVkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgfTtcbiAgICB9XG59KSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5rZW5kbyAmJiB3aW5kb3cua2VuZG8ualF1ZXJ5KTtcblxuZnVuY3Rpb24gZ2V0WFkodGhpbmcpIHtcbiAgICBpZiAodHlwZW9mIHRoaW5nID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogdGhpbmcsIHk6IHRoaW5nIH07XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaW5nKSkge1xuICAgICAgICByZXR1cm4geyB4OiB0aGluZ1swXSwgeTogdGhpbmdbMV0gfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgeDogdGhpbmcueCwgeTogdGhpbmcueSB9O1xufVxuXG5mdW5jdGlvbiBkcmF3RE9NKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB2YXIgcHJvbWlzZSA9IGNyZWF0ZVByb21pc2UoKTtcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZS5yZWplY3QoXCJObyBlbGVtZW50IHRvIGV4cG9ydFwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICE9IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSBpcyBtaXNzaW5nLiAgWW91IGFyZSB1c2luZyBhbiB1bnN1cHBvcnRlZCBicm93c2VyLCBvciBydW5uaW5nIGluIElFOCBjb21wYXRpYmlsaXR5IG1vZGUuICBEcmF3aW5nIEhUTUwgaXMgc3VwcG9ydGVkIGluIENocm9tZSwgRmlyZWZveCwgU2FmYXJpIGFuZCBJRTkrLlwiKTtcbiAgICB9XG5cbiAgICBQREYuZGVmaW5lRm9udChnZXRGb250RmFjZXMoZWxlbWVudC5vd25lckRvY3VtZW50KSk7XG5cbiAgICB2YXIgc2NhbGUgPSBnZXRYWShvcHRpb25zLnNjYWxlIHx8IDEpO1xuXG4gICAgZnVuY3Rpb24gZG9PbmUoZWxlbWVudCkge1xuICAgICAgICB2YXIgZ3JvdXAgPSBuZXcgR3JvdXAoKTtcblxuICAgICAgICAvLyB0cmFuc2xhdGUgdG8gc3RhcnQgb2YgcGFnZVxuICAgICAgICB2YXIgcG9zID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgc2V0VHJhbnNmb3JtKGdyb3VwLCBbXG4gICAgICAgICAgICBzY2FsZS54LFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBzY2FsZS55LFxuICAgICAgICAgICAgKC1wb3MubGVmdCAqIHNjYWxlLngpLFxuICAgICAgICAgICAgKC1wb3MudG9wICogc2NhbGUueSlcbiAgICAgICAgXSk7XG5cbiAgICAgICAgbm9kZUluZm8uX2NsaXBib3ggPSBmYWxzZTtcbiAgICAgICAgbm9kZUluZm8uX21hdHJpeCA9IGdlby5NYXRyaXgudW5pdCgpO1xuICAgICAgICBub2RlSW5mby5fc3RhY2tpbmdDb250ZXh0ID0ge1xuICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgICAgIGdyb3VwOiBncm91cFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChvcHRpb25zLmF2b2lkTGlua3MgPT09IHRydWUpIHtcbiAgICAgICAgICAgIG5vZGVJbmZvLl9hdm9pZExpbmtzID0gXCJhXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlSW5mby5fYXZvaWRMaW5rcyA9IG9wdGlvbnMuYXZvaWRMaW5rcztcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIFwiay1wZGYtZXhwb3J0XCIpO1xuICAgICAgICByZW5kZXJFbGVtZW50KGVsZW1lbnQsIGdyb3VwKTtcbiAgICAgICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgXCJrLXBkZi1leHBvcnRcIik7XG5cbiAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cblxuICAgIGNhY2hlSW1hZ2VzKGVsZW1lbnQsIGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBmb3JjZUJyZWFrID0gb3B0aW9ucyAmJiBvcHRpb25zLmZvcmNlUGFnZUJyZWFrO1xuICAgICAgICB2YXIgaGFzUGFwZXJTaXplID0gb3B0aW9ucyAmJiBvcHRpb25zLnBhcGVyU2l6ZSAmJiBvcHRpb25zLnBhcGVyU2l6ZSAhPSBcImF1dG9cIjtcbiAgICAgICAgdmFyIHBhcGVyT3B0aW9ucyA9IFBERi5nZXRQYXBlck9wdGlvbnMoZnVuY3Rpb24oa2V5LCBkZWYpe1xuICAgICAgICAgICAgaWYgKGtleSA9PSBcInBhcGVyU2l6ZVwiKSB7XG4gICAgICAgICAgICAgICAgLy8gUERGLmdldFBhcGVyT3B0aW9ucyBjcm9ha3Mgb24gXCJhdXRvXCIsIGp1c3QgcGFzcyBkdW1teSBBNCBhcyB3ZSBtaWdodFxuICAgICAgICAgICAgICAgIC8vIHN0aWxsIGJlIGludGVyZXN0ZWQgaW4gbWFyZ2lucy5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzUGFwZXJTaXplID8gb3B0aW9uc1trZXldIDogXCJBNFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGtleSBpbiBvcHRpb25zID8gb3B0aW9uc1trZXldIDogZGVmO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHBhZ2VXaWR0aCA9IGhhc1BhcGVyU2l6ZSAmJiBwYXBlck9wdGlvbnMucGFwZXJTaXplWzBdO1xuICAgICAgICB2YXIgcGFnZUhlaWdodCA9IGhhc1BhcGVyU2l6ZSAmJiBwYXBlck9wdGlvbnMucGFwZXJTaXplWzFdO1xuICAgICAgICB2YXIgbWFyZ2luID0gb3B0aW9ucy5tYXJnaW4gJiYgcGFwZXJPcHRpb25zLm1hcmdpbjtcbiAgICAgICAgdmFyIGhhc01hcmdpbiA9IEJvb2xlYW4obWFyZ2luKTtcbiAgICAgICAgaWYgKGZvcmNlQnJlYWsgfHwgcGFnZUhlaWdodCkge1xuICAgICAgICAgICAgaWYgKCFtYXJnaW4pIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4gPSB7IGxlZnQ6IDAsIHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMCB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB3ZSB3YW50IHBhcGVyIHNpemUgYW5kIG1hcmdpbiB0byBiZSB1bmFmZmVjdGVkIGJ5XG4gICAgICAgICAgICAvLyBzY2FsaW5nIGluIHRoZSBvdXRwdXQsIHNvIHdlIGhhdmUgdG8gcmV2ZXJzZS1zY2FsZVxuICAgICAgICAgICAgLy8gYmVmb3JlIG91ciBjYWxjdWxhdGlvbnMgYmVnaW4uXG4gICAgICAgICAgICBpZiAocGFnZVdpZHRoKSAgeyBwYWdlV2lkdGggIC89IHNjYWxlLng7IH1cbiAgICAgICAgICAgIGlmIChwYWdlSGVpZ2h0KSB7IHBhZ2VIZWlnaHQgLz0gc2NhbGUueTsgfVxuICAgICAgICAgICAgbWFyZ2luLmxlZnQgICAvPSBzY2FsZS54O1xuICAgICAgICAgICAgbWFyZ2luLnJpZ2h0ICAvPSBzY2FsZS54O1xuICAgICAgICAgICAgbWFyZ2luLnRvcCAgICAvPSBzY2FsZS55O1xuICAgICAgICAgICAgbWFyZ2luLmJvdHRvbSAvPSBzY2FsZS55O1xuXG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSBuZXcgR3JvdXAoe1xuICAgICAgICAgICAgICAgIHBkZjoge1xuICAgICAgICAgICAgICAgICAgICBtdWx0aVBhZ2UgICAgIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGFwZXJTaXplICAgICA6IGhhc1BhcGVyU2l6ZSA/IHBhcGVyT3B0aW9ucy5wYXBlclNpemUgOiBcImF1dG9cIixcbiAgICAgICAgICAgICAgICAgICAgX2lnbm9yZU1hcmdpbiA6IGhhc01hcmdpbiAvLyBIQUNLISAgc2VlIGV4cG9ydFBERiBpbiBwZGYvZHJhd2luZy5qc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaGFuZGxlUGFnZUJyZWFrcyhcbiAgICAgICAgICAgICAgICBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FuY2VsZWQgPSBmYWxzZSwgcGFnZU51bSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gbmV4dCgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWdlTnVtIDwgeC5wYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhZ2UgPSBkb09uZSh4LnBhZ2VzW3BhZ2VOdW1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKHBhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnByb2dyZXNzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlTnVtOiArK3BhZ2VOdW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbFBhZ2VzOiB4LnBhZ2VzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5jZWxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChuZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFhYWDogc2hvdWxkIHdlIGFsc28gZmFpbCgpIHRoZSBkZWZlcnJlZCBvYmplY3Q/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LmNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHguY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHguY29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoeC5jb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4LnBhZ2VzLmZvckVhY2goZnVuY3Rpb24ocGFnZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKGRvT25lKHBhZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgeC5jb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh4LmNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGZvcmNlQnJlYWssXG4gICAgICAgICAgICAgICAgcGFnZVdpZHRoID8gcGFnZVdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQgOiBudWxsLFxuICAgICAgICAgICAgICAgIHBhZ2VIZWlnaHQgPyBwYWdlSGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20gOiBudWxsLFxuICAgICAgICAgICAgICAgIG1hcmdpbixcbiAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGRvT25lKGVsZW1lbnQpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbWFrZVRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICAgIGlmICh0ZW1wbGF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IGNvbXBpbGVUZW1wbGF0ZSh0ZW1wbGF0ZS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCBcIlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IHRlbXBsYXRlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWwgJiYgdHlwZW9mIGVsID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9IGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwgPSBkaXYuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhc3N1bWVkIERPTSBlbGVtZW50XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVQYWdlQnJlYWtzKGNhbGxiYWNrLCBlbGVtZW50LCBmb3JjZUJyZWFrLCBwYWdlV2lkdGgsIHBhZ2VIZWlnaHQsIG1hcmdpbiwgb3B0aW9ucykge1xuICAgICAgICB2YXIgdGVtcGxhdGUgPSBtYWtlVGVtcGxhdGUob3B0aW9ucy50ZW1wbGF0ZSk7XG4gICAgICAgIHZhciBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciBwYWdlcyA9IFtdO1xuICAgICAgICB2YXIgY29weSA9IG9wdGlvbnMuX2Rlc3RydWN0aXZlID8gZWxlbWVudCA6IGNsb25lTm9kZXMoZWxlbWVudCk7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2MuY3JlYXRlRWxlbWVudChcIktFTkRPLVBERi1ET0NVTUVOVFwiKTtcbiAgICAgICAgdmFyIGFkanVzdCA9IDA7XG5cbiAgICAgICAgLy8gbWFrZSBzdXJlIDx0Zm9vdD4gZWxlbWVudHMgYXJlIGF0IHRoZSBlbmQgKEdyaWQgd2lkZ2V0XG4gICAgICAgIC8vIHBsYWNlcyBURk9PVCBiZWZvcmUgVEJPRFksIHRyaWNraW5nIG91ciBhbGdvcml0aG0gdG9cbiAgICAgICAgLy8gaW5zZXJ0IGEgcGFnZSBicmVhayByaWdodCBhZnRlciB0aGUgaGVhZGVyKS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8vaXNzdWVzLzQ2OTlcbiAgICAgICAgc2xpY2UoY29weS5xdWVyeVNlbGVjdG9yQWxsKFwidGZvb3RcIikpLmZvckVhY2goZnVuY3Rpb24odGZvb3Qpe1xuICAgICAgICAgICAgdGZvb3QucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0Zm9vdCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlbWVtYmVyIHRoZSBpbmRleCBvZiBlYWNoIExJIGZyb20gYW4gb3JkZXJlZCBsaXN0LlxuICAgICAgICAvLyB3ZSdsbCB1c2UgaXQgdG8gcmVjb25zdHJ1Y3QgdGhlIHByb3BlciBudW1iZXJpbmcuXG4gICAgICAgIHNsaWNlKGNvcHkucXVlcnlTZWxlY3RvckFsbChcIm9sXCIpKS5mb3JFYWNoKGZ1bmN0aW9uKG9sKXtcbiAgICAgICAgICAgIHNsaWNlKG9sLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uKGxpLCBpbmRleCl7XG4gICAgICAgICAgICAgICAgbGkuc2V0QXR0cmlidXRlKFwia2VuZG8tc3BsaXQtaW5kZXhcIiwgaW5kZXgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNldENTUyhjb250YWluZXIsIHtcbiAgICAgICAgICAgIGRpc3BsYXkgICA6IFwiYmxvY2tcIixcbiAgICAgICAgICAgIHBvc2l0aW9uICA6IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIGJveFNpemluZyA6IFwiY29udGVudC1ib3hcIixcbiAgICAgICAgICAgIGxlZnQgICAgICA6IFwiLTEwMDAwcHhcIixcbiAgICAgICAgICAgIHRvcCAgICAgICA6IFwiLTEwMDAwcHhcIlxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocGFnZVdpZHRoKSB7XG4gICAgICAgICAgICAvLyBzdWJ0bGU6IGlmIHdlIGRvbid0IHNldCB0aGUgd2lkdGggKmFuZCogbWFyZ2lucyBoZXJlLCB0aGUgbGF5b3V0IGluIHRoaXNcbiAgICAgICAgICAgIC8vIGNvbnRhaW5lciB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIHRoZSBvbmUgaW4gb3VyIGZpbmFsIHBhZ2UgZWxlbWVudHMsIGFuZCB3ZSdsbFxuICAgICAgICAgICAgLy8gc3BsaXQgYXQgdGhlIHdyb25nIHBsYWNlcy5cbiAgICAgICAgICAgIHNldENTUyhjb250YWluZXIsIHtcbiAgICAgICAgICAgICAgICB3aWR0aCAgICAgICAgOiBwYWdlV2lkdGggKyBcInB4XCIsXG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQgIDogbWFyZ2luLmxlZnQgKyBcInB4XCIsXG4gICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0IDogbWFyZ2luLnJpZ2h0ICsgXCJweFwiXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gd2hlbiB0aGUgZmlyc3QgZWxlbWVudCBoYXMgYSBtYXJnaW4tdG9wIChpLmUuIGEgPGgxPikgdGhlIHBhZ2Ugd2lsbCBiZVxuICAgICAgICAgICAgLy8gaW5hZHZlcnRlbnRseSBlbmxhcmdlZCBieSB0aGF0IG51bWJlciAodGhlIGJyb3dzZXIgd2lsbCByZXBvcnQgdGhlIGNvbnRhaW5lcidzXG4gICAgICAgICAgICAvLyBib3VuZGluZyBib3ggdG9wIHRvIHN0YXJ0IGF0IHRoZSBlbGVtZW50J3MgdG9wLCByYXRoZXIgdGhhbiBpbmNsdWRpbmcgaXRzXG4gICAgICAgICAgICAvLyBtYXJnaW4pLiAgQWRkaW5nIG92ZXJmbG93OiBoaWRkZW4gc2VlbXMgdG8gZml4IGl0LlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIHRvIHVuZGVyc3RhbmQgdGhlIGRpZmZlcmVuY2UsIHRyeSB0aGUgZm9sbG93aW5nIHNuaXBwZXRzIGluIHlvdXIgYnJvd3NlcjpcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAxLiA8ZGl2IHN0eWxlPVwiYmFja2dyb3VuZDogeWVsbG93XCI+XG4gICAgICAgICAgICAvLyAgICAgIDxoMSBzdHlsZT1cIm1hcmdpbjogM2VtXCI+Rm9vPC9oMT5cbiAgICAgICAgICAgIC8vICAgIDwvZGl2PlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIDIuIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kOiB5ZWxsb3c7IG92ZXJmbG93OiBoaWRkZW5cIj5cbiAgICAgICAgICAgIC8vICAgICAgPGgxIHN0eWxlPVwibWFyZ2luOiAzZW1cIj5Gb288L2gxPlxuICAgICAgICAgICAgLy8gICAgPC9kaXY+XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gdGhpcyBkZXRhaWwgaXMgbm90IGltcG9ydGFudCB3aGVuIGF1dG9tYXRpYyBwYWdlIGJyZWFraW5nIGlzIG5vdCByZXF1ZXN0ZWQsIGhlbmNlXG4gICAgICAgICAgICAvLyBkb2luZyBpdCBvbmx5IGlmIHBhZ2VXaWR0aCBpcyBkZWZpbmVkLlxuICAgICAgICAgICAgc2V0Q1NTKGNvcHksIHsgb3ZlcmZsb3c6IFwiaGlkZGVuXCIgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgZWxlbWVudCk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjb3B5KTtcblxuICAgICAgICAvLyB3ZSBuZWVkIHRoZSB0aW1lb3V0cyBoZXJlLCBzbyB0aGF0IGltYWdlcyBkaW1lbnNpb25zIGFyZVxuICAgICAgICAvLyBwcm9wZXJseSBjb21wdXRlZCBpbiBET00gd2hlbiB3ZSBzdGFydCBvdXIgdGhpbmcuXG4gICAgICAgIGlmIChvcHRpb25zLmJlZm9yZVBhZ2VCcmVhaykge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYmVmb3JlUGFnZUJyZWFrKGNvbnRhaW5lciwgZG9QYWdlQnJlYWspO1xuICAgICAgICAgICAgfSwgMTUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dChkb1BhZ2VCcmVhaywgMTUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZG9QYWdlQnJlYWsoKSB7XG4gICAgICAgICAgICBpZiAoZm9yY2VCcmVhayAhPSBcIi1cIiB8fCBwYWdlSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgc3BsaXRFbGVtZW50KGNvcHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGV0IHBhZ2UgPSBtYWtlUGFnZSgpO1xuICAgICAgICAgICAgICAgIGNvcHkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocGFnZSwgY29weSk7XG4gICAgICAgICAgICAgICAgcGFnZS5hcHBlbmRDaGlsZChjb3B5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgcGFnZXMuZm9yRWFjaChmdW5jdGlvbihwYWdlLCBpKXtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSB0ZW1wbGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ICAgIDogcGFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VOdW0gICAgOiBpICsgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsUGFnZXMgOiBwYWdlcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZS5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FjaGVJbWFnZXMocGFnZXMsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIEV2ZW4gdGhvdWdoIHdlIGFscmVhZHkgY2FjaGVkIGltYWdlcywgdGhleSBzaW1wbHkgd29uJ3QgYmUgYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgLy8gaW1tZWRpYXRlbHkgaW4gdGhlIG5ld2x5IGNyZWF0ZWQgRE9NLiAgUHJldmlvdXNseSB3ZSdkIGFsbG93IGEgMTBtcyB0aW1lb3V0LFxuICAgICAgICAgICAgICAgIC8vIGJ1dCB0aGF0J3MgYXJiaXRyYXJ5IGFuZCBjbGVhcmx5IG5vdCB3b3JraW5nIGluIGFsbCBjYXNlc1xuICAgICAgICAgICAgICAgIC8vIChodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby9pc3N1ZXMvNTM5OSksIHNvIHRoaXMgZnVuY3Rpb24gd2lsbCB3YWl0XG4gICAgICAgICAgICAgICAgLy8gZm9yIHRoZWlyIC5jb21wbGV0ZSBhdHRyaWJ1dGUuXG4gICAgICAgICAgICAgICAgd2hlbkltYWdlc0FyZUFjdHVhbGx5TG9hZGVkKHBhZ2VzLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh7IHBhZ2VzOiBwYWdlcywgY29udGFpbmVyOiBjb250YWluZXIgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGtlZXBUb2dldGhlcihlbCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMua2VlcFRvZ2V0aGVyICYmIG1hdGNoZXMoZWwsIG9wdGlvbnMua2VlcFRvZ2V0aGVyKSAmJiBlbC5vZmZzZXRIZWlnaHQgPD0gcGFnZUhlaWdodCAtIGFkanVzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdGFnID0gZWwudGFnTmFtZTtcbiAgICAgICAgICAgIGlmICgvXmhbMS02XSQvaS50ZXN0KHRhZykgJiYgZWwub2Zmc2V0SGVpZ2h0ID49IHBhZ2VIZWlnaHQgLSBhZGp1c3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAoZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1rZW5kby1jaGFydFwiKSB8fFxuICAgICAgICAgICAgICAgICAgICAvXig/OmltZ3x0cnx0aGVhZHx0aHx0Zm9vdHxpZnJhbWV8c3ZnfG9iamVjdHxjYW52YXN8aW5wdXR8dGV4dGFyZWF8c2VsZWN0fHZpZGVvfGhbMS02XSkvaS50ZXN0KGVsLnRhZ05hbWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNwbGl0RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC50YWdOYW1lID09IFwiVEFCTEVcIikge1xuICAgICAgICAgICAgICAgIHNldENTUyhlbGVtZW50LCB7IHRhYmxlTGF5b3V0OiBcImZpeGVkXCIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoa2VlcFRvZ2V0aGVyKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICAgICAgICAgIHZhciBib3R0b21QYWRkaW5nID0gcGFyc2VGbG9hdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInBhZGRpbmctYm90dG9tXCIpKTtcbiAgICAgICAgICAgIHZhciBib3R0b21Cb3JkZXIgPSBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiKSk7XG4gICAgICAgICAgICB2YXIgc2F2ZUFkanVzdCA9IGFkanVzdDtcbiAgICAgICAgICAgIGFkanVzdCArPSBib3R0b21QYWRkaW5nICsgYm90dG9tQm9yZGVyO1xuICAgICAgICAgICAgdmFyIGlzRmlyc3QgPSB0cnVlO1xuICAgICAgICAgICAgZm9yICh2YXIgZWwgPSBlbGVtZW50LmZpcnN0Q2hpbGQ7IGVsOyBlbCA9IGVsLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsLm5vZGVUeXBlID09IDEgLyogRWxlbWVudCAqLykge1xuICAgICAgICAgICAgICAgICAgICBpc0ZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzKGVsLCBmb3JjZUJyZWFrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtBdEVsZW1lbnQoZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYWdlSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSdyZSBpbiBcIm1hbnVhbCBicmVha3MgbW9kZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpdEVsZW1lbnQoZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEvXig/OnN0YXRpY3xyZWxhdGl2ZSkkLy50ZXN0KGdldFByb3BlcnR5VmFsdWUoZ2V0Q29tcHV0ZWRTdHlsZShlbCksIFwicG9zaXRpb25cIikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgZmFsbCA9IGZhbGxzT25NYXJnaW4oZWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmFsbCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50IHN0YXJ0cyBvbiBuZXh0IHBhZ2UsIGJyZWFrIGJlZm9yZSBhbnl3YXkuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha0F0RWxlbWVudChlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmFsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxlbWVudHMgZW5kcyB1cCBvbiBuZXh0IHBhZ2UsIG9yIHBvc3NpYmx5IGRvZXNuJ3QgZml0IG9uIGEgcGFnZSBhdFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxsLiAgYnJlYWsgYmVmb3JlIGl0IGFueXdheSBpZiBpdCdzIGFuIDxpbWc+IG9yIDx0cj4sIG90aGVyd2lzZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXR0ZW1wdCB0byBzcGxpdC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZWVwVG9nZXRoZXIoZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtBdEVsZW1lbnQoZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxpdEVsZW1lbnQoZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXRFbGVtZW50KGVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlbC5ub2RlVHlwZSA9PSAzIC8qIFRleHQgKi8gJiYgcGFnZUhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpdFRleHQoZWwsIGlzRmlyc3QpO1xuICAgICAgICAgICAgICAgICAgICBpc0ZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRqdXN0ID0gc2F2ZUFkanVzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZpcnN0SW5QYXJlbnQoZWwpIHtcbiAgICAgICAgICAgIHZhciBwID0gZWwucGFyZW50Tm9kZSwgZmlyc3QgPSBwLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBpZiAoZWwgPT09IGZpcnN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWwgPT09IHAuY2hpbGRyZW5bMF0pIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3Qubm9kZVR5cGUgPT0gNyAvKiBjb21tZW50ICovIHx8XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0Lm5vZGVUeXBlID09IDggLyogcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiAqLykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0Lm5vZGVUeXBlID09IDMgLyogdGV4dCAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3aGl0ZXNwYWNlIG9ubHkgd2UgY2FuIHByb2JhYmx5IGNvbnNpZGVyIGl0J3MgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEvXFxTLy50ZXN0KGZpcnN0LmRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGJyZWFrQXRFbGVtZW50KGVsKSB7XG4gICAgICAgICAgICBpZiAoZWwubm9kZVR5cGUgPT0gMSAmJiBlbCAhPT0gY29weSAmJiBmaXJzdEluUGFyZW50KGVsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBicmVha0F0RWxlbWVudChlbC5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0YWJsZSwgY29sZ3JvdXAsIHRoZWFkLCBncmlkLCBncmlkSGVhZDtcbiAgICAgICAgICAgIHRhYmxlID0gY2xvc2VzdChlbCwgXCJ0YWJsZVwiKTtcbiAgICAgICAgICAgIGNvbGdyb3VwID0gdGFibGUgJiYgdGFibGUucXVlcnlTZWxlY3RvcihcImNvbGdyb3VwXCIpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVwZWF0SGVhZGVycykge1xuICAgICAgICAgICAgICAgIHRoZWFkID0gdGFibGUgJiYgdGFibGUucXVlcnlTZWxlY3RvcihcInRoZWFkXCIpO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgYnJlYWsgcGFnZSBpbiBhIEtlbmRvIEdyaWQsIHJlcGVhdCBpdHMgaGVhZGVyLiAgVGhpcyB1Z2x5IGhhY2sgaXNcbiAgICAgICAgICAgICAgICAvLyBuZWNlc3NhcnkgYmVjYXVzZSBhIHNjcm9sbGFibGUgZ3JpZCB3aWxsIGtlZXAgdGhlIGhlYWRlciBpbiBhIHNlcGFyYXRlXG4gICAgICAgICAgICAgICAgLy8gPHRhYmxlPiBlbGVtZW50IGZyb20gaXRzIGNvbnRlbnQuXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBYWFg6IFRoaXMgaXMgbGlrZWx5IHRvIGJyZWFrIGFzIHNvb24gYXMgdGhlIHdpZGdldCBIVE1MIGlzIG1vZGlmaWVkLlxuICAgICAgICAgICAgICAgIGdyaWQgPSBjbG9zZXN0KGVsLCBcIi5rLWdyaWQuay13aWRnZXRcIik7XG4gICAgICAgICAgICAgICAgaWYgKGdyaWQgJiYgZ3JpZC5xdWVyeVNlbGVjdG9yKFwiLmstYXV0by1zY3JvbGxhYmxlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyaWRIZWFkID0gZ3JpZC5xdWVyeVNlbGVjdG9yKFwiLmstZ3JpZC1oZWFkZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBhZ2UgPSBtYWtlUGFnZSgpO1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShjb3B5KTtcbiAgICAgICAgICAgIHJhbmdlLnNldEVuZEJlZm9yZShlbCk7XG4gICAgICAgICAgICBwYWdlLmFwcGVuZENoaWxkKHJhbmdlLmV4dHJhY3RDb250ZW50cygpKTtcbiAgICAgICAgICAgIGNvcHkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocGFnZSwgY29weSk7XG4gICAgICAgICAgICBwcmV2ZW50QnVsbGV0T25MaXN0SXRlbShlbC5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIGlmICh0YWJsZSkge1xuICAgICAgICAgICAgICAgIHRhYmxlID0gY2xvc2VzdChlbCwgXCJ0YWJsZVwiKTsgLy8gdGhhdCdzIHRoZSA8dGFibGU+IG9uIG5leHQgcGFnZSFcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZXBlYXRIZWFkZXJzICYmIHRoZWFkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydEJlZm9yZSh0aGVhZC5jbG9uZU5vZGUodHJ1ZSksIHRhYmxlLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29sZ3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0QmVmb3JlKGNvbGdyb3VwLmNsb25lTm9kZSh0cnVlKSwgdGFibGUuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucmVwZWF0SGVhZGVycyAmJiBncmlkSGVhZCkge1xuICAgICAgICAgICAgICAgIGdyaWQgPSBjbG9zZXN0KGVsLCBcIi5rLWdyaWQuay13aWRnZXRcIik7XG4gICAgICAgICAgICAgICAgZ3JpZC5pbnNlcnRCZWZvcmUoZ3JpZEhlYWQuY2xvbmVOb2RlKHRydWUpLCBncmlkLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZVBhZ2UoKSB7XG4gICAgICAgICAgICB2YXIgcGFnZSA9IGRvYy5jcmVhdGVFbGVtZW50KFwiS0VORE8tUERGLVBBR0VcIik7XG4gICAgICAgICAgICBzZXRDU1MocGFnZSwge1xuICAgICAgICAgICAgICAgIGRpc3BsYXkgIDogXCJibG9ja1wiLFxuICAgICAgICAgICAgICAgIGJveFNpemluZzogXCJjb250ZW50LWJveFwiLFxuICAgICAgICAgICAgICAgIHdpZHRoICAgIDogcGFnZVdpZHRoID8gKHBhZ2VXaWR0aCArIFwicHhcIikgOiBcImF1dG9cIixcbiAgICAgICAgICAgICAgICBwYWRkaW5nICA6IChtYXJnaW4udG9wICsgXCJweCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLnJpZ2h0ICsgXCJweCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLmJvdHRvbSArIFwicHggXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi5sZWZ0ICsgXCJweFwiKSxcblxuICAgICAgICAgICAgICAgIC8vIGFsbG93IGFic29sdXRlbHkgcG9zaXRpb25lZCBlbGVtZW50cyB0byBiZSByZWxhdGl2ZSB0byBjdXJyZW50IHBhZ2VcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA6IFwicmVsYXRpdmVcIixcblxuICAgICAgICAgICAgICAgIC8vIHdpdGhvdXQgdGhlIGZvbGxvd2luZyB3ZSBtaWdodCBhZmZlY3QgbGF5b3V0IG9mIHN1YnNlcXVlbnQgcGFnZXNcbiAgICAgICAgICAgICAgICBoZWlnaHQgICA6IHBhZ2VIZWlnaHQgPyAocGFnZUhlaWdodCArIFwicHhcIikgOiBcImF1dG9cIixcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA6IHBhZ2VIZWlnaHQgfHwgcGFnZVdpZHRoID8gXCJoaWRkZW5cIiA6IFwidmlzaWJsZVwiLFxuICAgICAgICAgICAgICAgIGNsZWFyICAgIDogXCJib3RoXCJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBkZWJ1Z1xuICAgICAgICAgICAgLy8gJChcIjxkaXY+XCIpLmNzcyh7XG4gICAgICAgICAgICAvLyAgICAgcG9zaXRpb24gIDogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgLy8gICAgIGxlZnQgICAgICA6IG1hcmdpbi5sZWZ0LFxuICAgICAgICAgICAgLy8gICAgIHRvcCAgICAgICA6IG1hcmdpbi50b3AsXG4gICAgICAgICAgICAvLyAgICAgd2lkdGggICAgIDogcGFnZVdpZHRoLFxuICAgICAgICAgICAgLy8gICAgIGhlaWdodCAgICA6IHBhZ2VIZWlnaHQsXG4gICAgICAgICAgICAvLyAgICAgYm94U2l6aW5nIDogXCJib3JkZXItYm94XCIsXG4gICAgICAgICAgICAvLyAgICAgYmFja2dyb3VuZDogXCJyZ2JhKDI1NSwgMjU1LCAwLCAwLjUpXCJcbiAgICAgICAgICAgIC8vICAgICAvL2JvcmRlciAgICA6IFwiMXB4IHNvbGlkIHJlZFwiXG4gICAgICAgICAgICAvLyB9KS5hcHBlbmRUbyhwYWdlKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5wYWdlQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgcGFnZS5jbGFzc05hbWUgPSBvcHRpb25zLnBhZ2VDbGFzc05hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYWdlcy5wdXNoKHBhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmYWxsc09uTWFyZ2luKHRoaW5nKSB7XG4gICAgICAgICAgICB2YXIgYm94ID0gdGhpbmcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBpZiAoYm94LndpZHRoID09PSAwIHx8IGJveC5oZWlnaHQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBJJ2Qgc2F5IGFuIGVsZW1lbnQgd2l0aCBkaW1lbnNpb25zIHplcm8gZml0cyBvbiBjdXJyZW50IHBhZ2UuXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdG9wID0gY29weS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgICAgICB2YXIgYXZhaWxhYmxlID0gcGFnZUhlaWdodCAtIGFkanVzdDtcbiAgICAgICAgICAgIHJldHVybiAoYm94LmhlaWdodCA+IGF2YWlsYWJsZSkgPyAzXG4gICAgICAgICAgICAgICAgOiAoYm94LnRvcCAtIHRvcCA+IGF2YWlsYWJsZSkgPyAxXG4gICAgICAgICAgICAgICAgOiAoYm94LmJvdHRvbSAtIHRvcCA+IGF2YWlsYWJsZSkgPyAyXG4gICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3BsaXRUZXh0KG5vZGUsIGlzRmlyc3QpIHtcbiAgICAgICAgICAgIGlmICghL1xcUy8udGVzdChub2RlLmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbGVuID0gbm9kZS5kYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IGRvYy5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xuICAgICAgICAgICAgdmFyIGZhbGwgPSBmYWxsc09uTWFyZ2luKHJhbmdlKTtcbiAgICAgICAgICAgIGlmICghZmFsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjsgICAgIC8vIHRoZSB3aG9sZSB0ZXh0IGZpdHMgb24gY3VycmVudCBwYWdlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBuZXh0bm9kZSA9IG5vZGU7XG4gICAgICAgICAgICBpZiAoZmFsbCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RhcnRzIG9uIG5leHQgcGFnZSwgYnJlYWsgYmVmb3JlIGFueXdheS5cbiAgICAgICAgICAgICAgICBpZiAoaXNGaXJzdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBhdm9pZCBsZWF2aW5nIGFuIGVtcHR5IDxwPiwgPGxpPiwgZXRjLiBvbiBwcmV2aW91cyBwYWdlLlxuICAgICAgICAgICAgICAgICAgICBicmVha0F0RWxlbWVudChub2RlLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrQXRFbGVtZW50KG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiBmaW5kRU9QKG1pbiwgcG9zLCBtYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIHBvcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtaW4gPT0gcG9zIHx8IHBvcyA9PSBtYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZhbGxzT25NYXJnaW4ocmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmluZEVPUChtaW4sIChtaW4gKyBwb3MpID4+IDEsIHBvcyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmluZEVPUChwb3MsIChwb3MgKyBtYXgpID4+IDEsIG1heCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSgwLCBsZW4gPj4gMSwgbGVuKTtcblxuICAgICAgICAgICAgICAgIGlmICghL1xcUy8udGVzdChyYW5nZS50b1N0cmluZygpKSAmJiBpc0ZpcnN0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGF2b2lkIGxlYXZpbmcgYW4gZW1wdHkgPHA+LCA8bGk+LCBldGMuIG9uIHByZXZpb3VzIHBhZ2UuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrQXRFbGVtZW50KG5vZGUucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBvbmx5IG5lZWRlZCBmb3IgSUUsIGJ1dCBpdCBmZWVscyBjbGVhbmVyIHRvIGRvIGl0IGFueXdheS4gIFdpdGhvdXRcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQsIElFIHdpbGwgdHJ1bmNhdGUgYSB2ZXJ5IGxvbmcgdGV4dCAocGxheWdyb3VuZC9wZGYtbG9uZy10ZXh0LTIuaHRtbCkuXG4gICAgICAgICAgICAgICAgICAgIG5leHRub2RlID0gbm9kZS5zcGxpdFRleHQocmFuZ2UuZW5kT2Zmc2V0KTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZSA9IG1ha2VQYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKGNvcHkpO1xuICAgICAgICAgICAgICAgICAgICBwYWdlLmFwcGVuZENoaWxkKHJhbmdlLmV4dHJhY3RDb250ZW50cygpKTtcbiAgICAgICAgICAgICAgICAgICAgY29weS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwYWdlLCBjb3B5KTtcbiAgICAgICAgICAgICAgICAgICAgcHJldmVudEJ1bGxldE9uTGlzdEl0ZW0obmV4dG5vZGUucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzcGxpdFRleHQobmV4dG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcHJldmVudEJ1bGxldE9uTGlzdEl0ZW0oZWwpIHtcbiAgICAgICAgICAgIC8vIHNldCBhIGhpbnQgb24gY29udGludWVkIExJIGVsZW1lbnRzLCB0byB0ZWxsIHRoZVxuICAgICAgICAgICAgLy8gcmVuZGVyZXIgbm90IHRvIGRyYXcgdGhlIGJ1bGxldCBhZ2Fpbi5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLXVpLWNvcmUvaXNzdWVzLzI3MzJcbiAgICAgICAgICAgIHZhciBsaSA9IGNsb3Nlc3QoZWwsIFwibGlcIik7XG4gICAgICAgICAgICBpZiAobGkpIHtcbiAgICAgICAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoXCJrZW5kby1uby1idWxsZXRcIiwgXCIxXCIpO1xuICAgICAgICAgICAgICAgIHByZXZlbnRCdWxsZXRPbkxpc3RJdGVtKGxpLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmRyYXdET00uZ2V0Rm9udEZhY2VzID0gZ2V0Rm9udEZhY2VzO1xuXG4vLyBUaGlzIGlzIG5lZWRlZCBmb3IgdGhlIFNwcmVhZHNoZWV0IHByaW50IGZ1bmN0aW9uYWxpdHkuICBTaW5jZVxuLy8gdGhlcmUgd2Ugb25seSBuZWVkIHRvIGRyYXcgdGV4dCwgdGhpcyBjdXRzIHRocm91Z2ggdGhlIGNlcmVtb255XG4vLyBvZiBkcmF3RE9NL3JlbmRlckVsZW1lbnQgYW5kIHJlbmRlcnMgdGhlIHRleHQgbm9kZSBkaXJlY3RseS5cbmRyYXdET00uZHJhd1RleHQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIGdyb3VwID0gbmV3IEdyb3VwKCk7XG4gICAgbm9kZUluZm8uX2NsaXBib3ggPSBmYWxzZTtcbiAgICBub2RlSW5mby5fbWF0cml4ID0gZ2VvLk1hdHJpeC51bml0KCk7XG4gICAgbm9kZUluZm8uX3N0YWNraW5nQ29udGV4dCA9IHtcbiAgICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgICAgZ3JvdXA6IGdyb3VwXG4gICAgfTtcbiAgICBwdXNoTm9kZUluZm8oZWxlbWVudCwgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSwgZ3JvdXApO1xuICAgIGlmIChlbGVtZW50LmZpcnN0Q2hpbGQubm9kZVR5cGUgPT0gMyAvKiBUZXh0ICovKSB7XG4gICAgICAgIC8vIGF2b2lkIHRoZSBwZW5hbHR5IG9mIHJlbmRlckVsZW1lbnRcbiAgICAgICAgcmVuZGVyVGV4dChlbGVtZW50LCBlbGVtZW50LmZpcnN0Q2hpbGQsIGdyb3VwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBfcmVuZGVyRWxlbWVudChlbGVtZW50LCBncm91cCk7XG4gICAgfVxuICAgIHBvcE5vZGVJbmZvKCk7XG4gICAgcmV0dXJuIGdyb3VwO1xufTtcblxudmFyIHBhcnNlQmFja2dyb3VuZEltYWdlID0gKGZ1bmN0aW9uKCl7XG4gICAgdmFyIHRva19saW5lYXJfZ3JhZGllbnQgID0gL14oKC13ZWJraXQtfC1tb3otfC1vLXwtbXMtKT9saW5lYXItZ3JhZGllbnRcXHMqKVxcKC87XG4gICAgLy92YXIgdG9rX3JhZGlhbF9ncmFkaWVudCAgPSAvXigoLXdlYmtpdC18LW1vei18LW8tfC1tcy0pP3JhZGlhbC1ncmFkaWVudFxccyopXFwoLztcbiAgICB2YXIgdG9rX3BlcmNlbnQgICAgICAgICAgPSAvXihbLTAtOS5dKyUpLztcbiAgICB2YXIgdG9rX2xlbmd0aCAgICAgICAgICAgPSAvXihbLTAtOS5dK3B4KS87XG4gICAgdmFyIHRva19rZXl3b3JkICAgICAgICAgID0gL14obGVmdHxyaWdodHx0b3B8Ym90dG9tfHRvfGNlbnRlcilcXFcvO1xuICAgIHZhciB0b2tfYW5nbGUgICAgICAgICAgICA9IC9eKFstMC05Ll0rKGRlZ3xncmFkfHJhZHx0dXJuKXwwKS87XG4gICAgdmFyIHRva193aGl0ZXNwYWNlICAgICAgID0gL14oXFxzKykvO1xuICAgIHZhciB0b2tfcG9wZW4gICAgICAgICAgICA9IC9eKFxcKCkvO1xuICAgIHZhciB0b2tfcGNsb3NlICAgICAgICAgICA9IC9eKFxcKSkvO1xuICAgIHZhciB0b2tfY29tbWEgICAgICAgICAgICA9IC9eKCwpLztcbiAgICB2YXIgdG9rX3VybCAgICAgICAgICAgICAgPSAvXih1cmwpXFwoLztcbiAgICB2YXIgdG9rX2NvbnRlbnQgICAgICAgICAgPSAvXiguKj8pXFwpLztcblxuICAgIHZhciBjYWNoZTEgPSB7fSwgY2FjaGUyID0ge307XG5cbiAgICBmdW5jdGlvbiBwYXJzZShpbnB1dCkge1xuICAgICAgICB2YXIgb3JpZyA9IGlucHV0O1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkoY2FjaGUxLCBvcmlnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlMVtvcmlnXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBza2lwX3dzKCkge1xuICAgICAgICAgICAgdmFyIG0gPSB0b2tfd2hpdGVzcGFjZS5leGVjKGlucHV0KTtcbiAgICAgICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5zdWJzdHIobVsxXS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlYWQodG9rZW4pIHtcbiAgICAgICAgICAgIHNraXBfd3MoKTtcbiAgICAgICAgICAgIHZhciBtID0gdG9rZW4uZXhlYyhpbnB1dCk7XG4gICAgICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyKG1bMV0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbVsxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRfc3RvcCgpIHtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IHV0aWxzX3BhcnNlQ29sb3IoaW5wdXQsIHRydWUpO1xuICAgICAgICAgICAgdmFyIGxlbmd0aCwgcGVyY2VudDtcbiAgICAgICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgICAgICAgIGxldCBtYXRjaCA9XG4gICAgICAgICAgICAgICAgICAgIC9eI1swLTlhLWZdKy9pLmV4ZWMoaW5wdXQpIHx8XG4gICAgICAgICAgICAgICAgICAgIC9ecmdiYT9cXCguKj9cXCkvaS5leGVjKGlucHV0KSB8fFxuICAgICAgICAgICAgICAgICAgICAvXi4uKj9cXGIvLmV4ZWMoaW5wdXQpOyAvLyBtYXliZSBuYW1lZCBjb2xvclxuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgY29sb3IgPSBjb2xvci50b1JHQigpO1xuICAgICAgICAgICAgICAgIGlmICghKGxlbmd0aCA9IHJlYWQodG9rX2xlbmd0aCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlcmNlbnQgPSByZWFkKHRva19wZXJjZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY29sb3I6IGNvbG9yLCBsZW5ndGg6IGxlbmd0aCwgcGVyY2VudDogcGVyY2VudCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVhZF9saW5lYXJfZ3JhZGllbnQocHJvcE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBhbmdsZTtcbiAgICAgICAgICAgIHZhciB0bzEsIHRvMjtcbiAgICAgICAgICAgIHZhciBzdG9wcyA9IFtdO1xuICAgICAgICAgICAgdmFyIHJldmVyc2UgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKHJlYWQodG9rX3BvcGVuKSkge1xuICAgICAgICAgICAgICAgIC8vIDEuIFsgPGFuZ2xlPiB8fCB0byA8c2lkZS1vci1jb3JuZXI+LCBdP1xuICAgICAgICAgICAgICAgIGFuZ2xlID0gcmVhZCh0b2tfYW5nbGUpO1xuICAgICAgICAgICAgICAgIGlmIChhbmdsZSA9PSBcIjBcIikge1xuICAgICAgICAgICAgICAgICAgICBhbmdsZSA9IFwiMGRlZ1wiOyAvLyBFZGdlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhbmdsZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmdsZSA9IHBhcnNlQW5nbGUoYW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICByZWFkKHRva19jb21tYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0bzEgPSByZWFkKHRva19rZXl3b3JkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvMSA9PSBcInRvXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvMSA9IHJlYWQodG9rX2tleXdvcmQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRvMSAmJiAvXi0vLnRlc3QocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXZlcnNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0bzIgPSByZWFkKHRva19rZXl3b3JkKTtcbiAgICAgICAgICAgICAgICAgICAgcmVhZCh0b2tfY29tbWEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICgvLW1vei0vLnRlc3QocHJvcE5hbWUpICYmIGFuZ2xlID09IG51bGwgJiYgdG8xID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSByZWFkKHRva19wZXJjZW50KSwgeSA9IHJlYWQodG9rX3BlcmNlbnQpO1xuICAgICAgICAgICAgICAgICAgICByZXZlcnNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHggPT0gXCIwJVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bzEgPSBcImxlZnRcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4ID09IFwiMTAwJVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bzEgPSBcInJpZ2h0XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHkgPT0gXCIwJVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bzIgPSBcInRvcFwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHkgPT0gXCIxMDAlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvMiA9IFwiYm90dG9tXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVhZCh0b2tfY29tbWEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIDIuIGNvbG9yIHN0b3BzXG4gICAgICAgICAgICAgICAgd2hpbGUgKGlucHV0ICYmICFyZWFkKHRva19wY2xvc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9wID0gcmVhZF9zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3RvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RvcHMucHVzaChzdG9wKTtcbiAgICAgICAgICAgICAgICAgICAgcmVhZCh0b2tfY29tbWEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgICAgOiBcImxpbmVhclwiLFxuICAgICAgICAgICAgICAgICAgICBhbmdsZSAgIDogYW5nbGUsXG4gICAgICAgICAgICAgICAgICAgIHRvICAgICAgOiB0bzEgJiYgdG8yID8gdG8xICsgXCIgXCIgKyB0bzIgOiB0bzEgPyB0bzEgOiB0bzIgPyB0bzIgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzdG9wcyAgIDogc3RvcHMsXG4gICAgICAgICAgICAgICAgICAgIHJldmVyc2UgOiByZXZlcnNlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRfdXJsKCkge1xuICAgICAgICAgICAgaWYgKHJlYWQodG9rX3BvcGVuKSkge1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSByZWFkKHRva19jb250ZW50KTtcbiAgICAgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXlsnXCJdK3xbXCInXSskL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgIHJlYWQodG9rX3BjbG9zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJ1cmxcIiwgdXJsOiB1cmwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b2s7XG5cbiAgICAgICAgaWYgKCh0b2sgPSByZWFkKHRva19saW5lYXJfZ3JhZGllbnQpKSkge1xuICAgICAgICAgICAgdG9rID0gcmVhZF9saW5lYXJfZ3JhZGllbnQodG9rKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgodG9rID0gcmVhZCh0b2tfdXJsKSkpIHtcbiAgICAgICAgICAgIHRvayA9IHJlYWRfdXJsKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKGNhY2hlMVtvcmlnXSA9IHRvayB8fCB7IHR5cGU6IFwibm9uZVwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkoY2FjaGUyLCBpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZTJbaW5wdXRdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoY2FjaGUyW2lucHV0XSA9IHNwbGl0UHJvcGVydHkoaW5wdXQpLm1hcChwYXJzZSkpO1xuICAgIH07XG59KSgpO1xuXG52YXIgc3BsaXRQcm9wZXJ0eSA9IChmdW5jdGlvbigpe1xuICAgIHZhciBjYWNoZSA9IHt9O1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCwgc2VwYXJhdG9yKSB7XG4gICAgICAgIGlmICghc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSAvXlxccyosXFxzKi87XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2FjaGVLZXkgPSBpbnB1dCArIHNlcGFyYXRvcjtcblxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkoY2FjaGUsIGNhY2hlS2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlW2NhY2hlS2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXQgPSBbXTtcbiAgICAgICAgdmFyIGxhc3QgPSAwLCBwb3MgPSAwO1xuICAgICAgICB2YXIgaW5fcGFyZW4gPSAwO1xuICAgICAgICB2YXIgaW5fc3RyaW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBtO1xuXG4gICAgICAgIGZ1bmN0aW9uIGxvb2tpbmdfYXQocngpIHtcbiAgICAgICAgICAgIHJldHVybiAobSA9IHJ4LmV4ZWMoaW5wdXQuc3Vic3RyKHBvcykpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csIFwiXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKHBvcyA8IGlucHV0Lmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKCFpbl9zdHJpbmcgJiYgbG9va2luZ19hdCgvXltcXChcXFtcXHtdLykpIHtcbiAgICAgICAgICAgICAgICBpbl9wYXJlbisrO1xuICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWluX3N0cmluZyAmJiBsb29raW5nX2F0KC9eW1xcKVxcXVxcfV0vKSkge1xuICAgICAgICAgICAgICAgIGluX3BhcmVuLS07XG4gICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghaW5fc3RyaW5nICYmIGxvb2tpbmdfYXQoL15bXFxcIlxcJ10vKSkge1xuICAgICAgICAgICAgICAgIGluX3N0cmluZyA9IG1bMF07XG4gICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbl9zdHJpbmcgPT0gXCInXCIgJiYgbG9va2luZ19hdCgvXlxcXFxcXCcvKSkge1xuICAgICAgICAgICAgICAgIHBvcyArPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5fc3RyaW5nID09ICdcIicgJiYgbG9va2luZ19hdCgvXlxcXFxcXFwiLykpIHtcbiAgICAgICAgICAgICAgICBwb3MgKz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGluX3N0cmluZyA9PSBcIidcIiAmJiBsb29raW5nX2F0KC9eXFwnLykpIHtcbiAgICAgICAgICAgICAgICBpbl9zdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGluX3N0cmluZyA9PSAnXCInICYmIGxvb2tpbmdfYXQoL15cXFwiLykpIHtcbiAgICAgICAgICAgICAgICBpbl9zdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxvb2tpbmdfYXQoc2VwYXJhdG9yKSkge1xuICAgICAgICAgICAgICAgIGlmICghaW5fc3RyaW5nICYmICFpbl9wYXJlbiAmJiBwb3MgPiBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKHRyaW0oaW5wdXQuc3Vic3RyaW5nKGxhc3QsIHBvcykpKTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IHBvcyArIG1bMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwb3MgKz0gbVswXS5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdCA8IHBvcykge1xuICAgICAgICAgICAgcmV0LnB1c2godHJpbShpbnB1dC5zdWJzdHJpbmcobGFzdCwgcG9zKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoY2FjaGVbY2FjaGVLZXldID0gcmV0KTtcbiAgICB9O1xufSkoKTtcblxudmFyIGdldEZvbnRVUkwgPSAoZnVuY3Rpb24oY2FjaGUpe1xuICAgIHJldHVybiBmdW5jdGlvbihlbCl7XG4gICAgICAgIC8vIFhYWDogZm9yIElFIHdlIGdldCBoZXJlIHRoZSB3aG9sZSBjc3NUZXh0IG9mIHRoZSBydWxlLFxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBjb21wdXRlZFN0eWxlLnNyYyBpcyBlbXB0eS4gIE5leHQgdGltZSB3ZSBuZWVkXG4gICAgICAgIC8vIHRvIGZpeCB0aGVzZSByZWdleHBzIHdlIGJldHRlciB3cml0ZSBhIENTUyBwYXJzZXIuIDotXFxcbiAgICAgICAgdmFyIHVybCA9IGNhY2hlW2VsXTtcbiAgICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgICAgIHZhciBtO1xuICAgICAgICAgICAgaWYgKChtID0gL3VybFxcKChbJ1wiXT8pKFteJ1wiKV0qPylcXDFcXClcXHMrZm9ybWF0XFwoKFsnXCJdPyl0cnVldHlwZVxcM1xcKS8uZXhlYyhlbCkpKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gY2FjaGVbZWxdID0gbVsyXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKG0gPSAvdXJsXFwoKFsnXCJdPykoW14nXCIpXSo/XFwudHRmKVxcMVxcKS8uZXhlYyhlbCkpKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gY2FjaGVbZWxdID0gbVsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH07XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxudmFyIGdldEZvbnRIZWlnaHQgPSAoZnVuY3Rpb24oY2FjaGUpe1xuICAgIHJldHVybiBmdW5jdGlvbihmb250KSB7XG4gICAgICAgIHZhciBoZWlnaHQgPSBjYWNoZVtmb250XTtcbiAgICAgICAgaWYgKGhlaWdodCA9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWlnaHQgPSBjYWNoZVtmb250XSA9IG1lYXN1cmVUZXh0KFwiTWFwcVwiLCB7IGZvbnQ6IGZvbnQgfSkuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgfTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5mdW5jdGlvbiBnZXRGb250RmFjZXMoZG9jKSB7XG4gICAgaWYgKGRvYyA9PSBudWxsKSB7XG4gICAgICAgIGRvYyA9IGRvY3VtZW50O1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2Muc3R5bGVTaGVldHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgZG9TdHlsZXNoZWV0KGRvYy5zdHlsZVNoZWV0c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gICAgZnVuY3Rpb24gZG9TdHlsZXNoZWV0KHNzKSB7XG4gICAgICAgIGlmIChzcykge1xuICAgICAgICAgICAgdmFyIHJ1bGVzID0gbnVsbDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcnVsZXMgPSBzcy5jc3NSdWxlcztcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7fVxuICAgICAgICAgICAgaWYgKHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgYWRkUnVsZXMoc3MsIHJ1bGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBmaW5kRm9udHMocnVsZSkge1xuICAgICAgICB2YXIgc3JjID0gZ2V0UHJvcGVydHlWYWx1ZShydWxlLnN0eWxlLCBcInNyY1wiKTtcbiAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgcmV0dXJuIHNwbGl0UHJvcGVydHkoc3JjKS5yZWR1Y2UoZnVuY3Rpb24oYSwgZWwpe1xuICAgICAgICAgICAgICAgIHZhciBmb250ID0gZ2V0Rm9udFVSTChlbCk7XG4gICAgICAgICAgICAgICAgaWYgKGZvbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYS5wdXNoKGZvbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sIFtdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEludGVybmV0IEV4cGxvcmVyXG4gICAgICAgICAgICAvLyBYWFg6IHRoaXMgaXMgZ3Jvc3MuICBzaG91bGQgd29yayB0aG91Z2ggZm9yIHZhbGlkIENTUy5cbiAgICAgICAgICAgIHZhciBmb250ID0gZ2V0Rm9udFVSTChydWxlLmNzc1RleHQpO1xuICAgICAgICAgICAgcmV0dXJuIGZvbnQgPyBbIGZvbnQgXSA6IFtdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZFJ1bGVzKHN0eWxlU2hlZXQsIHJ1bGVzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciByID0gcnVsZXNbaV07XG4gICAgICAgICAgICBzd2l0Y2ggKHIudHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIDM6ICAgICAgIC8vIENTU0ltcG9ydFJ1bGVcbiAgICAgICAgICAgICAgICBkb1N0eWxlc2hlZXQoci5zdHlsZVNoZWV0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA1OiAgICAgICAvLyBDU1NGb250RmFjZVJ1bGVcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGUgID0gci5zdHlsZTtcbiAgICAgICAgICAgICAgICB2YXIgZmFtaWx5ID0gc3BsaXRQcm9wZXJ0eShnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImZvbnQtZmFtaWx5XCIpKTtcbiAgICAgICAgICAgICAgICB2YXIgYm9sZCAgID0gL14oWzU2Nzg5XTAwfGJvbGQpJC9pLnRlc3QoZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJmb250LXdlaWdodFwiKSk7XG4gICAgICAgICAgICAgICAgdmFyIGl0YWxpYyA9IFwiaXRhbGljXCIgPT0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJmb250LXN0eWxlXCIpO1xuICAgICAgICAgICAgICAgIHZhciBzcmMgICAgPSBmaW5kRm9udHMocik7XG4gICAgICAgICAgICAgICAgaWYgKHNyYy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFJ1bGUoc3R5bGVTaGVldCwgZmFtaWx5LCBib2xkLCBpdGFsaWMsIHNyY1swXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZFJ1bGUoc3R5bGVTaGVldCwgbmFtZXMsIGJvbGQsIGl0YWxpYywgdXJsKSB7XG4gICAgICAgIC8vIFdlIGdldCBmdWxsIHJlc29sdmVkIGFic29sdXRlIFVSTHMgaW4gQ2hyb21lLCBidXQgc2FkbHlcbiAgICAgICAgLy8gbm90IGluIEZpcmVmb3guXG4gICAgICAgIGlmICghKC9eZGF0YTovaS50ZXN0KHVybCkpKSB7XG4gICAgICAgICAgICBpZiAoISgvXlteXFwvOl0rOlxcL1xcLy8udGVzdCh1cmwpIHx8IC9eXFwvLy50ZXN0KHVybCkpKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gU3RyaW5nKHN0eWxlU2hlZXQuaHJlZikucmVwbGFjZSgvW15cXC9dKiQvLCBcIlwiKSArIHVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpe1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvXihbJ1wiXT8pKC4qPylcXDEkLywgXCIkMlwiKTsgLy8gaXQncyBxdW90ZWRcbiAgICAgICAgICAgIGlmIChib2xkKSB7XG4gICAgICAgICAgICAgICAgbmFtZSArPSBcInxib2xkXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRhbGljKSB7XG4gICAgICAgICAgICAgICAgbmFtZSArPSBcInxpdGFsaWNcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHVybDtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIGtleSkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xufVxuXG5mdW5jdGlvbiBnZXRDb3VudGVyKG5hbWUpIHtcbiAgICBuYW1lID0gXCJfY291bnRlcl9cIiArIG5hbWU7XG4gICAgcmV0dXJuIG5vZGVJbmZvW25hbWVdO1xufVxuXG5mdW5jdGlvbiBnZXRBbGxDb3VudGVycyhuYW1lKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdLCBwID0gbm9kZUluZm87XG4gICAgbmFtZSA9IFwiX2NvdW50ZXJfXCIgKyBuYW1lO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShwLCBuYW1lKSkge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2gocFtuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgICAgcCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcy5yZXZlcnNlKCk7XG59XG5cbmZ1bmN0aW9uIGluY0NvdW50ZXIobmFtZSwgaW5jKSB7XG4gICAgdmFyIHAgPSBub2RlSW5mbztcbiAgICBuYW1lID0gXCJfY291bnRlcl9cIiArIG5hbWU7XG4gICAgd2hpbGUgKHAgJiYgIWhhc093blByb3BlcnR5KHAsIG5hbWUpKSB7XG4gICAgICAgIHAgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocCk7XG4gICAgfVxuICAgIGlmICghcCkge1xuICAgICAgICBwID0gbm9kZUluZm8uX3Jvb3Q7XG4gICAgfVxuICAgIHBbbmFtZV0gPSAocFtuYW1lXSB8fCAwKSArIChpbmMgPT0gbnVsbCA/IDEgOiBpbmMpO1xufVxuXG5mdW5jdGlvbiByZXNldENvdW50ZXIobmFtZSwgdmFsKSB7XG4gICAgbmFtZSA9IFwiX2NvdW50ZXJfXCIgKyBuYW1lO1xuICAgIG5vZGVJbmZvW25hbWVdID0gdmFsID09IG51bGwgPyAwIDogdmFsO1xufVxuXG5mdW5jdGlvbiBkb0NvdW50ZXJzKGEsIGYsIGRlZikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7KSB7XG4gICAgICAgIHZhciBuYW1lID0gYVtpKytdO1xuICAgICAgICB2YXIgdmFsID0gcGFyc2VGbG9hdChhW2ldKTtcbiAgICAgICAgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICAgICAgICAgIGYobmFtZSwgZGVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGYobmFtZSwgdmFsKTtcbiAgICAgICAgICAgICsraTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ291bnRlcnMoc3R5bGUpIHtcbiAgICB2YXIgY291bnRlclJlc2V0ID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJjb3VudGVyLXJlc2V0XCIpO1xuICAgIGlmIChjb3VudGVyUmVzZXQpIHtcbiAgICAgICAgZG9Db3VudGVycyhzcGxpdFByb3BlcnR5KGNvdW50ZXJSZXNldCwgL15cXHMrLyksIHJlc2V0Q291bnRlciwgMCk7XG4gICAgfVxuICAgIHZhciBjb3VudGVySW5jcmVtZW50ID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJjb3VudGVyLWluY3JlbWVudFwiKTtcbiAgICBpZiAoY291bnRlckluY3JlbWVudCkge1xuICAgICAgICBkb0NvdW50ZXJzKHNwbGl0UHJvcGVydHkoY291bnRlckluY3JlbWVudCwgL15cXHMrLyksIGluY0NvdW50ZXIsIDEpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VDb2xvcihzdHIsIGNzcykge1xuICAgIHZhciBjb2xvciA9IHV0aWxzX3BhcnNlQ29sb3Ioc3RyLCB0cnVlKTtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgY29sb3IgPSBjb2xvci50b1JHQigpO1xuICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICBjb2xvciA9IGNvbG9yLnRvQ3NzUmdiYSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbG9yLmEgPT09IDApIHtcbiAgICAgICAgICAgIGNvbG9yID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG59XG5cbmZ1bmN0aW9uIHdoZW5JbWFnZXNBcmVBY3R1YWxseUxvYWRlZChlbGVtZW50cywgY2FsbGJhY2spIHtcbiAgICB2YXIgcGVuZGluZyA9IDA7XG4gICAgZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihlbCl7XG4gICAgICAgIHZhciBpbWFnZXMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiaW1nXCIpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGltYWdlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGltZyA9IGltYWdlc1tpXTtcbiAgICAgICAgICAgIGlmICghaW1nLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgcGVuZGluZysrO1xuICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSBpbWcub25lcnJvciA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgICAgbmV4dCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICBpZiAoLS1wZW5kaW5nIDw9IDApIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNhY2hlSW1hZ2VzKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHVybHMgPSBbXTtcbiAgICBmdW5jdGlvbiBhZGQodXJsKSB7XG4gICAgICAgIGlmICghSU1BR0VfQ0FDSEVbdXJsXSkge1xuICAgICAgICAgICAgSU1BR0VfQ0FDSEVbdXJsXSA9IHRydWU7XG4gICAgICAgICAgICB1cmxzLnB1c2godXJsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBkaXZlKGVsZW1lbnQpe1xuICAgICAgICBpZiAoL15pbWckL2kudGVzdChlbGVtZW50LnRhZ05hbWUpKSB7XG4gICAgICAgICAgICBhZGQoZWxlbWVudC5zcmMpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlQmFja2dyb3VuZEltYWdlKFxuICAgICAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZShcbiAgICAgICAgICAgICAgICBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLCBcImJhY2tncm91bmQtaW1hZ2VcIlxuICAgICAgICAgICAgKVxuICAgICAgICApLmZvckVhY2goZnVuY3Rpb24oYmcpe1xuICAgICAgICAgICAgaWYgKGJnLnR5cGUgPT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgICAgIGFkZChiZy51cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZWxlbWVudC5jaGlsZHJlbikge1xuICAgICAgICAgICAgc2xpY2UoZWxlbWVudC5jaGlsZHJlbikuZm9yRWFjaChkaXZlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGVsZW1lbnQpKSB7XG4gICAgICAgIGVsZW1lbnQuZm9yRWFjaChkaXZlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkaXZlKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIHZhciBjb3VudCA9IHVybHMubGVuZ3RoO1xuICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIGlmICgtLWNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgIG5leHQoKTtcbiAgICB9XG4gICAgdXJscy5mb3JFYWNoKGZ1bmN0aW9uKHVybCl7XG4gICAgICAgIHZhciBpbWcgPSBJTUFHRV9DQUNIRVt1cmxdID0gbmV3IHdpbmRvdy5JbWFnZSgpO1xuICAgICAgICBpZiAoISgvXmRhdGE6L2kudGVzdCh1cmwpKSkge1xuICAgICAgICAgICAgaW1nLmNyb3NzT3JpZ2luID0gXCJBbm9ueW1vdXNcIjtcbiAgICAgICAgfVxuICAgICAgICBpbWcuc3JjID0gdXJsO1xuICAgICAgICBpZiAoaW1nLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbWcub25sb2FkID0gbmV4dDtcbiAgICAgICAgICAgIGltZy5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgSU1BR0VfQ0FDSEVbdXJsXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhbHBoYU51bWVyYWwobikge1xuICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgIGRvIHtcbiAgICAgICAgdmFyIHIgPSBuICUgMjY7XG4gICAgICAgIHJlc3VsdCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyByKSArIHJlc3VsdDtcbiAgICAgICAgbiA9IE1hdGguZmxvb3IobiAvIDI2KTtcbiAgICB9IHdoaWxlIChuID4gMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcHVzaE5vZGVJbmZvKGVsZW1lbnQsIHN0eWxlLCBncm91cCkge1xuICAgIG5vZGVJbmZvID0gT2JqZWN0LmNyZWF0ZShub2RlSW5mbyk7XG4gICAgbm9kZUluZm9bZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCldID0ge1xuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICB9O1xuICAgIHZhciBkZWNvcmF0aW9uID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJ0ZXh0LWRlY29yYXRpb25cIik7XG4gICAgaWYgKGRlY29yYXRpb24gJiYgZGVjb3JhdGlvbiAhPSBcIm5vbmVcIikge1xuICAgICAgICB2YXIgY29sb3IgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImNvbG9yXCIpO1xuICAgICAgICBkZWNvcmF0aW9uLnNwbGl0KC9cXHMrL2cpLmZvckVhY2goZnVuY3Rpb24obmFtZSl7XG4gICAgICAgICAgICBpZiAoIW5vZGVJbmZvW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgbm9kZUluZm9bbmFtZV0gPSBjb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNyZWF0ZXNTdGFja2luZ0NvbnRleHQoc3R5bGUpKSB7XG4gICAgICAgIG5vZGVJbmZvLl9zdGFja2luZ0NvbnRleHQgPSB7XG4gICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgZ3JvdXA6IGdyb3VwXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwb3BOb2RlSW5mbygpIHtcbiAgICBub2RlSW5mbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihub2RlSW5mbyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaXBib3gocGF0aCkge1xuICAgIGlmIChub2RlSW5mby5fY2xpcGJveCAhPSBudWxsKSB7XG4gICAgICAgIHZhciBib3ggPSBwYXRoLmJib3gobm9kZUluZm8uX21hdHJpeCk7XG4gICAgICAgIGlmIChub2RlSW5mby5fY2xpcGJveCkge1xuICAgICAgICAgICAgbm9kZUluZm8uX2NsaXBib3ggPSBnZW8uUmVjdC5pbnRlcnNlY3Qobm9kZUluZm8uX2NsaXBib3gsIGJveCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlSW5mby5fY2xpcGJveCA9IGJveDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZW1wdHlDbGlwYm94KCkge1xuICAgIHZhciBjYiA9IG5vZGVJbmZvLl9jbGlwYm94O1xuICAgIGlmIChjYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY2IpIHtcbiAgICAgICAgcmV0dXJuIGNiLndpZHRoKCkgPT09IDAgfHwgY2IuaGVpZ2h0KCkgPT09IDA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVzU3RhY2tpbmdDb250ZXh0KHN0eWxlKSB7XG4gICAgZnVuY3Rpb24gcHJvcChuYW1lKSB7IHJldHVybiBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBuYW1lKTsgfVxuICAgIGlmIChwcm9wKFwidHJhbnNmb3JtXCIpICE9IFwibm9uZVwiIHx8XG4gICAgICAgIHByb3AoXCJwb3NpdGlvblwiKSAhPSBcInN0YXRpY1wiIHx8XG4gICAgICAgIHByb3AoXCJ6LWluZGV4XCIpICE9IFwiYXV0b1wiIHx8XG4gICAgICAgIHByb3AoXCJvcGFjaXR5XCIpIDwgMSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgcHNldWRvRWx0KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIHBzZXVkb0VsdCB8fCBudWxsKTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgcHJvcCwgZGVmYSkge1xuICAgIHZhciB2YWwgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xuICAgIGlmICh2YWwgPT0gbnVsbCB8fCB2YWwgPT09IFwiXCIpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIud2Via2l0KSB7XG4gICAgICAgICAgICB2YWwgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwiLXdlYmtpdC1cIiArIHByb3AgKTtcbiAgICAgICAgfSBlbHNlIGlmIChicm93c2VyLm1vemlsbGEpIHtcbiAgICAgICAgICAgIHZhbCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCItbW96LVwiICsgcHJvcCApO1xuICAgICAgICB9IGVsc2UgaWYgKGJyb3dzZXIub3BlcmEpIHtcbiAgICAgICAgICAgIHZhbCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoXCItby1cIiArIHByb3ApO1xuICAgICAgICB9IGVsc2UgaWYgKG1pY3Jvc29mdCkge1xuICAgICAgICAgICAgdmFsID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShcIi1tcy1cIiArIHByb3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMiAmJiAodmFsID09IG51bGwgfHwgdmFsID09PSBcIlwiKSkge1xuICAgICAgICByZXR1cm4gZGVmYTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcGxlYXNlU2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgcHJvcCwgdmFsdWUsIGltcG9ydGFudCkge1xuICAgIHN0eWxlLnNldFByb3BlcnR5KHByb3AsIHZhbHVlLCBpbXBvcnRhbnQpO1xuICAgIGlmIChicm93c2VyLndlYmtpdCkge1xuICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShcIi13ZWJraXQtXCIgKyBwcm9wLCB2YWx1ZSwgaW1wb3J0YW50KTtcbiAgICB9IGVsc2UgaWYgKGJyb3dzZXIubW96aWxsYSkge1xuICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShcIi1tb3otXCIgKyBwcm9wLCB2YWx1ZSwgaW1wb3J0YW50KTtcbiAgICB9IGVsc2UgaWYgKGJyb3dzZXIub3BlcmEpIHtcbiAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoXCItby1cIiArIHByb3AsIHZhbHVlLCBpbXBvcnRhbnQpO1xuICAgIH0gZWxzZSBpZiAobWljcm9zb2Z0KSB7XG4gICAgICAgIHN0eWxlLnNldFByb3BlcnR5KFwiLW1zLVwiICsgcHJvcCwgdmFsdWUsIGltcG9ydGFudCk7XG4gICAgICAgIHByb3AgPSBcIm1zXCIgKyBwcm9wLnJlcGxhY2UoLyhefC0pKFthLXpdKS9nLCBmdW5jdGlvbihzLCBwMSwgcDIpe1xuICAgICAgICAgICAgcmV0dXJuIHAxICsgcDIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0eWxlW3Byb3BdID0gdmFsdWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRCb3JkZXIoc3R5bGUsIHNpZGUpIHtcbiAgICBzaWRlID0gXCJib3JkZXItXCIgKyBzaWRlO1xuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIHNpZGUgKyBcIi13aWR0aFwiKSksXG4gICAgICAgIHN0eWxlOiBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBzaWRlICsgXCItc3R5bGVcIiksXG4gICAgICAgIGNvbG9yOiBwYXJzZUNvbG9yKGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIHNpZGUgKyBcIi1jb2xvclwiKSwgdHJ1ZSlcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBzYXZlU3R5bGUoZWxlbWVudCwgZnVuYykge1xuICAgIHZhciBwcmV2ID0gZWxlbWVudC5zdHlsZS5jc3NUZXh0O1xuICAgIHZhciByZXN1bHQgPSBmdW5jKCk7XG4gICAgZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gcHJldjtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRCb3JkZXJSYWRpdXMoc3R5bGUsIHNpZGUpIHtcbiAgICB2YXIgciA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiYm9yZGVyLVwiICsgc2lkZSArIFwiLXJhZGl1c1wiKS5zcGxpdCgvXFxzKy9nKS5tYXAocGFyc2VGbG9hdCk7XG4gICAgaWYgKHIubGVuZ3RoID09IDEpIHtcbiAgICAgICAgci5wdXNoKHJbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gc2FuaXRpemVSYWRpdXMoeyB4OiByWzBdLCB5OiByWzFdIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRDb250ZW50Qm94KGVsZW1lbnQpIHtcbiAgICB2YXIgYm94ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBib3ggPSBpbm5lckJveChib3gsIFwiYm9yZGVyLSotd2lkdGhcIiwgZWxlbWVudCk7XG4gICAgYm94ID0gaW5uZXJCb3goYm94LCBcInBhZGRpbmctKlwiLCBlbGVtZW50KTtcbiAgICByZXR1cm4gYm94O1xufVxuXG5mdW5jdGlvbiBpbm5lckJveChib3gsIHByb3AsIGVsZW1lbnQpIHtcbiAgICB2YXIgc3R5bGUsIHd0LCB3ciwgd2IsIHdsO1xuICAgIGlmICh0eXBlb2YgcHJvcCA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICAgICAgd3QgPSBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIHByb3AucmVwbGFjZShcIipcIiwgXCJ0b3BcIikpKTtcbiAgICAgICAgd3IgPSBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIHByb3AucmVwbGFjZShcIipcIiwgXCJyaWdodFwiKSkpO1xuICAgICAgICB3YiA9IHBhcnNlRmxvYXQoZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgcHJvcC5yZXBsYWNlKFwiKlwiLCBcImJvdHRvbVwiKSkpO1xuICAgICAgICB3bCA9IHBhcnNlRmxvYXQoZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgcHJvcC5yZXBsYWNlKFwiKlwiLCBcImxlZnRcIikpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHByb3AgPT0gXCJudW1iZXJcIikge1xuICAgICAgICB3dCA9IHdyID0gd2IgPSB3bCA9IHByb3A7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHRvcCAgICA6IGJveC50b3AgKyB3dCxcbiAgICAgICAgcmlnaHQgIDogYm94LnJpZ2h0IC0gd3IsXG4gICAgICAgIGJvdHRvbSA6IGJveC5ib3R0b20gLSB3YixcbiAgICAgICAgbGVmdCAgIDogYm94LmxlZnQgKyB3bCxcbiAgICAgICAgd2lkdGggIDogYm94LnJpZ2h0IC0gYm94LmxlZnQgLSB3ciAtIHdsLFxuICAgICAgICBoZWlnaHQgOiBib3guYm90dG9tIC0gYm94LnRvcCAtIHdiIC0gd3RcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm0oc3R5bGUpIHtcbiAgICB2YXIgdHJhbnNmb3JtID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJ0cmFuc2Zvcm1cIik7XG4gICAgaWYgKHRyYW5zZm9ybSA9PSBcIm5vbmVcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG1hdHJpeCA9IC9eXFxzKm1hdHJpeFxcKFxccyooLio/KVxccypcXClcXHMqJC8uZXhlYyh0cmFuc2Zvcm0pO1xuICAgIGlmIChtYXRyaXgpIHtcbiAgICAgICAgdmFyIG9yaWdpbiA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwidHJhbnNmb3JtLW9yaWdpblwiKTtcbiAgICAgICAgbWF0cml4ID0gbWF0cml4WzFdLnNwbGl0KC9cXHMqLFxccyovZykubWFwKHBhcnNlRmxvYXQpO1xuICAgICAgICBvcmlnaW4gPSBvcmlnaW4uc3BsaXQoL1xccysvZykubWFwKHBhcnNlRmxvYXQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWF0cml4OiBtYXRyaXgsXG4gICAgICAgICAgICBvcmlnaW46IG9yaWdpblxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmFkaWFuc1RvRGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuICgoMTgwICogcmFkaWFucykgLyBNYXRoLlBJKSAlIDM2MDtcbn1cblxuZnVuY3Rpb24gcGFyc2VBbmdsZShhbmdsZSkge1xuICAgIHZhciBudW0gPSBwYXJzZUZsb2F0KGFuZ2xlKTtcbiAgICBpZiAoL2dyYWQkLy50ZXN0KGFuZ2xlKSkge1xuICAgICAgICByZXR1cm4gTWF0aC5QSSAqIG51bSAvIDIwMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoL3JhZCQvLnRlc3QoYW5nbGUpKSB7XG4gICAgICAgIHJldHVybiBudW07XG4gICAgfVxuICAgIGVsc2UgaWYgKC90dXJuJC8udGVzdChhbmdsZSkpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguUEkgKiBudW0gKiAyO1xuICAgIH1cbiAgICBlbHNlIGlmICgvZGVnJC8udGVzdChhbmdsZSkpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguUEkgKiBudW0gLyAxODA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2Zvcm0oc2hhcGUsIG0pIHtcbiAgICBtID0gbmV3IGdlby5NYXRyaXgobVswXSwgbVsxXSwgbVsyXSwgbVszXSwgbVs0XSwgbVs1XSk7XG4gICAgc2hhcGUudHJhbnNmb3JtKG0pO1xuICAgIHJldHVybiBtO1xufVxuXG5mdW5jdGlvbiBzZXRDbGlwcGluZyhzaGFwZSwgY2xpcFBhdGgpIHtcbiAgICBzaGFwZS5jbGlwKGNsaXBQYXRoKTtcbn1cblxuZnVuY3Rpb24gYWRkQXJjVG9QYXRoKHBhdGgsIHgsIHksIG9wdGlvbnMpIHtcbiAgICB2YXIgcG9pbnRzID0gbmV3IGdlby5BcmMoWyB4LCB5IF0sIG9wdGlvbnMpLmN1cnZlUG9pbnRzKCksIGkgPSAxO1xuICAgIHdoaWxlIChpIDwgcG9pbnRzLmxlbmd0aCkge1xuICAgICAgICBwYXRoLmN1cnZlVG8ocG9pbnRzW2krK10sIHBvaW50c1tpKytdLCBwb2ludHNbaSsrXSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzYW5pdGl6ZVJhZGl1cyhyKSB7XG4gICAgaWYgKHIueCA8PSAwIHx8IHIueSA8PSAwKSB7XG4gICAgICAgIHIueCA9IHIueSA9IDA7XG4gICAgfVxuICAgIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBhZGp1c3RCb3JkZXJSYWRpdXNGb3JCb3goYm94LCByVEwsIHJUUiwgckJSLCByQkwpIHtcbiAgICAvLyBhZGp1c3QgYm9yZGVyIHJhZGl1c2VzIHN1Y2ggdGhhdCB0aGUgc3VtIG9mIGFkamFjZW50XG4gICAgLy8gcmFkaXVzZXMgaXMgbm90IGJpZ2dlciB0aGFuIHRoZSBsZW5ndGggb2YgdGhlIHNpZGUuXG4gICAgLy8gc2VlbXMgdGhlIGNvcnJlY3QgYWxnb3JpdGhtIGlzIHZhcmlhbnQgKDMpIGZyb20gaGVyZTpcbiAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9TdHlsZS9DU1MvVHJhY2tlci9pc3N1ZXMvMjk/Y2hhbmdlbG9nXG4gICAgdmFyIHRsX3ggPSBNYXRoLm1heCgwLCByVEwueCksIHRsX3kgPSBNYXRoLm1heCgwLCByVEwueSk7XG4gICAgdmFyIHRyX3ggPSBNYXRoLm1heCgwLCByVFIueCksIHRyX3kgPSBNYXRoLm1heCgwLCByVFIueSk7XG4gICAgdmFyIGJyX3ggPSBNYXRoLm1heCgwLCByQlIueCksIGJyX3kgPSBNYXRoLm1heCgwLCByQlIueSk7XG4gICAgdmFyIGJsX3ggPSBNYXRoLm1heCgwLCByQkwueCksIGJsX3kgPSBNYXRoLm1heCgwLCByQkwueSk7XG5cbiAgICB2YXIgZiA9IE1hdGgubWluKFxuICAgICAgICBib3gud2lkdGggLyAodGxfeCArIHRyX3gpLFxuICAgICAgICBib3guaGVpZ2h0IC8gKHRyX3kgKyBicl95KSxcbiAgICAgICAgYm94LndpZHRoIC8gKGJyX3ggKyBibF94KSxcbiAgICAgICAgYm94LmhlaWdodCAvIChibF95ICsgdGxfeSlcbiAgICApO1xuXG4gICAgaWYgKGYgPCAxKSB7XG4gICAgICAgIHRsX3ggKj0gZjsgdGxfeSAqPSBmO1xuICAgICAgICB0cl94ICo9IGY7IHRyX3kgKj0gZjtcbiAgICAgICAgYnJfeCAqPSBmOyBicl95ICo9IGY7XG4gICAgICAgIGJsX3ggKj0gZjsgYmxfeSAqPSBmO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHRsOiB7IHg6IHRsX3gsIHk6IHRsX3kgfSxcbiAgICAgICAgdHI6IHsgeDogdHJfeCwgeTogdHJfeSB9LFxuICAgICAgICBicjogeyB4OiBicl94LCB5OiBicl95IH0sXG4gICAgICAgIGJsOiB7IHg6IGJsX3gsIHk6IGJsX3kgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRSb3VuZEJveChlbGVtZW50LCBib3gsIHR5cGUpIHtcbiAgICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgdmFyIHJUTCA9IGdldEJvcmRlclJhZGl1cyhzdHlsZSwgXCJ0b3AtbGVmdFwiKTtcbiAgICB2YXIgclRSID0gZ2V0Qm9yZGVyUmFkaXVzKHN0eWxlLCBcInRvcC1yaWdodFwiKTtcbiAgICB2YXIgckJMID0gZ2V0Qm9yZGVyUmFkaXVzKHN0eWxlLCBcImJvdHRvbS1sZWZ0XCIpO1xuICAgIHZhciByQlIgPSBnZXRCb3JkZXJSYWRpdXMoc3R5bGUsIFwiYm90dG9tLXJpZ2h0XCIpO1xuXG4gICAgaWYgKHR5cGUgPT0gXCJwYWRkaW5nXCIgfHwgdHlwZSA9PSBcImNvbnRlbnRcIikge1xuICAgICAgICB2YXIgYnQgPSBnZXRCb3JkZXIoc3R5bGUsIFwidG9wXCIpO1xuICAgICAgICB2YXIgYnIgPSBnZXRCb3JkZXIoc3R5bGUsIFwicmlnaHRcIik7XG4gICAgICAgIHZhciBiYiA9IGdldEJvcmRlcihzdHlsZSwgXCJib3R0b21cIik7XG4gICAgICAgIHZhciBibCA9IGdldEJvcmRlcihzdHlsZSwgXCJsZWZ0XCIpO1xuICAgICAgICByVEwueCAtPSBibC53aWR0aDsgclRMLnkgLT0gYnQud2lkdGg7XG4gICAgICAgIHJUUi54IC09IGJyLndpZHRoOyByVFIueSAtPSBidC53aWR0aDtcbiAgICAgICAgckJSLnggLT0gYnIud2lkdGg7IHJCUi55IC09IGJiLndpZHRoO1xuICAgICAgICByQkwueCAtPSBibC53aWR0aDsgckJMLnkgLT0gYmIud2lkdGg7XG4gICAgICAgIGlmICh0eXBlID09IFwiY29udGVudFwiKSB7XG4gICAgICAgICAgICB2YXIgcHQgPSBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwicGFkZGluZy10b3BcIikpO1xuICAgICAgICAgICAgdmFyIHByID0gcGFyc2VGbG9hdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInBhZGRpbmctcmlnaHRcIikpO1xuICAgICAgICAgICAgdmFyIHBiID0gcGFyc2VGbG9hdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInBhZGRpbmctYm90dG9tXCIpKTtcbiAgICAgICAgICAgIHZhciBwbCA9IHBhcnNlRmxvYXQoZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJwYWRkaW5nLWxlZnRcIikpO1xuICAgICAgICAgICAgclRMLnggLT0gcGw7IHJUTC55IC09IHB0O1xuICAgICAgICAgICAgclRSLnggLT0gcHI7IHJUUi55IC09IHB0O1xuICAgICAgICAgICAgckJSLnggLT0gcHI7IHJCUi55IC09IHBiO1xuICAgICAgICAgICAgckJMLnggLT0gcGw7IHJCTC55IC09IHBiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0eXBlID09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgclRMLnggLT0gdHlwZTsgclRMLnkgLT0gdHlwZTtcbiAgICAgICAgclRSLnggLT0gdHlwZTsgclRSLnkgLT0gdHlwZTtcbiAgICAgICAgckJSLnggLT0gdHlwZTsgckJSLnkgLT0gdHlwZTtcbiAgICAgICAgckJMLnggLT0gdHlwZTsgckJMLnkgLT0gdHlwZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91bmRCb3goYm94LCByVEwsIHJUUiwgckJSLCByQkwpO1xufVxuXG4vLyBDcmVhdGUgYSBkcmF3aW5nLlBhdGggZm9yIGEgcm91bmRlZCByZWN0YW5nbGUuICBSZWNlaXZlcyB0aGVcbi8vIGJvdW5kaW5nIGJveCBhbmQgdGhlIGJvcmRlci1yYWRpdXNlcyBpbiBDU1Mgb3JkZXIgKHRvcC1sZWZ0LFxuLy8gdG9wLXJpZ2h0LCBib3R0b20tcmlnaHQsIGJvdHRvbS1sZWZ0KS4gIFRoZSByYWRpdXNlcyBtdXN0IGJlXG4vLyBvYmplY3RzIGNvbnRhaW5pbmcgeCAoaG9yaXouIHJhZGl1cykgYW5kIHkgKHZlcnRpY2FsIHJhZGl1cykuXG5mdW5jdGlvbiByb3VuZEJveChib3gsIHJUTDAsIHJUUjAsIHJCUjAsIHJCTDApIHtcbiAgICB2YXIgdG1wID0gYWRqdXN0Qm9yZGVyUmFkaXVzRm9yQm94KGJveCwgclRMMCwgclRSMCwgckJSMCwgckJMMCk7XG4gICAgdmFyIHJUTCA9IHRtcC50bDtcbiAgICB2YXIgclRSID0gdG1wLnRyO1xuICAgIHZhciByQlIgPSB0bXAuYnI7XG4gICAgdmFyIHJCTCA9IHRtcC5ibDtcbiAgICB2YXIgcGF0aCA9IG5ldyBQYXRoKHsgZmlsbDogbnVsbCwgc3Ryb2tlOiBudWxsIH0pO1xuICAgIHBhdGgubW92ZVRvKGJveC5sZWZ0LCBib3gudG9wICsgclRMLnkpO1xuICAgIGlmIChyVEwueCkge1xuICAgICAgICBhZGRBcmNUb1BhdGgocGF0aCwgYm94LmxlZnQgKyByVEwueCwgYm94LnRvcCArIHJUTC55LCB7XG4gICAgICAgICAgICBzdGFydEFuZ2xlOiAtMTgwLFxuICAgICAgICAgICAgZW5kQW5nbGU6IC05MCxcbiAgICAgICAgICAgIHJhZGl1c1g6IHJUTC54LFxuICAgICAgICAgICAgcmFkaXVzWTogclRMLnlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBhdGgubGluZVRvKGJveC5yaWdodCAtIHJUUi54LCBib3gudG9wKTtcbiAgICBpZiAoclRSLngpIHtcbiAgICAgICAgYWRkQXJjVG9QYXRoKHBhdGgsIGJveC5yaWdodCAtIHJUUi54LCBib3gudG9wICsgclRSLnksIHtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IC05MCxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiAwLFxuICAgICAgICAgICAgcmFkaXVzWDogclRSLngsXG4gICAgICAgICAgICByYWRpdXNZOiByVFIueVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcGF0aC5saW5lVG8oYm94LnJpZ2h0LCBib3guYm90dG9tIC0gckJSLnkpO1xuICAgIGlmIChyQlIueCkge1xuICAgICAgICBhZGRBcmNUb1BhdGgocGF0aCwgYm94LnJpZ2h0IC0gckJSLngsIGJveC5ib3R0b20gLSByQlIueSwge1xuICAgICAgICAgICAgc3RhcnRBbmdsZTogMCxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiA5MCxcbiAgICAgICAgICAgIHJhZGl1c1g6IHJCUi54LFxuICAgICAgICAgICAgcmFkaXVzWTogckJSLnlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBhdGgubGluZVRvKGJveC5sZWZ0ICsgckJMLngsIGJveC5ib3R0b20pO1xuICAgIGlmIChyQkwueCkge1xuICAgICAgICBhZGRBcmNUb1BhdGgocGF0aCwgYm94LmxlZnQgKyByQkwueCwgYm94LmJvdHRvbSAtIHJCTC55LCB7XG4gICAgICAgICAgICBzdGFydEFuZ2xlOiA5MCxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiAxODAsXG4gICAgICAgICAgICByYWRpdXNYOiByQkwueCxcbiAgICAgICAgICAgIHJhZGl1c1k6IHJCTC55XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcGF0aC5jbG9zZSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRDb3VudGVyKHZhbCwgc3R5bGUpIHtcbiAgICB2YXIgc3RyID0gU3RyaW5nKHBhcnNlRmxvYXQodmFsKSk7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSBcImRlY2ltYWwtbGVhZGluZy16ZXJvXCI6XG4gICAgICAgIGlmIChzdHIubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgc3RyID0gXCIwXCIgKyBzdHI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIGNhc2UgXCJsb3dlci1yb21hblwiOlxuICAgICAgICByZXR1cm4gYXJhYmljVG9Sb21hbih2YWwpLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYXNlIFwidXBwZXItcm9tYW5cIjpcbiAgICAgICAgcmV0dXJuIGFyYWJpY1RvUm9tYW4odmFsKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgY2FzZSBcImxvd2VyLWxhdGluXCI6XG4gICAgICBjYXNlIFwibG93ZXItYWxwaGFcIjpcbiAgICAgICAgcmV0dXJuIGFscGhhTnVtZXJhbCh2YWwgLSAxKTtcbiAgICAgIGNhc2UgXCJ1cHBlci1sYXRpblwiOlxuICAgICAgY2FzZSBcInVwcGVyLWFscGhhXCI6XG4gICAgICAgIHJldHVybiBhbHBoYU51bWVyYWwodmFsIC0gMSkudG9VcHBlckNhc2UoKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBldmFsUHNldWRvRWxlbWVudENvbnRlbnQoZWxlbWVudCwgY29udGVudCkge1xuICAgIGZ1bmN0aW9uIGRpc3BsYXlDb3VudGVyKG5hbWUsIHN0eWxlLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRDb3VudGVyKGdldENvdW50ZXIobmFtZSkgfHwgMCwgc3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIHNlcGFyYXRvciA9IHNlcGFyYXRvci5yZXBsYWNlKC9eXFxzKihbXCInXSkoLiopXFwxXFxzKiQvLCBcIiQyXCIpO1xuICAgICAgICByZXR1cm4gZ2V0QWxsQ291bnRlcnMobmFtZSkubWFwKGZ1bmN0aW9uKHZhbCl7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0Q291bnRlcih2YWwsIHN0eWxlKTtcbiAgICAgICAgfSkuam9pbihzZXBhcmF0b3IpO1xuICAgIH1cbiAgICB2YXIgYSA9IHNwbGl0UHJvcGVydHkoY29udGVudCwgL15cXHMrLyk7XG4gICAgdmFyIHJlc3VsdCA9IFtdLCBtO1xuICAgIGEuZm9yRWFjaChmdW5jdGlvbihlbCl7XG4gICAgICAgIHZhciB0bXA7XG4gICAgICAgIGlmICgobSA9IC9eXFxzKihbXCInXSkoLiopXFwxXFxzKiQvLmV4ZWMoZWwpKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobVsyXS5yZXBsYWNlKC9cXFxcKFswLTlhLWZdezR9KS9naSwgZnVuY3Rpb24ocywgcCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQocCwgMTYpKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgobSA9IC9eXFxzKmNvdW50ZXJcXCgoLio/KVxcKVxccyokLy5leGVjKGVsKSkpIHtcbiAgICAgICAgICAgIHRtcCA9IHNwbGl0UHJvcGVydHkobVsxXSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaChkaXNwbGF5Q291bnRlcih0bXBbMF0sIHRtcFsxXSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChtID0gL15cXHMqY291bnRlcnNcXCgoLio/KVxcKVxccyokLy5leGVjKGVsKSkpIHtcbiAgICAgICAgICAgIHRtcCA9IHNwbGl0UHJvcGVydHkobVsxXSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaChkaXNwbGF5Q291bnRlcih0bXBbMF0sIHRtcFsyXSwgdG1wWzFdKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKG0gPSAvXlxccyphdHRyXFwoKC4qPylcXClcXHMqJC8uZXhlYyhlbCkpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChlbGVtZW50LmdldEF0dHJpYnV0ZShtWzFdKSB8fCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVsKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q3NzVGV4dChzdHlsZSkge1xuICAgIGlmIChzdHlsZS5jc3NUZXh0KSB7XG4gICAgICAgIHJldHVybiBzdHlsZS5jc3NUZXh0O1xuICAgIH1cbiAgICAvLyBTdGF0dXM6IE5FVy4gIFJlcG9ydCB5ZWFyOiAyMDAyLiAgQ3VycmVudCB5ZWFyOiAyMDE0LlxuICAgIC8vIE5pY2UgcGxheWVkLCBNb3ppbGxpYW5zLlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzY4N1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHN0eWxlW2ldICsgXCI6IFwiICsgZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgc3R5bGVbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKFwiO1xcblwiKTtcbn1cblxuZnVuY3Rpb24gX3JlbmRlcldpdGhQc2V1ZG9FbGVtZW50cyhlbGVtZW50LCBncm91cCkge1xuICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT0gS0VORE9fUFNFVURPX0VMRU1FTlQpIHtcbiAgICAgICAgX3JlbmRlckVsZW1lbnQoZWxlbWVudCwgZ3JvdXApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBmYWtlID0gW107XG4gICAgZnVuY3Rpb24gcHNldWRvKGtpbmQsIHBsYWNlKSB7XG4gICAgICAgIGxldCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwga2luZCksIGNvbnRlbnQgPSBzdHlsZS5jb250ZW50O1xuICAgICAgICB1cGRhdGVDb3VudGVycyhzdHlsZSk7XG4gICAgICAgIGlmIChjb250ZW50ICYmIGNvbnRlbnQgIT0gXCJub3JtYWxcIiAmJiBjb250ZW50ICE9IFwibm9uZVwiICYmIHN0eWxlLndpZHRoICE9IFwiMHB4XCIpIHtcbiAgICAgICAgICAgIGxldCBwc2VsID0gZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoS0VORE9fUFNFVURPX0VMRU1FTlQpO1xuICAgICAgICAgICAgcHNlbC5zdHlsZS5jc3NUZXh0ID0gZ2V0Q3NzVGV4dChzdHlsZSk7XG4gICAgICAgICAgICBwc2VsLnRleHRDb250ZW50ID0gZXZhbFBzZXVkb0VsZW1lbnRDb250ZW50KGVsZW1lbnQsIGNvbnRlbnQpO1xuICAgICAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUocHNlbCwgcGxhY2UpO1xuICAgICAgICAgICAgZmFrZS5wdXNoKHBzZWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBzZXVkbyhcIjpiZWZvcmVcIiwgZWxlbWVudC5maXJzdENoaWxkKTtcbiAgICBwc2V1ZG8oXCI6YWZ0ZXJcIiwgbnVsbCk7XG4gICAgaWYgKGZha2UubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgc2F2ZUNsYXNzID0gZWxlbWVudC5jbGFzc05hbWU7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9IFwiIGtlbmRvLXBkZi1oaWRlLXBzZXVkby1lbGVtZW50c1wiO1xuICAgICAgICBfcmVuZGVyRWxlbWVudChlbGVtZW50LCBncm91cCk7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gc2F2ZUNsYXNzO1xuICAgICAgICBmYWtlLmZvckVhY2goZnVuY3Rpb24oZWwpeyBlbGVtZW50LnJlbW92ZUNoaWxkKGVsKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgX3JlbmRlckVsZW1lbnQoZWxlbWVudCwgZ3JvdXApO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX3JlbmRlckVsZW1lbnQoZWxlbWVudCwgZ3JvdXApIHtcbiAgICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgdmFyIHRvcCA9IGdldEJvcmRlcihzdHlsZSwgXCJ0b3BcIik7XG4gICAgdmFyIHJpZ2h0ID0gZ2V0Qm9yZGVyKHN0eWxlLCBcInJpZ2h0XCIpO1xuICAgIHZhciBib3R0b20gPSBnZXRCb3JkZXIoc3R5bGUsIFwiYm90dG9tXCIpO1xuICAgIHZhciBsZWZ0ID0gZ2V0Qm9yZGVyKHN0eWxlLCBcImxlZnRcIik7XG5cbiAgICB2YXIgclRMMCA9IGdldEJvcmRlclJhZGl1cyhzdHlsZSwgXCJ0b3AtbGVmdFwiKTtcbiAgICB2YXIgclRSMCA9IGdldEJvcmRlclJhZGl1cyhzdHlsZSwgXCJ0b3AtcmlnaHRcIik7XG4gICAgdmFyIHJCTDAgPSBnZXRCb3JkZXJSYWRpdXMoc3R5bGUsIFwiYm90dG9tLWxlZnRcIik7XG4gICAgdmFyIHJCUjAgPSBnZXRCb3JkZXJSYWRpdXMoc3R5bGUsIFwiYm90dG9tLXJpZ2h0XCIpO1xuXG4gICAgdmFyIGRpciA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiZGlyZWN0aW9uXCIpO1xuXG4gICAgdmFyIGJhY2tncm91bmRDb2xvciA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiYmFja2dyb3VuZC1jb2xvclwiKTtcbiAgICBiYWNrZ3JvdW5kQ29sb3IgPSBwYXJzZUNvbG9yKGJhY2tncm91bmRDb2xvcik7XG5cbiAgICB2YXIgYmFja2dyb3VuZEltYWdlID0gcGFyc2VCYWNrZ3JvdW5kSW1hZ2UoIGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiYmFja2dyb3VuZC1pbWFnZVwiKSApO1xuICAgIHZhciBiYWNrZ3JvdW5kUmVwZWF0ID0gc3BsaXRQcm9wZXJ0eSggZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJiYWNrZ3JvdW5kLXJlcGVhdFwiKSApO1xuICAgIHZhciBiYWNrZ3JvdW5kUG9zaXRpb24gPSBzcGxpdFByb3BlcnR5KCBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImJhY2tncm91bmQtcG9zaXRpb25cIikgKTtcbiAgICB2YXIgYmFja2dyb3VuZE9yaWdpbiA9IHNwbGl0UHJvcGVydHkoIGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiYmFja2dyb3VuZC1vcmlnaW5cIikgKTtcbiAgICB2YXIgYmFja2dyb3VuZFNpemUgPSBzcGxpdFByb3BlcnR5KCBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImJhY2tncm91bmQtc2l6ZVwiKSApO1xuXG4gICAgLy8gSUUgc2hyaW5rcyB0aGUgdGV4dCB3aXRoIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzLFxuICAgIC8vIGFwcGFyZW50bHkgYmVjYXVzZSB0aGUgcmV0dXJuZWQgYm91bmRpbmcgYm94IGZvciB0aGUgcmFuZ2VcbiAgICAvLyBpcyBsaW1pdGVkIHRvIHRoZSB2aXNpYmxlIGFyZWEgbWludXMgc3BhY2UgZm9yIHRoZSBkb3RzLFxuICAgIC8vIGluc3RlYWQgb2YgYmVpbmcgdGhlIGZ1bGwgd2lkdGggb2YgdGhlIHRleHQuXG4gICAgLy9cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby9pc3N1ZXMvNTIzMlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLXVpLWNvcmUvaXNzdWVzLzE4NjhcbiAgICAvL1xuICAgIC8vIFdlIGhhdmUgdG8gdGVzdCBpdCBoZXJlIHJhdGhlciB0aGFuIGluIHJlbmRlclRleHQgYmVjYXVzZVxuICAgIC8vIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzIGNvdWxkIGJlIHNldCBvbiBhIHBhcmVudCBlbGVtZW50IChub3RcbiAgICAvLyBuZWNlc3NhcmlseSB0aGUgb25lIGNvbnRhaW5pbmcgdGhlIHRleHQpOyBpbiB0aGlzIGNhc2UsXG4gICAgLy8gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50V2l0aFRoZVRleHQpIHdpbGwgcmV0dXJuIFwiY2xpcFwiLCBub3RcbiAgICAvLyBcImVsbGlwc2lzXCIgKHdoaWNoIGlzIHByb2JhYmx5IGEgYnVnLCBidXQgb2ggd2VsbC4uLilcbiAgICB2YXIgdGV4dE92ZXJmbG93LCBzYXZlVGV4dE92ZXJmbG93O1xuICAgIGlmIChtaWNyb3NvZnQpIHtcbiAgICAgICAgdGV4dE92ZXJmbG93ID0gc3R5bGUudGV4dE92ZXJmbG93OyAgICAgICAgICAgICAvLyBjb21wdXRlZCBzdHlsZVxuICAgICAgICBpZiAodGV4dE92ZXJmbG93ID09IFwiZWxsaXBzaXNcIikge1xuICAgICAgICAgICAgc2F2ZVRleHRPdmVyZmxvdyA9IGVsZW1lbnQuc3R5bGUudGV4dE92ZXJmbG93OyAvLyBvd24gc3R5bGUuXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRleHRPdmVyZmxvdyA9IFwiY2xpcFwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJyb3dzZXIubXNpZSAmJiBicm93c2VyLnZlcnNpb24gPCAxMCkge1xuICAgICAgICAvLyBJRTkgaGFja3MuICBnZXRQcm9wZXJ0eVZhbHVlIHdvbid0IHJldHVybiB0aGUgY29ycmVjdFxuICAgICAgICAvLyB2YWx1ZS4gIFN1Y2tzIHRoYXQgd2UgaGF2ZSB0byBkbyBpdCBoZXJlLCBJJ2QgcHJlZmVyIHRvXG4gICAgICAgIC8vIG1vdmUgaXQgaW4gZ2V0UHJvcGVydHlWYWx1ZSwgYnV0IHdlIGRvbid0IGhhdmUgdGhlXG4gICAgICAgIC8vIGVsZW1lbnQuXG4gICAgICAgIGJhY2tncm91bmRQb3NpdGlvbiA9IHNwbGl0UHJvcGVydHkoZWxlbWVudC5jdXJyZW50U3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICB2YXIgaW5uZXJib3ggPSBpbm5lckJveChlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBcImJvcmRlci0qLXdpZHRoXCIsIGVsZW1lbnQpO1xuXG4gICAgLy8gQ1NTIFwiY2xpcFwiIHByb3BlcnR5IC0gaWYgcHJlc2VudCwgcmVwbGFjZSB0aGUgZ3JvdXAgd2l0aCBhXG4gICAgLy8gbmV3IG9uZSB3aGljaCBpcyBjbGlwcGVkLiAgVGhpcyBtdXN0IGhhcHBlbiBiZWZvcmUgZHJhd2luZ1xuICAgIC8vIHRoZSBib3JkZXJzIGFuZCBiYWNrZ3JvdW5kLlxuICAgIChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgY2xpcCA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiY2xpcFwiKTtcbiAgICAgICAgdmFyIG0gPSAvXlxccypyZWN0XFwoKC4qKVxcKVxccyokLy5leGVjKGNsaXApO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgdmFyIGEgPSBtWzFdLnNwbGl0KC9bICxdKy9nKTtcbiAgICAgICAgICAgIHZhciB0b3AgPSBhWzBdID09IFwiYXV0b1wiID8gaW5uZXJib3gudG9wIDogcGFyc2VGbG9hdChhWzBdKSArIGlubmVyYm94LnRvcDtcbiAgICAgICAgICAgIHZhciByaWdodCA9IGFbMV0gPT0gXCJhdXRvXCIgPyBpbm5lcmJveC5yaWdodCA6IHBhcnNlRmxvYXQoYVsxXSkgKyBpbm5lcmJveC5sZWZ0O1xuICAgICAgICAgICAgdmFyIGJvdHRvbSA9IGFbMl0gPT0gXCJhdXRvXCIgPyBpbm5lcmJveC5ib3R0b20gOiBwYXJzZUZsb2F0KGFbMl0pICsgaW5uZXJib3gudG9wO1xuICAgICAgICAgICAgdmFyIGxlZnQgPSBhWzNdID09IFwiYXV0b1wiID8gaW5uZXJib3gubGVmdCA6IHBhcnNlRmxvYXQoYVszXSkgKyBpbm5lcmJveC5sZWZ0O1xuICAgICAgICAgICAgdmFyIHRtcCA9IG5ldyBHcm91cCgpO1xuICAgICAgICAgICAgdmFyIGNsaXBQYXRoID0gbmV3IFBhdGgoKVxuICAgICAgICAgICAgICAgIC5tb3ZlVG8obGVmdCwgdG9wKVxuICAgICAgICAgICAgICAgIC5saW5lVG8ocmlnaHQsIHRvcClcbiAgICAgICAgICAgICAgICAubGluZVRvKHJpZ2h0LCBib3R0b20pXG4gICAgICAgICAgICAgICAgLmxpbmVUbyhsZWZ0LCBib3R0b20pXG4gICAgICAgICAgICAgICAgLmNsb3NlKCk7XG4gICAgICAgICAgICBzZXRDbGlwcGluZyh0bXAsIGNsaXBQYXRoKTtcbiAgICAgICAgICAgIGdyb3VwLmFwcGVuZCh0bXApO1xuICAgICAgICAgICAgZ3JvdXAgPSB0bXA7XG4gICAgICAgICAgICB1cGRhdGVDbGlwYm94KGNsaXBQYXRoKTtcbiAgICAgICAgfVxuICAgIH0pKCk7XG5cbiAgICB2YXIgYm94ZXMsIGksIGNlbGxzO1xuICAgIHZhciBkaXNwbGF5ID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJkaXNwbGF5XCIpO1xuXG4gICAgaWYgKGRpc3BsYXkgPT0gXCJ0YWJsZS1yb3dcIikge1xuICAgICAgICAvLyBiZWNhdXNlIG9mIHJvd3NwYW4vY29sc3Bhbiwgd2Ugc2hvdWxkbid0IGRyYXcgYmFja2dyb3VuZCBvZiB0YWJsZSByb3cgZWxlbWVudHMgb24gdGhlXG4gICAgICAgIC8vIGJveCBnaXZlbiBieSBpdHMgZ2V0Qm91bmRpbmdDbGllbnRSZWN0LCBiZWNhdXNlIGlmIHdlIGRvIHdlIHJpc2sgb3ZlcndyaXR0aW5nIGFcbiAgICAgICAgLy8gcHJldmlvdXNseSByZW5kZXJlZCBjZWxsLiAgaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8vaXNzdWVzLzQ4ODFcbiAgICAgICAgYm94ZXMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMCwgY2VsbHMgPSBlbGVtZW50LmNoaWxkcmVuOyBpIDwgY2VsbHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGJveGVzLnB1c2goY2VsbHNbaV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYm94ZXMgPSBlbGVtZW50LmdldENsaWVudFJlY3RzKCk7XG4gICAgICAgIGlmIChib3hlcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCB0aGUgbWlzc2luZyBib3JkZXJzIGluIENocm9tZSEgIGdldENsaWVudFJlY3RzKCkgYm94ZXMgY29udGFpbnMgdmFsdWVzXG4gICAgICAgICAgICAvLyByb3VuZGVkIHRvIGludGVnZXIuICBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBhcHBlYXJzIHRvIHdvcmsgZmluZS4gIFdlIHN0aWxsIG5lZWRcbiAgICAgICAgICAgIC8vIGdldENsaWVudFJlY3RzKCkgdG8gc3VwcG9ydCBjYXNlcyB3aGVyZSB0aGVyZSBhcmUgbW9yZSBib3hlcyAoY29udGludWVkIGlubGluZVxuICAgICAgICAgICAgLy8gZWxlbWVudHMgdGhhdCBtaWdodCBoYXZlIGJvcmRlci9iYWNrZ3JvdW5kKS5cbiAgICAgICAgICAgIGJveGVzID0gWyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIF07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdvcmthcm91bmRzIGFub3RoZXIgQ2hyb21lIGJ1Zywgd2hlcmUgYm94ZXMgcmV0dXJuZWQgZm9yIGEgdGFibGUgd2l0aFxuICAgIC8vIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2Ugd2lsbCBvdmVybGFwIHRoZSB0YWJsZSBib3JkZXIuICBPdXIgcmVuZGVyaW5nIGlzIG5vdCBwZXJmZWN0IGluXG4gICAgLy8gc3VjaCBjYXNlIGFueXdheSwgYnV0IHdpdGggdGhpcyBpcyBiZXR0ZXIgdGhhbiB3aXRob3V0IGl0LlxuICAgIGJveGVzID0gYWRqdXN0Qm94ZXMoYm94ZXMpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGJveGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGRyYXdPbmVCb3goYm94ZXNbaV0sIGkgPT09IDAsIGkgPT0gYm94ZXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgLy8gUmVuZGVyIGxpbmtzIGFzIHNlcGFyYXRlIGdyb3Vwcy4gIFdlIGNhbid0IHVzZSBib3hlcyByZXR1cm5lZCBieSBlbGVtZW50J3MgZ2V0Q2xpZW50UmVjdHNcbiAgICAvLyBiZWNhdXNlIGlmIGRpc3BsYXkgdHlwZSBpcyBcImlubGluZVwiIChkZWZhdWx0IGZvciA8YT4pLCBib3hlcyB3aWxsIG5vdCBpbmNsdWRlIHRoZSBoZWlnaHQgb2ZcbiAgICAvLyBpbWFnZXMgaW5zaWRlLiAgaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tdWktY29yZS9pc3N1ZXMvMzM1OVxuICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT0gXCJBXCIgJiYgZWxlbWVudC5ocmVmICYmICEvXiM/JC8udGVzdChlbGVtZW50LmdldEF0dHJpYnV0ZShcImhyZWZcIikpKSB7XG4gICAgICAgIGlmICghbm9kZUluZm8uX2F2b2lkTGlua3MgfHwgIW1hdGNoZXMoZWxlbWVudCwgbm9kZUluZm8uX2F2b2lkTGlua3MpKSB7XG4gICAgICAgICAgICBjb25zdCByID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgIHIuc2VsZWN0Tm9kZUNvbnRlbnRzKGVsZW1lbnQpO1xuICAgICAgICAgICAgc2xpY2Uoci5nZXRDbGllbnRSZWN0cygpKS5mb3JFYWNoKGZ1bmN0aW9uKGJveCl7XG4gICAgICAgICAgICAgICAgY29uc3QgZyA9IG5ldyBHcm91cCgpO1xuICAgICAgICAgICAgICAgIGcuX3BkZkxpbmsgPSB7XG4gICAgICAgICAgICAgICAgICAgIHVybCAgICA6IGVsZW1lbnQuaHJlZixcbiAgICAgICAgICAgICAgICAgICAgdG9wICAgIDogYm94LnRvcCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgIDogYm94LnJpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBib3R0b20gOiBib3guYm90dG9tLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgOiBib3gubGVmdFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKGcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYm94ZXMubGVuZ3RoID4gMCAmJiBkaXNwbGF5ID09IFwibGlzdC1pdGVtXCIgJiYgIWVsZW1lbnQuZ2V0QXR0cmlidXRlKFwia2VuZG8tbm8tYnVsbGV0XCIpKSB7XG4gICAgICAgIGRyYXdCdWxsZXQoYm94ZXNbMF0pO1xuICAgIH1cblxuICAgIC8vIG92ZXJmbG93OiBoaWRkZW4vYXV0byAtIGlmIHByZXNlbnQsIHJlcGxhY2UgdGhlIGdyb3VwIHdpdGhcbiAgICAvLyBhIG5ldyBvbmUgY2xpcHBlZCBieSB0aGUgaW5uZXIgYm94LlxuICAgIChmdW5jdGlvbigpe1xuICAgICAgICBmdW5jdGlvbiBjbGlwaXQoKSB7XG4gICAgICAgICAgICB2YXIgY2xpcFBhdGggPSBlbGVtZW50Um91bmRCb3goZWxlbWVudCwgaW5uZXJib3gsIFwicGFkZGluZ1wiKTtcbiAgICAgICAgICAgIHZhciB0bXAgPSBuZXcgR3JvdXAoKTtcbiAgICAgICAgICAgIHNldENsaXBwaW5nKHRtcCwgY2xpcFBhdGgpO1xuICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKHRtcCk7XG4gICAgICAgICAgICBncm91cCA9IHRtcDtcbiAgICAgICAgICAgIHVwZGF0ZUNsaXBib3goY2xpcFBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Zvcm1GaWVsZChlbGVtZW50KSkge1xuICAgICAgICAgICAgY2xpcGl0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoL14oaGlkZGVufGF1dG98c2Nyb2xsKS8udGVzdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcIm92ZXJmbG93XCIpKSkge1xuICAgICAgICAgICAgY2xpcGl0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoL14oaGlkZGVufGF1dG98c2Nyb2xsKS8udGVzdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcIm92ZXJmbG93LXhcIikpKSB7XG4gICAgICAgICAgICBjbGlwaXQoKTtcbiAgICAgICAgfSBlbHNlIGlmICgvXihoaWRkZW58YXV0b3xzY3JvbGwpLy50ZXN0KGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwib3ZlcmZsb3cteVwiKSkpIHtcbiAgICAgICAgICAgIGNsaXBpdCgpO1xuICAgICAgICB9XG4gICAgfSkoKTtcblxuICAgIGlmICghbWF5YmVSZW5kZXJXaWRnZXQoZWxlbWVudCwgZ3JvdXApKSB7XG4gICAgICAgIHJlbmRlckNvbnRlbnRzKGVsZW1lbnQsIGdyb3VwKTtcbiAgICB9XG5cbiAgICBpZiAobWljcm9zb2Z0ICYmIHRleHRPdmVyZmxvdyA9PSBcImVsbGlwc2lzXCIpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS50ZXh0T3ZlcmZsb3cgPSBzYXZlVGV4dE92ZXJmbG93O1xuICAgIH1cblxuICAgIHJldHVybiBncm91cDsgLy8gb25seSB1dGlsaXR5IGZ1bmN0aW9ucyBhZnRlciB0aGlzIGxpbmUuXG5cbiAgICBmdW5jdGlvbiBhZGp1c3RCb3hlcyhib3hlcykge1xuICAgICAgICBpZiAoL150ZCQvaS50ZXN0KGVsZW1lbnQudGFnTmFtZSkpIHtcbiAgICAgICAgICAgIHZhciB0YWJsZSA9IG5vZGVJbmZvLnRhYmxlO1xuICAgICAgICAgICAgaWYgKHRhYmxlICYmIGdldFByb3BlcnR5VmFsdWUodGFibGUuc3R5bGUsIFwiYm9yZGVyLWNvbGxhcHNlXCIpID09IFwiY29sbGFwc2VcIikge1xuICAgICAgICAgICAgICAgIHZhciB0YWJsZUJvcmRlckxlZnQgPSBnZXRCb3JkZXIodGFibGUuc3R5bGUsIFwibGVmdFwiKS53aWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgdGFibGVCb3JkZXJUb3AgPSBnZXRCb3JkZXIodGFibGUuc3R5bGUsIFwidG9wXCIpLndpZHRoO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gYWRqdXN0XG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlQm9yZGVyTGVmdCA9PT0gMCAmJiB0YWJsZUJvcmRlclRvcCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm94ZXM7IC8vIG5vcGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRhYmxlQm94ID0gdGFibGUuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgZmlyc3RDZWxsID0gdGFibGUuZWxlbWVudC5yb3dzWzBdLmNlbGxzWzBdO1xuICAgICAgICAgICAgICAgIHZhciBmaXJzdENlbGxCb3ggPSBmaXJzdENlbGwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0Q2VsbEJveC50b3AgPT0gdGFibGVCb3gudG9wIHx8IGZpcnN0Q2VsbEJveC5sZWZ0ID09IHRhYmxlQm94LmxlZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsaWNlKGJveGVzKS5tYXAoZnVuY3Rpb24oYm94KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAgIDogYm94LmxlZnQgKyB0YWJsZUJvcmRlckxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wICAgIDogYm94LnRvcCArIHRhYmxlQm9yZGVyVG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0ICA6IGJveC5yaWdodCArIHRhYmxlQm9yZGVyTGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b20gOiBib3guYm90dG9tICsgdGFibGVCb3JkZXJUb3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0IDogYm94LmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAgOiBib3gud2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm94ZXM7XG4gICAgfVxuXG4gICAgLy8gdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB0byBkcmF3IGVhY2ggYm9yZGVyLiAgaXRcbiAgICAvLyBkcmF3cyBzdGFydGluZyBhdCBvcmlnaW4gYW5kIHRoZSByZXN1bHRlZCBwYXRoIG11c3QgYmVcbiAgICAvLyB0cmFuc2xhdGVkL3JvdGF0ZWQgdG8gYmUgcGxhY2VkIGluIHRoZSBwcm9wZXIgcG9zaXRpb24uXG4gICAgLy9cbiAgICAvLyBhcmd1bWVudHMgYXJlIG5hbWVkIGFzIGlmIGl0IGRyYXdzIHRoZSB0b3AgYm9yZGVyOlxuICAgIC8vXG4gICAgLy8gICAgLSBgbGVuYCB0aGUgbGVuZ3RoIG9mIHRoZSBlZGdlXG4gICAgLy8gICAgLSBgV3RvcGAgdGhlIHdpZHRoIG9mIHRoZSBlZGdlIChpLmUuIGJvcmRlci10b3Atd2lkdGgpXG4gICAgLy8gICAgLSBgV2xlZnRgIHRoZSB3aWR0aCBvZiB0aGUgbGVmdCBlZGdlIChib3JkZXItbGVmdC13aWR0aClcbiAgICAvLyAgICAtIGBXcmlnaHRgIHRoZSB3aWR0aCBvZiB0aGUgcmlnaHQgZWRnZVxuICAgIC8vICAgIC0gYHJsYCBhbmQgYHJsYCAtLSB0aGUgYm9yZGVyIHJhZGl1cyBvbiB0aGUgbGVmdCBhbmQgcmlnaHRcbiAgICAvLyAgICAgIChvYmplY3RzIGNvbnRhaW5pbmcgeCBhbmQgeSwgZm9yIGhvcml6L3ZlcnRpY2FsIHJhZGl1cylcbiAgICAvLyAgICAtIGB0cmFuc2Zvcm1gIC0tIHRyYW5zZm9ybWF0aW9uIHRvIGFwcGx5XG4gICAgLy9cbiAgICBmdW5jdGlvbiBkcmF3RWRnZShjb2xvciwgbGVuLCBXdG9wLCBXbGVmdCwgV3JpZ2h0LCBybCwgcnIsIHRyYW5zZm9ybSkge1xuICAgICAgICBpZiAoV3RvcCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGF0aCwgZWRnZSA9IG5ldyBHcm91cCgpO1xuICAgICAgICBzZXRUcmFuc2Zvcm0oZWRnZSwgdHJhbnNmb3JtKTtcbiAgICAgICAgZ3JvdXAuYXBwZW5kKGVkZ2UpO1xuXG4gICAgICAgIHNhbml0aXplUmFkaXVzKHJsKTtcbiAgICAgICAgc2FuaXRpemVSYWRpdXMocnIpO1xuXG4gICAgICAgIC8vIGRyYXcgbWFpbiBib3JkZXIuICB0aGlzIGlzIHRoZSBhcmVhIHdpdGhvdXQgdGhlIHJvdW5kZWQgY29ybmVyc1xuICAgICAgICBwYXRoID0gbmV3IFBhdGgoe1xuICAgICAgICAgICAgZmlsbDogeyBjb2xvcjogY29sb3IgfSxcbiAgICAgICAgICAgIHN0cm9rZTogbnVsbFxuICAgICAgICB9KTtcbiAgICAgICAgZWRnZS5hcHBlbmQocGF0aCk7XG4gICAgICAgIHBhdGgubW92ZVRvKHJsLnggPyBNYXRoLm1heChybC54LCBXbGVmdCkgOiAwLCAwKVxuICAgICAgICAgICAgLmxpbmVUbyhsZW4gLSAocnIueCA/IE1hdGgubWF4KHJyLngsIFdyaWdodCkgOiAwKSwgMClcbiAgICAgICAgICAgIC5saW5lVG8obGVuIC0gTWF0aC5tYXgocnIueCwgV3JpZ2h0KSwgV3RvcClcbiAgICAgICAgICAgIC5saW5lVG8oTWF0aC5tYXgocmwueCwgV2xlZnQpLCBXdG9wKVxuICAgICAgICAgICAgLmNsb3NlKCk7XG5cbiAgICAgICAgaWYgKHJsLngpIHtcbiAgICAgICAgICAgIGRyYXdSb3VuZENvcm5lcihXbGVmdCwgcmwsIFsgLTEsIDAsIDAsIDEsIHJsLngsIDAgXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocnIueCkge1xuICAgICAgICAgICAgZHJhd1JvdW5kQ29ybmVyKFdyaWdodCwgcnIsIFsgMSwgMCwgMCwgMSwgbGVuIC0gcnIueCwgMCBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRyYXdzIG9uZSByb3VuZCBjb3JuZXIsIHN0YXJ0aW5nIGF0IG9yaWdpbiAobmVlZHMgdG8gYmVcbiAgICAgICAgLy8gdHJhbnNsYXRlZC9yb3RhdGVkIHRvIGJlIHBsYWNlZCBwcm9wZXJseSkuXG4gICAgICAgIGZ1bmN0aW9uIGRyYXdSb3VuZENvcm5lcihXcmlnaHQsIHIsIHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgdmFyIGFuZ2xlID0gTWF0aC5QSS8yICogV3JpZ2h0IC8gKFdyaWdodCArIFd0b3ApO1xuXG4gICAgICAgICAgICAvLyBub3Qgc2FuaXRpemluZyB0aGlzIG9uZSwgYmVjYXVzZSBuZWdhdGl2ZSB2YWx1ZXNcbiAgICAgICAgICAgIC8vIGFyZSB1c2VmdWwgdG8gZmlsbCB0aGUgYm94IGNvcnJlY3RseS5cbiAgICAgICAgICAgIHZhciByaSA9IHtcbiAgICAgICAgICAgICAgICB4OiByLnggLSBXcmlnaHQsXG4gICAgICAgICAgICAgICAgeTogci55IC0gV3RvcFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHBhdGggPSBuZXcgUGF0aCh7XG4gICAgICAgICAgICAgICAgZmlsbDogeyBjb2xvcjogY29sb3IgfSxcbiAgICAgICAgICAgICAgICBzdHJva2U6IG51bGxcbiAgICAgICAgICAgIH0pLm1vdmVUbygwLCAwKTtcblxuICAgICAgICAgICAgc2V0VHJhbnNmb3JtKHBhdGgsIHRyYW5zZm9ybSk7XG5cbiAgICAgICAgICAgIGFkZEFyY1RvUGF0aChwYXRoLCAwLCByLnksIHtcbiAgICAgICAgICAgICAgICBzdGFydEFuZ2xlOiAtOTAsXG4gICAgICAgICAgICAgICAgZW5kQW5nbGU6IC1yYWRpYW5zVG9EZWdyZWVzKGFuZ2xlKSxcbiAgICAgICAgICAgICAgICByYWRpdXNYOiByLngsXG4gICAgICAgICAgICAgICAgcmFkaXVzWTogci55XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHJpLnggPiAwICYmIHJpLnkgPiAwKSB7XG4gICAgICAgICAgICAgICAgcGF0aC5saW5lVG8ocmkueCAqIE1hdGguY29zKGFuZ2xlKSwgci55IC0gcmkueSAqIE1hdGguc2luKGFuZ2xlKSk7XG4gICAgICAgICAgICAgICAgYWRkQXJjVG9QYXRoKHBhdGgsIDAsIHIueSwge1xuICAgICAgICAgICAgICAgICAgICBzdGFydEFuZ2xlOiAtcmFkaWFuc1RvRGVncmVlcyhhbmdsZSksXG4gICAgICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiAtOTAsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1c1g6IHJpLngsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1c1k6IHJpLnksXG4gICAgICAgICAgICAgICAgICAgIGFudGljbG9ja3dpc2U6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJpLnggPiAwKSB7XG4gICAgICAgICAgICAgICAgcGF0aC5saW5lVG8ocmkueCwgV3RvcClcbiAgICAgICAgICAgICAgICAgICAgLmxpbmVUbygwLCBXdG9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhdGgubGluZVRvKHJpLngsIFd0b3ApXG4gICAgICAgICAgICAgICAgICAgIC5saW5lVG8ocmkueCwgMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVkZ2UuYXBwZW5kKHBhdGguY2xvc2UoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmF3QmFja2dyb3VuZChib3gpIHtcbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSBuZXcgR3JvdXAoKTtcbiAgICAgICAgc2V0Q2xpcHBpbmcoYmFja2dyb3VuZCwgcm91bmRCb3goYm94LCByVEwwLCByVFIwLCByQlIwLCByQkwwKSk7XG4gICAgICAgIGdyb3VwLmFwcGVuZChiYWNrZ3JvdW5kKTtcblxuICAgICAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IG5ldyBQYXRoKHtcbiAgICAgICAgICAgICAgICBmaWxsOiB7IGNvbG9yOiBiYWNrZ3JvdW5kQ29sb3IudG9Dc3NSZ2JhKCkgfSxcbiAgICAgICAgICAgICAgICBzdHJva2U6IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGF0aC5tb3ZlVG8oYm94LmxlZnQsIGJveC50b3ApXG4gICAgICAgICAgICAgICAgLmxpbmVUbyhib3gucmlnaHQsIGJveC50b3ApXG4gICAgICAgICAgICAgICAgLmxpbmVUbyhib3gucmlnaHQsIGJveC5ib3R0b20pXG4gICAgICAgICAgICAgICAgLmxpbmVUbyhib3gubGVmdCwgYm94LmJvdHRvbSlcbiAgICAgICAgICAgICAgICAuY2xvc2UoKTtcbiAgICAgICAgICAgIGJhY2tncm91bmQuYXBwZW5kKHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IGJhY2tncm91bmRJbWFnZS5sZW5ndGg7IC0taSA+PSAwOykge1xuICAgICAgICAgICAgZHJhd09uZUJhY2tncm91bmQoXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZCwgYm94LFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZVtpXSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0W2kgJSBiYWNrZ3JvdW5kUmVwZWF0Lmxlbmd0aF0sXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uW2kgJSBiYWNrZ3JvdW5kUG9zaXRpb24ubGVuZ3RoXSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kT3JpZ2luW2kgJSBiYWNrZ3JvdW5kT3JpZ2luLmxlbmd0aF0sXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFNpemVbaSAlIGJhY2tncm91bmRTaXplLmxlbmd0aF1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmF3T25lQmFja2dyb3VuZChncm91cCwgYm94LCBiYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kUmVwZWF0LCBiYWNrZ3JvdW5kUG9zaXRpb24sIGJhY2tncm91bmRPcmlnaW4sIGJhY2tncm91bmRTaXplKSB7XG4gICAgICAgIGlmICghYmFja2dyb3VuZCB8fCAoYmFja2dyb3VuZCA9PSBcIm5vbmVcIikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiYWNrZ3JvdW5kLnR5cGUgPT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgLy8gU1ZHIHRhaW50cyB0aGUgY2FudmFzLCBjYW4ndCBkcmF3IGl0LlxuICAgICAgICAgICAgaWYgKC9edXJsXFwoXFxcImRhdGE6aW1hZ2VcXC9zdmcvaS50ZXN0KGJhY2tncm91bmQudXJsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbWcgPSBJTUFHRV9DQUNIRVtiYWNrZ3JvdW5kLnVybF07XG4gICAgICAgICAgICBpZiAoaW1nICYmIGltZy53aWR0aCA+IDAgJiYgaW1nLmhlaWdodCA+IDApIHtcbiAgICAgICAgICAgICAgICBkcmF3QmFja2dyb3VuZEltYWdlKGdyb3VwLCBib3gsIGltZy53aWR0aCwgaW1nLmhlaWdodCwgZnVuY3Rpb24oZ3JvdXAsIHJlY3Qpe1xuICAgICAgICAgICAgICAgICAgICBncm91cC5hcHBlbmQobmV3IEltYWdlKGJhY2tncm91bmQudXJsLCByZWN0KSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoYmFja2dyb3VuZC50eXBlID09IFwibGluZWFyXCIpIHtcbiAgICAgICAgICAgIGRyYXdCYWNrZ3JvdW5kSW1hZ2UoZ3JvdXAsIGJveCwgYm94LndpZHRoLCBib3guaGVpZ2h0LCBncmFkaWVudFJlbmRlcmVyKGJhY2tncm91bmQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRyYXdCYWNrZ3JvdW5kSW1hZ2UoZ3JvdXAsIGJveCwgaW1nX3dpZHRoLCBpbWdfaGVpZ2h0LCByZW5kZXJCRykge1xuICAgICAgICAgICAgdmFyIGFzcGVjdF9yYXRpbyA9IGltZ193aWR0aCAvIGltZ19oZWlnaHQsIGY7XG5cbiAgICAgICAgICAgIC8vIGZvciBiYWNrZ3JvdW5kLW9yaWdpbjogYm9yZGVyLWJveCB0aGUgYm94IGlzIGFscmVhZHkgYXBwcm9wcmlhdGVcbiAgICAgICAgICAgIHZhciBvcmdCb3ggPSBib3g7XG4gICAgICAgICAgICBpZiAoYmFja2dyb3VuZE9yaWdpbiA9PSBcImNvbnRlbnQtYm94XCIpIHtcbiAgICAgICAgICAgICAgICBvcmdCb3ggPSBpbm5lckJveChvcmdCb3gsIFwiYm9yZGVyLSotd2lkdGhcIiwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgb3JnQm94ID0gaW5uZXJCb3gob3JnQm94LCBcInBhZGRpbmctKlwiLCBlbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYmFja2dyb3VuZE9yaWdpbiA9PSBcInBhZGRpbmctYm94XCIpIHtcbiAgICAgICAgICAgICAgICBvcmdCb3ggPSBpbm5lckJveChvcmdCb3gsIFwiYm9yZGVyLSotd2lkdGhcIiwgZWxlbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghL15cXHMqYXV0byhcXHMrYXV0byk/XFxzKiQvLnRlc3QoYmFja2dyb3VuZFNpemUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJhY2tncm91bmRTaXplID09IFwiY29udGFpblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGYgPSBNYXRoLm1pbihvcmdCb3gud2lkdGggLyBpbWdfd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmdCb3guaGVpZ2h0IC8gaW1nX2hlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGltZ193aWR0aCAqPSBmO1xuICAgICAgICAgICAgICAgICAgICBpbWdfaGVpZ2h0ICo9IGY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJhY2tncm91bmRTaXplID09IFwiY292ZXJcIikge1xuICAgICAgICAgICAgICAgICAgICBmID0gTWF0aC5tYXgob3JnQm94LndpZHRoIC8gaW1nX3dpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JnQm94LmhlaWdodCAvIGltZ19oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBpbWdfd2lkdGggKj0gZjtcbiAgICAgICAgICAgICAgICAgICAgaW1nX2hlaWdodCAqPSBmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpemUgPSBiYWNrZ3JvdW5kU2l6ZS5zcGxpdCgvXFxzKy9nKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcHV0ZSB3aWR0aFxuICAgICAgICAgICAgICAgICAgICBpZiAoLyUkLy50ZXN0KHNpemVbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdfd2lkdGggPSBvcmdCb3gud2lkdGggKiBwYXJzZUZsb2F0KHNpemVbMF0pIC8gMTAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1nX3dpZHRoID0gcGFyc2VGbG9hdChzaXplWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBjb21wdXRlIGhlaWdodFxuICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZS5sZW5ndGggPT0gMSB8fCBzaXplWzFdID09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWdfaGVpZ2h0ID0gaW1nX3dpZHRoIC8gYXNwZWN0X3JhdGlvO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKC8lJC8udGVzdChzaXplWzFdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1nX2hlaWdodCA9IG9yZ0JveC5oZWlnaHQgKiBwYXJzZUZsb2F0KHNpemVbMV0pIC8gMTAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1nX2hlaWdodCA9IHBhcnNlRmxvYXQoc2l6ZVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwb3MgPSBTdHJpbmcoYmFja2dyb3VuZFBvc2l0aW9uKTtcblxuICAgICAgICAgICAgLy8gSUUgc29tZXRpbWVzIHJlcG9ydHMgc2luZ2xlLXdvcmQgcG9zaXRpb25zXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby11aS1jb3JlL2lzc3Vlcy8yNzg2XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gaXQgc2VlbXMgdG8gc3dpdGNoIHRvIHBlcmNlbnRhZ2VzIHdoZW4gdGhlIGhvcml6b250YWxcbiAgICAgICAgICAgIC8vIHBvc2l0aW9uIGlzIG5vdCBcImNlbnRlclwiLCB0aGVyZWZvcmUgd2UgZG9uJ3QgaGFuZGxlXG4gICAgICAgICAgICAvLyBtdWx0aS13b3JkIGNhc2VzIGhlcmUuICBBbGwgb3RoZXIgYnJvd3NlcnMgcmV0dXJuXG4gICAgICAgICAgICAvLyBwZXJjZW50YWdlcyBvciBwaXhlbHMgaW5zdGVhZCBvZiBrZXl3b3Jkcy4gIEF0IGxlYXN0XG4gICAgICAgICAgICAvLyBmb3Igbm93Li4uXG4gICAgICAgICAgICBzd2l0Y2ggKHBvcykge1xuICAgICAgICAgICAgICBjYXNlIFwiYm90dG9tXCIgOiBwb3MgPSBcIjUwJSAxMDAlXCI7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidG9wXCIgICAgOiBwb3MgPSBcIjUwJSAwXCI7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiICAgOiBwb3MgPSBcIjAgNTAlXCI7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwicmlnaHRcIiAgOiBwb3MgPSBcIjEwMCUgNTAlXCI7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiY2VudGVyXCIgOiBwb3MgPSBcIjUwJSA1MCVcIjsgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBvcyA9IHBvcy5zcGxpdCgvXFxzKy8pO1xuICAgICAgICAgICAgaWYgKHBvcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgIHBvc1sxXSA9IFwiNTAlXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgvJSQvLnRlc3QocG9zWzBdKSkge1xuICAgICAgICAgICAgICAgIHBvc1swXSA9IHBhcnNlRmxvYXQocG9zWzBdKSAvIDEwMCAqIChvcmdCb3gud2lkdGggLSBpbWdfd2lkdGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NbMF0gPSBwYXJzZUZsb2F0KHBvc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoLyUkLy50ZXN0KHBvc1sxXSkpIHtcbiAgICAgICAgICAgICAgICBwb3NbMV0gPSBwYXJzZUZsb2F0KHBvc1sxXSkgLyAxMDAgKiAob3JnQm94LmhlaWdodCAtIGltZ19oZWlnaHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NbMV0gPSBwYXJzZUZsb2F0KHBvc1sxXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZWN0ID0gbmV3IGdlby5SZWN0KFsgb3JnQm94LmxlZnQgKyBwb3NbMF0sIG9yZ0JveC50b3AgKyBwb3NbMV0gXSwgWyBpbWdfd2lkdGgsIGltZ19oZWlnaHQgXSk7XG5cbiAgICAgICAgICAgIC8vIFhYWDogYmFja2dyb3VuZC1yZXBlYXQgY291bGQgYmUgaW1wbGVtZW50ZWQgbW9yZVxuICAgICAgICAgICAgLy8gICAgICBlZmZpY2llbnRseSBhcyBhIGZpbGwgcGF0dGVybiAoYXQgbGVhc3QgZm9yIFBERlxuICAgICAgICAgICAgLy8gICAgICBvdXRwdXQsIHByb2JhYmx5IFNWRyB0b28pLlxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXdYKCkge1xuICAgICAgICAgICAgICAgIHdoaWxlIChyZWN0Lm9yaWdpbi54ID4gYm94LmxlZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdC5vcmlnaW4ueCAtPSBpbWdfd2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXdZKCkge1xuICAgICAgICAgICAgICAgIHdoaWxlIChyZWN0Lm9yaWdpbi55ID4gYm94LnRvcCkge1xuICAgICAgICAgICAgICAgICAgICByZWN0Lm9yaWdpbi55IC09IGltZ19oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiByZXBlYXRYKCkge1xuICAgICAgICAgICAgICAgIHdoaWxlIChyZWN0Lm9yaWdpbi54IDwgYm94LnJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckJHKGdyb3VwLCByZWN0LmNsb25lKCkpO1xuICAgICAgICAgICAgICAgICAgICByZWN0Lm9yaWdpbi54ICs9IGltZ193aWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChiYWNrZ3JvdW5kUmVwZWF0ID09IFwibm8tcmVwZWF0XCIpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJCRyhncm91cCwgcmVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChiYWNrZ3JvdW5kUmVwZWF0ID09IFwicmVwZWF0LXhcIikge1xuICAgICAgICAgICAgICAgIHJld1goKTtcbiAgICAgICAgICAgICAgICByZXBlYXRYKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChiYWNrZ3JvdW5kUmVwZWF0ID09IFwicmVwZWF0LXlcIikge1xuICAgICAgICAgICAgICAgIHJld1koKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocmVjdC5vcmlnaW4ueSA8IGJveC5ib3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyQkcoZ3JvdXAsIHJlY3QuY2xvbmUoKSk7XG4gICAgICAgICAgICAgICAgICAgIHJlY3Qub3JpZ2luLnkgKz0gaW1nX2hlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChiYWNrZ3JvdW5kUmVwZWF0ID09IFwicmVwZWF0XCIpIHtcbiAgICAgICAgICAgICAgICByZXdYKCk7XG4gICAgICAgICAgICAgICAgcmV3WSgpO1xuICAgICAgICAgICAgICAgIHZhciBvcmlnaW4gPSByZWN0Lm9yaWdpbi5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChyZWN0Lm9yaWdpbi55IDwgYm94LmJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICByZWN0Lm9yaWdpbi54ID0gb3JpZ2luLng7XG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdFgoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVjdC5vcmlnaW4ueSArPSBpbWdfaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRyYXdCdWxsZXQoKSB7XG4gICAgICAgIHZhciBsaXN0U3R5bGVUeXBlID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJsaXN0LXN0eWxlLXR5cGVcIik7XG4gICAgICAgIGlmIChsaXN0U3R5bGVUeXBlID09IFwibm9uZVwiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpc3RTdHlsZVBvc2l0aW9uID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJsaXN0LXN0eWxlLXBvc2l0aW9uXCIpO1xuXG4gICAgICAgIGZ1bmN0aW9uIF9kcmF3QnVsbGV0KGYpIHtcbiAgICAgICAgICAgIHNhdmVTdHlsZShlbGVtZW50LCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgICAgICAgICAgICAgdmFyIGJ1bGxldCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KEtFTkRPX1BTRVVET19FTEVNRU5UKTtcbiAgICAgICAgICAgICAgICBidWxsZXQuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgICAgICAgICAgYnVsbGV0LnN0eWxlLmJveFNpemluZyA9IFwiYm9yZGVyLWJveFwiO1xuICAgICAgICAgICAgICAgIGlmIChsaXN0U3R5bGVQb3NpdGlvbiA9PSBcIm91dHNpZGVcIikge1xuICAgICAgICAgICAgICAgICAgICBidWxsZXQuc3R5bGUud2lkdGggPSBcIjZlbVwiO1xuICAgICAgICAgICAgICAgICAgICBidWxsZXQuc3R5bGUubGVmdCA9IFwiLTYuOGVtXCI7XG4gICAgICAgICAgICAgICAgICAgIGJ1bGxldC5zdHlsZS50ZXh0QWxpZ24gPSBcInJpZ2h0XCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnVsbGV0LnN0eWxlLmxlZnQgPSBcIjBweFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmKGJ1bGxldCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoYnVsbGV0LCBlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIHJlbmRlckVsZW1lbnQoYnVsbGV0LCBncm91cCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChidWxsZXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBlbGVtZW50SW5kZXgoZikge1xuICAgICAgICAgICAgdmFyIGEgPSBlbGVtZW50LnBhcmVudE5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgICB2YXIgayA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwia2VuZG8tc3BsaXQtaW5kZXhcIik7XG4gICAgICAgICAgICBpZiAoayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYoa3wwLCBhLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAoYVtpXSA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZihpLCBhLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChsaXN0U3R5bGVUeXBlKSB7XG4gICAgICAgICAgY2FzZSBcImNpcmNsZVwiOlxuICAgICAgICAgIGNhc2UgXCJkaXNjXCI6XG4gICAgICAgICAgY2FzZSBcInNxdWFyZVwiOlxuICAgICAgICAgICAgX2RyYXdCdWxsZXQoZnVuY3Rpb24oYnVsbGV0KXtcbiAgICAgICAgICAgICAgICAvLyBYWFg6IHRoZSBzY2llbmNlIGJlaGluZCB0aGVzZSB2YWx1ZXMgaXMgY2FsbGVkIFwidHJpYWwgYW5kIGVycm9yXCIuXG4gICAgICAgICAgICAgICAgYnVsbGV0LnN0eWxlLmZvbnRTaXplID0gXCI2MCVcIjtcbiAgICAgICAgICAgICAgICBidWxsZXQuc3R5bGUubGluZUhlaWdodCA9IFwiMjAwJVwiO1xuICAgICAgICAgICAgICAgIGJ1bGxldC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIjAuNWVtXCI7XG4gICAgICAgICAgICAgICAgYnVsbGV0LnN0eWxlLmZvbnRGYW1pbHkgPSBcIkRlamFWdSBTZXJpZlwiO1xuICAgICAgICAgICAgICAgIGJ1bGxldC5pbm5lckhUTUwgPSB7XG4gICAgICAgICAgICAgICAgICAgIFwiZGlzY1wiICAgOiBcIlxcdTI1Y2ZcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjaXJjbGVcIiA6IFwiXFx1MjVlZlwiLFxuICAgICAgICAgICAgICAgICAgICBcInNxdWFyZVwiIDogXCJcXHUyNWEwXCJcbiAgICAgICAgICAgICAgICB9W2xpc3RTdHlsZVR5cGVdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgXCJkZWNpbWFsXCI6XG4gICAgICAgICAgY2FzZSBcImRlY2ltYWwtbGVhZGluZy16ZXJvXCI6XG4gICAgICAgICAgICBfZHJhd0J1bGxldChmdW5jdGlvbihidWxsZXQpe1xuICAgICAgICAgICAgICAgIGVsZW1lbnRJbmRleChmdW5jdGlvbihpZHgpe1xuICAgICAgICAgICAgICAgICAgICArK2lkeDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RTdHlsZVR5cGUgPT0gXCJkZWNpbWFsLWxlYWRpbmctemVyb1wiICYmIGlkeCA8IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZHggPSBcIjBcIiArIGlkeDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBidWxsZXQuaW5uZXJIVE1MID0gaWR4ICsgXCIuXCI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBcImxvd2VyLXJvbWFuXCI6XG4gICAgICAgICAgY2FzZSBcInVwcGVyLXJvbWFuXCI6XG4gICAgICAgICAgICBfZHJhd0J1bGxldChmdW5jdGlvbihidWxsZXQpe1xuICAgICAgICAgICAgICAgIGVsZW1lbnRJbmRleChmdW5jdGlvbihpZHgpe1xuICAgICAgICAgICAgICAgICAgICBpZHggPSBhcmFiaWNUb1JvbWFuKGlkeCArIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdFN0eWxlVHlwZSA9PSBcInVwcGVyLXJvbWFuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IGlkeC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJ1bGxldC5pbm5lckhUTUwgPSBpZHggKyBcIi5cIjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIFwibG93ZXItbGF0aW5cIjpcbiAgICAgICAgICBjYXNlIFwibG93ZXItYWxwaGFcIjpcbiAgICAgICAgICBjYXNlIFwidXBwZXItbGF0aW5cIjpcbiAgICAgICAgICBjYXNlIFwidXBwZXItYWxwaGFcIjpcbiAgICAgICAgICAgIF9kcmF3QnVsbGV0KGZ1bmN0aW9uKGJ1bGxldCl7XG4gICAgICAgICAgICAgICAgZWxlbWVudEluZGV4KGZ1bmN0aW9uKGlkeCl7XG4gICAgICAgICAgICAgICAgICAgIGlkeCA9IGFscGhhTnVtZXJhbChpZHgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoL151cHBlci9pLnRlc3QobGlzdFN0eWxlVHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IGlkeC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJ1bGxldC5pbm5lckhUTUwgPSBpZHggKyBcIi5cIjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkcmF3cyBhIHNpbmdsZSBib3JkZXIgYm94XG4gICAgZnVuY3Rpb24gZHJhd09uZUJveChib3gsIGlzRmlyc3QsIGlzTGFzdCkge1xuICAgICAgICBpZiAoYm94LndpZHRoID09PSAwIHx8IGJveC5oZWlnaHQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdCYWNrZ3JvdW5kKGJveCk7XG5cbiAgICAgICAgdmFyIHNob3VsZERyYXdMZWZ0ID0gKGxlZnQud2lkdGggPiAwICYmICgoaXNGaXJzdCAmJiBkaXIgPT0gXCJsdHJcIikgfHwgKGlzTGFzdCAmJiBkaXIgPT0gXCJydGxcIikpKTtcbiAgICAgICAgdmFyIHNob3VsZERyYXdSaWdodCA9IChyaWdodC53aWR0aCA+IDAgJiYgKChpc0xhc3QgJiYgZGlyID09IFwibHRyXCIpIHx8IChpc0ZpcnN0ICYmIGRpciA9PSBcInJ0bFwiKSkpO1xuXG4gICAgICAgIC8vIFRoZSBtb3N0IGdlbmVyYWwgY2FzZSBpcyB0aGF0IHRoZSA0IGJvcmRlcnMgaGF2ZSBkaWZmZXJlbnQgd2lkdGhzIGFuZCBib3JkZXJcbiAgICAgICAgLy8gcmFkaXVzZXMuICBUaGUgd2F5IHRoYXQgaXMgaGFuZGxlZCBpcyBieSBkcmF3aW5nIDMgUGF0aHMgZm9yIGVhY2ggYm9yZGVyOiB0aGVcbiAgICAgICAgLy8gc3RyYWlnaHQgbGluZSwgYW5kIHR3byByb3VuZCBjb3JuZXJzIHdoaWNoIHJlcHJlc2VudCBoYWxmIG9mIHRoZSBlbnRpcmUgcm91bmRlZFxuICAgICAgICAvLyBjb3JuZXIuICBUbyBzaW1wbGlmeSBjb2RlIHRob3NlIHNoYXBlcyBhcmUgZHJhd2VkIGF0IG9yaWdpbiAoYnkgdGhlIGRyYXdFZGdlXG4gICAgICAgIC8vIGZ1bmN0aW9uKSwgdGhlbiB0cmFuc2xhdGVkL3JvdGF0ZWQgaW50byB0aGUgcmlnaHQgcG9zaXRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEhvd2V2ZXIsIHRoaXMgbGVhZHMgdG8gcG9vciByZXN1bHRzIGR1ZSB0byByb3VuZGluZyBpbiB0aGUgc2ltcGxlciBjYXNlcyB3aGVyZVxuICAgICAgICAvLyBib3JkZXJzIGFyZSBzdHJhaWdodCBsaW5lcy4gIFRoZXJlZm9yZSB3ZSBoYW5kbGUgYSBmZXcgc3VjaCBjYXNlcyBzZXBhcmF0ZWx5IHdpdGhcbiAgICAgICAgLy8gc3RyYWlnaHQgbGluZXMuIENed0Ned0NedyAtLSBub3BlLCBzY3JhdGNoIHRoYXQuICBwb29yIHJlbmRlcmluZyB3YXMgYmVjYXVzZSBvZiBhIGJ1Z1xuICAgICAgICAvLyBpbiBDaHJvbWUgKGdldENsaWVudFJlY3RzKCkgcmV0dXJucyByb3VuZGVkIGludGVnZXIgdmFsdWVzIHJhdGhlciB0aGFuIGV4YWN0IGZsb2F0cy5cbiAgICAgICAgLy8gd2ViIGRldiBpcyBzdGlsbCBhIGdoZXR0by4pXG5cbiAgICAgICAgLy8gZmlyc3QsIGp1c3QgaW4gY2FzZSB0aGVyZSBpcyBubyBib3JkZXIuLi5cbiAgICAgICAgaWYgKHRvcC53aWR0aCA9PT0gMCAmJiBsZWZ0LndpZHRoID09PSAwICYmIHJpZ2h0LndpZHRoID09PSAwICYmIGJvdHRvbS53aWR0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU1RBUlQgcGFpbnQgYm9yZGVyc1xuICAgICAgICAvLyBpZiBhbGwgYm9yZGVycyBoYXZlIGVxdWFsIGNvbG9ycy4uLlxuICAgICAgICBpZiAodG9wLmNvbG9yID09IHJpZ2h0LmNvbG9yICYmIHRvcC5jb2xvciA9PSBib3R0b20uY29sb3IgJiYgdG9wLmNvbG9yID09IGxlZnQuY29sb3IpIHtcblxuICAgICAgICAgICAgLy8gaWYgc2FtZSB3aWR0aHMgdG9vLCB3ZSBjYW4gZHJhdyB0aGUgd2hvbGUgYm9yZGVyIGJ5IHN0cm9raW5nIGEgc2luZ2xlIHBhdGguXG4gICAgICAgICAgICBpZiAodG9wLndpZHRoID09IHJpZ2h0LndpZHRoICYmIHRvcC53aWR0aCA9PSBib3R0b20ud2lkdGggJiYgdG9wLndpZHRoID09IGxlZnQud2lkdGgpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZERyYXdMZWZ0ICYmIHNob3VsZERyYXdSaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZWR1Y2UgYm94IGJ5IGhhbGYgdGhlIGJvcmRlciB3aWR0aCwgc28gd2UgY2FuIGRyYXcgaXQgYnkgc3Ryb2tpbmcuXG4gICAgICAgICAgICAgICAgICAgIGJveCA9IGlubmVyQm94KGJveCwgdG9wLndpZHRoLzIpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkanVzdCB0aGUgYm9yZGVyIHJhZGl1c2VzLCBhZ2FpbiBieSB0b3Aud2lkdGgvMiwgYW5kIG1ha2UgdGhlIHBhdGggZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGggPSBlbGVtZW50Um91bmRCb3goZWxlbWVudCwgYm94LCB0b3Aud2lkdGgvMik7XG4gICAgICAgICAgICAgICAgICAgIHBhdGgub3B0aW9ucy5zdHJva2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdG9wLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRvcC53aWR0aFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBncm91cC5hcHBlbmQocGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBib3JkZXIgcmFkaXVzZXMgYXJlIHplcm8gYW5kIHdpZHRocyBhcmUgYXQgbW9zdCBvbmUgcGl4ZWwsIHdlIGNhbiBhZ2FpbiB1c2Ugc2ltcGxlXG4gICAgICAgIC8vIHBhdGhzLlxuICAgICAgICBpZiAoclRMMC54ID09PSAwICYmIHJUUjAueCA9PT0gMCAmJiByQlIwLnggPT09IDAgJiYgckJMMC54ID09PSAwKSB7XG4gICAgICAgICAgICAvLyBhbHJpZ2h0LCAxLjlweCB3aWxsIGRvIGFzIHdlbGwuICB0aGUgZGlmZmVyZW5jZSBpbiBjb2xvciBibGVuZGluZyBzaG91bGQgbm90IGJlXG4gICAgICAgICAgICAvLyBub3RpY2VhYmxlLlxuICAgICAgICAgICAgaWYgKHRvcC53aWR0aCA8IDIgJiYgbGVmdC53aWR0aCA8IDIgJiYgcmlnaHQud2lkdGggPCAyICYmIGJvdHRvbS53aWR0aCA8IDIpIHtcbiAgICAgICAgICAgICAgICAvLyB0b3AgYm9yZGVyXG4gICAgICAgICAgICAgICAgaWYgKHRvcC53aWR0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBhdGgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogeyB3aWR0aDogdG9wLndpZHRoLCBjb2xvcjogdG9wLmNvbG9yIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1vdmVUbyhib3gubGVmdCwgYm94LnRvcCArIHRvcC53aWR0aC8yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5saW5lVG8oYm94LnJpZ2h0LCBib3gudG9wICsgdG9wLndpZHRoLzIpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gYm90dG9tIGJvcmRlclxuICAgICAgICAgICAgICAgIGlmIChib3R0b20ud2lkdGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmFwcGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQYXRoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHsgd2lkdGg6IGJvdHRvbS53aWR0aCwgY29sb3I6IGJvdHRvbS5jb2xvciB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tb3ZlVG8oYm94LmxlZnQsIGJveC5ib3R0b20gLSBib3R0b20ud2lkdGgvMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubGluZVRvKGJveC5yaWdodCwgYm94LmJvdHRvbSAtIGJvdHRvbS53aWR0aC8yKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGxlZnQgYm9yZGVyXG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZERyYXdMZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmFwcGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQYXRoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHsgd2lkdGg6IGxlZnQud2lkdGgsIGNvbG9yOiBsZWZ0LmNvbG9yIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1vdmVUbyhib3gubGVmdCArIGxlZnQud2lkdGgvMiwgYm94LnRvcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubGluZVRvKGJveC5sZWZ0ICsgbGVmdC53aWR0aC8yLCBib3guYm90dG9tKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHJpZ2h0IGJvcmRlclxuICAgICAgICAgICAgICAgIGlmIChzaG91bGREcmF3UmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBhdGgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZTogeyB3aWR0aDogcmlnaHQud2lkdGgsIGNvbG9yOiByaWdodC5jb2xvciB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tb3ZlVG8oYm94LnJpZ2h0IC0gcmlnaHQud2lkdGgvMiwgYm94LnRvcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubGluZVRvKGJveC5yaWdodCAtIHJpZ2h0LndpZHRoLzIsIGJveC5ib3R0b20pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVORCBwYWludCBib3JkZXJzXG5cbiAgICAgICAgdmFyIHRtcCA9IGFkanVzdEJvcmRlclJhZGl1c0ZvckJveChib3gsIHJUTDAsIHJUUjAsIHJCUjAsIHJCTDApO1xuICAgICAgICB2YXIgclRMID0gdG1wLnRsO1xuICAgICAgICB2YXIgclRSID0gdG1wLnRyO1xuICAgICAgICB2YXIgckJSID0gdG1wLmJyO1xuICAgICAgICB2YXIgckJMID0gdG1wLmJsO1xuXG4gICAgICAgIC8vIHRvcCBib3JkZXJcbiAgICAgICAgZHJhd0VkZ2UodG9wLmNvbG9yLFxuICAgICAgICAgICAgICAgICBib3gud2lkdGgsIHRvcC53aWR0aCwgbGVmdC53aWR0aCwgcmlnaHQud2lkdGgsXG4gICAgICAgICAgICAgICAgIHJUTCwgclRSLFxuICAgICAgICAgICAgICAgICBbIDEsIDAsIDAsIDEsIGJveC5sZWZ0LCBib3gudG9wIF0pO1xuXG4gICAgICAgIC8vIGJvdHRvbSBib3JkZXJcbiAgICAgICAgZHJhd0VkZ2UoYm90dG9tLmNvbG9yLFxuICAgICAgICAgICAgICAgICBib3gud2lkdGgsIGJvdHRvbS53aWR0aCwgcmlnaHQud2lkdGgsIGxlZnQud2lkdGgsXG4gICAgICAgICAgICAgICAgIHJCUiwgckJMLFxuICAgICAgICAgICAgICAgICBbIC0xLCAwLCAwLCAtMSwgYm94LnJpZ2h0LCBib3guYm90dG9tIF0pO1xuXG4gICAgICAgIC8vIGZvciBsZWZ0L3JpZ2h0IGJvcmRlcnMgd2UgbmVlZCB0byBpbnZlcnQgdGhlIGJvcmRlci1yYWRpdXNlc1xuICAgICAgICBmdW5jdGlvbiBpbnYocCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgeDogcC55LCB5OiBwLnggfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxlZnQgYm9yZGVyXG4gICAgICAgIGRyYXdFZGdlKGxlZnQuY29sb3IsXG4gICAgICAgICAgICAgICAgIGJveC5oZWlnaHQsIGxlZnQud2lkdGgsIGJvdHRvbS53aWR0aCwgdG9wLndpZHRoLFxuICAgICAgICAgICAgICAgICBpbnYockJMKSwgaW52KHJUTCksXG4gICAgICAgICAgICAgICAgIFsgMCwgLTEsIDEsIDAsIGJveC5sZWZ0LCBib3guYm90dG9tIF0pO1xuXG4gICAgICAgIC8vIHJpZ2h0IGJvcmRlclxuICAgICAgICBkcmF3RWRnZShyaWdodC5jb2xvcixcbiAgICAgICAgICAgICAgICAgYm94LmhlaWdodCwgcmlnaHQud2lkdGgsIHRvcC53aWR0aCwgYm90dG9tLndpZHRoLFxuICAgICAgICAgICAgICAgICBpbnYoclRSKSwgaW52KHJCUiksXG4gICAgICAgICAgICAgICAgIFsgMCwgMSwgLTEsIDAsIGJveC5yaWdodCwgYm94LnRvcCBdKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdyYWRpZW50UmVuZGVyZXIoZ3JhZGllbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZ3JvdXAsIHJlY3QpIHtcbiAgICAgICAgdmFyIHdpZHRoID0gcmVjdC53aWR0aCgpLCBoZWlnaHQgPSByZWN0LmhlaWdodCgpO1xuXG4gICAgICAgIHN3aXRjaCAoZ3JhZGllbnQudHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJsaW5lYXJcIjpcblxuICAgICAgICAgICAgLy8gZmlndXJlIG91dCB0aGUgYW5nbGUuXG4gICAgICAgICAgICB2YXIgYW5nbGUgPSBncmFkaWVudC5hbmdsZSAhPSBudWxsID8gZ3JhZGllbnQuYW5nbGUgOiBNYXRoLlBJO1xuICAgICAgICAgICAgc3dpdGNoIChncmFkaWVudC50bykge1xuICAgICAgICAgICAgICBjYXNlIFwidG9wXCI6XG4gICAgICAgICAgICAgICAgYW5nbGUgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICAgICAgICAgIGFuZ2xlID0gLU1hdGguUEkgLyAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiYm90dG9tXCI6XG4gICAgICAgICAgICAgICAgYW5nbGUgPSBNYXRoLlBJO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgICAgICAgICAgICBhbmdsZSA9IE1hdGguUEkgLyAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidG9wIGxlZnRcIjogY2FzZSBcImxlZnQgdG9wXCI6XG4gICAgICAgICAgICAgICAgYW5nbGUgPSAtTWF0aC5hdGFuMihoZWlnaHQsIHdpZHRoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInRvcCByaWdodFwiOiBjYXNlIFwicmlnaHQgdG9wXCI6XG4gICAgICAgICAgICAgICAgYW5nbGUgPSBNYXRoLmF0YW4yKGhlaWdodCwgd2lkdGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiYm90dG9tIGxlZnRcIjogY2FzZSBcImxlZnQgYm90dG9tXCI6XG4gICAgICAgICAgICAgICAgYW5nbGUgPSBNYXRoLlBJICsgTWF0aC5hdGFuMihoZWlnaHQsIHdpZHRoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImJvdHRvbSByaWdodFwiOiBjYXNlIFwicmlnaHQgYm90dG9tXCI6XG4gICAgICAgICAgICAgICAgYW5nbGUgPSBNYXRoLlBJIC0gTWF0aC5hdGFuMihoZWlnaHQsIHdpZHRoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGdyYWRpZW50LnJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICBhbmdsZSAtPSBNYXRoLlBJO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBsaW1pdCB0aGUgYW5nbGUgYmV0d2VlbiAwLi4yUElcbiAgICAgICAgICAgIGFuZ2xlICU9IDIgKiBNYXRoLlBJO1xuICAgICAgICAgICAgaWYgKGFuZ2xlIDwgMCkge1xuICAgICAgICAgICAgICAgIGFuZ2xlICs9IDIgKiBNYXRoLlBJO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjb21wdXRlIGdyYWRpZW50J3Mgc3RhcnQvZW5kIHBvaW50cy4gIGhlcmUgbGVuIGlzIHRoZSBsZW5ndGggb2YgdGhlIGdyYWRpZW50IGxpbmVcbiAgICAgICAgICAgIC8vIGFuZCB4LHkgaXMgdGhlIGVuZCBwb2ludCByZWxhdGl2ZSB0byB0aGUgY2VudGVyIG9mIHRoZSByZWN0YW5nbGUgaW4gY29udmVudGlvbmFsXG4gICAgICAgICAgICAvLyAobWF0aCkgYXhpcyBkaXJlY3Rpb24uXG5cbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIG9yaWdpbmFsICh1bnNjYWxlZCkgbGVuZ3RoIG9mIHRoZSBncmFkaWVudCBsaW5lLiAgbmVlZGVkIHRvIGRlYWwgd2l0aFxuICAgICAgICAgICAgLy8gYWJzb2x1dGVseSBwb3NpdGlvbmVkIGNvbG9yIHN0b3BzLiAgZm9ybXVsYSBmcm9tIHRoZSBDU1Mgc3BlYzpcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzcy1pbWFnZXMtMy8jbGluZWFyLWdyYWRpZW50LXN5bnRheFxuICAgICAgICAgICAgdmFyIHB4bGVuID0gTWF0aC5hYnMod2lkdGggKiBNYXRoLnNpbihhbmdsZSkpICsgTWF0aC5hYnMoaGVpZ2h0ICogTWF0aC5jb3MoYW5nbGUpKTtcblxuICAgICAgICAgICAgLy8gVGhlIG1hdGggYmVsb3cgaXMgcHJldHR5IHNpbXBsZSwgYnV0IGl0IHRvb2sgYSB3aGlsZSB0byBmaWd1cmUgb3V0LiAgV2UgY29tcHV0ZSB4XG4gICAgICAgICAgICAvLyBhbmQgeSwgdGhlICplbmQqIG9mIHRoZSBncmFkaWVudCBsaW5lLiAgSG93ZXZlciwgd2Ugd2FudCB0byB0cmFuc2Zvcm0gdGhlbSBpbnRvXG4gICAgICAgICAgICAvLyBlbGVtZW50LWJhc2VkIGNvb3JkaW5hdGVzIChTVkcncyBncmFkaWVudFVuaXRzPVwib2JqZWN0Qm91bmRpbmdCb3hcIikuICBUaGF0IG1lYW5zLFxuICAgICAgICAgICAgLy8geD0wIGlzIHRoZSBsZWZ0IGVkZ2UsIHg9MSBpcyB0aGUgcmlnaHQgZWRnZSwgeT0wIGlzIHRoZSB0b3AgZWRnZSBhbmQgeT0xIGlzIHRoZVxuICAgICAgICAgICAgLy8gYm90dG9tIGVkZ2UuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gQSBuYWl2ZSBhcHByb2FjaCB3b3VsZCB1c2UgdGhlIG9yaWdpbmFsIGFuZ2xlIGZvciB0aGVzZSBjYWxjdWxhdGlvbnMuICBTYXkgd2UnZFxuICAgICAgICAgICAgLy8gbGlrZSB0byBkcmF3IGEgZ3JhZGllbnQgYW5nbGVkIGF0IDQ1ZGVnIGluIGEgMTAweDQwMCBib3guICBXaGVuIHdlIHVzZVxuICAgICAgICAgICAgLy8gb2JqZWN0Qm91bmRpbmdCb3gsIHRoZSByZW5kZXJlciB3aWxsIGRyYXcgaXQgaW4gYSAxeDEgKnNxdWFyZSogYm94LCBhbmQgdGhlblxuICAgICAgICAgICAgLy8gc2NhbGUgdGhhdCB0byB0aGUgZGVzaXJlZCBkaW1lbnNpb25zLiAgVGhlIDQ1ZGVnIGFuZ2xlIHdpbGwgbG9vayBtb3JlIGxpa2UgNzBkZWdcbiAgICAgICAgICAgIC8vIGFmdGVyIHNjYWxpbmcuICBTVkcgKGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9wc2VydmVycy5odG1sI0xpbmVhckdyYWRpZW50cykgc2F5c1xuICAgICAgICAgICAgLy8gdGhlIGZvbGxvd2luZzpcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgICAgV2hlbiBncmFkaWVudFVuaXRzPVwib2JqZWN0Qm91bmRpbmdCb3hcIiBhbmQgJ2dyYWRpZW50VHJhbnNmb3JtJyBpcyB0aGVcbiAgICAgICAgICAgIC8vICAgICBpZGVudGl0eSBtYXRyaXgsIHRoZSBub3JtYWwgb2YgdGhlIGxpbmVhciBncmFkaWVudCBpcyBwZXJwZW5kaWN1bGFyIHRvIHRoZVxuICAgICAgICAgICAgLy8gICAgIGdyYWRpZW50IHZlY3RvciBpbiBvYmplY3QgYm91bmRpbmcgYm94IHNwYWNlIChpLmUuLCB0aGUgYWJzdHJhY3QgY29vcmRpbmF0ZVxuICAgICAgICAgICAgLy8gICAgIHN5c3RlbSB3aGVyZSAoMCwwKSBpcyBhdCB0aGUgdG9wL2xlZnQgb2YgdGhlIG9iamVjdCBib3VuZGluZyBib3ggYW5kICgxLDEpIGlzXG4gICAgICAgICAgICAvLyAgICAgYXQgdGhlIGJvdHRvbS9yaWdodCBvZiB0aGUgb2JqZWN0IGJvdW5kaW5nIGJveCkuIFdoZW4gdGhlIG9iamVjdCdzIGJvdW5kaW5nXG4gICAgICAgICAgICAvLyAgICAgYm94IGlzIG5vdCBzcXVhcmUsIHRoZSBncmFkaWVudCBub3JtYWwgd2hpY2ggaXMgaW5pdGlhbGx5IHBlcnBlbmRpY3VsYXIgdG9cbiAgICAgICAgICAgIC8vICAgICB0aGUgZ3JhZGllbnQgdmVjdG9yIHdpdGhpbiBvYmplY3QgYm91bmRpbmcgYm94IHNwYWNlIG1heSByZW5kZXJcbiAgICAgICAgICAgIC8vICAgICBub24tcGVycGVuZGljdWxhciByZWxhdGl2ZSB0byB0aGUgZ3JhZGllbnQgdmVjdG9yIGluIHVzZXIgc3BhY2UuIElmIHRoZVxuICAgICAgICAgICAgLy8gICAgIGdyYWRpZW50IHZlY3RvciBpcyBwYXJhbGxlbCB0byBvbmUgb2YgdGhlIGF4ZXMgb2YgdGhlIGJvdW5kaW5nIGJveCwgdGhlXG4gICAgICAgICAgICAvLyAgICAgZ3JhZGllbnQgbm9ybWFsIHdpbGwgcmVtYWluIHBlcnBlbmRpY3VsYXIuIFRoaXMgdHJhbnNmb3JtYXRpb24gaXMgZHVlIHRvXG4gICAgICAgICAgICAvLyAgICAgYXBwbGljYXRpb24gb2YgdGhlIG5vbi11bmlmb3JtIHNjYWxpbmcgdHJhbnNmb3JtYXRpb24gZnJvbSBib3VuZGluZyBib3ggc3BhY2VcbiAgICAgICAgICAgIC8vICAgICB0byB1c2VyIHNwYWNlLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIHdoaWNoIGlzIGFuIGV4dHJlbWVseSBsb25nIGFuZCBjb25mdXNpbmcgd2F5IHRvIHRlbGwgd2hhdCBJIGp1c3Qgc2FpZCBhYm92ZS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBGb3IgdGhpcyByZWFzb24gd2UgbmVlZCB0byBhcHBseSB0aGUgcmV2ZXJzZSBzY2FsaW5nIHRvIHRoZSBvcmlnaW5hbCBhbmdsZSwgc29cbiAgICAgICAgICAgIC8vIHRoYXQgd2hlbiBpdCdsbCBmaW5hbGx5IGJlIHJlbmRlcmVkIGl0J2xsIGFjdHVhbGx5IGJlIGF0IHRoZSBkZXNpcmVkIHNsb3BlLiAgTm93XG4gICAgICAgICAgICAvLyBJJ2xsIGxldCB5b3UgZmlndXJlIG91dCB0aGUgbWF0aCB5b3Vyc2VsZi5cblxuICAgICAgICAgICAgdmFyIHNjYWxlZEFuZ2xlID0gTWF0aC5hdGFuKHdpZHRoICogTWF0aC50YW4oYW5nbGUpIC8gaGVpZ2h0KTtcbiAgICAgICAgICAgIHZhciBzaW4gPSBNYXRoLnNpbihzY2FsZWRBbmdsZSksIGNvcyA9IE1hdGguY29zKHNjYWxlZEFuZ2xlKTtcbiAgICAgICAgICAgIHZhciBsZW4gPSBNYXRoLmFicyhzaW4pICsgTWF0aC5hYnMoY29zKTtcbiAgICAgICAgICAgIHZhciB4ID0gbGVuLzIgKiBzaW47XG4gICAgICAgICAgICB2YXIgeSA9IGxlbi8yICogY29zO1xuXG4gICAgICAgICAgICAvLyBCZWNhdXNlIG9mIHRoZSBhcmN0YW5nZW50LCBvdXIgc2NhbGVkQW5nbGUgZW5kcyB1cCBiZXR3ZWVuIC1QSS8yLi5QSS8yLCBwb3NzaWJseVxuICAgICAgICAgICAgLy8gbG9zaW5nIHRoZSBpbnRlbmRlZCBkaXJlY3Rpb24gb2YgdGhlIGdyYWRpZW50LiAgVGhlIGZvbGxvd2luZyBmaXhlcyBpdC5cbiAgICAgICAgICAgIGlmIChhbmdsZSA+IE1hdGguUEkvMiAmJiBhbmdsZSA8PSAzKk1hdGguUEkvMikge1xuICAgICAgICAgICAgICAgIHggPSAteDtcbiAgICAgICAgICAgICAgICB5ID0gLXk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNvbXB1dGUgdGhlIGNvbG9yIHN0b3BzLlxuICAgICAgICAgICAgdmFyIGltcGxpY2l0ID0gW10sIHJpZ2h0ID0gMDtcbiAgICAgICAgICAgIHZhciBzdG9wcyA9IGdyYWRpZW50LnN0b3BzLm1hcChmdW5jdGlvbihzLCBpKXtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gcy5wZXJjZW50O1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChvZmZzZXQpIC8gMTAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChzLmxlbmd0aCkgLyBweGxlbjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT0gZ3JhZGllbnQuc3RvcHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc3RvcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHMuY29sb3IudG9Dc3NSZ2JhKCksXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZpeCBpbXBsaWNpdCBvZmZzZXRzXG4gICAgICAgICAgICAgICAgICAgIGltcGxpY2l0LmZvckVhY2goZnVuY3Rpb24ocywgaSl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcCA9IHMuc3RvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3Aub2Zmc2V0ID0gcy5sZWZ0ICsgKHJpZ2h0IC0gcy5sZWZ0KSAqIChpICsgMSkgLyAoaW1wbGljaXQubGVuZ3RoICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpbXBsaWNpdCA9IFtdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGltcGxpY2l0LnB1c2goeyBsZWZ0OiByaWdodCwgc3RvcDogc3RvcCB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0b3A7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gWyAwLjUgLSB4LCAwLjUgKyB5IF07XG4gICAgICAgICAgICB2YXIgZW5kID0gWyAwLjUgKyB4LCAwLjUgLSB5IF07XG5cbiAgICAgICAgICAgIC8vIGZpbmFsbHksIGRyYXcgaXQuXG4gICAgICAgICAgICBncm91cC5hcHBlbmQoXG4gICAgICAgICAgICAgICAgUGF0aC5mcm9tUmVjdChyZWN0KVxuICAgICAgICAgICAgICAgICAgICAuc3Ryb2tlKG51bGwpXG4gICAgICAgICAgICAgICAgICAgIC5maWxsKG5ldyBMaW5lYXJHcmFkaWVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCAgICAgOiBzdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCAgICAgICA6IGVuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3BzICAgICA6IHN0b3BzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlclNwYWNlIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInJhZGlhbFwiOlxuICAgICAgICAgICAgLy8gWFhYOlxuICAgICAgICAgICAgaWYgKHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLmxvZykge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5jb25zb2xlLmxvZyhcIlJhZGlhbCBncmFkaWVudHMgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkIGluIEhUTUwgcmVuZGVyZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVuZGVyV2lkZ2V0KGVsZW1lbnQsIGdyb3VwKSB7XG4gICAgdmFyIHZpc3VhbDtcblxuICAgIGlmIChlbGVtZW50Ll9rZW5kb0V4cG9ydFZpc3VhbCkge1xuICAgICAgICB2aXN1YWwgPSBlbGVtZW50Ll9rZW5kb0V4cG9ydFZpc3VhbCgpO1xuICAgIH0gZWxzZSBpZiAod2luZG93LmtlbmRvICYmIHdpbmRvdy5rZW5kby5qUXVlcnkgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUod2luZG93LmtlbmRvLmF0dHIoXCJyb2xlXCIpKSkge1xuICAgICAgICB2YXIgd2lkZ2V0ID0gd2luZG93LmtlbmRvLndpZGdldEluc3RhbmNlKHdpbmRvdy5rZW5kby5qUXVlcnkoZWxlbWVudCkpO1xuICAgICAgICBpZiAod2lkZ2V0ICYmICh3aWRnZXQuZXhwb3J0RE9NVmlzdWFsIHx8IHdpZGdldC5leHBvcnRWaXN1YWwpKSB7XG4gICAgICAgICAgICBpZiAod2lkZ2V0LmV4cG9ydERPTVZpc3VhbCkge1xuICAgICAgICAgICAgICAgIHZpc3VhbCA9IHdpZGdldC5leHBvcnRET01WaXN1YWwoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmlzdWFsID0gd2lkZ2V0LmV4cG9ydFZpc3VhbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF2aXN1YWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB3cmFwID0gbmV3IEdyb3VwKCk7XG4gICAgd3JhcC5jaGlsZHJlbi5wdXNoKHZpc3VhbCk7XG5cbiAgICB2YXIgYmJveCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgd3JhcC50cmFuc2Zvcm0oZ2VvLnRyYW5zZm9ybSgpLnRyYW5zbGF0ZShiYm94LmxlZnQsIGJib3gudG9wKSk7XG5cbiAgICBncm91cC5hcHBlbmQod3JhcCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVuZGVySW1hZ2UoZWxlbWVudCwgdXJsLCBncm91cCkge1xuICAgIHZhciBib3ggPSBnZXRDb250ZW50Qm94KGVsZW1lbnQpO1xuICAgIHZhciByZWN0ID0gbmV3IGdlby5SZWN0KFsgYm94LmxlZnQsIGJveC50b3AgXSwgWyBib3gud2lkdGgsIGJveC5oZWlnaHQgXSk7XG4gICAgdmFyIGltYWdlID0gbmV3IEltYWdlKHVybCwgcmVjdCk7XG4gICAgc2V0Q2xpcHBpbmcoaW1hZ2UsIGVsZW1lbnRSb3VuZEJveChlbGVtZW50LCBib3gsIFwiY29udGVudFwiKSk7XG4gICAgZ3JvdXAuYXBwZW5kKGltYWdlKTtcbn1cblxuZnVuY3Rpb24gekluZGV4U29ydChhLCBiKSB7XG4gICAgdmFyIHNhID0gZ2V0Q29tcHV0ZWRTdHlsZShhKTtcbiAgICB2YXIgc2IgPSBnZXRDb21wdXRlZFN0eWxlKGIpO1xuICAgIHZhciB6YSA9IHBhcnNlRmxvYXQoZ2V0UHJvcGVydHlWYWx1ZShzYSwgXCJ6LWluZGV4XCIpKTtcbiAgICB2YXIgemIgPSBwYXJzZUZsb2F0KGdldFByb3BlcnR5VmFsdWUoc2IsIFwiei1pbmRleFwiKSk7XG4gICAgdmFyIHBhID0gZ2V0UHJvcGVydHlWYWx1ZShzYSwgXCJwb3NpdGlvblwiKTtcbiAgICB2YXIgcGIgPSBnZXRQcm9wZXJ0eVZhbHVlKHNiLCBcInBvc2l0aW9uXCIpO1xuICAgIGlmIChpc05hTih6YSkgJiYgaXNOYU4oemIpKSB7XG4gICAgICAgIGlmICgoL3N0YXRpY3xhYnNvbHV0ZS8udGVzdChwYSkpICYmICgvc3RhdGljfGFic29sdXRlLy50ZXN0KHBiKSkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYSA9PSBcInN0YXRpY1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBiID09IFwic3RhdGljXCIpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAoaXNOYU4oemEpKSB7XG4gICAgICAgIHJldHVybiB6YiA9PT0gMCA/IDAgOiB6YiA+IDAgPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmIChpc05hTih6YikpIHtcbiAgICAgICAgcmV0dXJuIHphID09PSAwID8gMCA6IHphID4gMCA/IDEgOiAtMTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQoemEpIC0gcGFyc2VGbG9hdCh6Yik7XG59XG5cbmZ1bmN0aW9uIGlzRm9ybUZpZWxkKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gL14oPzp0ZXh0YXJlYXxzZWxlY3R8aW5wdXQpJC9pLnRlc3QoZWxlbWVudC50YWdOYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2VsZWN0ZWRPcHRpb24oZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50LnNlbGVjdGVkT3B0aW9ucyAmJiBlbGVtZW50LnNlbGVjdGVkT3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LnNlbGVjdGVkT3B0aW9uc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQub3B0aW9uc1tlbGVtZW50LnNlbGVjdGVkSW5kZXhdO1xufVxuXG5mdW5jdGlvbiByZW5kZXJDaGVja2JveChlbGVtZW50LCBncm91cCkge1xuICAgIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgdmFyIGNvbG9yID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJjb2xvclwiKTtcbiAgICB2YXIgYm94ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoZWxlbWVudC50eXBlID09IFwiY2hlY2tib3hcIikge1xuICAgICAgICBncm91cC5hcHBlbmQoXG4gICAgICAgICAgICBQYXRoLmZyb21SZWN0KFxuICAgICAgICAgICAgICAgIG5ldyBnZW8uUmVjdChbIGJveC5sZWZ0KzEsIGJveC50b3ArMSBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIGJveC53aWR0aC0yLCBib3guaGVpZ2h0LTIgXSlcbiAgICAgICAgICAgICkuc3Ryb2tlKGNvbG9yLCAxKVxuICAgICAgICApO1xuICAgICAgICBpZiAoZWxlbWVudC5jaGVja2VkKSB7XG4gICAgICAgICAgICAvLyBmaWxsIGEgcmVjdGFuZ2xlIGluc2lkZT8gIGxvb2tzIGtpbmRhIHVnbHkuXG4gICAgICAgICAgICAvLyBncm91cC5hcHBlbmQoXG4gICAgICAgICAgICAvLyAgICAgUGF0aC5mcm9tUmVjdChcbiAgICAgICAgICAgIC8vICAgICAgICAgbmV3IGdlby5SZWN0KFsgYm94LmxlZnQrNCwgYm94LnRvcCs0IF0sXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICBbIGJveC53aWR0aC04LCBib3guaGVpZ2h0LThdKVxuICAgICAgICAgICAgLy8gICAgICkuZmlsbChjb2xvcikuc3Ryb2tlKG51bGwpXG4gICAgICAgICAgICAvLyApO1xuXG4gICAgICAgICAgICAvLyBsZXQncyBkcmF3IGEgY2hlY2ttYXJrIGluc3RlYWQuICBhcnRpc3RpYywgZWg/XG4gICAgICAgICAgICBncm91cC5hcHBlbmQoXG4gICAgICAgICAgICAgICAgbmV3IFBhdGgoKVxuICAgICAgICAgICAgICAgICAgICAuc3Ryb2tlKGNvbG9yLCAxLjIpXG4gICAgICAgICAgICAgICAgICAgIC5tb3ZlVG8oYm94LmxlZnQgKyAwLjIyICogYm94LndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveC50b3AgKyAwLjU1ICogYm94LmhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgLmxpbmVUbyhib3gubGVmdCArIDAuNDUgKiBib3gud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm94LnRvcCArIDAuNzUgKiBib3guaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAubGluZVRvKGJveC5sZWZ0ICsgMC43OCAqIGJveC53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3gudG9wICsgMC4yMiAqIGJveC53aWR0aClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBncm91cC5hcHBlbmQoXG4gICAgICAgICAgICBuZXcgQ2lyY2xlKFxuICAgICAgICAgICAgICAgIG5ldyBnZW8uQ2lyY2xlKFtcbiAgICAgICAgICAgICAgICAgICAgKGJveC5sZWZ0ICsgYm94LnJpZ2h0KSAvIDIsXG4gICAgICAgICAgICAgICAgICAgIChib3gudG9wICsgYm94LmJvdHRvbSkgLyAyXG4gICAgICAgICAgICAgICAgXSwgTWF0aC5taW4oYm94LndpZHRoLTIsIGJveC5oZWlnaHQtMikgLyAyKVxuICAgICAgICAgICAgKS5zdHJva2UoY29sb3IsIDEpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChlbGVtZW50LmNoZWNrZWQpIHtcbiAgICAgICAgICAgIGdyb3VwLmFwcGVuZChcbiAgICAgICAgICAgICAgICBuZXcgQ2lyY2xlKFxuICAgICAgICAgICAgICAgICAgICBuZXcgZ2VvLkNpcmNsZShbXG4gICAgICAgICAgICAgICAgICAgICAgICAoYm94LmxlZnQgKyBib3gucmlnaHQpIC8gMixcbiAgICAgICAgICAgICAgICAgICAgICAgIChib3gudG9wICsgYm94LmJvdHRvbSkgLyAyXG4gICAgICAgICAgICAgICAgICAgIF0sIE1hdGgubWluKGJveC53aWR0aC04LCBib3guaGVpZ2h0LTgpIC8gMilcbiAgICAgICAgICAgICAgICApLmZpbGwoY29sb3IpLnN0cm9rZShudWxsKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyRm9ybUZpZWxkKGVsZW1lbnQsIGdyb3VwKSB7XG4gICAgdmFyIHRhZyA9IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICh0YWcgPT0gXCJpbnB1dFwiICYmIChlbGVtZW50LnR5cGUgPT0gXCJjaGVja2JveFwiIHx8IGVsZW1lbnQudHlwZSA9PSBcInJhZGlvXCIpKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJDaGVja2JveChlbGVtZW50LCBncm91cCk7XG4gICAgfVxuICAgIHZhciBwID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIHZhciBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgdmFyIGVsID0gZG9jLmNyZWF0ZUVsZW1lbnQoS0VORE9fUFNFVURPX0VMRU1FTlQpO1xuICAgIHZhciBvcHRpb247XG4gICAgZWwuc3R5bGUuY3NzVGV4dCA9IGdldENzc1RleHQoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSk7XG4gICAgaWYgKHRhZyA9PSBcImlucHV0XCIpIHtcbiAgICAgICAgZWwuc3R5bGUud2hpdGVTcGFjZSA9IFwicHJlXCI7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gXCJzZWxlY3RcIiB8fCB0YWcgPT0gXCJ0ZXh0YXJlYVwiKSB7XG4gICAgICAgIGVsLnN0eWxlLm92ZXJmbG93ID0gXCJhdXRvXCI7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gXCJzZWxlY3RcIikge1xuICAgICAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50Lm9wdGlvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBvcHRpb24gPSBkb2MuY3JlYXRlRWxlbWVudChLRU5ET19QU0VVRE9fRUxFTUVOVCk7XG4gICAgICAgICAgICAgICAgb3B0aW9uLnN0eWxlLmNzc1RleHQgPSBnZXRDc3NUZXh0KGdldENvbXB1dGVkU3R5bGUoZWxlbWVudC5vcHRpb25zW2ldKSk7XG4gICAgICAgICAgICAgICAgb3B0aW9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7IC8vIElFOSBtZXNzZXMgdXAgd2l0aG91dCB0aGlzXG4gICAgICAgICAgICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gZWxlbWVudC5vcHRpb25zW2ldLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb24gPSBnZXRTZWxlY3RlZE9wdGlvbihlbGVtZW50KTtcbiAgICAgICAgICAgIGlmIChvcHRpb24pIHtcbiAgICAgICAgICAgICAgICBlbC50ZXh0Q29udGVudCA9IG9wdGlvbi50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnRleHRDb250ZW50ID0gZWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgcC5pbnNlcnRCZWZvcmUoZWwsIGVsZW1lbnQpO1xuICAgIGVsLnNjcm9sbExlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgZWwuc2Nyb2xsVG9wID0gZWxlbWVudC5zY3JvbGxUb3A7XG5cbiAgICAvLyBtdXN0IHRlbXBvcmFyaWx5IGhpZGUgdGhlIG9yaWdpbmFsIGVsZW1lbnQsIG90aGVyd2lzZSBpdFxuICAgIC8vIG1heSBhZmZlY3QgbGF5b3V0IG9mIHRoZSBmYWtlIGVsZW1lbnQgd2Ugd2FudCB0byByZW5kZXIuXG4gICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICByZW5kZXJDb250ZW50cyhlbCwgZ3JvdXApO1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gICAgcC5yZW1vdmVDaGlsZChlbCk7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNvbnRlbnRzKGVsZW1lbnQsIGdyb3VwKSB7XG4gICAgaWYgKG5vZGVJbmZvLl9zdGFja2luZ0NvbnRleHQuZWxlbWVudCA9PT0gZWxlbWVudCkge1xuICAgICAgICAvLyB0aGUgZ3JvdXAgdGhhdCB3YXMgc2V0IGluIHB1c2hOb2RlSW5mbyBtaWdodCBoYXZlXG4gICAgICAgIC8vIGNoYW5nZWQgZHVlIHRvIGNsaXBwaW5nL3RyYW5zZm9ybXMsIHVwZGF0ZSBpdCBoZXJlLlxuICAgICAgICBub2RlSW5mby5fc3RhY2tpbmdDb250ZXh0Lmdyb3VwID0gZ3JvdXA7XG4gICAgfVxuICAgIHN3aXRjaCAoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgXCJpbWdcIjpcbiAgICAgICAgcmVuZGVySW1hZ2UoZWxlbWVudCwgZWxlbWVudC5zcmMsIGdyb3VwKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJjYW52YXNcIjpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlbmRlckltYWdlKGVsZW1lbnQsIGVsZW1lbnQudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpLCBncm91cCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAvLyB0YWludGVkOyBjYW4ndCBkcmF3IGl0LCBpZ25vcmUuXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgIHJlbmRlckZvcm1GaWVsZChlbGVtZW50LCBncm91cCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXSwgZmxvYXRzID0gW10sIHBvc2l0aW9uZWQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IGVsZW1lbnQuZmlyc3RDaGlsZDsgaTsgaSA9IGkubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoaS5ub2RlVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIDM6ICAgICAgICAgLy8gVGV4dFxuICAgICAgICAgICAgICAgIGlmICgvXFxTLy50ZXN0KGkuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyVGV4dChlbGVtZW50LCBpLCBncm91cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDE6ICAgICAgICAgLy8gRWxlbWVudFxuICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoaSk7XG4gICAgICAgICAgICAgICAgdmFyIGZsb2F0aW5nID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJmbG9hdFwiKTtcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInBvc2l0aW9uXCIpO1xuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiAhPSBcInN0YXRpY1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uZWQucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZmxvYXRpbmcgIT0gXCJub25lXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZmxvYXRzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBtZXJnZVNvcnQoY2hpbGRyZW4sIHpJbmRleFNvcnQpLmZvckVhY2goZnVuY3Rpb24oZWwpeyByZW5kZXJFbGVtZW50KGVsLCBncm91cCk7IH0pO1xuICAgICAgICBtZXJnZVNvcnQoZmxvYXRzLCB6SW5kZXhTb3J0KS5mb3JFYWNoKGZ1bmN0aW9uKGVsKXsgcmVuZGVyRWxlbWVudChlbCwgZ3JvdXApOyB9KTtcbiAgICAgICAgbWVyZ2VTb3J0KHBvc2l0aW9uZWQsIHpJbmRleFNvcnQpLmZvckVhY2goZnVuY3Rpb24oZWwpeyByZW5kZXJFbGVtZW50KGVsLCBncm91cCk7IH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyVGV4dChlbGVtZW50LCBub2RlLCBncm91cCkge1xuICAgIGlmIChlbXB0eUNsaXBib3goKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAocGFyc2VGbG9hdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInRleHQtaW5kZW50XCIpKSA8IC01MDApIHtcbiAgICAgICAgLy8gYXNzdW1lIGl0IHNob3VsZCBub3QgYmUgZGlzcGxheWVkLiAgdGhlIHNsaWRlcidzXG4gICAgICAgIC8vIGRyYWdnYWJsZSBoYW5kbGUgZGlzcGxheXMgYSBEcmFnIHRleHQgZm9yIHNvbWUgcmVhc29uLFxuICAgICAgICAvLyBoYXZpbmcgdGV4dC1pbmRlbnQ6IC0zMzMzcHguXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGV4dCA9IG5vZGUuZGF0YTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIHZhciBlbmQgPSB0ZXh0LnNlYXJjaCgvXFxTXFxzKiQvKSArIDE7XG5cbiAgICBpZiAoIWVuZCkge1xuICAgICAgICByZXR1cm47IC8vIHdoaXRlc3BhY2Utb25seSBub2RlXG4gICAgfVxuXG4gICAgdmFyIGZvbnRTaXplID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJmb250LXNpemVcIik7XG4gICAgdmFyIGxpbmVIZWlnaHQgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImxpbmUtaGVpZ2h0XCIpO1xuXG4gICAgLy8gc2ltcGx5IGdldFByb3BlcnR5VmFsdWUoXCJmb250XCIpIGRvZXNuJ3Qgd29yayBpbiBGaXJlZm94IDotXFxcbiAgICB2YXIgZm9udCA9IFtcbiAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJmb250LXN0eWxlXCIpLFxuICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImZvbnQtdmFyaWFudFwiKSxcbiAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJmb250LXdlaWdodFwiKSxcbiAgICAgICAgZm9udFNpemUsIC8vIG5vIG5lZWQgZm9yIGxpbmUgaGVpZ2h0IGhlcmU7IGl0IGJyZWFrcyBsYXlvdXQgaW4gRkZcbiAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJmb250LWZhbWlseVwiKVxuICAgIF0uam9pbihcIiBcIik7XG5cbiAgICBmb250U2l6ZSA9IHBhcnNlRmxvYXQoZm9udFNpemUpO1xuICAgIGxpbmVIZWlnaHQgPSBwYXJzZUZsb2F0KGxpbmVIZWlnaHQpO1xuXG4gICAgaWYgKGZvbnRTaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29sb3IgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImNvbG9yXCIpO1xuICAgIHZhciByYW5nZSA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHZhciBhbGlnbiA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwidGV4dC1hbGlnblwiKTtcbiAgICB2YXIgaXNKdXN0aWZpZWQgPSBhbGlnbiA9PSBcImp1c3RpZnlcIjtcbiAgICB2YXIgY29sdW1uQ291bnQgPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcImNvbHVtbi1jb3VudFwiLCAxKTtcbiAgICB2YXIgd2hpdGVTcGFjZSA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwid2hpdGUtc3BhY2VcIik7XG4gICAgdmFyIHRleHRUcmFuc2Zvcm0gPSBnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcInRleHQtdHJhbnNmb3JtXCIpO1xuXG4gICAgLy8gQSBsaW5lIG9mIDUwMHB4LCB3aXRoIGEgZm9udCBvZiAxMnB4LCBjb250YWlucyBhbiBhdmVyYWdlIG9mIDgwIGNoYXJhY3RlcnMsIGJ1dCBzaW5jZSB3ZVxuICAgIC8vIGVyciwgd2UnZCBsaWtlIHRvIGd1ZXNzIGEgYmlnZ2VyIG51bWJlciByYXRoZXIgdGhhbiBhIHNtYWxsZXIgb25lLiAgTXVsdGlwbHlpbmcgYnkgNVxuICAgIC8vIHNlZW1zIHRvIGJlIGEgZ29vZCBvcHRpb24uXG4gICAgdmFyIGVzdGltYXRlTGluZUxlbmd0aCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLyBmb250U2l6ZSAqIDU7XG4gICAgaWYgKGVzdGltYXRlTGluZUxlbmd0aCA9PT0gMCkge1xuICAgICAgICBlc3RpbWF0ZUxpbmVMZW5ndGggPSA1MDA7XG4gICAgfVxuXG4gICAgLy8gd2UnbGwgbWFpbnRhaW4gdGhpcyBzbyB3ZSBjYW4gd29ya2Fyb3VuZCBidWdzIGluIENocm9tZSdzIFJhbmdlLmdldENsaWVudFJlY3RzXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8vaXNzdWVzLzU3NDBcbiAgICB2YXIgcHJldkxpbmVCb3R0b20gPSBudWxsO1xuXG4gICAgdmFyIHVuZGVybGluZSA9IG5vZGVJbmZvW1widW5kZXJsaW5lXCJdO1xuICAgIHZhciBsaW5lVGhyb3VnaCA9IG5vZGVJbmZvW1wibGluZS10aHJvdWdoXCJdO1xuICAgIHZhciBvdmVybGluZSA9IG5vZGVJbmZvW1wib3ZlcmxpbmVcIl07XG4gICAgdmFyIGhhc0RlY29yYXRpb24gPSB1bmRlcmxpbmUgfHwgbGluZVRocm91Z2ggfHwgb3ZlcmxpbmU7XG5cbiAgICAvLyBkb0NodW5rIHJldHVybnMgdHJ1ZSB3aGVuIGFsbCB0ZXh0IGhhcyBiZWVuIHJlbmRlcmVkXG4gICAgd2hpbGUgKCFkb0NodW5rKCkpIHt9XG5cbiAgICBpZiAoaGFzRGVjb3JhdGlvbikge1xuICAgICAgICByYW5nZS5zZWxlY3ROb2RlKG5vZGUpO1xuICAgICAgICBzbGljZShyYW5nZS5nZXRDbGllbnRSZWN0cygpKS5mb3JFYWNoKGRlY29yYXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm47ICAgICAgICAgICAgICAgICAvLyBvbmx5IGZ1bmN0aW9uIGRlY2xhcmF0aW9ucyBhZnRlciB0aGlzIGxpbmVcblxuICAgIGZ1bmN0aW9uIGFjdHVhbGx5R2V0UmFuZ2VCb3VuZGluZ1JlY3QocmFuZ2UpIHtcbiAgICAgICAgLy8gWFhYOiB0byBiZSByZXZpc2VkIHdoZW4gdGhpcyBDaHJvbWUgYnVnIGlzIGZpeGVkOlxuICAgICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD02MTI0NTlcbiAgICAgICAgaWYgKG1pY3Jvc29mdCB8fCBicm93c2VyLmNocm9tZSkge1xuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBicm93c2VyIGJ1Z3M6IElFIGFuZCBDaHJvbWUgd291bGQgc29tZXRpbWVzXG4gICAgICAgICAgICAvLyByZXR1cm4gMCBvciAxLXdpZHRoIHJlY3RhbmdsZXMgYmVmb3JlIG9yIGFmdGVyIHRoZSBtYWluXG4gICAgICAgICAgICAvLyBvbmUuICBodHRwczovL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby9pc3N1ZXMvNDY3NFxuXG4gICAgICAgICAgICAvLyBBY3R1YWxseSBDaHJvbWUgNTAgZ290IHdvcnNlLCBzaW5jZSB0aGUgcmVjdGFuZ2xlcyBjYW4gbm93IGhhdmUgdGhlIHdpZHRoIG9mIGFcbiAgICAgICAgICAgIC8vIGZ1bGwgY2hhcmFjdGVyLCBtYWtpbmcgaXQgaGFyZCB0byB0ZWxsIHdoZXRoZXIgaXQncyBhIGJvZ3VzIHJlY3RhbmdsZSBvciB2YWxpZFxuICAgICAgICAgICAgLy8gc2VsZWN0aW9uIGxvY2F0aW9uLiAgVGhlIHdvcmthcm91bmQgaXMgdG8gaWdub3JlIHJlY3RhbmdsZXMgdGhhdCBmYWxsIG9uIHRoZVxuICAgICAgICAgICAgLy8gcHJldmlvdXMgbGluZS4gIGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvL2lzc3Vlcy81NzQwXG4gICAgICAgICAgICB2YXIgcmVjdGFuZ2xlcyA9IHJhbmdlLmdldENsaWVudFJlY3RzKCksIGJveCA9IHtcbiAgICAgICAgICAgICAgICB0b3AgICAgOiAgSW5maW5pdHksXG4gICAgICAgICAgICAgICAgcmlnaHQgIDogLUluZmluaXR5LFxuICAgICAgICAgICAgICAgIGJvdHRvbSA6IC1JbmZpbml0eSxcbiAgICAgICAgICAgICAgICBsZWZ0ICAgOiAgSW5maW5pdHlcbiAgICAgICAgICAgIH0sIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVjdGFuZ2xlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBiID0gcmVjdGFuZ2xlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoYi53aWR0aCA8PSAxIHx8IGIuYm90dG9tID09PSBwcmV2TGluZUJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgICAvLyBib2d1cyByZWN0YW5nbGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYm94LmxlZnQgICA9IE1hdGgubWluKGIubGVmdCAgICwgYm94LmxlZnQpO1xuICAgICAgICAgICAgICAgIGJveC50b3AgICAgPSBNYXRoLm1pbihiLnRvcCAgICAsIGJveC50b3ApO1xuICAgICAgICAgICAgICAgIGJveC5yaWdodCAgPSBNYXRoLm1heChiLnJpZ2h0ICAsIGJveC5yaWdodCk7XG4gICAgICAgICAgICAgICAgYm94LmJvdHRvbSA9IE1hdGgubWF4KGIuYm90dG9tICwgYm94LmJvdHRvbSk7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBib3gud2lkdGggPSBib3gucmlnaHQgLSBib3gubGVmdDtcbiAgICAgICAgICAgIGJveC5oZWlnaHQgPSBib3guYm90dG9tIC0gYm94LnRvcDtcbiAgICAgICAgICAgIHJldHVybiBib3g7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIC8vIFJlbmRlciBhIGNodW5rIG9mIHRleHQsIHR5cGljYWxseSBvbmUgbGluZSAoYnV0IGZvciBqdXN0aWZpZWQgdGV4dCB3ZSByZW5kZXIgZWFjaCB3b3JkIGFzXG4gICAgLy8gYSBzZXBhcmF0ZSBUZXh0IG9iamVjdCwgYmVjYXVzZSBzcGFjaW5nIGlzIHZhcmlhYmxlKS4gIFJldHVybnMgdHJ1ZSB3aGVuIGl0IGZpbmlzaGVkIHRoZVxuICAgIC8vIGN1cnJlbnQgbm9kZS4gIEFmdGVyIGVhY2ggY2h1bmsgaXQgdXBkYXRlcyBgc3RhcnRgIHRvIGp1c3QgYWZ0ZXIgdGhlIGxhc3QgcmVuZGVyZWRcbiAgICAvLyBjaGFyYWN0ZXIuXG4gICAgZnVuY3Rpb24gZG9DaHVuaygpIHtcbiAgICAgICAgdmFyIG9yaWdTdGFydCA9IHN0YXJ0O1xuICAgICAgICB2YXIgYm94LCBwb3MgPSB0ZXh0LnN1YnN0cihzdGFydCkuc2VhcmNoKC9cXFMvKTtcbiAgICAgICAgc3RhcnQgKz0gcG9zO1xuICAgICAgICBpZiAocG9zIDwgMCB8fCBzdGFydCA+PSBlbmQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VsZWN0IGEgc2luZ2xlIGNoYXJhY3RlciB0byBkZXRlcm1pbmUgdGhlIGhlaWdodCBvZiBhIGxpbmUgb2YgdGV4dC4gIFRoZSBib3guYm90dG9tXG4gICAgICAgIC8vIHdpbGwgYmUgZXNzZW50aWFsIGZvciB1cyB0byBmaWd1cmUgb3V0IHdoZXJlIHRoZSBuZXh0IGxpbmUgYmVnaW5zLlxuICAgICAgICByYW5nZS5zZXRTdGFydChub2RlLCBzdGFydCk7XG4gICAgICAgIHJhbmdlLnNldEVuZChub2RlLCBzdGFydCArIDEpO1xuICAgICAgICBib3ggPSBhY3R1YWxseUdldFJhbmdlQm91bmRpbmdSZWN0KHJhbmdlKTtcblxuICAgICAgICAvLyBmb3IganVzdGlmaWVkIHRleHQgd2UgbXVzdCBzcGxpdCBhdCBlYWNoIHNwYWNlLCBiZWNhdXNlIHNwYWNlIGhhcyB2YXJpYWJsZSB3aWR0aC5cbiAgICAgICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgICAgIGlmIChpc0p1c3RpZmllZCB8fCBjb2x1bW5Db3VudCA+IDEpIHtcbiAgICAgICAgICAgIHBvcyA9IHRleHQuc3Vic3RyKHN0YXJ0KS5zZWFyY2goL1xccy8pO1xuICAgICAgICAgICAgaWYgKHBvcyA+PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgY2FuIG9ubHkgc3BsaXQgdGhlcmUgaWYgaXQncyBvbiB0aGUgc2FtZSBsaW5lLCBvdGhlcndpc2Ugd2UnbGwgZmFsbCBiYWNrXG4gICAgICAgICAgICAgICAgLy8gdG8gdGhlIGRlZmF1bHQgbWVjaGFuaXNtIChzZWUgZmluZEVPTCBiZWxvdykuXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIHN0YXJ0ICsgcG9zKTtcbiAgICAgICAgICAgICAgICB2YXIgciA9IGFjdHVhbGx5R2V0UmFuZ2VCb3VuZGluZ1JlY3QocmFuZ2UpO1xuICAgICAgICAgICAgICAgIGlmIChyLmJvdHRvbSA9PSBib3guYm90dG9tKSB7XG4gICAgICAgICAgICAgICAgICAgIGJveCA9IHI7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgKz0gcG9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgY29kZSBkb2VzIHRocmVlIHRoaW5nczogKDEpIGl0IHNlbGVjdHMgb25lIGxpbmUgb2YgdGV4dCBpbiBgcmFuZ2VgLCAoMikgaXRcbiAgICAgICAgICAgIC8vIGxlYXZlcyB0aGUgYm91bmRpbmcgcmVjdCBvZiB0aGF0IGxpbmUgaW4gYGJveGAgYW5kICgzKSBpdCByZXR1cm5zIHRoZSBwb3NpdGlvblxuICAgICAgICAgICAgLy8ganVzdCBhZnRlciB0aGUgRU9MLiAgV2Uga25vdyB3aGVyZSB0aGUgbGluZSBzdGFydHMgKGBzdGFydGApIGJ1dCB3ZSBkb24ndCBrbm93XG4gICAgICAgICAgICAvLyB3aGVyZSBpdCBlbmRzLiAgVG8gZmlndXJlIHRoaXMgb3V0LCB3ZSBzZWxlY3QgYSBwaWVjZSBvZiB0ZXh0IGFuZCBsb29rIGF0IHRoZVxuICAgICAgICAgICAgLy8gYm90dG9tIG9mIHRoZSBib3VuZGluZyBib3guICBJZiBpdCBjaGFuZ2VzLCB3ZSBoYXZlIG1vcmUgdGhhbiBvbmUgbGluZSBzZWxlY3RlZFxuICAgICAgICAgICAgLy8gYW5kIHNob3VsZCByZXRyeSB3aXRoIGEgc21hbGxlciBzZWxlY3Rpb24uXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gVG8gc3BlZWQgdGhpbmdzIHVwLCB3ZSBmaXJzdCB0cnkgdG8gc2VsZWN0IGFsbCB0ZXh0IGluIHRoZSBub2RlIChgc3RhcnRgIC0+XG4gICAgICAgICAgICAvLyBgZW5kYCkuICBJZiB0aGVyZSdzIG1vcmUgdGhhbiBvbmUgbGluZSB0aGVyZSwgdGhlbiBzZWxlY3Qgb25seSBoYWxmIG9mIGl0LiAgQW5kXG4gICAgICAgICAgICAvLyBzbyBvbi4gIFdoZW4gd2UgZmluZCBhIHZhbHVlIGZvciBgZW5kYCB0aGF0IGZpdHMgaW4gb25lIGxpbmUsIHdlIHRyeSBpbmNyZWFzaW5nXG4gICAgICAgICAgICAvLyBpdCAoYWxzbyBpbiBoYWx2ZXMpIHVudGlsIHdlIGdldCB0byB0aGUgbmV4dCBsaW5lLiAgVGhlIGFsZ29yaXRobSBzdG9wcyB3aGVuIHRoZVxuICAgICAgICAgICAgLy8gcmlnaHQgc2lkZSBvZiB0aGUgYm91bmRpbmcgYm94IGRvZXMgbm90IGNoYW5nZS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBPbmUgbW9yZSB0aGluZyB0byBub3RlIGlzIHRoYXQgZXZlcnl0aGluZyBoYXBwZW5zIGluIGEgc2luZ2xlIFRleHQgRE9NIG5vZGUuXG4gICAgICAgICAgICAvLyBUaGVyZSdzIG5vIG90aGVyIHRhZ3MgaW5zaWRlIGl0LCB0aGVyZWZvcmUgdGhlIGxlZnQvdG9wIGNvb3JkaW5hdGVzIG9mIHRoZVxuICAgICAgICAgICAgLy8gYm91bmRpbmcgYm94IHdpbGwgbm90IGNoYW5nZS5cbiAgICAgICAgICAgIHBvcyA9IChmdW5jdGlvbiBmaW5kRU9MKG1pbiwgZW9sLCBtYXgpe1xuICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZChub2RlLCBlb2wpO1xuICAgICAgICAgICAgICAgIHZhciByID0gYWN0dWFsbHlHZXRSYW5nZUJvdW5kaW5nUmVjdChyYW5nZSk7XG4gICAgICAgICAgICAgICAgaWYgKHIuYm90dG9tICE9IGJveC5ib3R0b20gJiYgbWluIDwgZW9sKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaW5kRU9MKG1pbiwgKG1pbiArIGVvbCkgPj4gMSwgZW9sKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHIucmlnaHQgIT0gYm94LnJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIGJveCA9IHI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlb2wgPCBtYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaW5kRU9MKGVvbCwgKGVvbCArIG1heCkgPj4gMSwgbWF4KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlb2w7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW9sO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKHN0YXJ0LCBNYXRoLm1pbihlbmQsIHN0YXJ0ICsgZXN0aW1hdGVMaW5lTGVuZ3RoKSwgZW5kKTtcblxuICAgICAgICAgICAgaWYgKHBvcyA9PSBzdGFydCkge1xuICAgICAgICAgICAgICAgIC8vIGlmIEVPTCBpcyBhdCB0aGUgc3RhcnQsIHRoZW4gbm8gbW9yZSB0ZXh0IGZpdHMgb24gdGhpcyBsaW5lLiAgU2tpcCB0aGVcbiAgICAgICAgICAgICAgICAvLyByZW1haW5kZXIgb2YgdGhpcyBub2RlIGVudGlyZWx5IHRvIGF2b2lkIGEgc3RhY2sgb3ZlcmZsb3cuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydCA9IHBvcztcblxuICAgICAgICAgICAgcG9zID0gcmFuZ2UudG9TdHJpbmcoKS5zZWFyY2goL1xccyskLyk7XG4gICAgICAgICAgICBpZiAocG9zID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyB3aGl0ZXNwYWNlIG9ubHk7IHdlIHNob3VsZCBub3QgZ2V0IGhlcmUuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9zID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIGVsaW1pbmF0ZSB0cmFpbGluZyB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIHJhbmdlLnN0YXJ0T2Zmc2V0ICsgcG9zKTtcbiAgICAgICAgICAgICAgICBib3ggPSBhY3R1YWxseUdldFJhbmdlQm91bmRpbmdSZWN0KHJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFub3RoZXIgd29ya2Fyb3VuZCBmb3IgSUU6IGlmIHdlIHJlbHkgb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgd2UnbGwgb3ZlcmxhcCB3aXRoIHRoZSBidWxsZXQgZm9yIExJXG4gICAgICAgIC8vIGVsZW1lbnRzLiAgQ2FsbGluZyBnZXRDbGllbnRSZWN0cygpIGFuZCB1c2luZyB0aGUgKmZpcnN0KiByZWN0IGFwcGVhcnMgdG8gZ2l2ZSB1cyB0aGUgY29ycmVjdCBsb2NhdGlvbi5cbiAgICAgICAgLy8gTm90ZTogbm90IHRvIGJlIHVzZWQgaW4gQ2hyb21lIGFzIGl0IHJhbmRvbWx5IHJldHVybnMgYSB6ZXJvLXdpZHRoIHJlY3RhbmdsZSBmcm9tIHRoZSBwcmV2aW91cyBsaW5lLlxuICAgICAgICBpZiAobWljcm9zb2Z0KSB7XG4gICAgICAgICAgICBib3ggPSByYW5nZS5nZXRDbGllbnRSZWN0cygpWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0ciA9IHJhbmdlLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmICghL14oPzpwcmV8cHJlLXdyYXApJC9pLnRlc3Qod2hpdGVTcGFjZSkpIHtcbiAgICAgICAgICAgIC8vIG5vZGUgd2l0aCBub24tc2lnbmlmaWNhbnQgc3BhY2UgLS0gY29sbGFwc2Ugd2hpdGVzcGFjZS5cbiAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgvXFx0Ly50ZXN0KHN0cikpIHtcbiAgICAgICAgICAgIC8vIHdpdGggc2lnbmlmaWNhbnQgd2hpdGVzcGFjZSB3ZSBuZWVkIHRvIGRvIHNvbWV0aGluZyBhYm91dCBsaXRlcmFsIFRBQiBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgLy8gVGhlcmUncyBubyBUQUIgZ2x5cGggaW4gYSBmb250IHNvIHRoZXkgd291bGQgYmUgcmVuZGVyZWQgaW4gUERGIGFzIGFuIGVtcHR5IGJveCxcbiAgICAgICAgICAgIC8vIGFuZCB0aGUgd2hvbGUgdGV4dCB3aWxsIHN0cmV0Y2ggdG8gZmlsbCB0aGUgb3JpZ2luYWwgd2lkdGguICBUaGUgY29yZSBQREYgbGliXG4gICAgICAgICAgICAvLyBkb2VzIG5vdCBoYXZlIHN1ZmZpY2llbnQgY29udGV4dCB0byBkZWFsIHdpdGggaXQuXG5cbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgc3RhcnRpbmcgY29sdW1uIGhlcmUsIHNpbmNlIHdlIGluaXRpYWxseSBkaXNjYXJkZWQgYW55IHdoaXRlc3BhY2UuXG4gICAgICAgICAgICB2YXIgY2MgPSAwO1xuICAgICAgICAgICAgZm9yIChwb3MgPSBvcmlnU3RhcnQ7IHBvcyA8IHJhbmdlLnN0YXJ0T2Zmc2V0OyArK3Bvcykge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gdGV4dC5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHdlIG1lZXQgYSBUQUIgd2UgbXVzdCByb3VuZCB1cCB0byB0aGUgbmV4dCB0YWIgc3RvcC5cbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gYWxsIGJyb3dzZXJzIFRBQnMgc2VlbSB0byBiZSA4IGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgICAgICAgIGNjICs9IDggLSBjYyAlIDg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlID09IDEwIHx8IGNvZGUgPT0gMTMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8ganVzdCBpbiBjYXNlIHdlIG1lZXQgYSBuZXdsaW5lIHdlIG11c3QgcmVzdGFydC5cbiAgICAgICAgICAgICAgICAgICAgY2MgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9yZGluYXJ5IGNoYXJhY3RlciAtLT4gYWR2YW5jZSBvbmUgY29sdW1uXG4gICAgICAgICAgICAgICAgICAgIGNjKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYXNlZCBvbiBzdGFydGluZyBjb2x1bW4sIHJlcGxhY2UgYW55IFRBQiBjaGFyYWN0ZXJzIGluIHRoZSBzdHJpbmcgd2UgYWN0dWFsbHlcbiAgICAgICAgICAgIC8vIGhhdmUgdG8gZGlzcGxheSB3aXRoIHNwYWNlcyBzbyB0aGF0IHRoZXkgYWxpZ24gdG8gY29sdW1ucyBtdWx0aXBsZSBvZiA4LlxuICAgICAgICAgICAgd2hpbGUgKChwb3MgPSBzdHIuc2VhcmNoKFwiXFx0XCIpKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGVudCA9IFwiICAgICAgICBcIi5zdWJzdHIoMCwgOCAtIChjYyArIHBvcykgJSA4KTtcbiAgICAgICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyKDAsIHBvcykgKyBpbmRlbnQgKyBzdHIuc3Vic3RyKHBvcyArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgcHJldkxpbmVCb3R0b20gPSBib3guYm90dG9tO1xuICAgICAgICB9XG4gICAgICAgIGRyYXdUZXh0KHN0ciwgYm94KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmF3VGV4dChzdHIsIGJveCkge1xuICAgICAgICAvLyBJbiBJRSB0aGUgYm94IGhlaWdodCB3aWxsIGJlIGFwcHJveGltYXRlbHkgbGluZUhlaWdodCwgd2hpbGUgaW5cbiAgICAgICAgLy8gb3RoZXIgYnJvd3NlcnMgaXQnbGwgKGNvcnJlY3RseSkgYmUgdGhlIGhlaWdodCBvZiB0aGUgYm91bmRpbmdcbiAgICAgICAgLy8gYm94IGZvciB0aGUgY3VycmVudCB0ZXh0L2ZvbnQuICBXaGljaCBpcyB0byBzYXksIElFIHN1Y2tzIGFnYWluLlxuICAgICAgICAvLyBUaGUgb25seSBnb29kIHNvbHV0aW9uIEkgY2FuIHRoaW5rIG9mIGlzIHRvIG1lYXN1cmUgdGhlIHRleHRcbiAgICAgICAgLy8gb3Vyc2VsdmVzIGFuZCBjZW50ZXIgdGhlIGJvdW5kaW5nIGJveC5cbiAgICAgICAgaWYgKG1pY3Jvc29mdCAmJiAhaXNOYU4obGluZUhlaWdodCkpIHtcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBnZXRGb250SGVpZ2h0KGZvbnQpO1xuICAgICAgICAgICAgdmFyIHRvcCA9IChib3gudG9wICsgYm94LmJvdHRvbSAtIGhlaWdodCkgLyAyO1xuICAgICAgICAgICAgYm94ID0ge1xuICAgICAgICAgICAgICAgIHRvcCAgICA6IHRvcCxcbiAgICAgICAgICAgICAgICByaWdodCAgOiBib3gucmlnaHQsXG4gICAgICAgICAgICAgICAgYm90dG9tIDogdG9wICsgaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGxlZnQgICA6IGJveC5sZWZ0LFxuICAgICAgICAgICAgICAgIGhlaWdodCA6IGhlaWdodCxcbiAgICAgICAgICAgICAgICB3aWR0aCAgOiBib3gucmlnaHQgLSBib3gubGVmdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhciBwYXRoID0gbmV3IFBhdGgoeyBzdHJva2U6IHsgY29sb3I6IFwicmVkXCIgfX0pO1xuICAgICAgICAvLyBwYXRoLm1vdmVUbyhib3gubGVmdCwgYm94LnRvcClcbiAgICAgICAgLy8gICAgIC5saW5lVG8oYm94LnJpZ2h0LCBib3gudG9wKVxuICAgICAgICAvLyAgICAgLmxpbmVUbyhib3gucmlnaHQsIGJveC5ib3R0b20pXG4gICAgICAgIC8vICAgICAubGluZVRvKGJveC5sZWZ0LCBib3guYm90dG9tKVxuICAgICAgICAvLyAgICAgLmNsb3NlKCk7XG4gICAgICAgIC8vIGdyb3VwLmFwcGVuZChwYXRoKTtcblxuICAgICAgICBzd2l0Y2ggKHRleHRUcmFuc2Zvcm0pIHtcbiAgICAgICAgICBjYXNlIFwidXBwZXJjYXNlXCI6XG4gICAgICAgICAgICBzdHIgPSBzdHIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJsb3dlcmNhc2VcIjpcbiAgICAgICAgICAgIHN0ciA9IHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImNhcGl0YWxpemVcIjpcbiAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC8oPzpefFxccylcXFMvZywgbCA9PiBsLnRvVXBwZXJDYXNlKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGV4dCA9IG5ldyBUZXh0UmVjdChcbiAgICAgICAgICAgIHN0ciwgbmV3IGdlby5SZWN0KFsgYm94LmxlZnQsIGJveC50b3AgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsgYm94LndpZHRoLCBib3guaGVpZ2h0IF0pLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGZvbnQ6IGZvbnQsXG4gICAgICAgICAgICAgICAgZmlsbDogeyBjb2xvcjogY29sb3IgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBncm91cC5hcHBlbmQodGV4dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVjb3JhdGUoYm94KSB7XG4gICAgICAgIGxpbmUodW5kZXJsaW5lLCBib3guYm90dG9tKTtcbiAgICAgICAgbGluZShsaW5lVGhyb3VnaCwgYm94LmJvdHRvbSAtIGJveC5oZWlnaHQgLyAyLjcpO1xuICAgICAgICBsaW5lKG92ZXJsaW5lLCBib3gudG9wKTtcbiAgICAgICAgZnVuY3Rpb24gbGluZShjb2xvciwgeXBvcykge1xuICAgICAgICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gZm9udFNpemUgLyAxMjtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IG5ldyBQYXRoKHsgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yXG4gICAgICAgICAgICAgICAgfX0pO1xuXG4gICAgICAgICAgICAgICAgeXBvcyAtPSB3aWR0aDtcbiAgICAgICAgICAgICAgICBwYXRoLm1vdmVUbyhib3gubGVmdCwgeXBvcylcbiAgICAgICAgICAgICAgICAgICAgLmxpbmVUbyhib3gucmlnaHQsIHlwb3MpO1xuICAgICAgICAgICAgICAgIGdyb3VwLmFwcGVuZChwYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZ3JvdXBJblN0YWNraW5nQ29udGV4dChlbGVtZW50LCBncm91cCwgekluZGV4KSB7XG4gICAgdmFyIG1haW47XG4gICAgaWYgKHpJbmRleCAhPSBcImF1dG9cIikge1xuICAgICAgICAvLyB1c2UgdGhlIGN1cnJlbnQgc3RhY2tpbmcgY29udGV4dFxuICAgICAgICBtYWluID0gbm9kZUluZm8uX3N0YWNraW5nQ29udGV4dC5ncm91cDtcbiAgICAgICAgekluZGV4ID0gcGFyc2VGbG9hdCh6SW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vcm1hbCBmbG93IOKAlCB1c2UgZ2l2ZW4gY29udGFpbmVyLiAgd2Ugc3RpbGwgaGF2ZSB0b1xuICAgICAgICAvLyBmaWd1cmUgb3V0IHdoZXJlIHNob3VsZCB3ZSBpbnNlcnQgdGhpcyBlbGVtZW50IHdpdGggdGhlXG4gICAgICAgIC8vIGFzc3VtcHRpb24gdGhhdCBpdHMgei1pbmRleCBpcyB6ZXJvLCBhcyB0aGUgZ3JvdXAgbWlnaHRcbiAgICAgICAgLy8gYWxyZWFkeSBjb250YWluIGVsZW1lbnRzIHdpdGggaGlnaGVyIHotaW5kZXguXG4gICAgICAgIG1haW4gPSBncm91cDtcbiAgICAgICAgekluZGV4ID0gMDtcbiAgICB9XG4gICAgdmFyIGEgPSBtYWluLmNoaWxkcmVuO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoYVtpXS5fZG9tX3pJbmRleCAhPSBudWxsICYmIGFbaV0uX2RvbV96SW5kZXggPiB6SW5kZXgpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRtcCA9IG5ldyBHcm91cCgpO1xuICAgIG1haW4uaW5zZXJ0KGksIHRtcCk7XG4gICAgdG1wLl9kb21fekluZGV4ID0gekluZGV4O1xuXG4gICAgaWYgKG1haW4gIT09IGdyb3VwKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiUGxhY2luZ1wiLCBlbGVtZW50LCBcImluXCIsIG5vZGVJbmZvLl9zdGFja2luZ0NvbnRleHQuZWxlbWVudCwgXCJhdCBwb3NpdGlvblwiLCBpLCBcIiAvIFwiLCBhLmxlbmd0aCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGEuc2xpY2UoaSsxKSk7XG5cbiAgICAgICAgLy8gaWYgKG5vZGVJbmZvLl9tYXRyaXgpIHtcbiAgICAgICAgLy8gICAgIHRtcC50cmFuc2Zvcm0obm9kZUluZm8uX21hdHJpeCk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgaWYgKG5vZGVJbmZvLl9jbGlwYm94KSB7XG4gICAgICAgICAgICB2YXIgbSA9IG5vZGVJbmZvLl9tYXRyaXguaW52ZXJ0KCk7XG4gICAgICAgICAgICB2YXIgciA9IG5vZGVJbmZvLl9jbGlwYm94LnRyYW5zZm9ybUNvcHkobSk7XG4gICAgICAgICAgICBzZXRDbGlwcGluZyh0bXAsIFBhdGguZnJvbVJlY3QocikpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocik7XG4gICAgICAgICAgICAvLyB0bXAuYXBwZW5kKFBhdGguZnJvbVJlY3QocikpO1xuICAgICAgICAgICAgLy8gdG1wLmFwcGVuZChuZXcgVGV4dChlbGVtZW50LmNsYXNzTmFtZSB8fCBlbGVtZW50LmlkLCByLnRvcExlZnQoKSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRtcDtcbn1cblxuZnVuY3Rpb24gcmVuZGVyRWxlbWVudChlbGVtZW50LCBjb250YWluZXIpIHtcbiAgICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgdXBkYXRlQ291bnRlcnMoc3R5bGUpO1xuXG4gICAgaWYgKC9eKHN0eWxlfHNjcmlwdHxsaW5rfG1ldGF8aWZyYW1lfHN2Z3xjb2x8Y29sZ3JvdXApJC9pLnRlc3QoZWxlbWVudC50YWdOYW1lKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG5vZGVJbmZvLl9jbGlwYm94ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBvcGFjaXR5ID0gcGFyc2VGbG9hdChnZXRQcm9wZXJ0eVZhbHVlKHN0eWxlLCBcIm9wYWNpdHlcIikpO1xuICAgIHZhciB2aXNpYmlsaXR5ID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJ2aXNpYmlsaXR5XCIpO1xuICAgIHZhciBkaXNwbGF5ID0gZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJkaXNwbGF5XCIpO1xuXG4gICAgaWYgKG9wYWNpdHkgPT09IDAgfHwgdmlzaWJpbGl0eSA9PSBcImhpZGRlblwiIHx8IGRpc3BsYXkgPT0gXCJub25lXCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0ciA9IGdldFRyYW5zZm9ybShzdHlsZSk7XG4gICAgdmFyIGdyb3VwO1xuXG4gICAgdmFyIHpJbmRleCA9IGdldFByb3BlcnR5VmFsdWUoc3R5bGUsIFwiei1pbmRleFwiKTtcbiAgICBpZiAoKHRyIHx8IG9wYWNpdHkgPCAxKSAmJiB6SW5kZXggPT0gXCJhdXRvXCIpIHtcbiAgICAgICAgekluZGV4ID0gMDtcbiAgICB9XG4gICAgZ3JvdXAgPSBncm91cEluU3RhY2tpbmdDb250ZXh0KGVsZW1lbnQsIGNvbnRhaW5lciwgekluZGV4KTtcblxuICAgIC8vIFhYWDogcmVtb3ZlIGF0IHNvbWUgcG9pbnRcbiAgICAvLyBncm91cC5fcGRmRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgLy8gZ3JvdXAub3B0aW9ucy5fcGRmRGVidWcgPSBcIlwiO1xuICAgIC8vIGlmIChlbGVtZW50LmlkKSB7XG4gICAgLy8gICAgIGdyb3VwLm9wdGlvbnMuX3BkZkRlYnVnID0gXCIjXCIgKyBlbGVtZW50LmlkO1xuICAgIC8vIH1cbiAgICAvLyBpZiAoZWxlbWVudC5jbGFzc05hbWUpIHtcbiAgICAvLyAgICAgZ3JvdXAub3B0aW9ucy5fcGRmRGVidWcgKz0gXCIuXCIgKyBlbGVtZW50LmNsYXNzTmFtZS5zcGxpdChcIiBcIikuam9pbihcIi5cIik7XG4gICAgLy8gfVxuXG4gICAgaWYgKG9wYWNpdHkgPCAxKSB7XG4gICAgICAgIGdyb3VwLm9wYWNpdHkob3BhY2l0eSAqIGdyb3VwLm9wYWNpdHkoKSk7XG4gICAgfVxuXG4gICAgcHVzaE5vZGVJbmZvKGVsZW1lbnQsIHN0eWxlLCBncm91cCk7XG5cbiAgICBpZiAoIXRyKSB7XG4gICAgICAgIF9yZW5kZXJXaXRoUHNldWRvRWxlbWVudHMoZWxlbWVudCwgZ3JvdXApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2F2ZVN0eWxlKGVsZW1lbnQsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyBtdXN0IGNsZWFyIHRyYW5zZm9ybSwgc28gZ2V0Qm91bmRpbmdDbGllbnRSZWN0IHJldHVybnMgY29ycmVjdCB2YWx1ZXMuXG4gICAgICAgICAgICBwbGVhc2VTZXRQcm9wZXJ0eVZhbHVlKGVsZW1lbnQuc3R5bGUsIFwidHJhbnNmb3JtXCIsIFwibm9uZVwiLCBcImltcG9ydGFudFwiKTtcblxuICAgICAgICAgICAgLy8gbXVzdCBhbHNvIGNsZWFyIHRyYW5zaXRpb25zLCBzbyBjb3JyZWN0IHZhbHVlcyBhcmUgcmV0dXJuZWQgKmltbWVkaWF0ZWx5KlxuICAgICAgICAgICAgcGxlYXNlU2V0UHJvcGVydHlWYWx1ZShlbGVtZW50LnN0eWxlLCBcInRyYW5zaXRpb25cIiwgXCJub25lXCIsIFwiaW1wb3J0YW50XCIpO1xuXG4gICAgICAgICAgICAvLyB0aGUgcHJlc2VuY2Ugb2YgYW55IHRyYW5zZm9ybSBtYWtlcyBpdCBiZWhhdmUgbGlrZSBpdCBoYWQgcG9zaXRpb246IHJlbGF0aXZlLFxuICAgICAgICAgICAgLy8gYmVjYXVzZSB3aHkgbm90LlxuICAgICAgICAgICAgLy8gaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMTEvMDkvMTIvdW4tZml4aW5nLWZpeGVkLWVsZW1lbnRzLXdpdGgtY3NzLXRyYW5zZm9ybXMvXG4gICAgICAgICAgICBpZiAoZ2V0UHJvcGVydHlWYWx1ZShzdHlsZSwgXCJwb3NpdGlvblwiKSA9PSBcInN0YXRpY1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gYnV0IG9ubHkgaWYgaXQncyBub3QgYWxyZWFkeSBwb3NpdGlvbmVkLiA6LS9cbiAgICAgICAgICAgICAgICBwbGVhc2VTZXRQcm9wZXJ0eVZhbHVlKGVsZW1lbnQuc3R5bGUsIFwicG9zaXRpb25cIiwgXCJyZWxhdGl2ZVwiLCBcImltcG9ydGFudFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbXVzdCB0cmFuc2xhdGUgdG8gb3JpZ2luIGJlZm9yZSBhcHBseWluZyB0aGUgQ1NTXG4gICAgICAgICAgICAvLyB0cmFuc2Zvcm1hdGlvbiwgdGhlbiB0cmFuc2xhdGUgYmFjay5cbiAgICAgICAgICAgIHZhciBiYm94ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHZhciB4ID0gYmJveC5sZWZ0ICsgdHIub3JpZ2luWzBdO1xuICAgICAgICAgICAgdmFyIHkgPSBiYm94LnRvcCArIHRyLm9yaWdpblsxXTtcbiAgICAgICAgICAgIHZhciBtID0gWyAxLCAwLCAwLCAxLCAteCwgLXkgXTtcbiAgICAgICAgICAgIG0gPSBtbXVsKG0sIHRyLm1hdHJpeCk7XG4gICAgICAgICAgICBtID0gbW11bChtLCBbIDEsIDAsIDAsIDEsIHgsIHkgXSk7XG4gICAgICAgICAgICBtID0gc2V0VHJhbnNmb3JtKGdyb3VwLCBtKTtcblxuICAgICAgICAgICAgbm9kZUluZm8uX21hdHJpeCA9IG5vZGVJbmZvLl9tYXRyaXgubXVsdGlwbHlDb3B5KG0pO1xuXG4gICAgICAgICAgICBfcmVuZGVyV2l0aFBzZXVkb0VsZW1lbnRzKGVsZW1lbnQsIGdyb3VwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcG9wTm9kZUluZm8oKTtcblxuICAgIC8vZHJhd0RlYnVnQm94KGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGNvbnRhaW5lcik7XG59XG5cbi8vIGZ1bmN0aW9uIGRyYXdEZWJ1Z0JveChib3gsIGdyb3VwLCBjb2xvcikge1xuLy8gICAgIHZhciBwYXRoID0gUGF0aC5mcm9tUmVjdChuZXcgZ2VvLlJlY3QoWyBib3gubGVmdCwgYm94LnRvcCBdLCBbIGJveC53aWR0aCwgYm94LmhlaWdodCBdKSk7XG4vLyAgICAgaWYgKGNvbG9yKSB7XG4vLyAgICAgICAgIHBhdGguc3Ryb2tlKGNvbG9yKTtcbi8vICAgICB9XG4vLyAgICAgZ3JvdXAuYXBwZW5kKHBhdGgpO1xuLy8gfVxuXG4vLyBmdW5jdGlvbiBkdW1wVGV4dE5vZGUobm9kZSkge1xuLy8gICAgIHZhciB0eHQgPSBub2RlLmRhdGEucmVwbGFjZSgvXlxccysvLCBcIlwiKTtcbi8vICAgICBpZiAodHh0Lmxlbmd0aCA8IDEwMCkge1xuLy8gICAgICAgICBjb25zb2xlLmxvZyhub2RlLmRhdGEubGVuZ3RoICsgXCI6IHxcIiArIHR4dCk7XG4vLyAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgY29uc29sZS5sb2cobm9kZS5kYXRhLmxlbmd0aCArIFwiOiB8XCIgKyB0eHQuc3Vic3RyKDAsIDUwKSArIFwifC4uLnxcIiArIHR4dC5zdWJzdHIoLTUwKSk7XG4vLyAgICAgfVxuLy8gfVxuXG5mdW5jdGlvbiBtbXVsKGEsIGIpIHtcbiAgICB2YXIgYTEgPSBhWzBdLCBiMSA9IGFbMV0sIGMxID0gYVsyXSwgZDEgPSBhWzNdLCBlMSA9IGFbNF0sIGYxID0gYVs1XTtcbiAgICB2YXIgYTIgPSBiWzBdLCBiMiA9IGJbMV0sIGMyID0gYlsyXSwgZDIgPSBiWzNdLCBlMiA9IGJbNF0sIGYyID0gYls1XTtcbiAgICByZXR1cm4gW1xuICAgICAgICBhMSphMiArIGIxKmMyLCAgICAgICAgICBhMSpiMiArIGIxKmQyLFxuICAgICAgICBjMSphMiArIGQxKmMyLCAgICAgICAgICBjMSpiMiArIGQxKmQyLFxuICAgICAgICBlMSphMiArIGYxKmMyICsgZTIsICAgICBlMSpiMiArIGYxKmQyICsgZjJcbiAgICBdO1xufVxuXG5leHBvcnQgeyBkcmF3RE9NIH07XG5cbiJdLCJuYW1lcyI6WyJjb25zdCIsImxldCIsInRoaXMiLCJzdXBlciIsImV2ZW50TmFtZSIsImFyZ3VtZW50cyIsImlkeCIsInRlbXBsYXRlIiwiYXBwZW5kIiwic2l6ZSIsImNsb3NlIiwidHJhbnNmb3JtIiwicG93IiwicmFkIiwidG9TdHJpbmciLCJDbGFzcyIsIkVsZW1lbnQiLCJjcmVhdGVUcmFuc2Zvcm0iLCJDaXJjbGUiLCJHZW9tZXRyeUNpcmNsZSIsIkRFRkFVTFRfU1RST0tFIiwiQXJjIiwiR2VvbWV0cnlBcmMiLCJJbWFnZSIsIkRFRkFVTFRfT1BUSU9OUyIsIlJlY3QiLCJHZW9tZXRyeVJlY3QiLCJub3ciLCJhbmltYXRpb25GcmFtZSIsInJlbmRlclNWRyIsIlN1cmZhY2UiLCJCYXNlU3VyZmFjZSIsIlNQQUNFIiwiTk9ERV9NQVAiLCJOb2RlIiwiR3JvdXBOb2RlIiwiUm9vdE5vZGUiLCJQYXRoTm9kZSIsIkFyY05vZGUiLCJDaXJjbGVOb2RlIiwiUmVjdE5vZGUiLCJJbWFnZU5vZGUiLCJUZXh0Tm9kZSIsIk11bHRpUGF0aE5vZGUiLCJoYXNPd25Qcm9wZXJ0eSIsImRlZmxhdGUiLCJwYWtvRGVmbGF0ZSIsImJyb3dzZXIiLCJURVhUX1JFTkRFUklOR19NT0RFIiwiUERGLlRFWFRfUkVOREVSSU5HX01PREUiLCJyZW5kZXIiLCJQREYuY2xlYXJJbWFnZUNhY2hlIiwiUERGLnBhcnNlRm9udERlZiIsIlBERi5nZXRGb250VVJMIiwiUERGLkRvY3VtZW50IiwiZ2VvLk1hdHJpeCIsIlBERi5sb2FkRm9udHMiLCJQREYubG9hZEltYWdlcyIsInNhdmVBcyIsInV0aWxfc2F2ZUFzIiwiZHJhd0ltYWdlIiwicGFyc2VDb2xvciIsInV0aWxzX3BhcnNlQ29sb3IiLCJnZW8uUmVjdCIsInNsaWNlIiwiSU1BR0VfQ0FDSEUiLCJjYW52YXMiLCJQREYuZGVmaW5lRm9udCIsInNldFRyYW5zZm9ybSIsIlBERi5nZXRQYXBlck9wdGlvbnMiLCJjb21waWxlVGVtcGxhdGUiLCJnZXRDb21wdXRlZFN0eWxlIiwibGFzdCIsImdldEZvbnRVUkwiLCJzZXRDbGlwcGluZyIsImdlby5BcmMiLCJ3cmFwIiwiZ2VvLnRyYW5zZm9ybSIsImdlby5DaXJjbGUiLCJhbGlnbiIsIm1tdWwiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBQSxJQUFNLGNBQWMsR0FBRztJQUNuQixNQUFNLEVBQUUsU0FBUyxLQUFLLEVBQUU7OztRQUNwQixLQUFLQyxJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7WUFDckIsSUFBSSxNQUFNLEtBQUssUUFBUSxFQUFFO2dCQUNyQixLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUdDLE1BQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNoQztTQUNKO0tBQ0o7O0lBRUQsU0FBUyxFQUFFLFdBQVc7UUFDbEIs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LEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzFDLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxzQ0FBc0MsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNqRSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO3dCQUN6QixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7d0JBQ3pCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2pELE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxzREFBc0QsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNqRixHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7d0JBQ2xCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO3dCQUNsQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzFDLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyx1RUFBdUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNsRyxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7d0JBQ2xCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO3dCQUNsQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUs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SSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7SUFFL0JBLElBQU0sRUFBRSxHQUFHLE1BQU0sR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6REEsSUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7O0lBRTFEQSxJQUFNLElBQUksR0FBRyxRQUFRLEtBQUssS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7SUFFekNBLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVCQSxJQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QkMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUJBLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDOztJQUUxQkEsSUFBSSxLQUFLLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDOztJQUVsQyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDWCxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN6QyxFQUFFLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7O1FBRXRCLEVBQUUsR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN6Qjs7SUFFREEsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQzs7SUFFN0YsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDZixNQUFNLEdBQUcsQ0FBQyxDQUFDO0tBQ2Q7O0lBRURELElBQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDcENBLElBQU0sR0FBRyxHQUFHLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQzs7SUFFdENBLElBQU0sRUFBRSxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckRBLElBQU0sRUFBRSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7OztJQUdyREEsSUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzNCQSxJQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDM0JBLElBQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzVCQSxJQUFNLEVB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QixDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUM5QixDQUFDO0NBQ0w7OztBQUdELEFBQWUsU0FBUyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDbkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ1QsT0FBTyxzQkFBc0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzFDOztJQUVEQSxJQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5REEsSUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pHQSxJQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xEQSxJQUFNLENBQUMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakNBLElBQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pCQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzs7SUFFL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1AsRUFBRSxHQUFHLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekQsRUFBRSxHQUFHLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM5RCxNQUFNO1FBQ0gsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNCLEVBQUUsR0FBRyxJQUFJLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixFQUFFLEdBQUcsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMxRTs7SUFFRCxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQzs7SUFFaEIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDekMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs7SUFFNUQsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVCLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7SUFFckNELElBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQzs7SUFFbEIsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0tBQ2hEO0lBQ0QsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0tBQ2hEO0lBQ0QsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0tBQ2hEOztJQUVELE9BQU8sTUFBTSxDQUFDOzs7QUN2REgsU0FBUyxlQUFlLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRTtJQUM1RUEsSUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3hEQSxJQUFNLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDaEhDLElBQUksWUFBWSxDQUFDOztJQUVqQixLQUFLQSxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDekMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDcEMsWUFBWSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDM0QsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLEVBQUU7Z0JBQ2hELE9BQU8sSUFBSSxDQUFDO2FBQ2Y7U0FDSjtLQUNKOzs7QUNYVSxTQUFTLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO0lBQ2pFRCxJQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbERBLElBQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkdDLElBQUksZUFBZSxFQUFFLGFBQWEsQ0FBQztJQUNuQ0EsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsS0FBS0EsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ25DLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFELGFBQWEsR0FBR1MsT0FBSyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksZUFBZSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDN0UsSUFBSSxhQUFhLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQzdILEtBQUssRUFBRSxDQUFDO1NBQ1g7S0FDSjs7SUFFRCxPQUFPLEtBQUssQ0FBQzs7O0FDbEJGLFNBQVMsc0JBQXNCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUU7SUFDeERULElBQUksVUFBVSxDQUFDO0lBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDYkQsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQ0EsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQ0EsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQ0EsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQ0EsSUFBTSxPQUFPLEdBQUcsSUFBSSxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7O1FBRWxELElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtZQUNmLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUM7U0FDM0MsTUFBTTtZQUNILFVBQVUsR0FBRyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdko7S0FDSjs7SUFFRCxPQUFPLFVBQVUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7QUNIOUIsSUFBTSxPQUFPLEdBQWM7SUFBQyxnQkFFYixDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFO1FBQ3ZDRyxRQUFLLEtBQUEsQ0FBQyxJQUFBLENBQUMsQ0FBQzs7UUFFUixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQy9COzs7OzRDQUFBOztJQUVELGtCQUFBLE1BQU0sb0JBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRTtRQUN0QkgsSUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxREEsSUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqRUMsSUFBSSxJQUFJLENBQUM7O1FBRVQsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQzVDLElBQUksR0FBRyxJQUFJLENBQUMsaUJBQWlCO2dCQUN6QixhQUFhLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7Z0JBQ3RELFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsZUFBZTthQUMvRCxDQUFDO1NBQ0wsTUFBTTtZQUNILElBQUksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1NBQ2hFOztRQUVELE9BQU8sSUFBSSxDQUFDO0tBQ2YsQ0FBQTs7SUFFRCxrQkFBQSxnQkFBZ0IsOEJBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUNyQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ2xDLENBQUE7O0lBRUQsa0JBQUEsaUJBQWlCLCtCQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtRQUNoQ0QsSUFBTSxNQUFNLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNwQ0EsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0REEsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0REEsSUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDMUVBLElBQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDOztRQUUxRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNwRyxDQUFBOztJQUVELGtCQUFBLGlCQUFpQiwrQkFBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO1FBQzdCQSxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYztZQUNoQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNsQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUNyQyxDQUFDOztRQUVGLE9BQU87WUFDSCxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDO1lBQ2xELEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUM7U0FDckQsQ0FBQztLQUNMLENBQUE7O0lBRUQsa0JBQUEsY0FBYyw0QkFBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDM0JBLElBQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ3BDQSxJQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ25DQSxJQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2xCQSxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQ0MsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ1hBLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQzs7UUFFWCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDVCxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ1QsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDcEI7U0FDSixNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDckIsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDNUIsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDL0I7O1FBRURBLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxF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QUMsU0FBUyxHQUFHO0lBQ2hCLEtBQUssRUFBRSxXQUFXO1FBQ2QsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7O1FBRXhELElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7O1FBRTVDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNsRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3JELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDckQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7S0FDNUM7SUFDRCxZQUFZLEVBQUUsU0FBUyxLQUFLLEVBQUU7UUFDMUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUN6RDtJQUNELFVBQVUsRUFBRSxXQUFXO1FBQ25CLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDNUI7Q0FDSixDQUFDLEFBRUYsQUFBbUI7O0FDdmtDWkEsSUFBTTZDLFNBQU8sR0FBR0MseUJBQVcsQ0FBQzs7QUFFbkMsQUFBTyxTQUFTLGVBQWUsR0FBRztJQUM5QixPQUFPLElBQUksQ0FBQztDQUNmOztBQ05EOzs7OztBQUtBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFFQTlDLElBQU0rQyxTQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUNoQy9DLElBQU0sRUFBRSxHQUFHLElBQUksQ0FBQzs7QUFFaEIsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7O0FBRXpCQSxJQUFNLFVBQVUsR0FBRztJQUNmLEVBQUUsVUFBVSxFQUFFLE9BQU8sR0FBRyxPQUFPLEVBQUU7SUFDakMsRUFBRSxVQUFVLEVBQUUsT0FBTyxHQUFHLE9BQU8sRUFBRTtJQUNqQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEdBQUcsT0FBTyxFQUFFO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE1BQU0sSUFBSSxPQUFPLEVBQUU7SUFDakMsRUFBRSxVQUFVLEVBQUUsTUFBTSxJQUFJLE1BQU0sR0FBRztJQUNqQyxFQUFFLFVBQVUsRUFBRSxNQUFNLElBQUksTUFBTSxHQUFHO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE1BQU0sSUFBSSxNQUFNLEdBQUc7SUFDakMsRUFBRSxVQUFVLEVBQUUsTUFBTSxJQUFJLE1BQU0sR0FBRztJQUNqQyxFQUFFLFVBQVUsRUFBRSxNQUFNLElBQUksTUFBTSxHQUFHO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE1BQU0sSUFBSSxNQUFNLEdBQUc7SUFDakMsR0FBRyxTQUFTLEVBQUUsS0FBSyxLQUFLLE1BQU0sR0FBRztJQUNqQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEdBQUcsT0FBTyxFQUFFO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE9BQU8sR0FBRyxPQUFPLEVBQUU7SUFDakMsRUFBRSxVQUFVLEVBQUUsT0FBTyxHQUFHLE9BQU8sRUFBRTtJQUNqQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEdBQUcsT0FBTyxFQUFFO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE1BQU0sSUFBSSxPQUFPLEVBQUU7SUFDakMsRUFBRSxVQUFVLEVBQUUsTUFBTSxJQUFJLE1BQU0sR0FBRztJQUNqQyxFQUFFLFVBQVUsRUFBRSxNQUFNLElBQUksTUFBTSxHQUFHO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE1BQU0sSUFBSSxNQUFNLEdBQUc7SUFDakMsRUFBRSxVQUFVLEVBQUUsTUFBTSxJQUFJLE1BQU0sR0FBRztJQUNqQyxFQUFFLFVBQVUsRUFBRSxNQUFNLElBQUksTUFBTSxHQUFHO0lBQ2pDLEdBQUcsU0FBUyxFQUFFLEtBQUssS0FBSyxNQUFNLEdBQUc7SUFDakMsRUFBRSxVQUFVLEVBQUUsT0FBTyxHQUFHLE9BQU8sRUFBRTtJQUNqQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEdBQUcsT0FBTyxFQUFFO0lBQ2pDLEVBQUUsVUFBVSxFQUFFLE9BQU8sR0FBRyxPQUFP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QUM7SUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDbkMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDbEM7SUFDRCxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztDQUN2Qzs7QUFFRCxTQUFTLFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRTtJQUNwQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDdkM7O0FBRUQsU0FBUyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUU7SUFDakMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzlDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUc7UUFDaEMsSUFBSSxDQUFDLE1BQU07WUFDUCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENB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QyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN0QixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2pCO0lBQ0QsT0FBTyxDQUFDLENBQUM7Q0FDWjs7QUFFRCxTQUFTLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7Ozs7O0lBS3ZELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztJQUV6RCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRztRQUNaLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQzFCLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0tBQzdCLENBQUM7O0lBRUYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ1AsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7S0FDeEI7O0lBRUQsT0FBTztRQUNILEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRTtRQUN4QixFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUU7UUFDeEIsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFO1FBQ3hCLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRTtLQUMzQixDQUFDO0NBQ0w7O0FBRUQsU0FBUyxlQUFlLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7SUFDekMsSUFBSSxLQUFLLEdBQUdKLGtCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDOztJQUV0QyxJQUFJLEdBQUcsR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLElBQUksR0FBRyxHQUFHLGVBQWUsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDOUMsSUFBSSxHQUFHLEdBQUcsZUFBZSxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNoRCxJQUFJLEdBQUcsR0FBRyxlQUFlLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDOztJQUVqRCxJQUFJLElBQUksSUFBSSxTQUFTLElBQUksSUFBSSxJQUFJLFNBQVMsRUFBRTtRQUN4QyxJQUFJLEVBQUUsR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLElBQUksRUFBRSxHQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbkMsSUFBSSxFQUFFLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwQyxJQUFJLEVBQUUsR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNyQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDckMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNyQyxJQUFJLElBQUksSUFBSSxTQUFTLEVBQUU7WUFDbkIsSUFBSSxFQUFFLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQzVELElBQUksRUFBRSxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUM5RCxJQUFJLEVBQUUsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUMvRCxJQUFJLEVBQUUsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDN0QsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN6QixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3pCLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDekIsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM1QjtLQUNKOztJQUVELElBQUksT0FBTyxJQUFJLElBQUksUUFBUSxFQUFFO1FBQ3pCLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7S0FDaEM7O0lBRUQsT0FBTyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQzVDOzs7Ozs7QUFNRCxTQUFTLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0lBQzNDLElBQUksR0FBRyxHQUFHLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoRSxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBQ2pCLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUM7SUFDakIsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUNqQixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBQ2pCLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ1AsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2xELFVBQVUsRUFBRSxDQUFDLEdBQUc7WUFDaEIsUUFBUSxFQUFFLENBQUMsRUFBRTtZQUNiLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNkLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNqQixDQUFDLENBQUM7S0FDTjtJQUNELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDUCxZQUFZLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDbkQsVUFBVSxFQUFFLENBQUMsRUFBRTtZQUNmLFFBQVEsRUFBRSxDQUFDO1lBQ1gsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2pCLENBQUMsQ0FBQztLQUNOO0lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtRQUNQLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUN0RCxVQUFVLEVBQUUsQ0FBQztZQUNiLFFBQVEsRUFBRSxFQUFFO1lBQ1osT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2pCLENBQUMsQ0FBQztLQUNOO0lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtRQUNQLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNyRCxVQUFVLEVBQUUsRUFBRTtZQUNkLFFBQVEsRUFBRSxHQUFHO1lBQ2IsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2pCLENBQUMsQ0FBQztLQUNOO0lBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Q0FDdkI7O0FB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